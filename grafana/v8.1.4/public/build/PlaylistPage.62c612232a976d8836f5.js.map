{"version":3,"sources":["webpack:///./public/app/core/components/PageActionBar/PageActionBar.tsx","webpack:///./public/app/features/playlist/PlaylistPage.tsx"],"names":["PageActionBar","PureComponent","render","searchQuery","linkButton","setSearchQuery","target","placeholder","this","props","linkProps","href","className","value","onChange","title","PlaylistPage","navModel","useState","startPlaylist","setStartPlaylist","playlists","loading","useAsync","async","getBackendSrv","get","query","hasPlaylists","length","content","buttonIcon","buttonLink","buttonTitle","proTip","proTipLink","proTipLinkTitle","proTipTarget","map","playlist","heading","name","Actions","variant","icon","onClick","contextSrv","isEditor","id","toString","Contents","isLoading","StartModal","onDismiss","undefined","connect","state","getNavModel","navIndex","mode","setMode","autoFit","setAutofit","isOpen","label","options","description","e","currentTarget","checked","ButtonRow","params","kiosk","autofitpanels","locationService","push","urlUtil","renderUrl"],"mappings":"mYAYe,MAAMA,UAAsBC,gBACzCC,SACE,MAAM,YAAEC,EAAF,WAAeC,EAAf,eAA2BC,EAA3B,OAA2CC,EAA3C,YAAmDC,EAAc,0BAA6BC,KAAKC,MACnGC,EAAY,CAAEC,KAAMP,aAAF,EAAEA,EAAYO,MAMtC,OAJIL,IACDI,EAAkBJ,OAASA,GAI5B,sBAAKM,UAAU,kBAAf,UACE,qBAAKA,UAAU,wBAAf,SACE,cAAC,IAAD,CAAaC,MAAOV,EAAaW,SAAUT,EAAgBE,YAAaA,MAEzEH,GAAc,cAAC,aAAD,KAAgBM,EAAhB,UAA4BN,EAAWW,e,uRCLvD,MAAMC,EAA0B,EAAGC,eACxC,MAAOd,EAAaE,GAAkBa,mBAAS,KACxCC,EAAeC,GAAoBF,sBAElCL,MAAOQ,EAAT,QAAoBC,GAAYC,YAASC,SACtCC,0BAAgBC,IAAI,iBAAkB,CAAEC,MAAOxB,KAElDyB,EAAeP,GAAaA,EAAUQ,OAAS,EAErD,IAAIC,EAAU,IAAH,EACT,cAAC,IAAD,CACEf,MAAM,qCACNgB,WAAW,OACXC,WAAW,gBACXC,YAAY,kBACZC,OAAO,wEACPC,WAAW,8CACXC,gBAAgB,aAChBC,aAAa,YAyBjB,OArBIT,IACFE,EACE,mCACGT,EAAWiB,IAAKC,GACf,cAAC,OAAD,CAAMC,QAASD,EAASE,KAAxB,SACE,eAAC,OAAKC,QAAN,WACE,cAAC,SAAD,CAAQC,QAAQ,YAAYC,KAAK,OAAOC,QAAS,IAAMzB,EAAiBmB,GAAxE,4BAGCO,IAAWC,UACV,cAAC,aAAD,CAAuBJ,QAAQ,YAAYhC,KAAO,mBAAkB4B,EAASS,GAAMJ,KAAK,MAAxF,0BAAgB,YANaL,EAASS,GAAGC,gBAkBrD,cAAC,IAAD,CAAMhC,SAAUA,EAAhB,SACE,eAAC,IAAKiC,SAAN,CAAeC,UAAW7B,EAA1B,UACGM,GACC,cAAC,IAAD,CACEzB,YAAaA,EACbC,WAAY,CAAEW,MAAO,eAAgBJ,KAAM,kBAC3CN,eAAgBA,IAGnByB,EACAX,GAAiB,cAACiC,EAAD,CAAYb,SAAUpB,EAAekC,UAAW,IAAMjC,OAAiBkC,WAUlFC,4BAJ2DC,IAAD,CACvEvC,SAAUwC,YAAYD,EAAME,SAAU,eAGzBH,CAAyBvC,GAOjC,MAAMoC,EAAkC,EAAGb,WAAUc,gBAC1D,MAAOM,EAAMC,GAAW1C,oBAAc,IAC/B2C,EAASC,GAAc5C,oBAAS,GAmBvC,OACE,eAAC,QAAD,CAAO6C,QAAQ,EAAMnB,KAAK,OAAO7B,MAAM,iBAAiBsC,UAAWA,EAAnE,UACE,eAAC,gBAAD,WACE,cAAC,QAAD,CAAOW,MAAM,OAAb,SACE,cAAC,mBAAD,CAAkBnD,MAAO8C,EAAMM,QArBI,CACzC,CAAED,MAAO,SAAUnD,OAAO,GAC1B,CAAEmD,MAAO,KAAMnD,MAAO,MACtB,CAAEmD,MAAO,QAASnD,OAAO,IAkB4BC,SAAU8C,MAE3D,cAAC,WAAD,CACEI,MAAM,UACNE,YAAY,oDACZzB,KAAK,UACL5B,MAAOgD,EACP/C,SAAWqD,GAAML,EAAWK,EAAEC,cAAcC,cAGhD,cAAC,QAAMC,UAAP,UACE,eAAC,SAAD,CAAQ3B,QAAQ,UAAUE,QA1BhB,KACd,MAAM0B,EAAc,GAChBZ,IACFY,EAAOC,MAAQb,GAEbE,IACFU,EAAOE,eAAgB,GAEzBC,kBAAgBC,KAAKC,UAAQC,UAAW,mBAAkBtC,EAASS,GAAMuB,KAkBrE,mBACShC,EAASE","file":"PlaylistPage.62c612232a976d8836f5.js","sourcesContent":["import React, { PureComponent } from 'react';\nimport { FilterInput } from '../FilterInput/FilterInput';\nimport { LinkButton } from '@grafana/ui';\n\nexport interface Props {\n  searchQuery: string;\n  setSearchQuery: (value: string) => void;\n  linkButton?: { href: string; title: string };\n  target?: string;\n  placeholder?: string;\n}\n\nexport default class PageActionBar extends PureComponent<Props> {\n  render() {\n    const { searchQuery, linkButton, setSearchQuery, target, placeholder = 'Search by name or type' } = this.props;\n    const linkProps = { href: linkButton?.href };\n\n    if (target) {\n      (linkProps as any).target = target;\n    }\n\n    return (\n      <div className=\"page-action-bar\">\n        <div className=\"gf-form gf-form--grow\">\n          <FilterInput value={searchQuery} onChange={setSearchQuery} placeholder={placeholder} />\n        </div>\n        {linkButton && <LinkButton {...linkProps}>{linkButton.title}</LinkButton>}\n      </div>\n    );\n  }\n}\n","import React, { FC, useState } from 'react';\nimport { connect, MapStateToProps } from 'react-redux';\nimport { NavModel, SelectableValue, urlUtil } from '@grafana/data';\nimport Page from 'app/core/components/Page/Page';\nimport { StoreState } from 'app/types';\nimport { GrafanaRouteComponentProps } from '../../core/navigation/types';\nimport { getNavModel } from 'app/core/selectors/navModel';\nimport { useAsync } from 'react-use';\nimport { getBackendSrv, locationService } from '@grafana/runtime';\nimport { PlaylistDTO } from './types';\nimport { Button, Card, Checkbox, Field, LinkButton, Modal, RadioButtonGroup, VerticalGroup } from '@grafana/ui';\nimport { contextSrv } from 'app/core/core';\nimport PageActionBar from 'app/core/components/PageActionBar/PageActionBar';\nimport EmptyListCTA from '../../core/components/EmptyListCTA/EmptyListCTA';\n\ninterface ConnectedProps {\n  navModel: NavModel;\n}\n\ninterface Props extends ConnectedProps, GrafanaRouteComponentProps {}\n\nexport const PlaylistPage: FC<Props> = ({ navModel }) => {\n  const [searchQuery, setSearchQuery] = useState('');\n  const [startPlaylist, setStartPlaylist] = useState<PlaylistDTO | undefined>();\n\n  const { value: playlists, loading } = useAsync(async () => {\n    return getBackendSrv().get('/api/playlists', { query: searchQuery }) as Promise<PlaylistDTO[]>;\n  });\n  const hasPlaylists = playlists && playlists.length > 0;\n\n  let content = (\n    <EmptyListCTA\n      title=\"There are no playlists created yet\"\n      buttonIcon=\"plus\"\n      buttonLink=\"playlists/new\"\n      buttonTitle=\"Create Playlist\"\n      proTip=\"You can use playlists to cycle dashboards on TVs without user control\"\n      proTipLink=\"http://docs.grafana.org/reference/playlist/\"\n      proTipLinkTitle=\"Learn more\"\n      proTipTarget=\"_blank\"\n    />\n  );\n\n  if (hasPlaylists) {\n    content = (\n      <>\n        {playlists!.map((playlist) => (\n          <Card heading={playlist.name} key={playlist.id.toString()}>\n            <Card.Actions>\n              <Button variant=\"secondary\" icon=\"play\" onClick={() => setStartPlaylist(playlist)}>\n                Start playlist\n              </Button>\n              {contextSrv.isEditor && (\n                <LinkButton key=\"edit\" variant=\"secondary\" href={`/playlists/edit/${playlist.id}`} icon=\"cog\">\n                  Edit playlist\n                </LinkButton>\n              )}\n            </Card.Actions>\n          </Card>\n        ))}\n      </>\n    );\n  }\n\n  return (\n    <Page navModel={navModel}>\n      <Page.Contents isLoading={loading}>\n        {hasPlaylists && (\n          <PageActionBar\n            searchQuery={searchQuery}\n            linkButton={{ title: 'New playlist', href: '/playlists/new' }}\n            setSearchQuery={setSearchQuery}\n          />\n        )}\n        {content}\n        {startPlaylist && <StartModal playlist={startPlaylist} onDismiss={() => setStartPlaylist(undefined)} />}\n      </Page.Contents>\n    </Page>\n  );\n};\n\nconst mapStateToProps: MapStateToProps<ConnectedProps, {}, StoreState> = (state: StoreState) => ({\n  navModel: getNavModel(state.navIndex, 'playlists'),\n});\n\nexport default connect(mapStateToProps)(PlaylistPage);\n\nexport interface StartModalProps {\n  playlist: PlaylistDTO;\n  onDismiss: () => void;\n}\n\nexport const StartModal: FC<StartModalProps> = ({ playlist, onDismiss }) => {\n  const [mode, setMode] = useState<any>(false);\n  const [autoFit, setAutofit] = useState(false);\n\n  const modes: Array<SelectableValue<any>> = [\n    { label: 'Normal', value: false },\n    { label: 'TV', value: 'tv' },\n    { label: 'Kiosk', value: true },\n  ];\n\n  const onStart = () => {\n    const params: any = {};\n    if (mode) {\n      params.kiosk = mode;\n    }\n    if (autoFit) {\n      params.autofitpanels = true;\n    }\n    locationService.push(urlUtil.renderUrl(`/playlists/play/${playlist.id}`, params));\n  };\n\n  return (\n    <Modal isOpen={true} icon=\"play\" title=\"Start playlist\" onDismiss={onDismiss}>\n      <VerticalGroup>\n        <Field label=\"Mode\">\n          <RadioButtonGroup value={mode} options={modes} onChange={setMode} />\n        </Field>\n        <Checkbox\n          label=\"Autofit\"\n          description=\"Panel heights will be adjusted to fit screen size\"\n          name=\"autofix\"\n          value={autoFit}\n          onChange={(e) => setAutofit(e.currentTarget.checked)}\n        />\n      </VerticalGroup>\n      <Modal.ButtonRow>\n        <Button variant=\"primary\" onClick={onStart}>\n          Start {playlist.name}\n        </Button>\n      </Modal.ButtonRow>\n    </Modal>\n  );\n};\n"],"sourceRoot":""}
{"version":3,"sources":["webpack:///./public/app/features/manage-dashboards/utils/validation.ts","webpack:///./public/app/features/manage-dashboards/components/ImportDashboardForm.tsx","webpack:///./public/app/features/manage-dashboards/components/ImportDashboardOverview.tsx","webpack:///./public/app/features/manage-dashboards/DashboardImportPage.tsx","webpack:///./public/app/core/components/connectWithCleanUp.tsx"],"names":["validateDashboardJson","json","JSON","parse","error","validateGcomDashboard","gcomDashboard","match","exec","validateUid","value","getBackendSrv","get","then","existingDashboard","dashboard","title","meta","folderTitle","catch","isHandled","ImportDashboardForm","register","errors","control","getValues","uidReset","inputs","initialFolderId","onUidReset","onCancel","onSubmit","watch","isSubmitted","setSubmitted","useState","watchDataSources","useEffect","uid","label","invalid","message","required","validate","async","await","newTitle","v","folderId","folder","id","validationSrv","validateNewDashboardName","type","data-testid","selectors","components","name","render","field","FolderPicker","enableCreateNew","description","disabled","addonAfter","onClick","dataSources","map","input","index","dataSourceOption","current","noDefault","placeholder","info","pluginId","rules","constants","constantIndex","defaultValue","submit","variant","getButtonVariant","getButtonText","ImportDashboardOverviewUnConnected","PureComponent","form","this","props","importDashboard","clearLoadedDashboard","setState","source","state","DashboardSource","Gcom","style","marginBottom","href","gnetId","className","target","rel","orgName","dateTimeFormat","updatedAt","defaultValues","validateOnMount","validateFieldsOnMount","validateOn","mapDispatchToProps","ImportDashboardOverview","connect","searchObj","locationService","getSearchObject","Number","displayName","UnthemedDashboardImport","event","importDashboardJson","file","currentTarget","files","length","reader","FileReader","readerOnLoad","e","result","appEvents","emit","AppEvents","alertError","onload","readAsText","formData","dashboardJson","dashboardId","fetchGcomDashboard","renderImportForm","styles","importStyles","theme","option","accept","onFileUpload","getGcomDashboard","getDashboardFromJson","DashboardImportPage","textarea","rows","isLoaded","navModel","Page","Contents","DashboardImportUnConnected","withTheme2","connectWithCleanUp","getNavModel","navIndex","undefined","stylesFactory","css","spacing","mapStateToProps","stateSelector","Component","ConnectedComponent","ConnectedComponentWithCleanUp","dispatch","useDispatch","cleanUpAction","hoistNonReactStatics"],"mappings":"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","file":"DashboardImport.62c612232a976d8836f5.js","sourcesContent":["import validationSrv from '../services/ValidationSrv';\nimport { getBackendSrv } from '@grafana/runtime';\n\nexport const validateDashboardJson = (json: string) => {\n  try {\n    JSON.parse(json);\n    return true;\n  } catch (error) {\n    return 'Not valid JSON';\n  }\n};\n\nexport const validateGcomDashboard = (gcomDashboard: string) => {\n  // From DashboardImportCtrl\n  const match = /(^\\d+$)|dashboards\\/(\\d+)/.exec(gcomDashboard);\n\n  return match && (match[1] || match[2]) ? true : 'Could not find a valid Grafana.com ID';\n};\n\nexport const validateTitle = (newTitle: string, folderId: number) => {\n  return validationSrv\n    .validateNewDashboardName(folderId, newTitle)\n    .then(() => {\n      return true;\n    })\n    .catch((error) => {\n      if (error.type === 'EXISTING') {\n        return error.message;\n      }\n    });\n};\n\nexport const validateUid = (value: string) => {\n  return getBackendSrv()\n    .get(`/api/dashboards/uid/${value}`)\n    .then((existingDashboard) => {\n      return `Dashboard named '${existingDashboard?.dashboard.title}' in folder '${existingDashboard?.meta.folderTitle}' has the same UID`;\n    })\n    .catch((error) => {\n      error.isHandled = true;\n      return true;\n    });\n};\n","import React, { FC, useEffect, useState } from 'react';\nimport {\n  Button,\n  FormAPI,\n  FormsOnSubmit,\n  HorizontalGroup,\n  FormFieldErrors,\n  Input,\n  Field,\n  InputControl,\n  Legend,\n} from '@grafana/ui';\nimport { DataSourcePicker } from '@grafana/runtime';\nimport { FolderPicker } from 'app/core/components/Select/FolderPicker';\nimport { DashboardInput, DashboardInputs, DataSourceInput, ImportDashboardDTO } from '../state/reducers';\nimport { validateTitle, validateUid } from '../utils/validation';\nimport { selectors } from '@grafana/e2e-selectors';\n\ninterface Props extends Pick<FormAPI<ImportDashboardDTO>, 'register' | 'errors' | 'control' | 'getValues' | 'watch'> {\n  uidReset: boolean;\n  inputs: DashboardInputs;\n  initialFolderId: number;\n\n  onCancel: () => void;\n  onUidReset: () => void;\n  onSubmit: FormsOnSubmit<ImportDashboardDTO>;\n}\n\nexport const ImportDashboardForm: FC<Props> = ({\n  register,\n  errors,\n  control,\n  getValues,\n  uidReset,\n  inputs,\n  initialFolderId,\n  onUidReset,\n  onCancel,\n  onSubmit,\n  watch,\n}) => {\n  const [isSubmitted, setSubmitted] = useState(false);\n  const watchDataSources = watch('dataSources');\n\n  /*\n    This useEffect is needed for overwriting a dashboard. It\n    submits the form even if there's validation errors on title or uid.\n  */\n  useEffect(() => {\n    if (isSubmitted && (errors.title || errors.uid)) {\n      onSubmit(getValues(), {} as any);\n    }\n  }, [errors, getValues, isSubmitted, onSubmit]);\n\n  return (\n    <>\n      <Legend>Options</Legend>\n      <Field label=\"Name\" invalid={!!errors.title} error={errors.title && errors.title.message}>\n        <Input\n          {...register('title', {\n            required: 'Name is required',\n            validate: async (v: string) => await validateTitle(v, getValues().folder.id),\n          })}\n          type=\"text\"\n          data-testid={selectors.components.ImportDashboardForm.name}\n        />\n      </Field>\n      <Field label=\"Folder\">\n        <InputControl\n          render={({ field: { ref, ...field } }) => (\n            <FolderPicker {...field} enableCreateNew initialFolderId={initialFolderId} />\n          )}\n          name=\"folder\"\n          control={control}\n        />\n      </Field>\n      <Field\n        label=\"Unique identifier (UID)\"\n        description=\"The unique identifier (UID) of a dashboard can be used for uniquely identify a dashboard between multiple Grafana installs.\n                The UID allows having consistent URLs for accessing dashboards so changing the title of a dashboard will not break any\n                bookmarked links to that dashboard.\"\n        invalid={!!errors.uid}\n        error={errors.uid && errors.uid.message}\n      >\n        <>\n          {!uidReset ? (\n            <Input\n              disabled\n              {...register('uid', { validate: async (v: string) => await validateUid(v) })}\n              addonAfter={!uidReset && <Button onClick={onUidReset}>Change uid</Button>}\n            />\n          ) : (\n            <Input {...register('uid', { required: true, validate: async (v: string) => await validateUid(v) })} />\n          )}\n        </>\n      </Field>\n      {inputs.dataSources &&\n        inputs.dataSources.map((input: DataSourceInput, index: number) => {\n          const dataSourceOption = `dataSources[${index}]`;\n          const current = watchDataSources ?? [];\n          return (\n            <Field\n              label={input.label}\n              key={dataSourceOption}\n              invalid={errors.dataSources && !!errors.dataSources[index]}\n              error={errors.dataSources && errors.dataSources[index] && 'A data source is required'}\n            >\n              <InputControl\n                name={dataSourceOption as any}\n                render={({ field: { ref, ...field } }) => (\n                  <DataSourcePicker\n                    {...field}\n                    noDefault={true}\n                    placeholder={input.info}\n                    pluginId={input.pluginId}\n                    current={current[index]?.name}\n                  />\n                )}\n                control={control}\n                rules={{ required: true }}\n              />\n            </Field>\n          );\n        })}\n      {inputs.constants &&\n        inputs.constants.map((input: DashboardInput, index) => {\n          const constantIndex = `constants[${index}]`;\n          return (\n            <Field\n              label={input.label}\n              error={errors.constants && errors.constants[index] && `${input.label} needs a value`}\n              invalid={errors.constants && !!errors.constants[index]}\n              key={constantIndex}\n            >\n              <Input {...register(constantIndex as any, { required: true })} defaultValue={input.value} />\n            </Field>\n          );\n        })}\n      <HorizontalGroup>\n        <Button\n          type=\"submit\"\n          data-testid={selectors.components.ImportDashboardForm.submit}\n          variant={getButtonVariant(errors)}\n          onClick={() => {\n            setSubmitted(true);\n          }}\n        >\n          {getButtonText(errors)}\n        </Button>\n        <Button type=\"reset\" variant=\"secondary\" onClick={onCancel}>\n          Cancel\n        </Button>\n      </HorizontalGroup>\n    </>\n  );\n};\n\nfunction getButtonVariant(errors: FormFieldErrors<ImportDashboardDTO>) {\n  return errors && (errors.title || errors.uid) ? 'destructive' : 'primary';\n}\n\nfunction getButtonText(errors: FormFieldErrors<ImportDashboardDTO>) {\n  return errors && (errors.title || errors.uid) ? 'Import (Overwrite)' : 'Import';\n}\n","import React, { PureComponent } from 'react';\nimport { dateTimeFormat } from '@grafana/data';\nimport { Legend, Form } from '@grafana/ui';\nimport { connect, MapDispatchToProps, MapStateToProps } from 'react-redux';\nimport { ImportDashboardForm } from './ImportDashboardForm';\nimport { clearLoadedDashboard, importDashboard } from '../state/actions';\nimport { DashboardInputs, DashboardSource, ImportDashboardDTO } from '../state/reducers';\nimport { StoreState } from 'app/types';\nimport { locationService } from '@grafana/runtime';\n\ninterface OwnProps {}\n\ninterface ConnectedProps {\n  dashboard: ImportDashboardDTO;\n  inputs: DashboardInputs;\n  source: DashboardSource;\n  meta?: any;\n  folder: { id: number; title?: string };\n}\n\ninterface DispatchProps {\n  clearLoadedDashboard: typeof clearLoadedDashboard;\n  importDashboard: typeof importDashboard;\n}\n\ntype Props = OwnProps & ConnectedProps & DispatchProps;\n\ninterface State {\n  uidReset: boolean;\n}\n\nclass ImportDashboardOverviewUnConnected extends PureComponent<Props, State> {\n  state: State = {\n    uidReset: false,\n  };\n\n  onSubmit = (form: ImportDashboardDTO) => {\n    this.props.importDashboard(form);\n  };\n\n  onCancel = () => {\n    this.props.clearLoadedDashboard();\n  };\n\n  onUidReset = () => {\n    this.setState({ uidReset: true });\n  };\n\n  render() {\n    const { dashboard, inputs, meta, source, folder } = this.props;\n    const { uidReset } = this.state;\n\n    return (\n      <>\n        {source === DashboardSource.Gcom && (\n          <div style={{ marginBottom: '24px' }}>\n            <div>\n              <Legend>\n                Importing dashboard from{' '}\n                <a\n                  href={`https://grafana.com/dashboards/${dashboard.gnetId}`}\n                  className=\"external-link\"\n                  target=\"_blank\"\n                  rel=\"noreferrer\"\n                >\n                  Grafana.com\n                </a>\n              </Legend>\n            </div>\n            <table className=\"filter-table form-inline\">\n              <tbody>\n                <tr>\n                  <td>Published by</td>\n                  <td>{meta.orgName}</td>\n                </tr>\n                <tr>\n                  <td>Updated on</td>\n                  <td>{dateTimeFormat(meta.updatedAt)}</td>\n                </tr>\n              </tbody>\n            </table>\n          </div>\n        )}\n        <Form\n          onSubmit={this.onSubmit}\n          defaultValues={{ ...dashboard, constants: [], dataSources: [], folder: folder }}\n          validateOnMount\n          validateFieldsOnMount={['title', 'uid']}\n          validateOn=\"onChange\"\n        >\n          {({ register, errors, control, watch, getValues }) => (\n            <ImportDashboardForm\n              register={register}\n              errors={errors}\n              control={control}\n              getValues={getValues}\n              uidReset={uidReset}\n              inputs={inputs}\n              onCancel={this.onCancel}\n              onUidReset={this.onUidReset}\n              onSubmit={this.onSubmit}\n              watch={watch}\n              initialFolderId={folder.id}\n            />\n          )}\n        </Form>\n      </>\n    );\n  }\n}\n\nconst mapStateToProps: MapStateToProps<ConnectedProps, OwnProps, StoreState> = (state: StoreState) => {\n  const searchObj = locationService.getSearchObject();\n\n  return {\n    dashboard: state.importDashboard.dashboard,\n    meta: state.importDashboard.meta,\n    source: state.importDashboard.source,\n    inputs: state.importDashboard.inputs,\n    folder: searchObj.folderId ? { id: Number(searchObj.folderId) } : { id: 0 },\n  };\n};\n\nconst mapDispatchToProps: MapDispatchToProps<DispatchProps, OwnProps> = {\n  clearLoadedDashboard,\n  importDashboard,\n};\n\nexport const ImportDashboardOverview = connect(mapStateToProps, mapDispatchToProps)(ImportDashboardOverviewUnConnected);\nImportDashboardOverview.displayName = 'ImportDashboardOverview';\n","import React, { FormEvent, PureComponent } from 'react';\nimport { MapDispatchToProps, MapStateToProps } from 'react-redux';\nimport { css } from '@emotion/css';\nimport { AppEvents, GrafanaTheme2, NavModel } from '@grafana/data';\nimport { selectors } from '@grafana/e2e-selectors';\nimport {\n  Button,\n  stylesFactory,\n  withTheme2,\n  Input,\n  TextArea,\n  Field,\n  Form,\n  Legend,\n  FileUpload,\n  Themeable2,\n} from '@grafana/ui';\nimport Page from 'app/core/components/Page/Page';\nimport { connectWithCleanUp } from 'app/core/components/connectWithCleanUp';\nimport { ImportDashboardOverview } from './components/ImportDashboardOverview';\nimport { validateDashboardJson, validateGcomDashboard } from './utils/validation';\nimport { fetchGcomDashboard, importDashboardJson } from './state/actions';\nimport appEvents from 'app/core/app_events';\nimport { getNavModel } from 'app/core/selectors/navModel';\nimport { StoreState } from 'app/types';\n\ninterface OwnProps extends Themeable2 {}\n\ninterface ConnectedProps {\n  navModel: NavModel;\n  isLoaded: boolean;\n}\n\ninterface DispatchProps {\n  fetchGcomDashboard: typeof fetchGcomDashboard;\n  importDashboardJson: typeof importDashboardJson;\n}\n\ntype Props = OwnProps & ConnectedProps & DispatchProps;\n\nclass UnthemedDashboardImport extends PureComponent<Props> {\n  onFileUpload = (event: FormEvent<HTMLInputElement>) => {\n    const { importDashboardJson } = this.props;\n    const file = event.currentTarget.files && event.currentTarget.files.length > 0 && event.currentTarget.files[0];\n\n    if (file) {\n      const reader = new FileReader();\n      const readerOnLoad = () => {\n        return (e: any) => {\n          let dashboard: any;\n          try {\n            dashboard = JSON.parse(e.target.result);\n          } catch (error) {\n            appEvents.emit(AppEvents.alertError, [\n              'Import failed',\n              'JSON -> JS Serialization failed: ' + error.message,\n            ]);\n            return;\n          }\n          importDashboardJson(dashboard);\n        };\n      };\n      reader.onload = readerOnLoad();\n      reader.readAsText(file);\n    }\n  };\n\n  getDashboardFromJson = (formData: { dashboardJson: string }) => {\n    this.props.importDashboardJson(JSON.parse(formData.dashboardJson));\n  };\n\n  getGcomDashboard = (formData: { gcomDashboard: string }) => {\n    let dashboardId;\n    const match = /(^\\d+$)|dashboards\\/(\\d+)/.exec(formData.gcomDashboard);\n    if (match && match[1]) {\n      dashboardId = match[1];\n    } else if (match && match[2]) {\n      dashboardId = match[2];\n    }\n\n    if (dashboardId) {\n      this.props.fetchGcomDashboard(dashboardId);\n    }\n  };\n\n  renderImportForm() {\n    const styles = importStyles(this.props.theme);\n\n    return (\n      <>\n        <div className={styles.option}>\n          <FileUpload accept=\"application/json\" onFileUpload={this.onFileUpload}>\n            Upload JSON file\n          </FileUpload>\n        </div>\n        <div className={styles.option}>\n          <Legend>Import via grafana.com</Legend>\n          <Form onSubmit={this.getGcomDashboard} defaultValues={{ gcomDashboard: '' }}>\n            {({ register, errors }) => (\n              <Field invalid={!!errors.gcomDashboard} error={errors.gcomDashboard && errors.gcomDashboard.message}>\n                <Input\n                  placeholder=\"Grafana.com dashboard URL or ID\"\n                  type=\"text\"\n                  {...register('gcomDashboard', {\n                    required: 'A Grafana dashboard URL or ID is required',\n                    validate: validateGcomDashboard,\n                  })}\n                  addonAfter={<Button type=\"submit\">Load</Button>}\n                />\n              </Field>\n            )}\n          </Form>\n        </div>\n        <div className={styles.option}>\n          <Legend>Import via panel json</Legend>\n          <Form onSubmit={this.getDashboardFromJson} defaultValues={{ dashboardJson: '' }}>\n            {({ register, errors }) => (\n              <>\n                <Field invalid={!!errors.dashboardJson} error={errors.dashboardJson && errors.dashboardJson.message}>\n                  <TextArea\n                    {...register('dashboardJson', {\n                      required: 'Need a dashboard JSON model',\n                      validate: validateDashboardJson,\n                    })}\n                    data-testid={selectors.components.DashboardImportPage.textarea}\n                    rows={10}\n                  />\n                </Field>\n                <Button type=\"submit\" data-testid={selectors.components.DashboardImportPage.submit}>\n                  Load\n                </Button>\n              </>\n            )}\n          </Form>\n        </div>\n      </>\n    );\n  }\n\n  render() {\n    const { isLoaded, navModel } = this.props;\n    return (\n      <Page navModel={navModel}>\n        <Page.Contents>{isLoaded ? <ImportDashboardOverview /> : this.renderImportForm()}</Page.Contents>\n      </Page>\n    );\n  }\n}\n\nconst DashboardImportUnConnected = withTheme2(UnthemedDashboardImport);\n\nconst mapStateToProps: MapStateToProps<ConnectedProps, OwnProps, StoreState> = (state: StoreState) => ({\n  navModel: getNavModel(state.navIndex, 'import', undefined, true),\n  isLoaded: state.importDashboard.isLoaded,\n});\n\nconst mapDispatchToProps: MapDispatchToProps<DispatchProps, Props> = {\n  fetchGcomDashboard,\n  importDashboardJson,\n};\n\nexport const DashboardImportPage = connectWithCleanUp(\n  mapStateToProps,\n  mapDispatchToProps,\n  (state) => state.importDashboard\n)(DashboardImportUnConnected);\n\nexport default DashboardImportPage;\n\nDashboardImportPage.displayName = 'DashboardImport';\n\nconst importStyles = stylesFactory((theme: GrafanaTheme2) => {\n  return {\n    option: css`\n      margin-bottom: ${theme.spacing(4)};\n    `,\n  };\n});\n","import { connect, MapDispatchToPropsParam, MapStateToPropsParam, useDispatch } from 'react-redux';\nimport { cleanUpAction, StateSelector } from '../actions/cleanUp';\nimport React, { ComponentType, FunctionComponent, useEffect } from 'react';\nimport hoistNonReactStatics from 'hoist-non-react-statics';\n\nexport const connectWithCleanUp = <\n  TStateProps extends {} = {},\n  TDispatchProps = {},\n  TOwnProps = {},\n  State = {},\n  TSelector extends object = {},\n  Statics = {}\n>(\n  mapStateToProps: MapStateToPropsParam<TStateProps, TOwnProps, State>,\n  mapDispatchToProps: MapDispatchToPropsParam<TDispatchProps, TOwnProps>,\n  stateSelector: StateSelector<TSelector>\n) => (Component: ComponentType<any>) => {\n  const ConnectedComponent = connect(\n    mapStateToProps,\n    mapDispatchToProps\n    // @ts-ignore\n  )(Component);\n\n  const ConnectedComponentWithCleanUp: FunctionComponent = (props) => {\n    const dispatch = useDispatch();\n    useEffect(() => {\n      return function cleanUp() {\n        dispatch(cleanUpAction({ stateSelector }));\n      };\n    }, [dispatch]);\n    // @ts-ignore\n    return <ConnectedComponent {...props} />;\n  };\n\n  ConnectedComponentWithCleanUp.displayName = `ConnectWithCleanUp(${ConnectedComponent.displayName})`;\n  hoistNonReactStatics(ConnectedComponentWithCleanUp, Component);\n  type Hoisted = typeof ConnectedComponentWithCleanUp & Statics;\n\n  return ConnectedComponentWithCleanUp as Hoisted;\n};\n"],"sourceRoot":""}
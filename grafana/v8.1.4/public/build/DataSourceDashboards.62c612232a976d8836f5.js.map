{"version":3,"sources":["webpack:///./public/app/features/datasources/DataSourceDashboards.tsx"],"names":["mapDispatchToProps","importDashboard","loadDataSource","loadPluginDashboards","removeDashboard","connector","connect","state","props","dataSourceId","match","params","uid","navModel","getNavModel","navIndex","dashboards","plugins","dataSource","getDataSource","dataSources","isLoading","isLoadingPluginDashboards","DataSourceDashboards","PureComponent","dashboard","overwrite","this","data","pluginId","path","inputs","push","name","type","value","title","importedUri","render","Contents","onImport","onRemove"],"mappings":"4YAiCA,MAAMA,EAAqB,CACzBC,oBACAC,mBACAC,yBACAC,qBAGIC,EAAYC,mBAnBlB,SAAyBC,EAAmBC,GAC1C,MAAMC,EAAeD,EAAME,MAAMC,OAAOC,IAExC,MAAO,CACLC,SAAUC,YAAYP,EAAMQ,SAAW,yBAAwBN,GAC/DO,WAAYT,EAAMU,QAAQD,WAC1BE,WAAYC,YAAcZ,EAAMa,YAAaX,GAC7CY,UAAWd,EAAMU,QAAQK,0BACzBb,kBAWuCT,GAIpC,MAAMuB,UAA6BC,gBAAqB,gDAOlD,CAACC,EAA4BC,KACtC,MAAM,WAAER,EAAF,gBAAcjB,GAAoB0B,KAAKnB,MACvCoB,EAAY,CAChBC,SAAUJ,EAAUI,SACpBC,KAAML,EAAUK,KAChBJ,YACAK,OAAQ,IAGNb,GACFU,EAAKG,OAAOC,KAAK,CACfC,KAAM,IACNC,KAAM,aACNL,SAAUX,EAAWgB,KACrBC,MAAOjB,EAAWe,OAItBhC,EAAgB2B,EAAMH,EAAUW,SAzB2B,kBA4BjDX,IACVE,KAAKnB,MAAMJ,gBAAgBqB,EAAUY,eA5BhB,0BACrB,MAAM,eAAEnC,EAAF,aAAkBO,GAAiBkB,KAAKnB,YACxCN,EAAeO,GACrBkB,KAAKnB,MAAML,uBA4BbmC,SACE,MAAM,WAAEtB,EAAF,SAAcH,EAAd,UAAwBQ,GAAcM,KAAKnB,MACjD,OACE,cAAC,IAAD,CAAMK,SAAUA,EAAhB,SACE,cAAC,IAAK0B,SAAN,CAAelB,UAAWA,EAA1B,SACE,cAAC,IAAD,CACEL,WAAYA,EACZwB,SAAU,CAACf,EAAWC,IAAcC,KAAKa,SAASf,EAAWC,GAC7De,SAAWhB,GAAcE,KAAKc,SAAShB,UAQpCpB,YAAUkB","file":"DataSourceDashboards.62c612232a976d8836f5.js","sourcesContent":["// Libraries\nimport React, { PureComponent } from 'react';\nimport { connect, ConnectedProps } from 'react-redux';\n\n// Components\nimport Page from 'app/core/components/Page/Page';\nimport DashboardTable from './DashboardsTable';\n\n// Actions & Selectors\nimport { getNavModel } from 'app/core/selectors/navModel';\nimport { loadDataSource } from './state/actions';\nimport { loadPluginDashboards } from '../plugins/state/actions';\nimport { importDashboard, removeDashboard } from '../dashboard/state/actions';\nimport { getDataSource } from './state/selectors';\n\n// Types\nimport { PluginDashboard, StoreState } from 'app/types';\nimport { GrafanaRouteComponentProps } from 'app/core/navigation/types';\n\nexport interface OwnProps extends GrafanaRouteComponentProps<{ uid: string }> {}\n\nfunction mapStateToProps(state: StoreState, props: OwnProps) {\n  const dataSourceId = props.match.params.uid;\n\n  return {\n    navModel: getNavModel(state.navIndex, `datasource-dashboards-${dataSourceId}`),\n    dashboards: state.plugins.dashboards,\n    dataSource: getDataSource(state.dataSources, dataSourceId),\n    isLoading: state.plugins.isLoadingPluginDashboards,\n    dataSourceId,\n  };\n}\n\nconst mapDispatchToProps = {\n  importDashboard,\n  loadDataSource,\n  loadPluginDashboards,\n  removeDashboard,\n};\n\nconst connector = connect(mapStateToProps, mapDispatchToProps);\n\nexport type Props = OwnProps & ConnectedProps<typeof connector>;\n\nexport class DataSourceDashboards extends PureComponent<Props> {\n  async componentDidMount() {\n    const { loadDataSource, dataSourceId } = this.props;\n    await loadDataSource(dataSourceId);\n    this.props.loadPluginDashboards();\n  }\n\n  onImport = (dashboard: PluginDashboard, overwrite: boolean) => {\n    const { dataSource, importDashboard } = this.props;\n    const data: any = {\n      pluginId: dashboard.pluginId,\n      path: dashboard.path,\n      overwrite,\n      inputs: [],\n    };\n\n    if (dataSource) {\n      data.inputs.push({\n        name: '*',\n        type: 'datasource',\n        pluginId: dataSource.type,\n        value: dataSource.name,\n      });\n    }\n\n    importDashboard(data, dashboard.title);\n  };\n\n  onRemove = (dashboard: PluginDashboard) => {\n    this.props.removeDashboard(dashboard.importedUri);\n  };\n\n  render() {\n    const { dashboards, navModel, isLoading } = this.props;\n    return (\n      <Page navModel={navModel}>\n        <Page.Contents isLoading={isLoading}>\n          <DashboardTable\n            dashboards={dashboards}\n            onImport={(dashboard, overwrite) => this.onImport(dashboard, overwrite)}\n            onRemove={(dashboard) => this.onRemove(dashboard)}\n          />\n        </Page.Contents>\n      </Page>\n    );\n  }\n}\n\nexport default connector(DataSourceDashboards);\n"],"sourceRoot":""}
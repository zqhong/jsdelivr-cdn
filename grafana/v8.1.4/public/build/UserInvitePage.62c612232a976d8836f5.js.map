{"version":3,"sources":["webpack:///./public/app/features/org/UserInvitePage.tsx","webpack:///./public/app/features/org/UserInviteForm.tsx"],"names":["UserInvitePage","navModel","Contents","className","contextSrv","user","orgName","hot","module","connect","state","getNavModel","navIndex","roles","label","value","OrgRole","Viewer","Editor","Admin","UserInviteForm","defaultValues","name","email","role","sendEmail","onSubmit","async","getBackendSrv","post","formData","err","appEvents","emit","AppEvents","alertError","message","locationService","push","register","control","errors","invalid","loginOrEmail","error","undefined","required","placeholder","render","field","options","type","href","locationUtil","assureBaseUrl","getConfig","appSubUrl","variant"],"mappings":"oQAaO,MAAMA,EAA4B,EAAGC,cAExC,cAAC,IAAD,CAAMA,SAAUA,EAAhB,SACE,eAAC,IAAKC,SAAN,iBACE,oBAAIC,UAAU,mBAAd,0BACA,sBAAKA,UAAU,QAAf,8EAEE,uBAAMA,UAAU,iBAAhB,cAAmCC,IAAWC,KAAKC,cAJvD,MAME,cAAC,IAAD,UAUOC,wBAAIC,EAAJD,CAAYE,kBAJFC,IAAD,CACtBT,SAAUU,YAAYD,EAAME,SAAU,WAGbH,CAAyBT,K,8XCdpD,MAAMa,EAAQ,CACZ,CAAEC,MAAO,SAAUC,MAAOC,IAAQC,QAClC,CAAEH,MAAO,SAAUC,MAAOC,IAAQE,QAClC,CAAEJ,MAAO,QAASC,MAAOC,IAAQG,QAoEpBC,IAvD0B,OACvC,MASMC,EAA2B,CAC/BC,KAAM,GACNC,MAAO,GACPC,KAAMR,IAAQE,OACdO,WAAW,GAGb,OACE,cAAC,OAAD,CAAMJ,cAAeA,EAAeK,SAjBrBC,UACf,UACQC,0BAAgBC,KAAK,mBAAoBC,GAC/C,MAAOC,GACPC,IAAUC,KAAKC,YAAUC,WAAY,CAAC,6BAA8BJ,EAAIK,UAE1EC,kBAAgBC,KAAK,gBAWrB,SACG,EAAGC,WAAUC,UAASC,YAEnB,qCACE,cAAC,QAAD,CACEC,UAAWD,EAAOE,aAClBC,MAASH,EAAOE,aAAe,qCAAkCE,EACjE/B,MAAM,oBAHR,SAKE,cAAC,QAAD,KAAWyB,EAAS,eAAgB,CAAEO,UAAU,IAAhD,CAAyDC,YAAY,yBAEvE,cAAC,QAAD,CAAOL,UAAWD,EAAOnB,KAAMR,MAAM,OAArC,SACE,cAAC,QAAD,KAAWyB,EAAS,QAApB,CAA6BQ,YAAY,kBAE3C,cAAC,QAAD,CAAOL,UAAWD,EAAOjB,KAAMV,MAAM,OAArC,SACE,cAAC,eAAD,CACEkC,OAAQ,YAAoBC,E,oIAApB,GAAGA,MAAH,UAAkC,cAAC,mBAAD,KAAsBA,EAAtB,CAA6BC,QAASrC,MAChF2B,QAASA,EACTlB,KAAK,WAGT,cAAC,QAAD,CAAOR,MAAM,oBAAb,SACE,cAAC,SAAD,KAAYyB,EAAS,iBAEvB,eAAC,kBAAD,iBACE,cAAC,SAAD,CAAQY,KAAK,SAAb,qBACA,cAAC,aAAD,CAAYC,KAAMC,eAAaC,cAAcC,cAAYC,UAAY,cAAeC,QAAQ,YAA5F","file":"UserInvitePage.62c612232a976d8836f5.js","sourcesContent":["import React, { FC } from 'react';\nimport { hot } from 'react-hot-loader';\nimport { connect } from 'react-redux';\nimport UserInviteForm from './UserInviteForm';\nimport { contextSrv, NavModel } from 'app/core/core';\nimport { getNavModel } from 'app/core/selectors/navModel';\nimport { StoreState } from 'app/types/store';\nimport Page from 'app/core/components/Page/Page';\n\ninterface Props {\n  navModel: NavModel;\n}\n\nexport const UserInvitePage: FC<Props> = ({ navModel }) => {\n  return (\n    <Page navModel={navModel}>\n      <Page.Contents>\n        <h3 className=\"page-sub-heading\">Invite user</h3>\n        <div className=\"p-b-2\">\n          Send invitation or add existing Grafana user to the organization.\n          <span className=\"highlight-word\"> {contextSrv.user.orgName}</span>\n        </div>\n        <UserInviteForm />\n      </Page.Contents>\n    </Page>\n  );\n};\n\nconst mapStateToProps = (state: StoreState) => ({\n  navModel: getNavModel(state.navIndex, 'users'),\n});\n\nexport default hot(module)(connect(mapStateToProps)(UserInvitePage));\n","import React, { FC } from 'react';\nimport {\n  HorizontalGroup,\n  Button,\n  LinkButton,\n  Input,\n  Switch,\n  RadioButtonGroup,\n  Form,\n  Field,\n  InputControl,\n} from '@grafana/ui';\nimport { getConfig } from 'app/core/config';\nimport { OrgRole } from 'app/types';\nimport { getBackendSrv, locationService } from '@grafana/runtime';\nimport { appEvents } from 'app/core/core';\nimport { AppEvents, locationUtil } from '@grafana/data';\n\nconst roles = [\n  { label: 'Viewer', value: OrgRole.Viewer },\n  { label: 'Editor', value: OrgRole.Editor },\n  { label: 'Admin', value: OrgRole.Admin },\n];\n\ninterface FormModel {\n  role: OrgRole;\n  name: string;\n  loginOrEmail?: string;\n  sendEmail: boolean;\n  email: string;\n}\n\ninterface Props {}\n\nexport const UserInviteForm: FC<Props> = ({}) => {\n  const onSubmit = async (formData: FormModel) => {\n    try {\n      await getBackendSrv().post('/api/org/invites', formData);\n    } catch (err) {\n      appEvents.emit(AppEvents.alertError, ['Failed to send invitation.', err.message]);\n    }\n    locationService.push('/org/users/');\n  };\n\n  const defaultValues: FormModel = {\n    name: '',\n    email: '',\n    role: OrgRole.Editor,\n    sendEmail: true,\n  };\n\n  return (\n    <Form defaultValues={defaultValues} onSubmit={onSubmit}>\n      {({ register, control, errors }) => {\n        return (\n          <>\n            <Field\n              invalid={!!errors.loginOrEmail}\n              error={!!errors.loginOrEmail ? 'Email or username is required' : undefined}\n              label=\"Email or username\"\n            >\n              <Input {...register('loginOrEmail', { required: true })} placeholder=\"email@example.com\" />\n            </Field>\n            <Field invalid={!!errors.name} label=\"Name\">\n              <Input {...register('name')} placeholder=\"(optional)\" />\n            </Field>\n            <Field invalid={!!errors.role} label=\"Role\">\n              <InputControl\n                render={({ field: { ref, ...field } }) => <RadioButtonGroup {...field} options={roles} />}\n                control={control}\n                name=\"role\"\n              />\n            </Field>\n            <Field label=\"Send invite email\">\n              <Switch {...register('sendEmail')} />\n            </Field>\n            <HorizontalGroup>\n              <Button type=\"submit\">Submit</Button>\n              <LinkButton href={locationUtil.assureBaseUrl(getConfig().appSubUrl + '/org/users')} variant=\"secondary\">\n                Back\n              </LinkButton>\n            </HorizontalGroup>\n          </>\n        );\n      }}\n    </Form>\n  );\n};\n\nexport default UserInviteForm;\n"],"sourceRoot":""}
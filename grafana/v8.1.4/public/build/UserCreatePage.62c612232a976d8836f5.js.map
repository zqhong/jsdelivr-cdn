{"version":3,"sources":["webpack:///./public/app/features/admin/UserCreatePage.tsx"],"names":["hot","module","connect","state","navModel","getNavModel","navIndex","history","useHistory","onSubmit","useCallback","async","getBackendSrv","post","user","createUser","data","push","Contents","validateOn","register","errors","label","required","invalid","name","error","undefined","password","validate","value","trim","length","type"],"mappings":"obAqFeA,wBAAIC,EAAJD,CAAYE,kBAJFC,IAAD,CACtBC,SAAUC,YAAYF,EAAMG,SAAU,kBAGbJ,CA9D2B,EAAGE,eACvD,MAAMG,EAAUC,cAEVC,EAAWC,sBACfC,eANeA,UAAyBC,0BAAgBC,KAAK,mBAAoBC,GAOzEC,CAAWC,GACjBT,EAAQU,KAAK,iBAEf,CAACV,IAGH,OACE,cAAC,IAAD,CAAMH,SAAUA,EAAhB,SACE,eAAC,IAAKc,SAAN,iBACE,+CACA,cAAC,OAAD,CAAMT,SAAUA,EAAUU,WAAW,SAArC,SACG,EAAGC,WAAUC,YAEV,qCACE,cAAC,QAAD,CACEC,MAAM,OACNC,UAAQ,EACRC,UAAWH,EAAOI,KAClBC,MAAOL,EAAOI,KAAO,wBAAqBE,EAJ5C,SAME,cAAC,QAAD,KAAWP,EAAS,OAAQ,CAAEG,UAAU,QAG1C,cAAC,QAAD,CAAOD,MAAM,QAAb,SACE,cAAC,QAAD,KAAWF,EAAS,aAGtB,cAAC,QAAD,CAAOE,MAAM,WAAb,SACE,cAAC,QAAD,KAAWF,EAAS,aAEtB,cAAC,QAAD,CACEE,MAAM,WACNC,UAAQ,EACRC,UAAWH,EAAOO,SAClBF,MAAOL,EAAOO,SAAW,mEAAgED,EAJ3F,SAME,cAAC,QAAD,KACMP,EAAS,WAAY,CACvBS,SAAWC,GAA2B,KAAjBA,EAAMC,QAAiBD,EAAME,QAAU,IAFhE,CAIEC,KAAK,gBA3BX,MA8BE,cAAC,SAAD,CAAQA,KAAK,SAAb,wC","file":"UserCreatePage.62c612232a976d8836f5.js","sourcesContent":["import React, { useCallback } from 'react';\nimport { hot } from 'react-hot-loader';\nimport { connect } from 'react-redux';\nimport { Form, Button, Input, Field } from '@grafana/ui';\nimport { NavModel } from '@grafana/data';\nimport { getBackendSrv } from '@grafana/runtime';\nimport { StoreState } from '../../types';\nimport { getNavModel } from '../../core/selectors/navModel';\nimport Page from 'app/core/components/Page/Page';\nimport { useHistory } from 'react-router-dom';\n\ninterface UserCreatePageProps {\n  navModel: NavModel;\n}\ninterface UserDTO {\n  name: string;\n  password: string;\n  email?: string;\n  login?: string;\n}\n\nconst createUser = async (user: UserDTO) => getBackendSrv().post('/api/admin/users', user);\n\nconst UserCreatePage: React.FC<UserCreatePageProps> = ({ navModel }) => {\n  const history = useHistory();\n\n  const onSubmit = useCallback(\n    async (data: UserDTO) => {\n      await createUser(data);\n      history.push('/admin/users');\n    },\n    [history]\n  );\n\n  return (\n    <Page navModel={navModel}>\n      <Page.Contents>\n        <h1>Add new user</h1>\n        <Form onSubmit={onSubmit} validateOn=\"onBlur\">\n          {({ register, errors }) => {\n            return (\n              <>\n                <Field\n                  label=\"Name\"\n                  required\n                  invalid={!!errors.name}\n                  error={errors.name ? 'Name is required' : undefined}\n                >\n                  <Input {...register('name', { required: true })} />\n                </Field>\n\n                <Field label=\"Email\">\n                  <Input {...register('email')} />\n                </Field>\n\n                <Field label=\"Username\">\n                  <Input {...register('login')} />\n                </Field>\n                <Field\n                  label=\"Password\"\n                  required\n                  invalid={!!errors.password}\n                  error={errors.password ? 'Password is required and must contain at least 4 characters' : undefined}\n                >\n                  <Input\n                    {...register('password', {\n                      validate: (value) => value.trim() !== '' && value.length >= 4,\n                    })}\n                    type=\"password\"\n                  />\n                </Field>\n                <Button type=\"submit\">Create user</Button>\n              </>\n            );\n          }}\n        </Form>\n      </Page.Contents>\n    </Page>\n  );\n};\n\nconst mapStateToProps = (state: StoreState) => ({\n  navModel: getNavModel(state.navIndex, 'global-users'),\n});\n\nexport default hot(module)(connect(mapStateToProps)(UserCreatePage));\n"],"sourceRoot":""}
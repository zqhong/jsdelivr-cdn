{"version":3,"sources":["webpack:///./public/app/plugins/datasource/testdata/metricTree.ts","webpack:///./public/app/plugins/datasource/testdata/LogIpsum.ts","webpack:///./public/app/plugins/datasource/testdata/runStreams.ts","webpack:///./public/app/plugins/datasource/testdata/variables.ts","webpack:///./public/app/plugins/datasource/testdata/testData/serviceMapResponse.ts","webpack:///./public/app/plugins/datasource/testdata/nodeGraphUtils.ts","webpack:///./public/app/plugins/datasource/testdata/datasource.ts","webpack:///./public/app/plugins/datasource/testdata/TestInfoTab.tsx","webpack:///./public/app/plugins/datasource/testdata/ConfigEditor.tsx","webpack:///./public/app/plugins/datasource/testdata/components/StreamingClientEditor.tsx","webpack:///./public/app/plugins/datasource/testdata/components/RandomWalkEditor.tsx","webpack:///./public/app/plugins/datasource/testdata/components/PredictablePulseEditor.tsx","webpack:///./public/app/plugins/datasource/testdata/constants.ts","webpack:///./public/app/plugins/datasource/testdata/components/CSVWaveEditor.tsx","webpack:///./public/app/plugins/datasource/testdata/components/GrafanaLiveEditor.tsx","webpack:///./public/app/plugins/datasource/testdata/components/NodeGraphEditor.tsx","webpack:///./public/app/plugins/datasource/testdata/components/CSVFileEditor.tsx","webpack:///./public/app/plugins/datasource/testdata/components/CSVContentEditor.tsx","webpack:///./public/app/plugins/datasource/testdata/components/USAQueryEditor.tsx","webpack:///./public/app/plugins/datasource/testdata/QueryEditor.tsx","webpack:///./public/app/plugins/datasource/testdata/module.tsx"],"names":["queryMetricTree","query","indexOf","name","children","queryTree","queryIndex","length","nodeQuery","result","namesToMatch","startsWith","replace","split","node","nameToMatch","pattern","RegExp","test","concat","buildMetricTree","parent","depth","chars","letter","nodeName","push","index","getNextWord","Math","floor","random","words","defaultStreamQuery","type","speed","spread","noise","bands","runStream","target","req","defaults","stream","Observable","subscriber","streamId","panelId","refId","maxDataPoints","schema","alias","fields","FieldType","time","number","i","suffix","frame","StreamingDataFrame","maxLength","value","timeoutId","lastSent","addNextRow","data","values","min","max","event","Date","now","pushNextEvent","perf","last","ok","next","key","state","LoadingState","Streaming","setTimeout","console","log","clearTimeout","runSignalStream","CircularDataFrame","append","capacity","addField","string","meta","preferredVisualisationType","add","line","getRandomLine","runLogsStream","reader","csv","CSVReader","callback","onHeader","field","onRow","row","processChunk","text","TextDecoder","decode","readCSV","done","Done","complete","read","then","url","Error","fetch","Request","response","body","getReader","runFetchStream","TestDataVariableSupport","StandardVariableSupport","toDataQuery","stringInput","scenarioId","csvWave","undefined","nodes","NodeGraphDataFrameFieldNames","id","config","links","title","internal","queryType","datasourceUid","datasourceName","displayName","subTitle","mainStat","unit","secondaryStat","arc","color","mode","FieldColorModeId","Fixed","fixedColor","edges","source","makeRandomNode","success","error","toString","stat1","stat2","TestDataDataSource","DataSourceWithBackend","constructor","instanceSettings","templateSrv","getTemplateSrv","super","this","variables","options","backendQueries","streams","targets","hide","resolveTemplateVariables","scopedVars","runGrafanaLiveQuery","runGrafanaAPI","annotationDataTopicTest","variablesQuery","nodesQuery","csvContent","points","point","backendOpts","of","merge","labels","events","buildFakeAnnotationEvents","range","dataFrame","ArrayDataFrame","dataTopic","DataTopic","Annotations","pipe","delay","count","timeWalker","from","valueOf","step","to","tags","annotationQuery","Promise","resolve","getQueryDisplayText","testDatasource","status","message","getScenarios","scenariosCache","getResource","items","getSearchFilterScopedVar","wildcardChar","map","item","frames","root","nodesWithoutMaxEdges","sourceIndex","splice","additionalEdges","nodeFields","ArrayVector","nodeFrame","MutableDataFrame","Object","keys","edgeFields","edgesFrame","edgesSet","Set","arc__success","arc__errors","edge","has","generateRandomNodes","getBackendSrv","get","res","liveQueryCounter","channel","getGrafanaLiveSrv","getDataStream","addr","scope","LiveChannelScope","Plugin","namespace","path","TestInfoTab","PureComponent","props","render","variant","href","rel","ConfigEditor","streamingClientFields","label","placeholder","types","StreamingClientEditor","onChange","onInputChange","e","Number","labelWidth","menuShouldPortal","width","defaultValue","grow","randomWalkFields","testSelectors","selectors","components","DataSource","TestData","QueryTab","RandomWalkEditor","selector","aria-label","tooltip","PredictablePulseEditor","pulseWave","defaultPulseQuery","timeStep","onCount","onValue","offCount","offValue","defaultCSVWaveQuery","valuesCSV","defaultQuery","CSVWaveEditor","wave","onFieldChange","valueAsNumber","action","onAdd","onCSVChange","autoFocus","onTimeStepChange","onLabelsChange","onNameChange","icon","onClick","CSVWavesEditor","waves","liveTestDataChannels","description","GrafanaLiveEditor","find","f","NodeGraphEditor","o","currentTarget","parseInt","CSVFileEditor","files","csvFileName","CSVContentEditor","rows","onBlur","USAQueryEditor","usaQueryModes","v","ep","period","fieldNames","vals","isMulti","stateNames","states","showLabelsFor","endpoints","editorSelectors","TestDataAnnotationsQueryCtrl","plugin","DataSourcePlugin","setConfigEditor","setQueryEditor","datasource","onRunQuery","loading","scenarioList","useAsync","async","onUpdate","currentScenario","useMemo","scenario","newValue","checked","onStreamClientChange","onPulseWaveChange","sort","a","b","localeCompare","showLabels","includes","scenarioSelectContainer","sc","update","usa","lines","levelColumn","val","setChannelSupport","LiveMeasurementsSupport","setAnnotationQueryCtrl","addConfigPage"],"mappings":"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","file":"testDataDSPlugin.62c612232a976d8836f5.js","sourcesContent":["export interface TreeNode {\n  name: string;\n  children: TreeNode[];\n}\n\n/*\n *  Builds a nested tree like\n *  [\n *    {\n *      name: 'A',\n *      children: [\n *        { name: 'AA', children: [] },\n *        { name: 'AB', children: [] },\n *      ]\n *    }\n *  ]\n */\nfunction buildMetricTree(parent: string, depth: number): TreeNode[] {\n  const chars = ['A', 'B', 'C'];\n  const children: TreeNode[] = [];\n\n  if (depth > 5) {\n    return [];\n  }\n\n  for (const letter of chars) {\n    const nodeName = `${parent}${letter}`;\n    children.push({\n      name: nodeName,\n      children: buildMetricTree(nodeName, depth + 1),\n    });\n  }\n\n  return children;\n}\n\nfunction queryTree(children: TreeNode[], query: string[], queryIndex: number): TreeNode[] {\n  if (queryIndex >= query.length) {\n    return children;\n  }\n\n  if (query[queryIndex] === '*') {\n    return children;\n  }\n\n  const nodeQuery = query[queryIndex];\n  let result: TreeNode[] = [];\n  let namesToMatch = [nodeQuery];\n\n  // handle glob queries\n  if (nodeQuery.startsWith('{')) {\n    namesToMatch = nodeQuery.replace(/\\{|\\}/g, '').split(',');\n  }\n\n  for (const node of children) {\n    for (const nameToMatch of namesToMatch) {\n      if (nameToMatch.indexOf('*') !== -1) {\n        const pattern = nameToMatch.replace('*', '');\n        const regex = new RegExp(`^${pattern}.*`, 'gi');\n        if (regex.test(node.name)) {\n          result = result.concat(queryTree([node], query, queryIndex + 1));\n        }\n      } else if (node.name === nameToMatch) {\n        result = result.concat(queryTree(node.children, query, queryIndex + 1));\n      }\n    }\n  }\n\n  return result;\n}\n\nexport function queryMetricTree(query: string): TreeNode[] {\n  if (query.indexOf('value') === 0) {\n    return [{ name: query, children: [] }];\n  }\n\n  const children = buildMetricTree('', 0);\n  return queryTree(children, query.split('.'), 0);\n}\n","import { LogLevel } from '@grafana/data';\n\nlet index = 0;\n\nexport function getRandomLogLevel(): LogLevel {\n  const v = Math.random();\n  if (v > 0.9) {\n    return LogLevel.critical;\n  }\n  if (v > 0.8) {\n    return LogLevel.error;\n  }\n  if (v > 0.7) {\n    return LogLevel.warning;\n  }\n  if (v > 0.4) {\n    return LogLevel.info;\n  }\n  if (v > 0.3) {\n    return LogLevel.debug;\n  }\n  if (v > 0.1) {\n    return LogLevel.trace;\n  }\n  return LogLevel.unknown;\n}\n\nexport function getNextWord() {\n  index = (index + Math.floor(Math.random() * 5)) % words.length;\n  return words[index];\n}\n\nexport function getRandomLine(length = 60) {\n  let line = getNextWord();\n  while (line.length < length) {\n    line += ' ' + getNextWord();\n  }\n  return line;\n}\n\nconst words = [\n  'At',\n  'vero',\n  'eos',\n  'et',\n  'accusamus',\n  'et',\n  'iusto',\n  'odio',\n  'dignissimos',\n  'ducimus',\n  'qui',\n  'blanditiis',\n  'praesentium',\n  'voluptatum',\n  'deleniti',\n  'atque',\n  'corrupti',\n  'quos',\n  'dolores',\n  'et',\n  'quas',\n  'molestias',\n  'excepturi',\n  'sint',\n  'occaecati',\n  'cupiditate',\n  'non',\n  'provident',\n  'similique',\n  'sunt',\n  'in',\n  'culpa',\n  'qui',\n  'officia',\n  'deserunt',\n  'mollitia',\n  'animi',\n  'id',\n  'est',\n  'laborum',\n  'et',\n  'dolorum',\n  'fuga',\n  'Et',\n  'harum',\n  'quidem',\n  'rerum',\n  'facilis',\n  'est',\n  'et',\n  'expedita',\n  'distinctio',\n  'Nam',\n  'libero',\n  'tempore',\n  'cum',\n  'soluta',\n  'nobis',\n  'est',\n  'eligendi',\n  'optio',\n  'cumque',\n  'nihil',\n  'impedit',\n  'quo',\n  'minus',\n  'id',\n  'quod',\n  'maxime',\n  'placeat',\n  'facere',\n  'possimus',\n  'omnis',\n  'voluptas',\n  'assumenda',\n  'est',\n  'omnis',\n  'dolor',\n  'repellendus',\n  'Temporibus',\n  'autem',\n  'quibusdam',\n  'et',\n  'aut',\n  'officiis',\n  'debitis',\n  'aut',\n  'rerum',\n  'necessitatibus',\n  'saepe',\n  'eveniet',\n  'ut',\n  'et',\n  'voluptates',\n  'repudiandae',\n  'sint',\n  'et',\n  'molestiae',\n  'non',\n  'recusandae',\n  'Itaque',\n  'earum',\n  'rerum',\n  'hic',\n  'tenetur',\n  'a',\n  'sapiente',\n  'delectus',\n  'ut',\n  'aut',\n  'reiciendis',\n  'voluptatibus',\n  'maiores',\n  'alias',\n  'consequatur',\n  'aut',\n  'perferendis',\n  'doloribus',\n  'asperiores',\n  'repellat',\n];\n","import { defaults } from 'lodash';\nimport { Observable } from 'rxjs';\n\nimport {\n  DataQueryRequest,\n  DataQueryResponse,\n  FieldType,\n  CircularDataFrame,\n  CSVReader,\n  Field,\n  LoadingState,\n  StreamingDataFrame,\n  DataFrameSchema,\n  DataFrameData,\n} from '@grafana/data';\n\nimport { TestDataQuery, StreamingQuery } from './types';\nimport { getRandomLine } from './LogIpsum';\nimport { perf } from 'app/features/live/perf';\n\nexport const defaultStreamQuery: StreamingQuery = {\n  type: 'signal',\n  speed: 250, // ms\n  spread: 3.5,\n  noise: 2.2,\n  bands: 1,\n};\n\nexport function runStream(target: TestDataQuery, req: DataQueryRequest<TestDataQuery>): Observable<DataQueryResponse> {\n  const query = defaults(target.stream, defaultStreamQuery);\n  if ('signal' === query.type) {\n    return runSignalStream(target, query, req);\n  }\n  if ('logs' === query.type) {\n    return runLogsStream(target, query, req);\n  }\n  if ('fetch' === query.type) {\n    return runFetchStream(target, query, req);\n  }\n  throw new Error(`Unknown Stream Type: ${query.type}`);\n}\n\nexport function runSignalStream(\n  target: TestDataQuery,\n  query: StreamingQuery,\n  req: DataQueryRequest<TestDataQuery>\n): Observable<DataQueryResponse> {\n  return new Observable<DataQueryResponse>((subscriber) => {\n    const streamId = `signal-${req.panelId}-${target.refId}`;\n    const maxDataPoints = req.maxDataPoints || 1000;\n\n    const schema: DataFrameSchema = {\n      refId: target.refId,\n      name: target.alias || 'Signal ' + target.refId,\n      fields: [\n        { name: 'time', type: FieldType.time },\n        { name: 'value', type: FieldType.number },\n      ],\n    };\n\n    const { spread, speed, bands = 0, noise } = query;\n    for (let i = 0; i < bands; i++) {\n      const suffix = bands > 1 ? ` ${i + 1}` : '';\n      schema.fields.push({ name: 'Min' + suffix, type: FieldType.number });\n      schema.fields.push({ name: 'Max' + suffix, type: FieldType.number });\n    }\n\n    const frame = new StreamingDataFrame({ schema }, { maxLength: maxDataPoints });\n\n    let value = Math.random() * 100;\n    let timeoutId: any = null;\n    let lastSent = -1;\n\n    const addNextRow = (time: number) => {\n      value += (Math.random() - 0.5) * spread;\n\n      const data: DataFrameData = {\n        values: [[time], [value]],\n      };\n\n      let min = value;\n      let max = value;\n\n      for (let i = 0; i < bands; i++) {\n        min = min - Math.random() * noise;\n        max = max + Math.random() * noise;\n\n        data.values.push([min]);\n        data.values.push([max]);\n      }\n\n      const event = { data };\n      return frame.push(event);\n    };\n\n    // Fill the buffer on init\n    if (true) {\n      let time = Date.now() - maxDataPoints * speed;\n      for (let i = 0; i < maxDataPoints; i++) {\n        addNextRow(time);\n        time += speed;\n      }\n    }\n\n    const pushNextEvent = () => {\n      addNextRow(Date.now());\n\n      const elapsed = perf.last - lastSent;\n      if (elapsed > 1000 || perf.ok) {\n        subscriber.next({\n          data: [frame],\n          key: streamId,\n          state: LoadingState.Streaming,\n        });\n        lastSent = perf.last;\n      }\n\n      timeoutId = setTimeout(pushNextEvent, speed);\n    };\n\n    // Send first event in 5ms\n    setTimeout(pushNextEvent, 5);\n\n    return () => {\n      console.log('unsubscribing to stream ' + streamId);\n      clearTimeout(timeoutId);\n    };\n  });\n}\n\nexport function runLogsStream(\n  target: TestDataQuery,\n  query: StreamingQuery,\n  req: DataQueryRequest<TestDataQuery>\n): Observable<DataQueryResponse> {\n  return new Observable<DataQueryResponse>((subscriber) => {\n    const streamId = `logs-${req.panelId}-${target.refId}`;\n    const maxDataPoints = req.maxDataPoints || 1000;\n\n    const data = new CircularDataFrame({\n      append: 'tail',\n      capacity: maxDataPoints,\n    });\n    data.refId = target.refId;\n    data.name = target.alias || 'Logs ' + target.refId;\n    data.addField({ name: 'line', type: FieldType.string });\n    data.addField({ name: 'time', type: FieldType.time });\n    data.meta = { preferredVisualisationType: 'logs' };\n\n    const { speed } = query;\n\n    let timeoutId: any = null;\n\n    const pushNextEvent = () => {\n      data.fields[0].values.add(Date.now());\n      data.fields[1].values.add(getRandomLine());\n\n      subscriber.next({\n        data: [data],\n        key: streamId,\n      });\n\n      timeoutId = setTimeout(pushNextEvent, speed);\n    };\n\n    // Send first event in 5ms\n    setTimeout(pushNextEvent, 5);\n\n    return () => {\n      console.log('unsubscribing to stream ' + streamId);\n      clearTimeout(timeoutId);\n    };\n  });\n}\n\nexport function runFetchStream(\n  target: TestDataQuery,\n  query: StreamingQuery,\n  req: DataQueryRequest<TestDataQuery>\n): Observable<DataQueryResponse> {\n  return new Observable<DataQueryResponse>((subscriber) => {\n    const streamId = `fetch-${req.panelId}-${target.refId}`;\n    const maxDataPoints = req.maxDataPoints || 1000;\n\n    let data = new CircularDataFrame({\n      append: 'tail',\n      capacity: maxDataPoints,\n    });\n    data.refId = target.refId;\n    data.name = target.alias || 'Fetch ' + target.refId;\n\n    let reader: ReadableStreamReader<Uint8Array>;\n    const csv = new CSVReader({\n      callback: {\n        onHeader: (fields: Field[]) => {\n          // Clear any existing fields\n          if (data.fields.length) {\n            data = new CircularDataFrame({\n              append: 'tail',\n              capacity: maxDataPoints,\n            });\n            data.refId = target.refId;\n            data.name = 'Fetch ' + target.refId;\n          }\n          for (const field of fields) {\n            data.addField(field);\n          }\n        },\n        onRow: (row: any[]) => {\n          data.add(row);\n        },\n      },\n    });\n\n    const processChunk = (value: ReadableStreamDefaultReadResult<Uint8Array>): any => {\n      if (value.value) {\n        const text = new TextDecoder().decode(value.value);\n        csv.readCSV(text);\n      }\n\n      subscriber.next({\n        data: [data],\n        key: streamId,\n        state: value.done ? LoadingState.Done : LoadingState.Streaming,\n      });\n\n      if (value.done) {\n        console.log('Finished stream');\n        subscriber.complete(); // necessary?\n        return;\n      }\n\n      return reader.read().then(processChunk);\n    };\n\n    if (!query.url) {\n      throw new Error('query.url is not defined');\n    }\n\n    fetch(new Request(query.url)).then((response) => {\n      if (response.body) {\n        reader = response.body.getReader();\n        reader.read().then(processChunk);\n      }\n    });\n\n    return () => {\n      // Cancel fetch?\n      console.log('unsubscribing to stream ' + streamId);\n    };\n  });\n}\n","import { StandardVariableQuery, StandardVariableSupport } from '@grafana/data';\n\nimport { TestDataDataSource } from './datasource';\nimport { TestDataQuery } from './types';\n\nexport class TestDataVariableSupport extends StandardVariableSupport<TestDataDataSource> {\n  toDataQuery(query: StandardVariableQuery): TestDataQuery {\n    return {\n      refId: 'TestDataDataSource-QueryVariable',\n      stringInput: query.query,\n      scenarioId: 'variables-query',\n      csvWave: undefined,\n    };\n  }\n}\n","import { FieldColorModeId, FieldType, PreferredVisualisationType, NodeGraphDataFrameFieldNames } from '@grafana/data';\n\nexport const nodes = {\n  fields: [\n    {\n      name: NodeGraphDataFrameFieldNames.id,\n      type: FieldType.string,\n      config: {\n        links: [\n          {\n            title: 'Traces/All',\n            url: '',\n            internal: {\n              query: {\n                queryType: 'getTraceSummaries',\n                query: 'service(id(name: \"${__data.fields.name}\", type: \"${__data.fields.type}\"))',\n              },\n              datasourceUid: 'Ax4erxHGz',\n              datasourceName: 'Trace data source',\n            },\n          },\n          {\n            title: 'Traces/OK',\n            url: '',\n            internal: {\n              query: {\n                queryType: 'getTraceSummaries',\n                query: 'service(id(name: \"${__data.fields.name}\", type: \"${__data.fields.type}\")) { ok = true }',\n              },\n              datasourceUid: 'Ax4erxHGz',\n              datasourceName: 'Trace data source',\n            },\n          },\n          {\n            title: 'Traces/Errors',\n            url: '',\n            internal: {\n              query: {\n                queryType: 'getTraceSummaries',\n                query: 'service(id(name: \"${__data.fields.name}\", type: \"${__data.fields.type}\")) { error = true }',\n              },\n              datasourceUid: 'Ax4erxHGz',\n              datasourceName: 'Trace data source',\n            },\n          },\n          {\n            title: 'Traces/Faults',\n            url: '',\n            internal: {\n              query: {\n                queryType: 'getTraceSummaries',\n                query: 'service(id(name: \"${__data.fields.name}\", type: \"${__data.fields.type}\")) { fault = true }',\n              },\n              datasourceUid: 'Ax4erxHGz',\n              datasourceName: 'Trace data source',\n            },\n          },\n        ],\n      },\n      values: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14],\n    },\n    {\n      name: NodeGraphDataFrameFieldNames.title,\n      type: FieldType.string,\n      config: { displayName: 'Name' },\n      values: [\n        'auth',\n        'products',\n        'customers',\n        'orders',\n        'products',\n        'orders',\n        'api',\n        'shipping',\n        'orders',\n        'execute-api',\n        'shipping',\n        'www',\n        'api',\n        'www',\n        'products',\n      ],\n    },\n    {\n      name: NodeGraphDataFrameFieldNames.subTitle,\n      type: FieldType.string,\n      config: { displayName: 'Type' },\n      values: [\n        'Compute',\n        'SQL',\n        'SQL',\n        'SQL',\n        'remote',\n        'Function',\n        'Compute',\n        'Function',\n        'Function',\n        'remote',\n        'Function',\n        'Compute',\n        'client',\n        'client',\n        'Compute',\n      ],\n    },\n    {\n      name: NodeGraphDataFrameFieldNames.mainStat,\n      type: FieldType.number,\n      config: { unit: 'ms/t', displayName: 'Average response time' },\n      values: [\n        3.5394042646735553,\n        15.906441318223264,\n        4.913011921591567,\n        7.4163203042094095,\n        1092,\n        22.85961441405067,\n        56.135855729084696,\n        4.45946191601527,\n        12.818300278280843,\n        4.25,\n        12.565442646791492,\n        77.63447512700567,\n        40.387096774193544,\n        77.63447512700567,\n        27.648950187374872,\n      ],\n    },\n    {\n      name: NodeGraphDataFrameFieldNames.secondaryStat,\n      type: FieldType.number,\n      config: { unit: 't/min', displayName: 'Transactions per minute' },\n      values: [\n        50.56317154501667,\n        682.4,\n        512.8416666666667,\n        125.64444444444445,\n        0.005585812037424941,\n        137.59722222222223,\n        300.0527777777778,\n        30.582348853370394,\n        125.77222222222223,\n        0.028706417080318163,\n        30.582348853370394,\n        165.675,\n        0.100021510002151,\n        165.675,\n        162.33055555555555,\n      ],\n    },\n    {\n      name: NodeGraphDataFrameFieldNames.arc + 'success',\n      type: FieldType.number,\n      config: { color: { mode: FieldColorModeId.Fixed, fixedColor: 'green' }, displayName: 'Sucesss' },\n      values: [\n        0.9338865684765882,\n        1,\n        1,\n        1,\n        0.5,\n        1,\n        0.9901128505170387,\n        0.9069260134520997,\n        1,\n        0,\n        0.9069260134520997,\n        0.9624432037288534,\n        0,\n        0.9624432037288534,\n        0.9824945669843769,\n      ],\n    },\n    {\n      name: NodeGraphDataFrameFieldNames.arc + 'faults',\n      type: FieldType.number,\n      config: { color: { mode: FieldColorModeId.Fixed, fixedColor: 'red' }, displayName: 'Faults' },\n      values: [\n        0,\n        0,\n        0,\n        0,\n        0.5,\n        0,\n        0.009479813736472288,\n        0,\n        0,\n        0,\n        0,\n        0.017168821152524185,\n        0,\n        0.017168821152524185,\n        0.01750543301562313,\n      ],\n    },\n    {\n      name: NodeGraphDataFrameFieldNames.arc + 'errors',\n      type: FieldType.number,\n      config: { color: { mode: FieldColorModeId.Fixed, fixedColor: 'semi-dark-yellow' }, displayName: 'Errors' },\n      values: [\n        0.06611343152341174,\n        0,\n        0,\n        0,\n        0,\n        0,\n        0.0004073357464890436,\n        0.09307398654790038,\n        0,\n        1,\n        0.09307398654790038,\n        0.02038797511862247,\n        1,\n        0.02038797511862247,\n        0,\n      ],\n    },\n    {\n      name: NodeGraphDataFrameFieldNames.arc + 'throttled',\n      type: FieldType.number,\n      config: { color: { mode: FieldColorModeId.Fixed, fixedColor: 'purple' }, displayName: 'Throttled' },\n      values: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n    },\n  ],\n  meta: { preferredVisualisationType: 'nodeGraph' as PreferredVisualisationType },\n  name: 'nodes',\n};\n\nexport const edges = {\n  fields: [\n    {\n      name: NodeGraphDataFrameFieldNames.id,\n      type: FieldType.string,\n      config: {\n        links: [\n          {\n            title: 'Traces/All',\n            url: '',\n            internal: {\n              query: {\n                queryType: 'getTraceSummaries',\n                query: 'edge(\"${__data.fields.sourceName}\", \"${__data.fields.targetName}\")',\n              },\n              datasourceUid: 'Ax4erxHGz',\n              datasourceName: 'Trace data source',\n            },\n          },\n          {\n            title: 'Traces/OK',\n            url: '',\n            internal: {\n              query: {\n                queryType: 'getTraceSummaries',\n                query: 'edge(\"${__data.fields.sourceName}\", \"${__data.fields.targetName}\") { ok = true }',\n              },\n              datasourceUid: 'Ax4erxHGz',\n              datasourceName: 'Trace data source',\n            },\n          },\n          {\n            title: 'Traces/Errors',\n            url: '',\n            internal: {\n              query: {\n                queryType: 'getTraceSummaries',\n                query: 'edge(\"${__data.fields.sourceName}\", \"${__data.fields.targetName}\") { error = true }',\n              },\n              datasourceUid: 'Ax4erxHGz',\n              datasourceName: 'Trace data source',\n            },\n          },\n          {\n            title: 'Traces/Faults',\n            url: '',\n            internal: {\n              query: {\n                queryType: 'getTraceSummaries',\n                query: 'edge(\"${__data.fields.sourceName}\", \"${__data.fields.targetName}\") { fault = true }',\n              },\n              datasourceUid: 'Ax4erxHGz',\n              datasourceName: 'Trace data source',\n            },\n          },\n        ],\n      },\n      values: [\n        '0__2',\n        '5__8',\n        '6__0',\n        '6__5',\n        '6__9',\n        '6__2',\n        '6__14',\n        '6__4',\n        '8__3',\n        '10__7',\n        '11__0',\n        '11__6',\n        '12__6',\n        '13__11',\n        '14__1',\n        '14__2',\n        '14__10',\n      ],\n    },\n    {\n      name: NodeGraphDataFrameFieldNames.source,\n      type: FieldType.string,\n      config: {},\n      values: [0, 5, 6, 6, 6, 6, 6, 6, 8, 10, 11, 11, 12, 13, 14, 14, 14],\n    },\n    {\n      name: 'sourceName',\n      type: FieldType.string,\n      config: {},\n      values: [\n        'auth',\n        'orders',\n        'api',\n        'api',\n        'api',\n        'api',\n        'api',\n        'api',\n        'orders',\n        'shipping',\n        'www',\n        'www',\n        'api',\n        'www',\n        'products',\n        'products',\n        'products',\n      ],\n    },\n    {\n      name: NodeGraphDataFrameFieldNames.target,\n      type: FieldType.string,\n      config: {},\n      values: [2, 8, 0, 5, 9, 2, 14, 4, 3, 7, 0, 6, 6, 11, 1, 2, 10],\n    },\n    {\n      name: 'targetName',\n      type: FieldType.string,\n      config: {},\n      values: [\n        'customers',\n        'orders',\n        'auth',\n        'orders',\n        'execute-api',\n        'customers',\n        'products',\n        'products',\n        'orders',\n        'shipping',\n        'auth',\n        'api',\n        'api',\n        'www',\n        'products',\n        'customers',\n        'shipping',\n      ],\n    },\n    {\n      name: NodeGraphDataFrameFieldNames.mainStat,\n      type: FieldType.string,\n      config: { displayName: 'Response percentage' },\n      values: [\n        'Success 100.00%',\n        'Success 100.00%',\n        'Success 100.00%',\n        'Success 100.00%',\n        'Errors 100.00%',\n        'Success 100.00%',\n        'Faults 1.75%',\n        'Faults 50.00%',\n        'Success 100.00%',\n        'Errors 9.31%',\n        'Errors 6.62%',\n        'Faults 1.13%',\n        'Errors 100.00%',\n        'Faults 1.72%',\n        'Success 100.00%',\n        'Success 100.00%',\n        'Faults 9.30%',\n      ],\n    },\n    {\n      name: NodeGraphDataFrameFieldNames.secondaryStat,\n      type: FieldType.number,\n      config: { unit: 't/min', displayName: 'Transactions per minute' },\n      values: [\n        50.56317154501667,\n        125.77222222222223,\n        0.03333333333333333,\n        137.59722222222223,\n        0.022222222222222223,\n        299.96666666666664,\n        162.33055555555555,\n        0.005555555555555556,\n        125.64444444444445,\n        30.582348853370394,\n        50.51111111111111,\n        299.9166666666667,\n        0.100021510002151,\n        165.675,\n        682.4,\n        162.33055555555555,\n        30.558333333333334,\n      ],\n    },\n  ],\n  meta: { preferredVisualisationType: 'nodeGraph' as PreferredVisualisationType },\n  name: 'edges',\n};\n","import {\n  ArrayVector,\n  FieldColorModeId,\n  FieldDTO,\n  FieldType,\n  MutableDataFrame,\n  NodeGraphDataFrameFieldNames,\n} from '@grafana/data';\nimport { nodes, edges } from './testData/serviceMapResponse';\n\nexport function generateRandomNodes(count = 10) {\n  const nodes = [];\n\n  const root = {\n    id: '0',\n    title: 'root',\n    subTitle: 'client',\n    success: 1,\n    error: 0,\n    stat1: Math.random(),\n    stat2: Math.random(),\n    edges: [] as any[],\n  };\n  nodes.push(root);\n  const nodesWithoutMaxEdges = [root];\n\n  const maxEdges = 3;\n\n  for (let i = 1; i < count; i++) {\n    const node = makeRandomNode(i);\n    nodes.push(node);\n    const sourceIndex = Math.floor(Math.random() * Math.floor(nodesWithoutMaxEdges.length - 1));\n    const source = nodesWithoutMaxEdges[sourceIndex];\n    source.edges.push(node.id);\n    if (source.edges.length >= maxEdges) {\n      nodesWithoutMaxEdges.splice(sourceIndex, 1);\n    }\n    nodesWithoutMaxEdges.push(node);\n  }\n\n  // Add some random edges to create possible cycle\n  const additionalEdges = Math.floor(count / 2);\n  for (let i = 0; i <= additionalEdges; i++) {\n    const sourceIndex = Math.floor(Math.random() * Math.floor(nodes.length - 1));\n    const targetIndex = Math.floor(Math.random() * Math.floor(nodes.length - 1));\n    if (sourceIndex === targetIndex || nodes[sourceIndex].id === '0' || nodes[sourceIndex].id === '0') {\n      continue;\n    }\n\n    nodes[sourceIndex].edges.push(nodes[sourceIndex].id);\n  }\n\n  const nodeFields: Record<string, Omit<FieldDTO, 'name'> & { values: ArrayVector }> = {\n    [NodeGraphDataFrameFieldNames.id]: {\n      values: new ArrayVector(),\n      type: FieldType.string,\n    },\n    [NodeGraphDataFrameFieldNames.title]: {\n      values: new ArrayVector(),\n      type: FieldType.string,\n    },\n    [NodeGraphDataFrameFieldNames.subTitle]: {\n      values: new ArrayVector(),\n      type: FieldType.string,\n    },\n    [NodeGraphDataFrameFieldNames.mainStat]: {\n      values: new ArrayVector(),\n      type: FieldType.number,\n      config: { displayName: 'Transactions per second' },\n    },\n    [NodeGraphDataFrameFieldNames.secondaryStat]: {\n      values: new ArrayVector(),\n      type: FieldType.number,\n      config: { displayName: 'Average duration' },\n    },\n    [NodeGraphDataFrameFieldNames.arc + 'success']: {\n      values: new ArrayVector(),\n      type: FieldType.number,\n      config: { color: { fixedColor: 'green', mode: FieldColorModeId.Fixed }, displayName: 'Success' },\n    },\n    [NodeGraphDataFrameFieldNames.arc + 'errors']: {\n      values: new ArrayVector(),\n      type: FieldType.number,\n      config: { color: { fixedColor: 'red', mode: FieldColorModeId.Fixed }, displayName: 'Errors' },\n    },\n  };\n\n  const nodeFrame = new MutableDataFrame({\n    name: 'nodes',\n    fields: Object.keys(nodeFields).map((key) => ({\n      ...nodeFields[key],\n      name: key,\n    })),\n    meta: { preferredVisualisationType: 'nodeGraph' },\n  });\n\n  const edgeFields: any = {\n    [NodeGraphDataFrameFieldNames.id]: {\n      values: new ArrayVector(),\n      type: FieldType.string,\n    },\n    [NodeGraphDataFrameFieldNames.source]: {\n      values: new ArrayVector(),\n      type: FieldType.string,\n    },\n    [NodeGraphDataFrameFieldNames.target]: {\n      values: new ArrayVector(),\n      type: FieldType.string,\n    },\n  };\n\n  const edgesFrame = new MutableDataFrame({\n    name: 'edges',\n    fields: Object.keys(edgeFields).map((key) => ({\n      ...edgeFields[key],\n      name: key,\n    })),\n    meta: { preferredVisualisationType: 'nodeGraph' },\n  });\n\n  const edgesSet = new Set();\n  for (const node of nodes) {\n    nodeFields.id.values.add(node.id);\n    nodeFields.title.values.add(node.title);\n    nodeFields.subTitle.values.add(node.subTitle);\n    nodeFields.mainStat.values.add(node.stat1);\n    nodeFields.secondaryStat.values.add(node.stat2);\n    nodeFields.arc__success.values.add(node.success);\n    nodeFields.arc__errors.values.add(node.error);\n    for (const edge of node.edges) {\n      const id = `${node.id}--${edge}`;\n      // We can have duplicate edges when we added some more by random\n      if (edgesSet.has(id)) {\n        continue;\n      }\n      edgesSet.add(id);\n      edgeFields.id.values.add(`${node.id}--${edge}`);\n      edgeFields.source.values.add(node.id);\n      edgeFields.target.values.add(edge);\n    }\n  }\n\n  return [nodeFrame, edgesFrame];\n}\n\nfunction makeRandomNode(index: number) {\n  const success = Math.random();\n  const error = 1 - success;\n  return {\n    id: index.toString(),\n    title: `service:${index}`,\n    subTitle: 'service',\n    success,\n    error,\n    stat1: Math.random(),\n    stat2: Math.random(),\n    edges: [],\n  };\n}\n\nexport function savedNodesResponse(): any {\n  return [new MutableDataFrame(nodes), new MutableDataFrame(edges)];\n}\n","import { from, merge, Observable, of } from 'rxjs';\nimport { delay } from 'rxjs/operators';\n\nimport {\n  AnnotationEvent,\n  ArrayDataFrame,\n  DataFrame,\n  DataQueryRequest,\n  DataQueryResponse,\n  DataSourceInstanceSettings,\n  DataTopic,\n  LiveChannelScope,\n  LoadingState,\n  TimeRange,\n  ScopedVars,\n} from '@grafana/data';\nimport { Scenario, TestDataQuery } from './types';\nimport { DataSourceWithBackend, getBackendSrv, getGrafanaLiveSrv, getTemplateSrv, TemplateSrv } from '@grafana/runtime';\nimport { queryMetricTree } from './metricTree';\nimport { runStream } from './runStreams';\nimport { getSearchFilterScopedVar } from 'app/features/variables/utils';\nimport { TestDataVariableSupport } from './variables';\nimport { generateRandomNodes, savedNodesResponse } from './nodeGraphUtils';\n\nexport class TestDataDataSource extends DataSourceWithBackend<TestDataQuery> {\n  scenariosCache?: Promise<Scenario[]>;\n\n  constructor(\n    instanceSettings: DataSourceInstanceSettings,\n    private readonly templateSrv: TemplateSrv = getTemplateSrv()\n  ) {\n    super(instanceSettings);\n    this.variables = new TestDataVariableSupport();\n  }\n\n  query(options: DataQueryRequest<TestDataQuery>): Observable<DataQueryResponse> {\n    const backendQueries: TestDataQuery[] = [];\n    const streams: Array<Observable<DataQueryResponse>> = [];\n\n    // Start streams and prepare queries\n    for (const target of options.targets) {\n      if (target.hide) {\n        continue;\n      }\n\n      this.resolveTemplateVariables(target, options.scopedVars);\n\n      switch (target.scenarioId) {\n        case 'live':\n          streams.push(runGrafanaLiveQuery(target, options));\n          break;\n        case 'streaming_client':\n          streams.push(runStream(target, options));\n          break;\n        case 'grafana_api':\n          streams.push(runGrafanaAPI(target, options));\n          break;\n        case 'annotations':\n          streams.push(this.annotationDataTopicTest(target, options));\n          break;\n        case 'variables-query':\n          streams.push(this.variablesQuery(target, options));\n          break;\n        case 'node_graph':\n          streams.push(this.nodesQuery(target, options));\n          break;\n\n        // Unusable since 7, removed in 8\n        case 'manual_entry': {\n          let csvContent = 'Time,Value\\n';\n          if ((target as any).points) {\n            for (const point of (target as any).points) {\n              csvContent += `${point[1]},${point[0]}\\n`;\n            }\n          }\n          target.scenarioId = 'csv_content';\n          target.csvContent = csvContent;\n        }\n\n        default:\n          if (target.alias) {\n            target.alias = this.templateSrv.replace(target.alias, options.scopedVars);\n          }\n\n          backendQueries.push(target);\n      }\n    }\n\n    if (backendQueries.length) {\n      const backendOpts = {\n        ...options,\n        targets: backendQueries,\n      };\n      streams.push(super.query(backendOpts));\n    }\n\n    if (streams.length === 0) {\n      return of({ data: [] });\n    }\n\n    return merge(...streams);\n  }\n\n  resolveTemplateVariables(query: TestDataQuery, scopedVars: ScopedVars) {\n    query.labels = this.templateSrv.replace(query.labels!, scopedVars);\n  }\n\n  annotationDataTopicTest(target: TestDataQuery, req: DataQueryRequest<TestDataQuery>): Observable<DataQueryResponse> {\n    const events = this.buildFakeAnnotationEvents(req.range, 10);\n    const dataFrame = new ArrayDataFrame(events);\n    dataFrame.meta = { dataTopic: DataTopic.Annotations };\n\n    return of({ key: target.refId, data: [dataFrame] }).pipe(delay(100));\n  }\n\n  buildFakeAnnotationEvents(range: TimeRange, count: number): AnnotationEvent[] {\n    let timeWalker = range.from.valueOf();\n    const to = range.to.valueOf();\n    const events = [];\n    const step = (to - timeWalker) / count;\n\n    for (let i = 0; i < count; i++) {\n      events.push({\n        time: timeWalker,\n        text: 'This is the text, <a href=\"https://grafana.com\">Grafana.com</a>',\n        tags: ['text', 'server'],\n      });\n      timeWalker += step;\n    }\n\n    return events;\n  }\n\n  annotationQuery(options: any) {\n    return Promise.resolve(this.buildFakeAnnotationEvents(options.range, 10));\n  }\n\n  getQueryDisplayText(query: TestDataQuery) {\n    if (query.alias) {\n      return query.scenarioId + ' as ' + query.alias;\n    }\n    return query.scenarioId;\n  }\n\n  testDatasource() {\n    return Promise.resolve({\n      status: 'success',\n      message: 'Data source is working',\n    });\n  }\n\n  getScenarios(): Promise<Scenario[]> {\n    if (!this.scenariosCache) {\n      this.scenariosCache = this.getResource('scenarios');\n    }\n\n    return this.scenariosCache;\n  }\n\n  variablesQuery(target: TestDataQuery, options: DataQueryRequest<TestDataQuery>): Observable<DataQueryResponse> {\n    const query = target.stringInput ?? '';\n    const interpolatedQuery = this.templateSrv.replace(\n      query,\n      getSearchFilterScopedVar({ query, wildcardChar: '*', options: options.scopedVars })\n    );\n    const children = queryMetricTree(interpolatedQuery);\n    const items = children.map((item) => ({ value: item.name, text: item.name }));\n    const dataFrame = new ArrayDataFrame(items);\n\n    return of({ data: [dataFrame] }).pipe(delay(100));\n  }\n\n  nodesQuery(target: TestDataQuery, options: DataQueryRequest<TestDataQuery>): Observable<DataQueryResponse> {\n    const type = target.nodes?.type || 'random';\n    let frames: DataFrame[];\n    switch (type) {\n      case 'random':\n        frames = generateRandomNodes(target.nodes?.count);\n        break;\n      case 'response':\n        frames = savedNodesResponse();\n        break;\n      default:\n        throw new Error(`Unknown node_graph sub type ${type}`);\n    }\n\n    return of({ data: frames }).pipe(delay(100));\n  }\n}\n\nfunction runGrafanaAPI(target: TestDataQuery, req: DataQueryRequest<TestDataQuery>): Observable<DataQueryResponse> {\n  const url = `/api/${target.stringInput}`;\n  return from(\n    getBackendSrv()\n      .get(url)\n      .then((res) => {\n        const frame = new ArrayDataFrame(res);\n        return {\n          state: LoadingState.Done,\n          data: [frame],\n        };\n      })\n  );\n}\n\nlet liveQueryCounter = 1000;\n\nfunction runGrafanaLiveQuery(\n  target: TestDataQuery,\n  req: DataQueryRequest<TestDataQuery>\n): Observable<DataQueryResponse> {\n  if (!target.channel) {\n    throw new Error(`Missing channel config`);\n  }\n  return getGrafanaLiveSrv().getDataStream({\n    addr: {\n      scope: LiveChannelScope.Plugin,\n      namespace: 'testdata',\n      path: target.channel,\n    },\n    key: `testStream.${liveQueryCounter++}`,\n  });\n}\n","// Libraries\nimport React, { PureComponent } from 'react';\nimport { LinkButton } from '@grafana/ui';\n\n// Types\nimport { PluginConfigPageProps, DataSourcePluginMeta, DataSourceJsonData } from '@grafana/data';\n\ninterface Props extends PluginConfigPageProps<DataSourcePluginMeta<DataSourceJsonData>> {}\n\nexport class TestInfoTab extends PureComponent<Props> {\n  constructor(props: Props) {\n    super(props);\n  }\n\n  render() {\n    return (\n      <div>\n        See github for more information about setting up a reproducible test environment.\n        <br />\n        <br />\n        <LinkButton\n          variant=\"secondary\"\n          href=\"https://github.com/grafana/grafana/tree/main/devenv\"\n          target=\"_blank\"\n          rel=\"noopener noreferrer\"\n        >\n          GitHub\n        </LinkButton>\n        <br />\n      </div>\n    );\n  }\n}\n","// Libraries\nimport React, { PureComponent } from 'react';\n\nimport { DataSourcePluginOptionsEditorProps } from '@grafana/data';\n\ntype Props = DataSourcePluginOptionsEditorProps<any>;\n\n/**\n * Empty Config Editor -- settings to save\n */\nexport class ConfigEditor extends PureComponent<Props> {\n  render() {\n    return <div />;\n  }\n}\n","import React, { ChangeEvent } from 'react';\nimport { InlineField, InlineFieldRow, Input, Select } from '@grafana/ui';\nimport { SelectableValue } from '@grafana/data';\nimport { EditorProps } from '../QueryEditor';\nimport { StreamingQuery } from '../types';\n\nconst streamingClientFields = [\n  { label: 'Speed (ms)', id: 'speed', placeholder: 'value', min: 10, step: 10 },\n  { label: 'Spread', id: 'spread', placeholder: 'value', min: 0.5, step: 0.1 },\n  { label: 'Noise', id: 'noise', placeholder: 'value', min: 0, step: 0.1 },\n  { label: 'Bands', id: 'bands', placeholder: 'bands', min: 0, step: 1 },\n];\n\nconst types = [\n  { value: 'signal', label: 'Signal' },\n  { value: 'logs', label: 'Logs' },\n  { value: 'fetch', label: 'Fetch' },\n];\n\nexport const StreamingClientEditor = ({ onChange, query }: EditorProps) => {\n  const onSelectChange = ({ value }: SelectableValue) => {\n    onChange({ target: { name: 'type', value } });\n  };\n\n  // Convert values to numbers before saving\n  const onInputChange = (e: ChangeEvent<HTMLInputElement>) => {\n    const { name, value } = e.target;\n    onChange({ target: { name, value: Number(value) } });\n  };\n\n  return (\n    <InlineFieldRow>\n      <InlineField label=\"Type\" labelWidth={14}>\n        <Select menuShouldPortal width={32} onChange={onSelectChange} defaultValue={types[0]} options={types} />\n      </InlineField>\n      {query?.stream?.type === 'signal' &&\n        streamingClientFields.map(({ label, id, min, step, placeholder }) => {\n          return (\n            <InlineField label={label} labelWidth={14} key={id}>\n              <Input\n                width={32}\n                type=\"number\"\n                id={`stream.${id}-${query.refId}`}\n                name={id}\n                min={min}\n                step={step}\n                value={query.stream?.[id as keyof StreamingQuery]}\n                placeholder={placeholder}\n                onChange={onInputChange}\n              />\n            </InlineField>\n          );\n        })}\n\n      {query?.stream?.type === 'fetch' && (\n        <InlineField label=\"URL\" labelWidth={14} grow>\n          <Input\n            type=\"text\"\n            name=\"url\"\n            id={`stream.url-${query.refId}`}\n            value={query?.stream?.url}\n            placeholder=\"Fetch URL\"\n            onChange={onChange}\n          />\n        </InlineField>\n      )}\n    </InlineFieldRow>\n  );\n};\n","import React from 'react';\nimport { InlineField, InlineFieldRow, Input } from '@grafana/ui';\nimport { selectors } from '@grafana/e2e-selectors';\nimport { EditorProps } from '../QueryEditor';\nimport { TestDataQuery } from '../types';\n\nconst randomWalkFields = [\n  { label: 'Series count', id: 'seriesCount', placeholder: '1', min: 1, step: 1 },\n  { label: 'Start value', id: 'startValue', placeholder: 'auto', step: 1 },\n  { label: 'Spread', id: 'spread', placeholder: '1', min: 0.5, step: 0.1 },\n  { label: 'Noise', id: 'noise', placeholder: '0', min: 0, step: 0.1 },\n  { label: 'Min', id: 'min', placeholder: 'none', step: 0.1 },\n  { label: 'Max', id: 'max', placeholder: 'none', step: 0.1 },\n];\n\nconst testSelectors = selectors.components.DataSource.TestData.QueryTab;\ntype Selector = 'max' | 'min' | 'noise' | 'seriesCount' | 'spread' | 'startValue';\n\nexport const RandomWalkEditor = ({ onChange, query }: EditorProps) => {\n  return (\n    <InlineFieldRow>\n      {randomWalkFields.map(({ label, id, min, step, placeholder }) => {\n        const selector = testSelectors?.[id as Selector];\n        return (\n          <InlineField label={label} labelWidth={14} key={id} aria-label={selector}>\n            <Input\n              width={32}\n              name={id}\n              type=\"number\"\n              id={`randomWalk-${id}-${query.refId}`}\n              min={min}\n              step={step}\n              value={(query as any)[id as keyof TestDataQuery] || placeholder}\n              placeholder={placeholder}\n              onChange={onChange}\n            />\n          </InlineField>\n        );\n      })}\n    </InlineFieldRow>\n  );\n};\n","import React, { ChangeEvent } from 'react';\nimport { EditorProps } from '../QueryEditor';\nimport { InlineField, InlineFieldRow, Input } from '@grafana/ui';\nimport { PulseWaveQuery } from '../types';\n\nconst fields = [\n  { label: 'Step', id: 'timeStep', placeholder: '60', tooltip: 'The number of seconds between datapoints.' },\n  {\n    label: 'On Count',\n    id: 'onCount',\n    placeholder: '3',\n    tooltip: 'The number of values within a cycle, at the start of the cycle, that should have the onValue.',\n  },\n  { label: 'Off Count', id: 'offCount', placeholder: '6', tooltip: 'The number of offValues within the cycle.' },\n  {\n    label: 'On Value',\n    id: 'onValue',\n    placeholder: '1',\n    tooltip: 'The value for \"on values\", may be an int, float, or null.',\n  },\n  {\n    label: 'Off Value',\n    id: 'offValue',\n    placeholder: '1',\n    tooltip: 'The value for \"off values\", may be a int, float, or null.',\n  },\n];\n\nexport const PredictablePulseEditor = ({ onChange, query }: EditorProps) => {\n  // Convert values to numbers before saving\n  const onInputChange = (e: ChangeEvent<HTMLInputElement>) => {\n    const { name, value } = e.target;\n\n    onChange({ target: { name, value: Number(value) } });\n  };\n\n  return (\n    <InlineFieldRow>\n      {fields.map(({ label, id, placeholder, tooltip }) => {\n        return (\n          <InlineField label={label} labelWidth={14} key={id} tooltip={tooltip}>\n            <Input\n              width={32}\n              type=\"number\"\n              name={id}\n              id={`pulseWave.${id}-${query.refId}`}\n              value={query.pulseWave?.[id as keyof PulseWaveQuery]}\n              placeholder={placeholder}\n              onChange={onInputChange}\n            />\n          </InlineField>\n        );\n      })}\n    </InlineFieldRow>\n  );\n};\n","import { CSVWave, TestDataQuery } from './types';\n\nexport const defaultPulseQuery: any = {\n  timeStep: 60,\n  onCount: 3,\n  onValue: 2,\n  offCount: 3,\n  offValue: 1,\n};\n\nexport const defaultCSVWaveQuery: CSVWave[] = [\n  {\n    timeStep: 60,\n    valuesCSV: '0,0,2,2,1,1',\n  },\n];\n\nexport const defaultQuery: TestDataQuery = {\n  scenarioId: 'random_walk',\n  refId: '',\n};\n","import React, { ChangeEvent, PureComponent } from 'react';\nimport { Button, InlineField, InlineFieldRow, Input } from '@grafana/ui';\nimport { CSVWave } from '../types';\nimport { defaultCSVWaveQuery } from '../constants';\n\ninterface WavesProps {\n  waves?: CSVWave[];\n  onChange: (waves: CSVWave[]) => void;\n}\n\ninterface WaveProps {\n  wave: CSVWave;\n  index: number;\n  last: boolean;\n  onChange: (index: number, wave?: CSVWave) => void;\n  onAdd: () => void;\n}\n\nclass CSVWaveEditor extends PureComponent<WaveProps> {\n  onFieldChange = (field: keyof CSVWave) => (e: ChangeEvent<HTMLInputElement>) => {\n    const { value } = e.target as HTMLInputElement;\n\n    this.props.onChange(this.props.index, {\n      ...this.props.wave,\n      [field]: value,\n    });\n  };\n\n  onNameChange = this.onFieldChange('name');\n  onLabelsChange = this.onFieldChange('labels');\n  onCSVChange = this.onFieldChange('valuesCSV');\n  onTimeStepChange = (e: ChangeEvent<HTMLInputElement>) => {\n    const timeStep = e.target.valueAsNumber;\n    this.props.onChange(this.props.index, {\n      ...this.props.wave,\n      timeStep,\n    });\n  };\n\n  render() {\n    const { wave, last } = this.props;\n    let action = this.props.onAdd;\n    if (!last) {\n      action = () => {\n        this.props.onChange(this.props.index, undefined); // remove\n      };\n    }\n\n    return (\n      <InlineFieldRow>\n        <InlineField\n          label={'Values'}\n          grow\n          tooltip=\"Comma separated values. Each value may be an int, float, or null and must not be empty. Whitespace and trailing commas are removed\"\n        >\n          <Input value={wave.valuesCSV} placeholder={'CSV values'} onChange={this.onCSVChange} autoFocus={true} />\n        </InlineField>\n        <InlineField label={'Step'} tooltip=\"The number of seconds between datapoints.\">\n          <Input value={wave.timeStep} type=\"number\" placeholder={'60'} width={6} onChange={this.onTimeStepChange} />\n        </InlineField>\n        <InlineField label={'Labels'}>\n          <Input value={wave.labels} placeholder={'labels'} width={12} onChange={this.onLabelsChange} />\n        </InlineField>\n        <InlineField label={'Name'}>\n          <Input value={wave.name} placeholder={'name'} width={10} onChange={this.onNameChange} />\n        </InlineField>\n        <Button icon={last ? 'plus' : 'minus'} variant=\"secondary\" onClick={action} />\n      </InlineFieldRow>\n    );\n  }\n}\n\nexport class CSVWavesEditor extends PureComponent<WavesProps> {\n  onChange = (index: number, wave?: CSVWave) => {\n    let waves = [...(this.props.waves ?? defaultCSVWaveQuery)];\n    if (wave) {\n      waves[index] = { ...wave };\n    } else {\n      // remove the element\n      waves.splice(index, 1);\n    }\n    this.props.onChange(waves);\n  };\n\n  onAdd = () => {\n    const waves = [...(this.props.waves ?? defaultCSVWaveQuery)];\n    waves.push({ ...defaultCSVWaveQuery[0] });\n    this.props.onChange(waves);\n  };\n\n  render() {\n    let waves = this.props.waves ?? defaultCSVWaveQuery;\n    if (!waves.length) {\n      waves = defaultCSVWaveQuery;\n    }\n\n    return (\n      <>\n        {waves.map((wave, index) => (\n          <CSVWaveEditor\n            key={`${index}/${wave.valuesCSV}`}\n            wave={wave}\n            index={index}\n            onAdd={this.onAdd}\n            onChange={this.onChange}\n            last={index === waves.length - 1}\n          />\n        ))}\n      </>\n    );\n  }\n}\n","import React from 'react';\nimport { InlineField, InlineFieldRow, Select } from '@grafana/ui';\nimport { SelectableValue } from '@grafana/data';\nimport { EditorProps } from '../QueryEditor';\n\nconst liveTestDataChannels = [\n  {\n    label: 'random-2s-stream',\n    value: 'random-2s-stream',\n    description: 'Random stream with points every 2s',\n  },\n  {\n    label: 'random-flakey-stream',\n    value: 'random-flakey-stream',\n    description: 'Stream that returns data in random intervals',\n  },\n  {\n    label: 'random-20Hz-stream',\n    value: 'random-20Hz-stream',\n    description: 'Random stream with points in 20Hz',\n  },\n];\n\nexport const GrafanaLiveEditor = ({ onChange, query }: EditorProps) => {\n  const onChannelChange = ({ value }: SelectableValue<string>) => {\n    onChange({ ...query, channel: value });\n  };\n\n  return (\n    <InlineFieldRow>\n      <InlineField label=\"Channel\" labelWidth={14}>\n        <Select\n          menuShouldPortal\n          width={32}\n          onChange={onChannelChange}\n          placeholder=\"Select channel\"\n          options={liveTestDataChannels}\n          value={liveTestDataChannels.find((f) => f.value === query.channel)}\n        />\n      </InlineField>\n    </InlineFieldRow>\n  );\n};\n","import React from 'react';\nimport { Input, InlineFieldRow, InlineField, Select } from '@grafana/ui';\nimport { NodesQuery, TestDataQuery } from '../types';\n\nexport interface Props {\n  onChange: (value: NodesQuery) => void;\n  query: TestDataQuery;\n}\nexport function NodeGraphEditor({ query, onChange }: Props) {\n  const type = query.nodes?.type || 'random';\n  return (\n    <InlineFieldRow>\n      <InlineField label=\"Data type\" labelWidth={14}>\n        <Select<NodesQuery['type']>\n          options={options.map((o) => ({\n            label: o,\n            value: o,\n          }))}\n          value={options.find((item) => item === type)}\n          onChange={(value) => onChange({ ...query.nodes, type: value.value! })}\n          width={32}\n        />\n      </InlineField>\n      {type === 'random' && (\n        <InlineField label=\"Count\" labelWidth={14}>\n          <Input\n            type=\"number\"\n            name=\"count\"\n            value={query.nodes?.count}\n            width={32}\n            onChange={(e) =>\n              onChange({ ...query.nodes, count: e.currentTarget.value ? parseInt(e.currentTarget.value, 10) : 0 })\n            }\n            placeholder=\"10\"\n          />\n        </InlineField>\n      )}\n    </InlineFieldRow>\n  );\n}\n\nconst options: Array<NodesQuery['type']> = ['random', 'response'];\n","import React from 'react';\nimport { InlineField, InlineFieldRow, Select } from '@grafana/ui';\nimport { SelectableValue } from '@grafana/data';\nimport { EditorProps } from '../QueryEditor';\n\nexport const CSVFileEditor = ({ onChange, query }: EditorProps) => {\n  const onChangeFileName = ({ value }: SelectableValue<string>) => {\n    onChange({ ...query, csvFileName: value });\n  };\n\n  const files = [\n    'flight_info_by_state.csv',\n    'population_by_state.csv',\n    'gdp_per_capita.csv',\n    'js_libraries.csv',\n    'weight_height.csv',\n    'browser_marketshare.csv',\n  ].map((name) => ({ label: name, value: name }));\n\n  return (\n    <InlineFieldRow>\n      <InlineField label=\"File\" labelWidth={14}>\n        <Select\n          menuShouldPortal\n          width={32}\n          onChange={onChangeFileName}\n          placeholder=\"Select csv file\"\n          options={files}\n          value={files.find((f) => f.value === query.csvFileName)}\n        />\n      </InlineField>\n    </InlineFieldRow>\n  );\n};\n","import React, { ChangeEvent } from 'react';\nimport { InlineField, TextArea } from '@grafana/ui';\nimport { EditorProps } from '../QueryEditor';\n\nexport const CSVContentEditor = ({ onChange, query }: EditorProps) => {\n  const onContent = (e: ChangeEvent<HTMLTextAreaElement>) => {\n    onChange({ ...query, csvContent: e.currentTarget.value });\n  };\n\n  return (\n    <InlineField label=\"CSV\" labelWidth={14}>\n      <TextArea\n        width=\"100%\"\n        rows={10}\n        onBlur={onContent}\n        placeholder=\"CSV content\"\n        defaultValue={query.csvContent ?? ''}\n      />\n    </InlineField>\n  );\n};\n","import React from 'react';\nimport { InlineFieldRow, InlineField, Select, Input } from '@grafana/ui';\nimport { SelectableValue } from '@grafana/data';\nimport { USAQuery } from '../types';\n\nexport interface Props {\n  onChange: (value: USAQuery) => void;\n  query: USAQuery;\n}\n\nexport function USAQueryEditor({ query, onChange }: Props) {\n  return (\n    <>\n      <InlineFieldRow>\n        <InlineField labelWidth={14} label=\"Mode\">\n          <Select\n            menuShouldPortal\n            options={usaQueryModes}\n            onChange={(v) => {\n              onChange({ ...query, mode: v.value });\n            }}\n            width={32}\n            value={usaQueryModes.find((ep) => ep.value === query.mode)}\n          />\n        </InlineField>\n        <InlineField label=\"Period\">\n          <Input\n            value={query.period}\n            placeholder={'30m'}\n            onChange={(v) => {\n              onChange({ ...query, period: v.currentTarget.value });\n            }}\n          />\n        </InlineField>\n      </InlineFieldRow>\n      <InlineFieldRow>\n        <InlineField labelWidth={14} label=\"Fields\">\n          <Select\n            menuShouldPortal\n            options={fieldNames}\n            onChange={(vals: SelectableValue[]) => {\n              onChange({ ...query, fields: vals.map((v) => v.value) });\n            }}\n            width={32}\n            isMulti={true}\n            placeholder=\"all\"\n            value={query.fields}\n          />\n        </InlineField>\n        <InlineField label=\"States\" grow>\n          <Select\n            menuShouldPortal\n            options={stateNames}\n            onChange={(vals: SelectableValue[]) => {\n              onChange({ ...query, states: vals.map((v) => v.value) });\n            }}\n            isMulti={true}\n            placeholder=\"all\"\n            value={query.states}\n          />\n        </InlineField>\n      </InlineFieldRow>\n    </>\n  );\n}\n\nexport const usaQueryModes = [\n  'values-as-rows',\n  'values-as-fields',\n  'values-as-labeled-fields',\n  'timeseries',\n  'timeseries-wide',\n].map((f) => ({ label: f, value: f }));\n\nexport const fieldNames = [\n  'foo',\n  'bar',\n  'baz', // all short\n].map((f) => ({ label: f, value: f }));\n\nexport const stateNames = [\n  'AL',\n  'AK',\n  'AZ',\n  'AR',\n  'CA',\n  'CO',\n  'CT',\n  'DE',\n  'DC',\n  'FL',\n  'GA',\n  'HI',\n  'ID',\n  'IL',\n  'IN',\n  'IA',\n  'KS',\n  'KY',\n  'LA',\n  'ME',\n  'MT',\n  'NE',\n  'NV',\n  'NH',\n  'NJ',\n  'NM',\n  'NY',\n  'NC',\n  'ND',\n  'OH',\n  'OK',\n  'OR',\n  'MD',\n  'MA',\n  'MI',\n  'MN',\n  'MS',\n  'MO',\n  'PA',\n  'RI',\n  'SC',\n  'SD',\n  'TN',\n  'TX',\n  'UT',\n  'VT',\n  'VA',\n  'WA',\n  'WV',\n  'WI',\n  'WY',\n].map((f) => ({ label: f, value: f }));\n","// Libraries\nimport React, { ChangeEvent, FormEvent, useMemo } from 'react';\nimport { useAsync } from 'react-use';\n\n// Components\nimport { selectors as editorSelectors } from '@grafana/e2e-selectors';\nimport { Input, InlineFieldRow, InlineField, Select, TextArea, InlineSwitch } from '@grafana/ui';\nimport { QueryEditorProps, SelectableValue } from '@grafana/data';\nimport { StreamingClientEditor, RandomWalkEditor } from './components';\n\n// Types\nimport { TestDataDataSource } from './datasource';\nimport { TestDataQuery, Scenario, NodesQuery, CSVWave, USAQuery } from './types';\nimport { PredictablePulseEditor } from './components/PredictablePulseEditor';\nimport { CSVWavesEditor } from './components/CSVWaveEditor';\nimport { defaultCSVWaveQuery, defaultPulseQuery, defaultQuery } from './constants';\nimport { GrafanaLiveEditor } from './components/GrafanaLiveEditor';\nimport { NodeGraphEditor } from './components/NodeGraphEditor';\nimport { defaultStreamQuery } from './runStreams';\nimport { CSVFileEditor } from './components/CSVFileEditor';\nimport { CSVContentEditor } from './components/CSVContentEditor';\nimport { USAQueryEditor, usaQueryModes } from './components/USAQueryEditor';\n\nconst showLabelsFor = ['random_walk', 'predictable_pulse'];\nconst endpoints = [\n  { value: 'datasources', label: 'Data Sources' },\n  { value: 'search', label: 'Search' },\n  { value: 'annotations', label: 'Annotations' },\n];\n\nconst selectors = editorSelectors.components.DataSource.TestData.QueryTab;\n\nexport interface EditorProps {\n  onChange: (value: any) => void;\n  query: TestDataQuery;\n}\n\nexport type Props = QueryEditorProps<TestDataDataSource, TestDataQuery>;\n\nexport const QueryEditor = ({ query, datasource, onChange, onRunQuery }: Props) => {\n  query = { ...defaultQuery, ...query };\n\n  const { loading, value: scenarioList } = useAsync<Scenario[]>(async () => {\n    // migrate manual_entry (unusable since 7, removed in 8)\n    if (query.scenarioId === 'manual_entry' && (query as any).points) {\n      let csvContent = 'Time,Value\\n';\n      for (const point of (query as any).points) {\n        csvContent += `${point[1]},${point[0]}\\n`;\n      }\n      onChange({\n        refId: query.refId,\n        datasource: query.datasource,\n        scenarioId: 'csv_content',\n        csvContent,\n      });\n    }\n\n    return datasource.getScenarios();\n  }, []);\n\n  const onUpdate = (query: TestDataQuery) => {\n    onChange(query);\n    onRunQuery();\n  };\n\n  const currentScenario = useMemo(() => scenarioList?.find((scenario) => scenario.id === query.scenarioId), [\n    scenarioList,\n    query,\n  ]);\n  const scenarioId = currentScenario?.id;\n\n  const onScenarioChange = (item: SelectableValue<string>) => {\n    const scenario = scenarioList?.find((sc) => sc.id === item.value);\n\n    if (!scenario) {\n      return;\n    }\n\n    // Clear model from existing props that belong to other scenarios\n    const update: TestDataQuery = {\n      scenarioId: item.value!,\n      refId: query.refId,\n      alias: query.alias,\n    };\n\n    if (scenario.stringInput) {\n      update.stringInput = scenario.stringInput;\n    }\n\n    switch (scenario.id) {\n      case 'grafana_api':\n        update.stringInput = 'datasources';\n        break;\n      case 'streaming_client':\n        update.stream = defaultStreamQuery;\n        break;\n      case 'live':\n        update.channel = 'random-2s-stream'; // default stream\n        break;\n      case 'predictable_pulse':\n        update.pulseWave = defaultPulseQuery;\n        break;\n      case 'predictable_csv_wave':\n        update.csvWave = defaultCSVWaveQuery;\n        break;\n      case 'usa':\n        update.usa = {\n          mode: usaQueryModes[0].value,\n        };\n    }\n\n    onUpdate(update);\n  };\n\n  const onInputChange = (e: FormEvent<HTMLInputElement | HTMLTextAreaElement>) => {\n    const { name, value, type } = e.target as HTMLInputElement | HTMLTextAreaElement;\n    let newValue: any = value;\n\n    if (type === 'number') {\n      newValue = Number(value);\n    }\n\n    if (name === 'levelColumn') {\n      newValue = (e.target as HTMLInputElement).checked;\n    }\n\n    onUpdate({ ...query, [name]: newValue });\n  };\n\n  const onFieldChange = (field: string) => (e: ChangeEvent<HTMLInputElement>) => {\n    const { name, value, type } = e.target as HTMLInputElement;\n    let newValue: any = value;\n\n    if (type === 'number') {\n      newValue = Number(value);\n    }\n\n    onUpdate({ ...query, [field]: { ...(query as any)[field], [name]: newValue } });\n  };\n\n  const onEndPointChange = ({ value }: SelectableValue) => {\n    onUpdate({ ...query, stringInput: value });\n  };\n\n  const onStreamClientChange = onFieldChange('stream');\n  const onPulseWaveChange = onFieldChange('pulseWave');\n  const onUSAStatsChange = (usa?: USAQuery) => {\n    onUpdate({ ...query, usa });\n  };\n\n  const onCSVWaveChange = (csvWave?: CSVWave[]) => {\n    onUpdate({ ...query, csvWave });\n  };\n\n  const options = useMemo(\n    () =>\n      (scenarioList || [])\n        .map((item) => ({ label: item.name, value: item.id }))\n        .sort((a, b) => a.label.localeCompare(b.label)),\n    [scenarioList]\n  );\n  const showLabels = useMemo(() => showLabelsFor.includes(query.scenarioId), [query]);\n\n  if (loading) {\n    return null;\n  }\n\n  return (\n    <>\n      <InlineFieldRow aria-label={selectors.scenarioSelectContainer}>\n        <InlineField labelWidth={14} label=\"Scenario\">\n          <Select\n            menuShouldPortal\n            options={options}\n            value={options.find((item) => item.value === query.scenarioId)}\n            onChange={onScenarioChange}\n            width={32}\n          />\n        </InlineField>\n        {currentScenario?.stringInput && (\n          <InlineField label=\"String Input\">\n            <Input\n              width={32}\n              id={`stringInput-${query.refId}`}\n              name=\"stringInput\"\n              placeholder={query.stringInput}\n              value={query.stringInput}\n              onChange={onInputChange}\n            />\n          </InlineField>\n        )}\n        <InlineField label=\"Alias\" labelWidth={14}>\n          <Input\n            width={32}\n            id={`alias-${query.refId}`}\n            type=\"text\"\n            placeholder=\"optional\"\n            pattern='[^<>&\\\\\"]+'\n            name=\"alias\"\n            value={query.alias}\n            onChange={onInputChange}\n          />\n        </InlineField>\n        {showLabels && (\n          <InlineField\n            label=\"Labels\"\n            labelWidth={14}\n            tooltip={\n              <>\n                Set labels using a key=value syntax:\n                <br />\n                {`{ key = \"value\", key2 = \"value\" }`}\n                <br />\n                key=&quot;value&quot;, key2=&quot;value&quot;\n                <br />\n                key=value, key2=value\n                <br />\n              </>\n            }\n          >\n            <Input\n              width={32}\n              id={`labels-${query.refId}`}\n              name=\"labels\"\n              onChange={onInputChange}\n              value={query?.labels}\n              placeholder=\"key=value, key2=value2\"\n            />\n          </InlineField>\n        )}\n      </InlineFieldRow>\n\n      {scenarioId === 'random_walk' && <RandomWalkEditor onChange={onInputChange} query={query} />}\n      {scenarioId === 'streaming_client' && <StreamingClientEditor onChange={onStreamClientChange} query={query} />}\n      {scenarioId === 'live' && <GrafanaLiveEditor onChange={onUpdate} query={query} />}\n      {scenarioId === 'csv_file' && <CSVFileEditor onChange={onUpdate} query={query} />}\n      {scenarioId === 'csv_content' && <CSVContentEditor onChange={onUpdate} query={query} />}\n      {scenarioId === 'logs' && (\n        <InlineFieldRow>\n          <InlineField label=\"Lines\" labelWidth={14}>\n            <Input\n              type=\"number\"\n              name=\"lines\"\n              value={query.lines}\n              width={32}\n              onChange={onInputChange}\n              placeholder=\"10\"\n            />\n          </InlineField>\n          <InlineField label=\"Level\" labelWidth={14}>\n            <InlineSwitch onChange={onInputChange} name=\"levelColumn\" value={!!query.levelColumn} />\n          </InlineField>\n        </InlineFieldRow>\n      )}\n\n      {scenarioId === 'usa' && <USAQueryEditor onChange={onUSAStatsChange} query={query.usa ?? {}} />}\n      {scenarioId === 'grafana_api' && (\n        <InlineField labelWidth={14} label=\"Endpoint\">\n          <Select\n            menuShouldPortal\n            options={endpoints}\n            onChange={onEndPointChange}\n            width={32}\n            value={endpoints.find((ep) => ep.value === query.stringInput)}\n          />\n        </InlineField>\n      )}\n\n      {scenarioId === 'arrow' && (\n        <InlineField grow>\n          <TextArea\n            name=\"stringInput\"\n            value={query.stringInput}\n            rows={10}\n            placeholder=\"Copy base64 text data from query result\"\n            onChange={onInputChange}\n          />\n        </InlineField>\n      )}\n\n      {scenarioId === 'predictable_pulse' && <PredictablePulseEditor onChange={onPulseWaveChange} query={query} />}\n      {scenarioId === 'predictable_csv_wave' && <CSVWavesEditor onChange={onCSVWaveChange} waves={query.csvWave} />}\n      {scenarioId === 'node_graph' && (\n        <NodeGraphEditor onChange={(val: NodesQuery) => onChange({ ...query, nodes: val })} query={query} />\n      )}\n    </>\n  );\n};\n","import { DataSourcePlugin } from '@grafana/data';\nimport { TestDataDataSource } from './datasource';\nimport { TestInfoTab } from './TestInfoTab';\nimport { ConfigEditor } from './ConfigEditor';\nimport { QueryEditor } from './QueryEditor';\nimport { LiveMeasurementsSupport } from 'app/features/live/measurements/measurementsSupport';\n\nclass TestDataAnnotationsQueryCtrl {\n  annotation: any;\n  constructor() {}\n  static template = '<h2>Annotation scenario</h2>';\n}\n\nexport const plugin = new DataSourcePlugin(TestDataDataSource)\n  .setConfigEditor(ConfigEditor)\n  .setQueryEditor(QueryEditor)\n  .setChannelSupport(new LiveMeasurementsSupport())\n  .setAnnotationQueryCtrl(TestDataAnnotationsQueryCtrl)\n  .addConfigPage({\n    title: 'Setup',\n    icon: 'list-ul',\n    body: TestInfoTab,\n    id: 'setup',\n  });\n"],"sourceRoot":""}
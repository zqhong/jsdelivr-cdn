{"version":3,"sources":["webpack:///./public/app/features/teams/TeamList.tsx","webpack:///./public/app/features/teams/state/selectors.ts","webpack:///./public/app/features/teams/state/actions.ts","webpack:///./public/app/core/components/connectWithCleanUp.tsx","webpack:///./public/app/features/teams/state/navModel.ts"],"names":["TeamList","PureComponent","team","this","props","deleteTeam","id","value","setSearchQuery","componentDidMount","fetchTeams","loadTeams","renderTeam","editorsCanAdmin","signedInUser","permission","teamUrl","canDelete","isPermissionTeamAdmin","className","href","src","avatarUrl","name","email","memberCount","size","disabled","onConfirm","renderEmptyList","title","buttonIcon","buttonLink","buttonTitle","proTip","proTipLink","proTipLinkTitle","proTipTarget","renderTeamList","teams","searchQuery","isCanAdminAndViewer","orgRole","OrgRole","Viewer","disabledClass","newTeamHref","placeholder","onChange","onSearchQueryChange","style","width","map","renderList","teamsCount","hasFetched","render","navModel","Contents","isLoading","mapDispatchToProps","hot","module","connectWithCleanUp","state","getNavModel","navIndex","getTeams","getSearchQuery","getTeamsCount","config","contextSrv","user","getSearchMemberQuery","searchMemberQuery","getTeamGroups","groups","length","getTeam","currentTeamId","parseInt","regex","RegExp","filter","test","getTeamMembers","members","member","login","isSignedInUserTeamAdmin","userInMembers","find","m","userId","TeamPermissionLevel","Member","isAdmin","isGrafanaAdmin","Admin","userIsTeamAdmin","async","response","getBackendSrv","get","perpage","page","dispatch","teamsLoaded","loadTeam","teamLoaded","updateNavIndex","buildNavModel","loadTeamMembers","getStore","teamMembersLoaded","addTeamMember","post","removeTeamMember","delete","updateTeam","put","loadTeamGroups","teamGroupsLoaded","addTeamGroup","groupId","removeTeamGroup","encodeURIComponent","updateTeamMember","teamId","mapStateToProps","stateSelector","Component","ConnectedComponent","connect","ConnectedComponentWithCleanUp","useDispatch","useEffect","cleanUpAction","displayName","hoistNonReactStatics","img","subTitle","url","text","breadcrumbs","children","active","icon","licenseInfo","hasLicense","push","getTeamLoadingNav","pageName","main","node","child","indexOf"],"mappings":"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","file":"TeamList.62c612232a976d8836f5.js","sourcesContent":["import React, { PureComponent } from 'react';\nimport { hot } from 'react-hot-loader';\nimport Page from 'app/core/components/Page/Page';\nimport { DeleteButton, LinkButton } from '@grafana/ui';\nimport { NavModel } from '@grafana/data';\nimport EmptyListCTA from 'app/core/components/EmptyListCTA/EmptyListCTA';\nimport { OrgRole, StoreState, Team } from 'app/types';\nimport { deleteTeam, loadTeams } from './state/actions';\nimport { getSearchQuery, getTeams, getTeamsCount, isPermissionTeamAdmin } from './state/selectors';\nimport { getNavModel } from 'app/core/selectors/navModel';\nimport { FilterInput } from 'app/core/components/FilterInput/FilterInput';\nimport { config } from 'app/core/config';\nimport { contextSrv, User } from 'app/core/services/context_srv';\nimport { connectWithCleanUp } from '../../core/components/connectWithCleanUp';\nimport { setSearchQuery } from './state/reducers';\n\nexport interface Props {\n  navModel: NavModel;\n  teams: Team[];\n  searchQuery: string;\n  teamsCount: number;\n  hasFetched: boolean;\n  loadTeams: typeof loadTeams;\n  deleteTeam: typeof deleteTeam;\n  setSearchQuery: typeof setSearchQuery;\n  editorsCanAdmin: boolean;\n  signedInUser: User;\n}\n\nexport class TeamList extends PureComponent<Props, any> {\n  componentDidMount() {\n    this.fetchTeams();\n  }\n\n  async fetchTeams() {\n    await this.props.loadTeams();\n  }\n\n  deleteTeam = (team: Team) => {\n    this.props.deleteTeam(team.id);\n  };\n\n  onSearchQueryChange = (value: string) => {\n    this.props.setSearchQuery(value);\n  };\n\n  renderTeam(team: Team) {\n    const { editorsCanAdmin, signedInUser } = this.props;\n    const permission = team.permission;\n    const teamUrl = `org/teams/edit/${team.id}`;\n    const canDelete = isPermissionTeamAdmin({ permission, editorsCanAdmin, signedInUser });\n\n    return (\n      <tr key={team.id}>\n        <td className=\"width-4 text-center link-td\">\n          <a href={teamUrl}>\n            <img className=\"filter-table__avatar\" src={team.avatarUrl} />\n          </a>\n        </td>\n        <td className=\"link-td\">\n          <a href={teamUrl}>{team.name}</a>\n        </td>\n        <td className=\"link-td\">\n          <a href={teamUrl}>{team.email}</a>\n        </td>\n        <td className=\"link-td\">\n          <a href={teamUrl}>{team.memberCount}</a>\n        </td>\n        <td className=\"text-right\">\n          <DeleteButton size=\"sm\" disabled={!canDelete} onConfirm={() => this.deleteTeam(team)} />\n        </td>\n      </tr>\n    );\n  }\n\n  renderEmptyList() {\n    return (\n      <EmptyListCTA\n        title=\"You haven't created any teams yet.\"\n        buttonIcon=\"users-alt\"\n        buttonLink=\"org/teams/new\"\n        buttonTitle=\" New team\"\n        proTip=\"Assign folder and dashboard permissions to teams instead of users to ease administration.\"\n        proTipLink=\"\"\n        proTipLinkTitle=\"\"\n        proTipTarget=\"_blank\"\n      />\n    );\n  }\n\n  renderTeamList() {\n    const { teams, searchQuery, editorsCanAdmin, signedInUser } = this.props;\n    const isCanAdminAndViewer = editorsCanAdmin && signedInUser.orgRole === OrgRole.Viewer;\n    const disabledClass = isCanAdminAndViewer ? ' disabled' : '';\n    const newTeamHref = isCanAdminAndViewer ? '#' : 'org/teams/new';\n\n    return (\n      <>\n        <div className=\"page-action-bar\">\n          <div className=\"gf-form gf-form--grow\">\n            <FilterInput placeholder=\"Search teams\" value={searchQuery} onChange={this.onSearchQueryChange} />\n          </div>\n\n          <LinkButton className={disabledClass} href={newTeamHref}>\n            New Team\n          </LinkButton>\n        </div>\n\n        <div className=\"admin-list-table\">\n          <table className=\"filter-table filter-table--hover form-inline\">\n            <thead>\n              <tr>\n                <th />\n                <th>Name</th>\n                <th>Email</th>\n                <th>Members</th>\n                <th style={{ width: '1%' }} />\n              </tr>\n            </thead>\n            <tbody>{teams.map((team) => this.renderTeam(team))}</tbody>\n          </table>\n        </div>\n      </>\n    );\n  }\n\n  renderList() {\n    const { teamsCount, hasFetched } = this.props;\n\n    if (!hasFetched) {\n      return null;\n    }\n\n    if (teamsCount > 0) {\n      return this.renderTeamList();\n    } else {\n      return this.renderEmptyList();\n    }\n  }\n\n  render() {\n    const { hasFetched, navModel } = this.props;\n\n    return (\n      <Page navModel={navModel}>\n        <Page.Contents isLoading={!hasFetched}>{this.renderList()}</Page.Contents>\n      </Page>\n    );\n  }\n}\n\nfunction mapStateToProps(state: StoreState) {\n  return {\n    navModel: getNavModel(state.navIndex, 'teams'),\n    teams: getTeams(state.teams),\n    searchQuery: getSearchQuery(state.teams),\n    teamsCount: getTeamsCount(state.teams),\n    hasFetched: state.teams.hasFetched,\n    editorsCanAdmin: config.editorsCanAdmin, // this makes the feature toggle mockable/controllable from tests,\n    signedInUser: contextSrv.user, // this makes the feature toggle mockable/controllable from tests,\n  };\n}\n\nconst mapDispatchToProps = {\n  loadTeams,\n  deleteTeam,\n  setSearchQuery,\n};\n\nexport default hot(module)(connectWithCleanUp(mapStateToProps, mapDispatchToProps, (state) => state.teams)(TeamList));\n","import { Team, TeamsState, TeamState, TeamMember, OrgRole, TeamPermissionLevel } from 'app/types';\nimport { User } from 'app/core/services/context_srv';\n\nexport const getSearchQuery = (state: TeamsState) => state.searchQuery;\nexport const getSearchMemberQuery = (state: TeamState) => state.searchMemberQuery;\nexport const getTeamGroups = (state: TeamState) => state.groups;\nexport const getTeamsCount = (state: TeamsState) => state.teams.length;\n\nexport const getTeam = (state: TeamState, currentTeamId: any): Team | null => {\n  if (state.team.id === parseInt(currentTeamId, 10)) {\n    return state.team;\n  }\n\n  return null;\n};\n\nexport const getTeams = (state: TeamsState) => {\n  const regex = RegExp(state.searchQuery, 'i');\n\n  return state.teams.filter((team) => {\n    return regex.test(team.name);\n  });\n};\n\nexport const getTeamMembers = (state: TeamState) => {\n  const regex = RegExp(state.searchMemberQuery, 'i');\n\n  return state.members.filter((member) => {\n    return regex.test(member.login) || regex.test(member.email) || regex.test(member.name);\n  });\n};\n\nexport interface Config {\n  members: TeamMember[];\n  editorsCanAdmin: boolean;\n  signedInUser: User;\n}\n\nexport const isSignedInUserTeamAdmin = (config: Config): boolean => {\n  const { members, signedInUser, editorsCanAdmin } = config;\n  const userInMembers = members.find((m) => m.userId === signedInUser.id);\n  const permission = userInMembers ? userInMembers.permission : TeamPermissionLevel.Member;\n\n  return isPermissionTeamAdmin({ permission, signedInUser, editorsCanAdmin });\n};\n\nexport interface PermissionConfig {\n  permission: TeamPermissionLevel;\n  editorsCanAdmin: boolean;\n  signedInUser: User;\n}\n\nexport const isPermissionTeamAdmin = (config: PermissionConfig): boolean => {\n  const { permission, signedInUser, editorsCanAdmin } = config;\n  const isAdmin = signedInUser.isGrafanaAdmin || signedInUser.orgRole === OrgRole.Admin;\n  const userIsTeamAdmin = permission === TeamPermissionLevel.Admin;\n  const isSignedInUserTeamAdmin = isAdmin || userIsTeamAdmin;\n\n  return isSignedInUserTeamAdmin || !editorsCanAdmin;\n};\n","import { getBackendSrv } from '@grafana/runtime';\n\nimport { TeamMember, ThunkResult } from 'app/types';\nimport { updateNavIndex } from 'app/core/actions';\nimport { buildNavModel } from './navModel';\nimport { teamGroupsLoaded, teamLoaded, teamMembersLoaded, teamsLoaded } from './reducers';\n\nexport function loadTeams(): ThunkResult<void> {\n  return async (dispatch) => {\n    const response = await getBackendSrv().get('/api/teams/search', { perpage: 1000, page: 1 });\n    dispatch(teamsLoaded(response.teams));\n  };\n}\n\nexport function loadTeam(id: number): ThunkResult<void> {\n  return async (dispatch) => {\n    const response = await getBackendSrv().get(`/api/teams/${id}`);\n    dispatch(teamLoaded(response));\n    dispatch(updateNavIndex(buildNavModel(response)));\n  };\n}\n\nexport function loadTeamMembers(): ThunkResult<void> {\n  return async (dispatch, getStore) => {\n    const team = getStore().team.team;\n    const response = await getBackendSrv().get(`/api/teams/${team.id}/members`);\n    dispatch(teamMembersLoaded(response));\n  };\n}\n\nexport function addTeamMember(id: number): ThunkResult<void> {\n  return async (dispatch, getStore) => {\n    const team = getStore().team.team;\n    await getBackendSrv().post(`/api/teams/${team.id}/members`, { userId: id });\n    dispatch(loadTeamMembers());\n  };\n}\n\nexport function removeTeamMember(id: number): ThunkResult<void> {\n  return async (dispatch, getStore) => {\n    const team = getStore().team.team;\n    await getBackendSrv().delete(`/api/teams/${team.id}/members/${id}`);\n    dispatch(loadTeamMembers());\n  };\n}\n\nexport function updateTeam(name: string, email: string): ThunkResult<void> {\n  return async (dispatch, getStore) => {\n    const team = getStore().team.team;\n    await getBackendSrv().put(`/api/teams/${team.id}`, { name, email });\n    dispatch(loadTeam(team.id));\n  };\n}\n\nexport function loadTeamGroups(): ThunkResult<void> {\n  return async (dispatch, getStore) => {\n    const team = getStore().team.team;\n    const response = await getBackendSrv().get(`/api/teams/${team.id}/groups`);\n    dispatch(teamGroupsLoaded(response));\n  };\n}\n\nexport function addTeamGroup(groupId: string): ThunkResult<void> {\n  return async (dispatch, getStore) => {\n    const team = getStore().team.team;\n    await getBackendSrv().post(`/api/teams/${team.id}/groups`, { groupId: groupId });\n    dispatch(loadTeamGroups());\n  };\n}\n\nexport function removeTeamGroup(groupId: string): ThunkResult<void> {\n  return async (dispatch, getStore) => {\n    const team = getStore().team.team;\n    await getBackendSrv().delete(`/api/teams/${team.id}/groups/${encodeURIComponent(groupId)}`);\n    dispatch(loadTeamGroups());\n  };\n}\n\nexport function deleteTeam(id: number): ThunkResult<void> {\n  return async (dispatch) => {\n    await getBackendSrv().delete(`/api/teams/${id}`);\n    dispatch(loadTeams());\n  };\n}\n\nexport function updateTeamMember(member: TeamMember): ThunkResult<void> {\n  return async (dispatch) => {\n    await getBackendSrv().put(`/api/teams/${member.teamId}/members/${member.userId}`, {\n      permission: member.permission,\n    });\n    dispatch(loadTeamMembers());\n  };\n}\n","import { connect, MapDispatchToPropsParam, MapStateToPropsParam, useDispatch } from 'react-redux';\nimport { cleanUpAction, StateSelector } from '../actions/cleanUp';\nimport React, { ComponentType, FunctionComponent, useEffect } from 'react';\nimport hoistNonReactStatics from 'hoist-non-react-statics';\n\nexport const connectWithCleanUp = <\n  TStateProps extends {} = {},\n  TDispatchProps = {},\n  TOwnProps = {},\n  State = {},\n  TSelector extends object = {},\n  Statics = {}\n>(\n  mapStateToProps: MapStateToPropsParam<TStateProps, TOwnProps, State>,\n  mapDispatchToProps: MapDispatchToPropsParam<TDispatchProps, TOwnProps>,\n  stateSelector: StateSelector<TSelector>\n) => (Component: ComponentType<any>) => {\n  const ConnectedComponent = connect(\n    mapStateToProps,\n    mapDispatchToProps\n    // @ts-ignore\n  )(Component);\n\n  const ConnectedComponentWithCleanUp: FunctionComponent = (props) => {\n    const dispatch = useDispatch();\n    useEffect(() => {\n      return function cleanUp() {\n        dispatch(cleanUpAction({ stateSelector }));\n      };\n    }, [dispatch]);\n    // @ts-ignore\n    return <ConnectedComponent {...props} />;\n  };\n\n  ConnectedComponentWithCleanUp.displayName = `ConnectWithCleanUp(${ConnectedComponent.displayName})`;\n  hoistNonReactStatics(ConnectedComponentWithCleanUp, Component);\n  type Hoisted = typeof ConnectedComponentWithCleanUp & Statics;\n\n  return ConnectedComponentWithCleanUp as Hoisted;\n};\n","import { Team, TeamPermissionLevel } from 'app/types';\nimport config from 'app/core/config';\nimport { NavModelItem, NavModel } from '@grafana/data';\n\nexport function buildNavModel(team: Team): NavModelItem {\n  const navModel = {\n    img: team.avatarUrl,\n    id: 'team-' + team.id,\n    subTitle: 'Manage members and settings',\n    url: '',\n    text: team.name,\n    breadcrumbs: [{ title: 'Teams', url: 'org/teams' }],\n    children: [\n      {\n        active: false,\n        icon: 'users-alt',\n        id: `team-members-${team.id}`,\n        text: 'Members',\n        url: `org/teams/edit/${team.id}/members`,\n      },\n      {\n        active: false,\n        icon: 'sliders-v-alt',\n        id: `team-settings-${team.id}`,\n        text: 'Settings',\n        url: `org/teams/edit/${team.id}/settings`,\n      },\n    ],\n  };\n\n  if (config.licenseInfo.hasLicense) {\n    navModel.children.push({\n      active: false,\n      icon: 'sync',\n      id: `team-groupsync-${team.id}`,\n      text: 'External group sync',\n      url: `org/teams/edit/${team.id}/groupsync`,\n    });\n  }\n\n  return navModel;\n}\n\nexport function getTeamLoadingNav(pageName: string): NavModel {\n  const main = buildNavModel({\n    avatarUrl: 'public/img/user_profile.png',\n    id: 1,\n    name: 'Loading',\n    email: 'loading',\n    memberCount: 0,\n    permission: TeamPermissionLevel.Member,\n  });\n\n  let node: NavModelItem;\n\n  // find active page\n  for (const child of main.children!) {\n    if (child.id!.indexOf(pageName) > 0) {\n      child.active = true;\n      node = child;\n      break;\n    }\n  }\n\n  return {\n    main: main,\n    node: node!,\n  };\n}\n"],"sourceRoot":""}
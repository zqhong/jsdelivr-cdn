{"version":3,"sources":["webpack:///./public/app/features/admin/UserListAdminPage.tsx"],"names":["renderUser","user","editUrl","id","className","href","src","avatarUrl","title","login","email","name","lastSeenAtAge","isAdmin","placement","content","Array","isArray","authLabels","length","label","removeIcon","count","isDisabled","getStyles","stylesFactory","table","css","mapDispatchToProps","fetchUsers","changeQuery","changePage","hot","module","connect","state","navModel","getNavModel","navIndex","users","userListAdmin","query","showPaging","totalPages","page","props","styles","useEffect","Contents","placeholder","autoFocus","value","onChange","contextSrv","hasPermission","AccessControlAction","UsersCreate","variant","cx","style","width","map","numberOfPages","currentPage","onNavigate"],"mappings":"iSAiCA,MAuDMA,EAAcC,IAClB,MAAMC,EAAW,oBAAmBD,EAAKE,GAEzC,OACE,+BACE,oBAAIC,UAAU,8BAAd,SACE,mBAAGC,KAAMH,EAAT,SACE,qBAAKE,UAAU,uBAAuBE,IAAKL,EAAKM,gBAGpD,oBAAIH,UAAU,uBAAd,SACE,mBAAGA,UAAU,WAAWC,KAAMH,EAASM,MAAOP,EAAKQ,MAAnD,SACGR,EAAKQ,UAGV,oBAAIL,UAAU,uBAAd,SACE,mBAAGA,UAAU,WAAWC,KAAMH,EAASM,MAAOP,EAAKS,MAAnD,SACGT,EAAKS,UAGV,oBAAIN,UAAU,uBAAd,SACE,mBAAGA,UAAU,WAAWC,KAAMH,EAASM,MAAOP,EAAKU,KAAnD,SACGV,EAAKU,SAGV,oBAAIP,UAAU,UAAd,SAAyBH,EAAKW,eAAiB,mBAAGP,KAAMH,EAAT,SAAmBD,EAAKW,kBACvE,oBAAIR,UAAU,UAAd,SACGH,EAAKY,SACJ,mBAAGR,KAAMH,EAAT,eACE,cAAC,UAAD,CAASY,UAAU,MAAMC,QAAQ,gBAAjC,SACE,cAAC,OAAD,CAAMJ,KAAK,kBAKnB,oBAAIP,UAAU,aAAd,SACGY,MAAMC,QAAQhB,EAAKiB,aAAejB,EAAKiB,WAAWC,OAAS,GAC1D,cAAC,IAAD,CAAUC,MAAOnB,EAAKiB,WAAW,GAAIG,YAAY,EAAOC,MAAO,MAGnE,oBAAIlB,UAAU,aAAd,SACGH,EAAKsB,aAAL,MAAmB,sBAAMnB,UAAU,kCAAhB,4BArCfH,EAAKE,KA2CZqB,EAAYC,wBAAc,KACvB,CACLC,MAAOC,KAAI;;SAMTC,EAAkE,CACtEC,eACAC,gBACAC,gBAYaC,wBAAIC,EAAJD,CAAYE,kBATqDC,IAAD,CAC7EC,SAAUC,YAAYF,EAAMG,SAAU,gBACtCC,MAAOJ,EAAMK,cAAcD,MAC3BE,MAAON,EAAMK,cAAcC,MAC3BC,WAAYP,EAAMK,cAAcE,WAChCC,WAAYR,EAAMK,cAAcG,WAChCC,KAAMT,EAAMK,cAAcI,OAGwBhB,EAAzBM,CA7H4BW,IACrD,MAAMC,EAAStB,KACT,WAAEK,EAAF,SAAcO,EAAd,MAAwBK,EAAxB,YAA+BX,EAA/B,MAA4CS,EAA5C,WAAmDG,EAAnD,WAA+DC,EAA/D,KAA2EC,EAA3E,WAAiFb,GAAec,EAMtG,OAJAE,oBAAU,KACRlB,KACC,CAACA,IAGF,cAAC,IAAD,CAAMO,SAAUA,EAAhB,SACE,cAAC,IAAKY,SAAN,UACE,qCACE,sBAAK5C,UAAU,kBAAf,UACE,qBAAKA,UAAU,wBAAf,SACE,cAAC,IAAD,CACE6C,YAAY,wCACZC,WAAW,EACXC,MAAOV,EACPW,SAAWD,GAAUrB,EAAYqB,OAGpCE,IAAWC,cAAcC,IAAoBC,eAA7C,MACC,cAAC,aAAD,CAAYnD,KAAK,qBAAqBoD,QAAQ,UAA9C,2BAKJ,qBAAKrD,UAAWsD,aAAGZ,EAAOpB,MAAO,oBAAjC,SACE,wBAAOtB,UAAU,+CAAjB,UACE,gCACE,qCACE,wBADF,MAEE,wCAFF,MAGE,wCAHF,MAIE,uCAJF,MAKE,uCAEE,cAAC,UAAD,CAASU,UAAU,MAAMC,QAAQ,yCAAjC,SACE,cAAC,OAAD,CAAMJ,KAAK,0BARjB,MAWE,wBACA,oBAAIgD,MAAO,CAAEC,MAAO,aAGxB,gCAAQrB,EAAMsB,IAAI7D,UAGrB0C,GAAc,cAAC,aAAD,CAAYoB,cAAenB,EAAYoB,YAAanB,EAAMoB,WAAYjC,e","file":"UserListAdminPage.62c612232a976d8836f5.js","sourcesContent":["import React, { useEffect } from 'react';\nimport { css, cx } from '@emotion/css';\nimport { hot } from 'react-hot-loader';\nimport { connect, MapDispatchToProps, MapStateToProps } from 'react-redux';\nimport { NavModel } from '@grafana/data';\nimport { Pagination, Tooltip, stylesFactory, LinkButton, Icon } from '@grafana/ui';\nimport { AccessControlAction, StoreState, UserDTO } from '../../types';\nimport Page from 'app/core/components/Page/Page';\nimport { getNavModel } from '../../core/selectors/navModel';\nimport { fetchUsers, changeQuery, changePage } from './state/actions';\nimport { TagBadge } from 'app/core/components/TagFilter/TagBadge';\nimport { contextSrv } from 'app/core/core';\nimport { FilterInput } from 'app/core/components/FilterInput/FilterInput';\n\ninterface OwnProps {}\n\ninterface ConnectedProps {\n  navModel: NavModel;\n  users: UserDTO[];\n  query: string;\n  showPaging: boolean;\n  totalPages: number;\n  page: number;\n}\n\ninterface DispatchProps {\n  fetchUsers: typeof fetchUsers;\n  changeQuery: typeof changeQuery;\n  changePage: typeof changePage;\n}\n\ntype Props = OwnProps & ConnectedProps & DispatchProps;\n\nconst UserListAdminPageUnConnected: React.FC<Props> = (props) => {\n  const styles = getStyles();\n  const { fetchUsers, navModel, query, changeQuery, users, showPaging, totalPages, page, changePage } = props;\n\n  useEffect(() => {\n    fetchUsers();\n  }, [fetchUsers]);\n\n  return (\n    <Page navModel={navModel}>\n      <Page.Contents>\n        <>\n          <div className=\"page-action-bar\">\n            <div className=\"gf-form gf-form--grow\">\n              <FilterInput\n                placeholder=\"Search user by login, email, or name.\"\n                autoFocus={true}\n                value={query}\n                onChange={(value) => changeQuery(value)}\n              />\n            </div>\n            {contextSrv.hasPermission(AccessControlAction.UsersCreate) && (\n              <LinkButton href=\"admin/users/create\" variant=\"primary\">\n                New user\n              </LinkButton>\n            )}\n          </div>\n          <div className={cx(styles.table, 'admin-list-table')}>\n            <table className=\"filter-table form-inline filter-table--hover\">\n              <thead>\n                <tr>\n                  <th></th>\n                  <th>Login</th>\n                  <th>Email</th>\n                  <th>Name</th>\n                  <th>\n                    Seen&nbsp;\n                    <Tooltip placement=\"top\" content=\"Time since user was seen using Grafana\">\n                      <Icon name=\"question-circle\" />\n                    </Tooltip>\n                  </th>\n                  <th></th>\n                  <th style={{ width: '1%' }}></th>\n                </tr>\n              </thead>\n              <tbody>{users.map(renderUser)}</tbody>\n            </table>\n          </div>\n          {showPaging && <Pagination numberOfPages={totalPages} currentPage={page} onNavigate={changePage} />}\n        </>\n      </Page.Contents>\n    </Page>\n  );\n};\n\nconst renderUser = (user: UserDTO) => {\n  const editUrl = `admin/users/edit/${user.id}`;\n\n  return (\n    <tr key={user.id}>\n      <td className=\"width-4 text-center link-td\">\n        <a href={editUrl}>\n          <img className=\"filter-table__avatar\" src={user.avatarUrl} />\n        </a>\n      </td>\n      <td className=\"link-td max-width-10\">\n        <a className=\"ellipsis\" href={editUrl} title={user.login}>\n          {user.login}\n        </a>\n      </td>\n      <td className=\"link-td max-width-10\">\n        <a className=\"ellipsis\" href={editUrl} title={user.email}>\n          {user.email}\n        </a>\n      </td>\n      <td className=\"link-td max-width-10\">\n        <a className=\"ellipsis\" href={editUrl} title={user.name}>\n          {user.name}\n        </a>\n      </td>\n      <td className=\"link-td\">{user.lastSeenAtAge && <a href={editUrl}>{user.lastSeenAtAge}</a>}</td>\n      <td className=\"link-td\">\n        {user.isAdmin && (\n          <a href={editUrl}>\n            <Tooltip placement=\"top\" content=\"Grafana Admin\">\n              <Icon name=\"shield\" />\n            </Tooltip>\n          </a>\n        )}\n      </td>\n      <td className=\"text-right\">\n        {Array.isArray(user.authLabels) && user.authLabels.length > 0 && (\n          <TagBadge label={user.authLabels[0]} removeIcon={false} count={0} />\n        )}\n      </td>\n      <td className=\"text-right\">\n        {user.isDisabled && <span className=\"label label-tag label-tag--gray\">Disabled</span>}\n      </td>\n    </tr>\n  );\n};\n\nconst getStyles = stylesFactory(() => {\n  return {\n    table: css`\n      margin-top: 28px;\n    `,\n  };\n});\n\nconst mapDispatchToProps: MapDispatchToProps<DispatchProps, OwnProps> = {\n  fetchUsers,\n  changeQuery,\n  changePage,\n};\n\nconst mapStateToProps: MapStateToProps<ConnectedProps, OwnProps, StoreState> = (state) => ({\n  navModel: getNavModel(state.navIndex, 'global-users'),\n  users: state.userListAdmin.users,\n  query: state.userListAdmin.query,\n  showPaging: state.userListAdmin.showPaging,\n  totalPages: state.userListAdmin.totalPages,\n  page: state.userListAdmin.page,\n});\n\nexport default hot(module)(connect(mapStateToProps, mapDispatchToProps)(UserListAdminPageUnConnected));\n"],"sourceRoot":""}
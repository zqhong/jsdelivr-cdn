{"version":3,"sources":["webpack:///./public/app/core/hooks/useQueryParams.ts","webpack:///./public/app/features/alerting/unified/utils/amroutes.ts","webpack:///./public/app/features/alerting/unified/components/amroutes/formStyles.ts","webpack:///./public/app/features/alerting/unified/components/amroutes/AmRootRouteForm.tsx","webpack:///./public/app/features/alerting/unified/components/amroutes/gridStyles.ts","webpack:///./public/app/features/alerting/unified/components/amroutes/AmRootRouteRead.tsx","webpack:///./public/app/features/alerting/unified/components/amroutes/AmRootRoute.tsx","webpack:///./public/app/features/alerting/unified/components/EmptyArea.tsx","webpack:///./public/app/features/alerting/unified/components/amroutes/AmRoutesExpandedForm.tsx","webpack:///./public/app/features/alerting/unified/components/amroutes/AmRoutesExpandedRead.tsx","webpack:///./public/app/features/alerting/unified/components/amroutes/AmRoutesTable.tsx","webpack:///./public/app/features/alerting/unified/utils/dynamicTable.ts","webpack:///./public/app/features/alerting/unified/components/amroutes/AmSpecificRouting.tsx","webpack:///./public/app/features/alerting/unified/AmRoutes.tsx","webpack:///./public/app/features/alerting/unified/components/silences/Matchers.tsx","webpack:///./public/app/core/hooks/useCleanup.ts","webpack:///./node_modules/timers-browserify/main.js","webpack:///./node_modules/setimmediate/setImmediate.js","webpack:///./public/app/features/alerting/unified/hooks/useAlertManagerSourceName.ts","webpack:///./public/app/features/alerting/unified/components/AlertManagerPicker.tsx","webpack:///./public/app/features/alerting/unified/components/AlertingPageWrapper.tsx","webpack:///./public/app/features/alerting/unified/components/DynamicTable.tsx"],"names":["useQueryParams","search","useLocation","useMemo","locationSearchToObject","useCallback","values","replace","setImmediate","locationService","partial","defaultValueAndType","timeOptions","value","matchersToArrayFieldMatchers","matchers","isRegex","Object","entries","reduce","acc","name","isEqual","intervalToValueAndType","strValue","valueType","parseInterval","undefined","timeOption","find","opt","String","selectableValueToString","selectableValue","emptyArrayFieldMatcher","emptyRoute","id","groupBy","routes","continue","receiver","groupWaitValue","groupWaitValueType","groupIntervalValue","groupIntervalValueType","repeatIntervalValue","repeatIntervalValueType","amRouteToFormAmRoute","route","keys","length","group_wait","group_interval","repeat_interval","Math","random","id2route","formRoutes","forEach","subRoute","subFormRoute","subId2Route","push","assign","map","parseMatcher","match","match_re","group_by","formAmRouteToAmRoute","formAmRoute","id2ExistingRoute","existing","amRoute","stringifyMatcher","omitBy","isUndefined","stringToSelectableValue","str","label","stringsToSelectableValues","arr","mapSelectValueToString","mapMultiSelectValueToStrings","selectableValues","optionalPositiveInteger","test","getFormStyles","theme","container","css","spacing","input","timingContainer","smallInput","AmRootRouteForm","alertManagerSourceName","onCancel","onSave","receivers","styles","useStyles2","isTimingOptionsExpanded","setIsTimingOptionsExpanded","useState","groupByOptions","setGroupByOptions","defaultValues","onSubmit","control","errors","setValue","invalid","error","message","className","data-testid","render","field","onChange","menuShouldPortal","options","rules","required","href","makeAMLink","description","allowCustomValue","onCreateOption","opts","collapsible","isOpen","onToggle","cx","fieldState","validate","menuPlacement","type","onClick","variant","fill","getGridStyles","typography","fontSize","breakpoints","down","titleCell","colors","text","primary","valueCell","secondary","AmRootRouteRead","join","groupWait","groupInterval","repeatInterval","AmRootRoute","isEditMode","onEnterEditMode","onExitEditMode","getStyles","titleContainer","title","icon","size","background","EmptyArea","buttonIcon","buttonLabel","buttonSize","buttonVariant","onButtonClick","useStyles","button","bg2","textSemiWeak","xl","md","sm","AmRoutesExpandedForm","formStyles","overrideGrouping","setOverrideGrouping","overrideTimings","setOverrideTimings","register","fields","append","remove","matchersContainer","index","localPath","align","defaultValue","placeholder","matcherRegexField","defaultChecked","removeButton","tooltip","addMatcherBtn","buttonGroup","commonSpacing","nestedPolicies","AmRoutesExpandedRead","gridStyles","subroutes","setSubroutes","isAddMode","setIsAddMode","AmRoutesTable","onCancelAdd","newSubroutes","pop","newRoutes","addNestedRoutingBtn","editMode","setEditMode","expandedId","setExpandedId","expandItem","item","collapseItem","cols","renderCell","Matchers","data","renderExpandedContent","splice","items","idCreator","prepareItems","useEffect","DynamicTable","isExpandable","testIdGenerator","onCollapse","onExpand","isExpanded","AmSpecificRouting","onRootRouteEdit","actualRoutes","setActualRoutes","addNewRoute","withErrorBoundary","dispatch","useDispatch","isRootRouteEditMode","setIsRootRouteEditMode","setAlertManagerSourceName","useAlertManagerSourceName","amConfigs","useUnifiedAlertingSelector","state","fetchConfig","fetchAlertManagerConfigAction","result","loading","resultLoading","resultError","initialAsyncRequestState","config","alertmanager_config","rootRoute","enterRootRouteEditMode","exitRootRouteEditMode","useCleanup","unifiedAlerting","saveAMConfig","handleSave","newData","updateAlertManagerConfigAction","newConfig","oldConfig","successMessage","refetch","AlertingPageWrapper","pageId","AlertManagerPicker","current","severity","break","to","style","border","medium","onRemoveLabel","removeLabel","wrapper","matcher","labelKey","operator","matcherToOperator","xs","stateSelector","selectorRef","useRef","cleanUpAction","self","window","apply","Function","prototype","Timeout","clearFn","this","_id","_clearFn","exports","setTimeout","call","scope","arguments","clearTimeout","setInterval","clearInterval","timeout","close","unref","ref","enroll","msecs","_idleTimeoutId","_idleTimeout","unenroll","_unrefActive","active","_onTimeout","global","clearImmediate","registerImmediate","html","channel","messagePrefix","onGlobalMessage","nextHandle","tasksByHandle","currentlyRunningATask","doc","document","attachTo","getPrototypeOf","toString","process","handle","nextTick","runIfPresent","postMessage","importScripts","postMessageIsAsynchronous","oldOnMessage","onmessage","canUsePostMessage","MessageChannel","port1","event","port2","createElement","documentElement","script","onreadystatechange","removeChild","appendChild","source","indexOf","slice","addEventListener","attachEvent","callback","args","Array","i","task","run","isAlertManagerSource","GRAFANA_RULES_SOURCE_NAME","getAlertManagerDataSources","ds","queryParams","updateQueryParams","update","store","delete","ALERTMANAGER_NAME_LOCAL_STORAGE_KEY","ALERTMANAGER_NAME_QUERY_KEY","set","querySource","storeSource","get","disabled","imgUrl","meta","getAllDataSources","filter","DataSourceType","Alertmanager","substr","info","logos","small","width","backspaceRemovesValue","maxMenuHeight","noOptionsMessage","getOptionLabel","o","children","isLoading","navModel","getNavModel","useSelector","navIndex","Contents","renderPrefixCell","renderPrefixHeader","Error","expandedIds","setExpandedIds","row","cell","col","isItemExpanded","includes","expandCell","expandButton","itemId","toggleExpanded","bodyCell","data-column","expandedContentRow","hasPrefixCell","sizes","unshift","strong"],"mappings":"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","file":"AlertAmRoutes.62c612232a976d8836f5.js","sourcesContent":["import { UrlQueryMap } from '@grafana/data';\nimport { locationSearchToObject, locationService } from '@grafana/runtime';\nimport { useCallback, useMemo } from 'react';\nimport { useLocation } from 'react-router-dom';\n\nexport function useQueryParams(): [UrlQueryMap, (values: UrlQueryMap, replace?: boolean) => void] {\n  const { search } = useLocation();\n  const queryParams = useMemo(() => locationSearchToObject(search || ''), [search]);\n  const update = useCallback(\n    (values: UrlQueryMap, replace?: boolean) => setImmediate(() => locationService.partial(values, replace)),\n    []\n  );\n  return [queryParams, update];\n}\n","import { SelectableValue } from '@grafana/data';\nimport { Validate } from 'react-hook-form';\nimport { Matcher, Route } from 'app/plugins/datasource/alertmanager/types';\nimport { FormAmRoute } from '../types/amroutes';\nimport { parseInterval, timeOptions } from './time';\nimport { parseMatcher, stringifyMatcher } from './alertmanager';\nimport { isUndefined, omitBy } from 'lodash';\n\nconst defaultValueAndType: [string, string] = ['', timeOptions[0].value];\n\nconst matchersToArrayFieldMatchers = (matchers: Record<string, string> | undefined, isRegex: boolean): Matcher[] =>\n  Object.entries(matchers ?? {}).reduce<Matcher[]>(\n    (acc, [name, value]) => [\n      ...acc,\n      {\n        name,\n        value,\n        isRegex: isRegex,\n        isEqual: true,\n      },\n    ],\n    [] as Matcher[]\n  );\n\nconst intervalToValueAndType = (strValue: string | undefined): [string, string] => {\n  if (!strValue) {\n    return defaultValueAndType;\n  }\n\n  const [value, valueType] = strValue ? parseInterval(strValue) : [undefined, undefined];\n\n  const timeOption = timeOptions.find((opt) => opt.value === valueType);\n\n  if (!value || !timeOption) {\n    return defaultValueAndType;\n  }\n\n  return [String(value), timeOption.value];\n};\n\nconst selectableValueToString = (selectableValue: SelectableValue<string>): string => selectableValue.value!;\n\nconst selectableValuesToStrings = (arr: Array<SelectableValue<string>> | undefined): string[] =>\n  (arr ?? []).map(selectableValueToString);\n\nexport const emptyArrayFieldMatcher: Matcher = {\n  name: '',\n  value: '',\n  isRegex: false,\n  isEqual: true,\n};\n\nexport const emptyRoute: FormAmRoute = {\n  id: '',\n  groupBy: [],\n  matchers: [],\n  routes: [],\n  continue: false,\n  receiver: '',\n  groupWaitValue: '',\n  groupWaitValueType: timeOptions[0].value,\n  groupIntervalValue: '',\n  groupIntervalValueType: timeOptions[0].value,\n  repeatIntervalValue: '',\n  repeatIntervalValueType: timeOptions[0].value,\n};\n\n//returns route, and a record mapping id to existing route route\nexport const amRouteToFormAmRoute = (route: Route | undefined): [FormAmRoute, Record<string, Route>] => {\n  if (!route || Object.keys(route).length === 0) {\n    return [emptyRoute, {}];\n  }\n\n  const [groupWaitValue, groupWaitValueType] = intervalToValueAndType(route.group_wait);\n  const [groupIntervalValue, groupIntervalValueType] = intervalToValueAndType(route.group_interval);\n  const [repeatIntervalValue, repeatIntervalValueType] = intervalToValueAndType(route.repeat_interval);\n\n  const id = String(Math.random());\n  const id2route = {\n    [id]: route,\n  };\n  const formRoutes: FormAmRoute[] = [];\n  route.routes?.forEach((subRoute) => {\n    const [subFormRoute, subId2Route] = amRouteToFormAmRoute(subRoute);\n    formRoutes.push(subFormRoute);\n    Object.assign(id2route, subId2Route);\n  });\n\n  return [\n    {\n      id,\n      matchers: [\n        ...(route.matchers?.map(parseMatcher) ?? []),\n        ...matchersToArrayFieldMatchers(route.match, false),\n        ...matchersToArrayFieldMatchers(route.match_re, true),\n      ],\n      continue: route.continue ?? false,\n      receiver: route.receiver ?? '',\n      groupBy: route.group_by ?? [],\n      groupWaitValue,\n      groupWaitValueType,\n      groupIntervalValue,\n      groupIntervalValueType,\n      repeatIntervalValue,\n      repeatIntervalValueType,\n      routes: formRoutes,\n    },\n    id2route,\n  ];\n};\n\nexport const formAmRouteToAmRoute = (formAmRoute: FormAmRoute, id2ExistingRoute: Record<string, Route>): Route => {\n  const existing: Route | undefined = id2ExistingRoute[formAmRoute.id];\n  const amRoute: Route = {\n    ...(existing ?? {}),\n    continue: formAmRoute.continue,\n    group_by: formAmRoute.groupBy,\n    matchers: formAmRoute.matchers.length ? formAmRoute.matchers.map(stringifyMatcher) : undefined,\n    match: undefined,\n    match_re: undefined,\n    group_wait: formAmRoute.groupWaitValue\n      ? `${formAmRoute.groupWaitValue}${formAmRoute.groupWaitValueType}`\n      : undefined,\n    group_interval: formAmRoute.groupIntervalValue\n      ? `${formAmRoute.groupIntervalValue}${formAmRoute.groupIntervalValueType}`\n      : undefined,\n    repeat_interval: formAmRoute.repeatIntervalValue\n      ? `${formAmRoute.repeatIntervalValue}${formAmRoute.repeatIntervalValueType}`\n      : undefined,\n    routes: formAmRoute.routes.map((subRoute) => formAmRouteToAmRoute(subRoute, id2ExistingRoute)),\n  };\n\n  if (formAmRoute.receiver) {\n    amRoute.receiver = formAmRoute.receiver;\n  }\n\n  return omitBy(amRoute, isUndefined);\n};\n\nexport const stringToSelectableValue = (str: string): SelectableValue<string> => ({\n  label: str,\n  value: str,\n});\n\nexport const stringsToSelectableValues = (arr: string[] | undefined): Array<SelectableValue<string>> =>\n  (arr ?? []).map(stringToSelectableValue);\n\nexport const mapSelectValueToString = (selectableValue: SelectableValue<string>): string => {\n  if (!selectableValue) {\n    return '';\n  }\n\n  return selectableValueToString(selectableValue) ?? '';\n};\n\nexport const mapMultiSelectValueToStrings = (\n  selectableValues: Array<SelectableValue<string>> | undefined\n): string[] => {\n  if (!selectableValues) {\n    return [];\n  }\n\n  return selectableValuesToStrings(selectableValues);\n};\n\nexport const optionalPositiveInteger: Validate<string> = (value) => {\n  if (!value) {\n    return undefined;\n  }\n\n  return !/^\\d+$/.test(value) ? 'Must be a positive integer.' : undefined;\n};\n","import { css } from '@emotion/css';\nimport { GrafanaTheme2 } from '@grafana/data';\n\nexport const getFormStyles = (theme: GrafanaTheme2) => {\n  return {\n    container: css`\n      align-items: center;\n      display: flex;\n      flex-flow: row nowrap;\n\n      & > * + * {\n        margin-left: ${theme.spacing(1)};\n      }\n    `,\n    input: css`\n      flex: 1;\n    `,\n    timingContainer: css`\n      max-width: ${theme.spacing(33)};\n    `,\n    smallInput: css`\n      width: ${theme.spacing(6.5)};\n    `,\n  };\n};\n","import React, { FC, useState } from 'react';\nimport { cx } from '@emotion/css';\nimport { Button, Collapse, Field, Form, Input, InputControl, Link, MultiSelect, Select, useStyles2 } from '@grafana/ui';\nimport { AmRouteReceiver, FormAmRoute } from '../../types/amroutes';\nimport {\n  mapMultiSelectValueToStrings,\n  mapSelectValueToString,\n  optionalPositiveInteger,\n  stringToSelectableValue,\n  stringsToSelectableValues,\n} from '../../utils/amroutes';\nimport { makeAMLink } from '../../utils/misc';\nimport { timeOptions } from '../../utils/time';\nimport { getFormStyles } from './formStyles';\n\nexport interface AmRootRouteFormProps {\n  alertManagerSourceName: string;\n  onCancel: () => void;\n  onSave: (data: FormAmRoute) => void;\n  receivers: AmRouteReceiver[];\n  routes: FormAmRoute;\n}\n\nexport const AmRootRouteForm: FC<AmRootRouteFormProps> = ({\n  alertManagerSourceName,\n  onCancel,\n  onSave,\n  receivers,\n  routes,\n}) => {\n  const styles = useStyles2(getFormStyles);\n  const [isTimingOptionsExpanded, setIsTimingOptionsExpanded] = useState(false);\n  const [groupByOptions, setGroupByOptions] = useState(stringsToSelectableValues(routes.groupBy));\n\n  return (\n    <Form defaultValues={routes} onSubmit={onSave}>\n      {({ control, errors, setValue }) => (\n        <>\n          <Field label=\"Default contact point\" invalid={!!errors.receiver} error={errors.receiver?.message}>\n            <>\n              <div className={styles.container} data-testid=\"am-receiver-select\">\n                <InputControl\n                  render={({ field: { onChange, ref, ...field } }) => (\n                    <Select\n                      menuShouldPortal\n                      {...field}\n                      className={styles.input}\n                      onChange={(value) => onChange(mapSelectValueToString(value))}\n                      options={receivers}\n                    />\n                  )}\n                  control={control}\n                  name=\"receiver\"\n                  rules={{ required: { value: true, message: 'Required.' } }}\n                />\n                <span>or</span>\n                <Link href={makeAMLink('/alerting/notifications/receivers/new', alertManagerSourceName)}>\n                  Create a contact point\n                </Link>\n              </div>\n            </>\n          </Field>\n          <Field\n            label=\"Group by\"\n            description=\"Group alerts when you receive a notification based on labels.\"\n            data-testid=\"am-group-select\"\n          >\n            {/* @ts-ignore-check: react-hook-form made me do this */}\n            <InputControl\n              render={({ field: { onChange, ref, ...field } }) => (\n                <MultiSelect\n                  menuShouldPortal\n                  {...field}\n                  allowCustomValue\n                  className={styles.input}\n                  onCreateOption={(opt: string) => {\n                    setGroupByOptions((opts) => [...opts, stringToSelectableValue(opt)]);\n\n                    // @ts-ignore-check: react-hook-form made me do this\n                    setValue('groupBy', [...field.value, opt]);\n                  }}\n                  onChange={(value) => onChange(mapMultiSelectValueToStrings(value))}\n                  options={groupByOptions}\n                />\n              )}\n              control={control}\n              name=\"groupBy\"\n            />\n          </Field>\n          <Collapse\n            collapsible\n            isOpen={isTimingOptionsExpanded}\n            label=\"Timing options\"\n            onToggle={setIsTimingOptionsExpanded}\n          >\n            <Field\n              label=\"Group wait\"\n              description=\"The waiting time until the initial notification is sent for a new group created by an incoming alert. Default 30 seconds.\"\n              invalid={!!errors.groupWaitValue}\n              error={errors.groupWaitValue?.message}\n              data-testid=\"am-group-wait\"\n            >\n              <>\n                <div className={cx(styles.container, styles.timingContainer)}>\n                  <InputControl\n                    render={({ field, fieldState: { invalid } }) => (\n                      <Input {...field} className={styles.smallInput} invalid={invalid} />\n                    )}\n                    control={control}\n                    name=\"groupWaitValue\"\n                    rules={{\n                      validate: optionalPositiveInteger,\n                    }}\n                  />\n                  <InputControl\n                    render={({ field: { onChange, ref, ...field } }) => (\n                      <Select\n                        menuShouldPortal\n                        {...field}\n                        className={styles.input}\n                        onChange={(value) => onChange(mapSelectValueToString(value))}\n                        options={timeOptions}\n                      />\n                    )}\n                    control={control}\n                    name=\"groupWaitValueType\"\n                  />\n                </div>\n              </>\n            </Field>\n            <Field\n              label=\"Group interval\"\n              description=\"The waiting time to send a batch of new alerts for that group after the first notification was sent. Default 5 minutes.\"\n              invalid={!!errors.groupIntervalValue}\n              error={errors.groupIntervalValue?.message}\n              data-testid=\"am-group-interval\"\n            >\n              <>\n                <div className={cx(styles.container, styles.timingContainer)}>\n                  <InputControl\n                    render={({ field, fieldState: { invalid } }) => (\n                      <Input {...field} className={styles.smallInput} invalid={invalid} />\n                    )}\n                    control={control}\n                    name=\"groupIntervalValue\"\n                    rules={{\n                      validate: optionalPositiveInteger,\n                    }}\n                  />\n                  <InputControl\n                    render={({ field: { onChange, ref, ...field } }) => (\n                      <Select\n                        menuShouldPortal\n                        {...field}\n                        className={styles.input}\n                        onChange={(value) => onChange(mapSelectValueToString(value))}\n                        options={timeOptions}\n                      />\n                    )}\n                    control={control}\n                    name=\"groupIntervalValueType\"\n                  />\n                </div>\n              </>\n            </Field>\n            <Field\n              label=\"Repeat interval\"\n              description=\"The waiting time to resend an alert after they have successfully been sent. Default 4 hours.\"\n              invalid={!!errors.repeatIntervalValue}\n              error={errors.repeatIntervalValue?.message}\n              data-testid=\"am-repeat-interval\"\n            >\n              <>\n                <div className={cx(styles.container, styles.timingContainer)}>\n                  <InputControl\n                    render={({ field, fieldState: { invalid } }) => (\n                      <Input {...field} className={styles.smallInput} invalid={invalid} />\n                    )}\n                    control={control}\n                    name=\"repeatIntervalValue\"\n                    rules={{\n                      validate: optionalPositiveInteger,\n                    }}\n                  />\n                  <InputControl\n                    render={({ field: { onChange, ref, ...field } }) => (\n                      <Select\n                        menuShouldPortal\n                        {...field}\n                        className={styles.input}\n                        menuPlacement=\"top\"\n                        onChange={(value) => onChange(mapSelectValueToString(value))}\n                        options={timeOptions}\n                      />\n                    )}\n                    control={control}\n                    name=\"repeatIntervalValueType\"\n                  />\n                </div>\n              </>\n            </Field>\n          </Collapse>\n          <div className={styles.container}>\n            <Button type=\"submit\">Save</Button>\n            <Button onClick={onCancel} type=\"reset\" variant=\"secondary\" fill=\"outline\">\n              Cancel\n            </Button>\n          </div>\n        </>\n      )}\n    </Form>\n  );\n};\n","import { css } from '@emotion/css';\nimport { GrafanaTheme2 } from '@grafana/data';\n\nexport const getGridStyles = (theme: GrafanaTheme2) => {\n  return {\n    container: css`\n      display: grid;\n      font-style: ${theme.typography.fontSize};\n      grid-template-columns: ${theme.spacing(15.5)} auto;\n\n      ${theme.breakpoints.down('md')} {\n        grid-template-columns: 100%;\n      }\n    `,\n    titleCell: css`\n      color: ${theme.colors.text.primary};\n    `,\n    valueCell: css`\n      color: ${theme.colors.text.secondary};\n      margin-bottom: ${theme.spacing(1)};\n    `,\n  };\n};\n","import React, { FC } from 'react';\nimport { useStyles2 } from '@grafana/ui';\nimport { FormAmRoute } from '../../types/amroutes';\nimport { getGridStyles } from './gridStyles';\n\nexport interface AmRootRouteReadProps {\n  routes: FormAmRoute;\n}\n\nexport const AmRootRouteRead: FC<AmRootRouteReadProps> = ({ routes }) => {\n  const styles = useStyles2(getGridStyles);\n\n  const receiver = routes.receiver || '-';\n  const groupBy = routes.groupBy.join(', ') || '-';\n  const groupWait = routes.groupWaitValue ? `${routes.groupWaitValue}${routes.groupWaitValueType}` : '-';\n  const groupInterval = routes.groupIntervalValue\n    ? `${routes.groupIntervalValue}${routes.groupIntervalValueType}`\n    : '-';\n  const repeatInterval = routes.repeatIntervalValue\n    ? `${routes.repeatIntervalValue}${routes.repeatIntervalValueType}`\n    : '-';\n\n  return (\n    <div className={styles.container}>\n      <div className={styles.titleCell}>Contact point</div>\n      <div className={styles.valueCell} data-testid=\"am-routes-root-receiver\">\n        {receiver}\n      </div>\n      <div className={styles.titleCell}>Group by</div>\n      <div className={styles.valueCell} data-testid=\"am-routes-root-group-by\">\n        {groupBy}\n      </div>\n      <div className={styles.titleCell}>Timings</div>\n      <div className={styles.valueCell} data-testid=\"am-routes-root-timings\">\n        Group wait: {groupWait} | Group interval: {groupInterval} | Repeat interval: {repeatInterval}\n      </div>\n    </div>\n  );\n};\n","import React, { FC } from 'react';\nimport { css } from '@emotion/css';\nimport { GrafanaTheme2 } from '@grafana/data';\nimport { Button, useStyles2 } from '@grafana/ui';\nimport { AmRouteReceiver, FormAmRoute } from '../../types/amroutes';\nimport { AmRootRouteForm } from './AmRootRouteForm';\nimport { AmRootRouteRead } from './AmRootRouteRead';\n\nexport interface AmRootRouteProps {\n  isEditMode: boolean;\n  onEnterEditMode: () => void;\n  onExitEditMode: () => void;\n  onSave: (data: Partial<FormAmRoute>) => void;\n  receivers: AmRouteReceiver[];\n  routes: FormAmRoute;\n  alertManagerSourceName: string;\n}\n\nexport const AmRootRoute: FC<AmRootRouteProps> = ({\n  isEditMode,\n  onSave,\n  onEnterEditMode,\n  onExitEditMode,\n  receivers,\n  routes,\n  alertManagerSourceName,\n}) => {\n  const styles = useStyles2(getStyles);\n\n  return (\n    <div className={styles.container} data-testid=\"am-root-route-container\">\n      <div className={styles.titleContainer}>\n        <h5 className={styles.title}>\n          Root policy - <i>default for all alerts</i>\n        </h5>\n        {!isEditMode && (\n          <Button icon=\"pen\" onClick={onEnterEditMode} size=\"sm\" type=\"button\" variant=\"secondary\">\n            Edit\n          </Button>\n        )}\n      </div>\n      <p>\n        All alerts will go to the default contact point, unless you set additional matchers in the specific routing\n        area.\n      </p>\n      {isEditMode ? (\n        <AmRootRouteForm\n          alertManagerSourceName={alertManagerSourceName}\n          onCancel={onExitEditMode}\n          onSave={onSave}\n          receivers={receivers}\n          routes={routes}\n        />\n      ) : (\n        <AmRootRouteRead routes={routes} />\n      )}\n    </div>\n  );\n};\n\nconst getStyles = (theme: GrafanaTheme2) => {\n  return {\n    container: css`\n      background-color: ${theme.colors.background.secondary};\n      color: ${theme.colors.text.secondary};\n      padding: ${theme.spacing(2)};\n    `,\n    titleContainer: css`\n      color: ${theme.colors.text.primary};\n      display: flex;\n      flex-flow: row nowrap;\n    `,\n    title: css`\n      flex: 100%;\n    `,\n  };\n};\n","import React, { ButtonHTMLAttributes, FC } from 'react';\nimport { css } from '@emotion/css';\nimport { GrafanaTheme } from '@grafana/data';\nimport { Button, ButtonVariant, IconName, useStyles } from '@grafana/ui';\n\nexport interface EmptyAreaProps {\n  buttonLabel: string;\n  onButtonClick: ButtonHTMLAttributes<HTMLButtonElement>['onClick'];\n  text: string;\n\n  buttonIcon?: IconName;\n  buttonSize?: 'xs' | 'sm' | 'md' | 'lg';\n  buttonVariant?: ButtonVariant;\n}\n\nexport const EmptyArea: FC<EmptyAreaProps> = ({\n  buttonIcon,\n  buttonLabel,\n  buttonSize = 'lg',\n  buttonVariant = 'primary',\n  onButtonClick,\n  text,\n}) => {\n  const styles = useStyles(getStyles);\n\n  return (\n    <div className={styles.container}>\n      <p className={styles.text}>{text}</p>\n      <Button\n        className={styles.button}\n        icon={buttonIcon}\n        onClick={onButtonClick}\n        size={buttonSize}\n        type=\"button\"\n        variant={buttonVariant}\n      >\n        {buttonLabel}\n      </Button>\n    </div>\n  );\n};\n\nconst getStyles = (theme: GrafanaTheme) => {\n  return {\n    container: css`\n      background-color: ${theme.colors.bg2};\n      color: ${theme.colors.textSemiWeak};\n      padding: ${theme.spacing.xl};\n      text-align: center;\n    `,\n    text: css`\n      margin-bottom: ${theme.spacing.md};\n    `,\n    button: css`\n      margin: ${theme.spacing.md} 0 ${theme.spacing.sm};\n    `,\n  };\n};\n","import React, { FC, useState } from 'react';\nimport { css, cx } from '@emotion/css';\nimport { GrafanaTheme2 } from '@grafana/data';\nimport {\n  Button,\n  Checkbox,\n  Field,\n  FieldArray,\n  Form,\n  HorizontalGroup,\n  IconButton,\n  Input,\n  InputControl,\n  MultiSelect,\n  Select,\n  Switch,\n  useStyles2,\n} from '@grafana/ui';\nimport { AmRouteReceiver, FormAmRoute } from '../../types/amroutes';\nimport {\n  emptyArrayFieldMatcher,\n  mapMultiSelectValueToStrings,\n  mapSelectValueToString,\n  optionalPositiveInteger,\n  stringToSelectableValue,\n  stringsToSelectableValues,\n} from '../../utils/amroutes';\nimport { timeOptions } from '../../utils/time';\nimport { getFormStyles } from './formStyles';\n\nexport interface AmRoutesExpandedFormProps {\n  onCancel: () => void;\n  onSave: (data: FormAmRoute) => void;\n  receivers: AmRouteReceiver[];\n  routes: FormAmRoute;\n}\n\nexport const AmRoutesExpandedForm: FC<AmRoutesExpandedFormProps> = ({ onCancel, onSave, receivers, routes }) => {\n  const styles = useStyles2(getStyles);\n  const formStyles = useStyles2(getFormStyles);\n  const [overrideGrouping, setOverrideGrouping] = useState(routes.groupBy.length > 0);\n  const [overrideTimings, setOverrideTimings] = useState(\n    !!routes.groupWaitValue || !!routes.groupIntervalValue || !!routes.repeatIntervalValue\n  );\n  const [groupByOptions, setGroupByOptions] = useState(stringsToSelectableValues(routes.groupBy));\n\n  return (\n    <Form defaultValues={routes} onSubmit={onSave}>\n      {({ control, register, errors, setValue }) => (\n        <>\n          {/* @ts-ignore-check: react-hook-form made me do this */}\n          <input type=\"hidden\" {...register('id')} />\n          {/* @ts-ignore-check: react-hook-form made me do this */}\n          <FieldArray name=\"matchers\" control={control}>\n            {({ fields, append, remove }) => (\n              <>\n                <div>Matching labels</div>\n                <div className={styles.matchersContainer}>\n                  {fields.map((field, index) => {\n                    const localPath = `matchers[${index}]`;\n                    return (\n                      <HorizontalGroup key={field.id} align=\"flex-start\">\n                        <Field\n                          label=\"Label\"\n                          invalid={!!errors.matchers?.[index]?.name}\n                          error={errors.matchers?.[index]?.name?.message}\n                        >\n                          <Input\n                            {...register(`${localPath}.name`, { required: 'Field is required' })}\n                            defaultValue={field.name}\n                            placeholder=\"label\"\n                          />\n                        </Field>\n                        <Field\n                          label=\"Value\"\n                          invalid={!!errors.matchers?.[index]?.value}\n                          error={errors.matchers?.[index]?.value?.message}\n                        >\n                          <Input\n                            {...register(`${localPath}.value`, { required: 'Field is required' })}\n                            defaultValue={field.value}\n                            placeholder=\"value\"\n                          />\n                        </Field>\n                        <Field className={styles.matcherRegexField} label=\"Regex\">\n                          <Checkbox {...register(`${localPath}.isRegex`)} defaultChecked={field.isRegex} />\n                        </Field>\n                        <Field className={styles.matcherRegexField} label=\"Equal\">\n                          <Checkbox {...register(`${localPath}.isEqual`)} defaultChecked={field.isEqual} />\n                        </Field>\n                        <IconButton\n                          className={styles.removeButton}\n                          tooltip=\"Remove matcher\"\n                          name={'trash-alt'}\n                          onClick={() => remove(index)}\n                        >\n                          Remove\n                        </IconButton>\n                      </HorizontalGroup>\n                    );\n                  })}\n                </div>\n                <Button\n                  className={styles.addMatcherBtn}\n                  icon=\"plus\"\n                  onClick={() => append(emptyArrayFieldMatcher)}\n                  variant=\"secondary\"\n                  type=\"button\"\n                >\n                  Add matcher\n                </Button>\n              </>\n            )}\n          </FieldArray>\n          <Field label=\"Contact point\">\n            {/* @ts-ignore-check: react-hook-form made me do this */}\n            <InputControl\n              render={({ field: { onChange, ref, ...field } }) => (\n                <Select\n                  menuShouldPortal\n                  {...field}\n                  className={formStyles.input}\n                  onChange={(value) => onChange(mapSelectValueToString(value))}\n                  options={receivers}\n                />\n              )}\n              control={control}\n              name=\"receiver\"\n            />\n          </Field>\n          <Field label=\"Continue matching subsequent sibling nodes\">\n            <Switch {...register('continue')} />\n          </Field>\n          <Field label=\"Override grouping\">\n            <Switch\n              value={overrideGrouping}\n              onChange={() => setOverrideGrouping((overrideGrouping) => !overrideGrouping)}\n            />\n          </Field>\n          {overrideGrouping && (\n            <Field label=\"Group by\" description=\"Group alerts when you receive a notification based on labels.\">\n              <InputControl\n                render={({ field: { onChange, ref, ...field } }) => (\n                  <MultiSelect\n                    menuShouldPortal\n                    {...field}\n                    allowCustomValue\n                    className={formStyles.input}\n                    onCreateOption={(opt: string) => {\n                      setGroupByOptions((opts) => [...opts, stringToSelectableValue(opt)]);\n\n                      // @ts-ignore-check: react-hook-form made me do this\n                      setValue('groupBy', [...field.value, opt]);\n                    }}\n                    onChange={(value) => onChange(mapMultiSelectValueToStrings(value))}\n                    options={groupByOptions}\n                  />\n                )}\n                control={control}\n                name=\"groupBy\"\n              />\n            </Field>\n          )}\n          <Field label=\"Override general timings\">\n            <Switch\n              value={overrideTimings}\n              onChange={() => setOverrideTimings((overrideTimings) => !overrideTimings)}\n            />\n          </Field>\n          {overrideTimings && (\n            <>\n              <Field\n                label=\"Group wait\"\n                description=\"The waiting time until the initial notification is sent for a new group created by an incoming alert.\"\n                invalid={!!errors.groupWaitValue}\n                error={errors.groupWaitValue?.message}\n              >\n                <>\n                  <div className={cx(formStyles.container, formStyles.timingContainer)}>\n                    <InputControl\n                      render={({ field, fieldState: { invalid } }) => (\n                        <Input {...field} className={formStyles.smallInput} invalid={invalid} />\n                      )}\n                      control={control}\n                      name=\"groupWaitValue\"\n                      rules={{\n                        validate: optionalPositiveInteger,\n                      }}\n                    />\n                    <InputControl\n                      render={({ field: { onChange, ref, ...field } }) => (\n                        <Select\n                          menuShouldPortal\n                          {...field}\n                          className={formStyles.input}\n                          onChange={(value) => onChange(mapSelectValueToString(value))}\n                          options={timeOptions}\n                        />\n                      )}\n                      control={control}\n                      name=\"groupWaitValueType\"\n                    />\n                  </div>\n                </>\n              </Field>\n              <Field\n                label=\"Group interval\"\n                description=\"The waiting time to send a batch of new alerts for that group after the first notification was sent.\"\n                invalid={!!errors.groupIntervalValue}\n                error={errors.groupIntervalValue?.message}\n              >\n                <>\n                  <div className={cx(formStyles.container, formStyles.timingContainer)}>\n                    <InputControl\n                      render={({ field, fieldState: { invalid } }) => (\n                        <Input {...field} className={formStyles.smallInput} invalid={invalid} />\n                      )}\n                      control={control}\n                      name=\"groupIntervalValue\"\n                      rules={{\n                        validate: optionalPositiveInteger,\n                      }}\n                    />\n                    <InputControl\n                      render={({ field: { onChange, ref, ...field } }) => (\n                        <Select\n                          menuShouldPortal\n                          {...field}\n                          className={formStyles.input}\n                          onChange={(value) => onChange(mapSelectValueToString(value))}\n                          options={timeOptions}\n                        />\n                      )}\n                      control={control}\n                      name=\"groupIntervalValueType\"\n                    />\n                  </div>\n                </>\n              </Field>\n              <Field\n                label=\"Repeat interval\"\n                description=\"The waiting time to resend an alert after they have successfully been sent.\"\n                invalid={!!errors.repeatIntervalValue}\n                error={errors.repeatIntervalValue?.message}\n              >\n                <>\n                  <div className={cx(formStyles.container, formStyles.timingContainer)}>\n                    <InputControl\n                      render={({ field, fieldState: { invalid } }) => (\n                        <Input {...field} className={formStyles.smallInput} invalid={invalid} />\n                      )}\n                      control={control}\n                      name=\"repeatIntervalValue\"\n                      rules={{\n                        validate: optionalPositiveInteger,\n                      }}\n                    />\n                    <InputControl\n                      render={({ field: { onChange, ref, ...field } }) => (\n                        <Select\n                          menuShouldPortal\n                          {...field}\n                          className={formStyles.input}\n                          menuPlacement=\"top\"\n                          onChange={(value) => onChange(mapSelectValueToString(value))}\n                          options={timeOptions}\n                        />\n                      )}\n                      control={control}\n                      name=\"repeatIntervalValueType\"\n                    />\n                  </div>\n                </>\n              </Field>\n            </>\n          )}\n          <div className={styles.buttonGroup}>\n            <Button type=\"submit\">Save policy</Button>\n            <Button onClick={onCancel} fill=\"outline\" type=\"button\" variant=\"secondary\">\n              Cancel\n            </Button>\n          </div>\n        </>\n      )}\n    </Form>\n  );\n};\n\nconst getStyles = (theme: GrafanaTheme2) => {\n  const commonSpacing = theme.spacing(3.5);\n\n  return {\n    addMatcherBtn: css`\n      margin-bottom: ${commonSpacing};\n    `,\n    matchersContainer: css`\n      background-color: ${theme.colors.background.secondary};\n      margin: ${theme.spacing(1, 0)};\n      padding: ${theme.spacing(1, 4.6, 1, 1.5)};\n      width: fit-content;\n    `,\n    matcherRegexField: css`\n      margin-left: ${theme.spacing(6)};\n    `,\n    nestedPolicies: css`\n      margin-top: ${commonSpacing};\n    `,\n    removeButton: css`\n      margin-left: ${theme.spacing(1)};\n      margin-top: ${theme.spacing(2.5)};\n    `,\n    buttonGroup: css`\n      margin: ${theme.spacing(6)} 0 ${commonSpacing};\n\n      & > * + * {\n        margin-left: ${theme.spacing(1.5)};\n      }\n    `,\n  };\n};\n","import { css } from '@emotion/css';\nimport { GrafanaTheme2 } from '@grafana/data';\nimport React, { FC, useState } from 'react';\nimport { Button, useStyles2 } from '@grafana/ui';\nimport { AmRouteReceiver, FormAmRoute } from '../../types/amroutes';\nimport { emptyRoute } from '../../utils/amroutes';\nimport { AmRoutesTable } from './AmRoutesTable';\nimport { getGridStyles } from './gridStyles';\n\nexport interface AmRoutesExpandedReadProps {\n  onChange: (routes: FormAmRoute) => void;\n  receivers: AmRouteReceiver[];\n  routes: FormAmRoute;\n}\n\nexport const AmRoutesExpandedRead: FC<AmRoutesExpandedReadProps> = ({ onChange, receivers, routes }) => {\n  const styles = useStyles2(getStyles);\n  const gridStyles = useStyles2(getGridStyles);\n\n  const groupWait = routes.groupWaitValue ? `${routes.groupWaitValue}${routes.groupWaitValueType}` : '-';\n  const groupInterval = routes.groupIntervalValue\n    ? `${routes.groupIntervalValue}${routes.groupIntervalValueType}`\n    : '-';\n  const repeatInterval = routes.repeatIntervalValue\n    ? `${routes.repeatIntervalValue}${routes.repeatIntervalValueType}`\n    : '-';\n\n  const [subroutes, setSubroutes] = useState(routes.routes);\n  const [isAddMode, setIsAddMode] = useState(false);\n\n  return (\n    <div className={gridStyles.container}>\n      <div className={gridStyles.titleCell}>Group wait</div>\n      <div className={gridStyles.valueCell}>{groupWait}</div>\n      <div className={gridStyles.titleCell}>Group interval</div>\n      <div className={gridStyles.valueCell}>{groupInterval}</div>\n      <div className={gridStyles.titleCell}>Repeat interval</div>\n      <div className={gridStyles.valueCell}>{repeatInterval}</div>\n      <div className={gridStyles.titleCell}>Nested policies</div>\n      <div className={gridStyles.valueCell}>\n        {!!subroutes.length ? (\n          <AmRoutesTable\n            isAddMode={isAddMode}\n            onCancelAdd={() => {\n              setIsAddMode(false);\n              setSubroutes((subroutes) => {\n                const newSubroutes = [...subroutes];\n                newSubroutes.pop();\n\n                return newSubroutes;\n              });\n            }}\n            onChange={(newRoutes) => {\n              onChange({\n                ...routes,\n                routes: newRoutes,\n              });\n\n              if (isAddMode) {\n                setIsAddMode(false);\n              }\n            }}\n            receivers={receivers}\n            routes={subroutes}\n          />\n        ) : (\n          <p>No nested policies configured.</p>\n        )}\n        {!isAddMode && (\n          <Button\n            className={styles.addNestedRoutingBtn}\n            icon=\"plus\"\n            onClick={() => {\n              setSubroutes((subroutes) => [...subroutes, emptyRoute]);\n              setIsAddMode(true);\n            }}\n            variant=\"secondary\"\n            type=\"button\"\n          >\n            Add nested policy\n          </Button>\n        )}\n      </div>\n    </div>\n  );\n};\n\nconst getStyles = (theme: GrafanaTheme2) => {\n  return {\n    addNestedRoutingBtn: css`\n      margin-top: ${theme.spacing(2)};\n    `,\n  };\n};\n","import React, { FC, useCallback, useEffect, useMemo, useState } from 'react';\nimport { Button, HorizontalGroup, IconButton } from '@grafana/ui';\nimport { AmRouteReceiver, FormAmRoute } from '../../types/amroutes';\nimport { prepareItems } from '../../utils/dynamicTable';\nimport { DynamicTable, DynamicTableColumnProps, DynamicTableItemProps } from '../DynamicTable';\nimport { AmRoutesExpandedForm } from './AmRoutesExpandedForm';\nimport { AmRoutesExpandedRead } from './AmRoutesExpandedRead';\nimport { Matchers } from '../silences/Matchers';\n\nexport interface AmRoutesTableProps {\n  isAddMode: boolean;\n  onChange: (routes: FormAmRoute[]) => void;\n  onCancelAdd: () => void;\n  receivers: AmRouteReceiver[];\n  routes: FormAmRoute[];\n}\n\ntype RouteTableColumnProps = DynamicTableColumnProps<FormAmRoute>;\ntype RouteTableItemProps = DynamicTableItemProps<FormAmRoute>;\n\nexport const AmRoutesTable: FC<AmRoutesTableProps> = ({ isAddMode, onCancelAdd, onChange, receivers, routes }) => {\n  const [editMode, setEditMode] = useState(false);\n\n  const [expandedId, setExpandedId] = useState<string | number>();\n\n  const expandItem = useCallback((item: RouteTableItemProps) => setExpandedId(item.id), []);\n\n  const collapseItem = useCallback(() => setExpandedId(undefined), []);\n\n  const cols: RouteTableColumnProps[] = [\n    {\n      id: 'matchingCriteria',\n      label: 'Matching labels',\n      // eslint-disable-next-line react/display-name\n      renderCell: (item) => <Matchers matchers={item.data.matchers} />,\n      size: 10,\n    },\n    {\n      id: 'groupBy',\n      label: 'Group by',\n      renderCell: (item) => item.data.groupBy.join(', ') || '-',\n      size: 5,\n    },\n    {\n      id: 'receiverChannel',\n      label: 'Contact point',\n      renderCell: (item) => item.data.receiver || '-',\n      size: 5,\n    },\n    {\n      id: 'actions',\n      label: 'Actions',\n      // eslint-disable-next-line react/display-name\n      renderCell: (item, index) => {\n        if (item.renderExpandedContent) {\n          return null;\n        }\n\n        const expandWithCustomContent = () => {\n          expandItem(item);\n          setEditMode(true);\n        };\n\n        return (\n          <HorizontalGroup>\n            <Button icon=\"pen\" onClick={expandWithCustomContent} size=\"sm\" type=\"button\" variant=\"secondary\">\n              Edit\n            </Button>\n            <IconButton\n              name=\"trash-alt\"\n              onClick={() => {\n                const newRoutes = [...routes];\n\n                newRoutes.splice(index, 1);\n\n                onChange(newRoutes);\n              }}\n              type=\"button\"\n            />\n          </HorizontalGroup>\n        );\n      },\n      size: '100px',\n    },\n  ];\n\n  const items = useMemo(() => prepareItems(routes), [routes]);\n\n  // expand the last item when adding\n  useEffect(() => {\n    if (isAddMode && items.length) {\n      setExpandedId(items[items.length - 1].id);\n    }\n  }, [isAddMode, items]);\n\n  return (\n    <DynamicTable\n      cols={cols}\n      isExpandable={true}\n      items={items}\n      testIdGenerator={() => 'am-routes-row'}\n      onCollapse={collapseItem}\n      onExpand={expandItem}\n      isExpanded={(item) => expandedId === item.id}\n      renderExpandedContent={(item: RouteTableItemProps, index) =>\n        isAddMode || editMode ? (\n          <AmRoutesExpandedForm\n            onCancel={() => {\n              if (isAddMode) {\n                onCancelAdd();\n              }\n              setEditMode(false);\n            }}\n            onSave={(data) => {\n              const newRoutes = [...routes];\n\n              newRoutes[index] = {\n                ...newRoutes[index],\n                ...data,\n              };\n              setEditMode(false);\n              onChange(newRoutes);\n            }}\n            receivers={receivers}\n            routes={item.data}\n          />\n        ) : (\n          <AmRoutesExpandedRead\n            onChange={(data) => {\n              const newRoutes = [...routes];\n\n              newRoutes[index] = {\n                ...item.data,\n                ...data,\n              };\n\n              onChange(newRoutes);\n            }}\n            receivers={receivers}\n            routes={item.data}\n          />\n        )\n      }\n    />\n  );\n};\n","import { DynamicTableItemProps } from '../components/DynamicTable';\n\nexport const prepareItems = <T = unknown>(\n  items: T[],\n  idCreator?: (item: T) => number | string\n): Array<DynamicTableItemProps<T>> =>\n  items.map((item, index) => ({\n    id: idCreator?.(item) ?? index,\n    data: item,\n  }));\n","import React, { FC, useState } from 'react';\nimport { css } from '@emotion/css';\nimport { GrafanaTheme2 } from '@grafana/data';\nimport { Button, useStyles2 } from '@grafana/ui';\nimport { AmRouteReceiver, FormAmRoute } from '../../types/amroutes';\nimport { emptyArrayFieldMatcher, emptyRoute } from '../../utils/amroutes';\nimport { EmptyArea } from '../EmptyArea';\nimport { AmRoutesTable } from './AmRoutesTable';\n\nexport interface AmSpecificRoutingProps {\n  onChange: (routes: FormAmRoute) => void;\n  onRootRouteEdit: () => void;\n  receivers: AmRouteReceiver[];\n  routes: FormAmRoute;\n}\n\nexport const AmSpecificRouting: FC<AmSpecificRoutingProps> = ({ onChange, onRootRouteEdit, receivers, routes }) => {\n  const [actualRoutes, setActualRoutes] = useState(routes.routes);\n  const [isAddMode, setIsAddMode] = useState(false);\n\n  const styles = useStyles2(getStyles);\n\n  const addNewRoute = () => {\n    setIsAddMode(true);\n    setActualRoutes((actualRoutes) => [\n      ...actualRoutes,\n      {\n        ...emptyRoute,\n        matchers: [emptyArrayFieldMatcher],\n      },\n    ]);\n  };\n\n  return (\n    <div className={styles.container}>\n      <h5>Specific routing</h5>\n      <p>Send specific alerts to chosen contact points, based on matching criteria</p>\n      {!routes.receiver ? (\n        <EmptyArea\n          buttonIcon=\"rocket\"\n          buttonLabel=\"Set a default contact point\"\n          onButtonClick={onRootRouteEdit}\n          text=\"You haven't set a default contact point for the root route yet.\"\n        />\n      ) : actualRoutes.length > 0 ? (\n        <>\n          {!isAddMode && (\n            <Button className={styles.addMatcherBtn} icon=\"plus\" onClick={addNewRoute} type=\"button\">\n              New policy\n            </Button>\n          )}\n          <AmRoutesTable\n            isAddMode={isAddMode}\n            onCancelAdd={() => {\n              setIsAddMode(false);\n              setActualRoutes((actualRoutes) => {\n                const newRoutes = [...actualRoutes];\n                newRoutes.pop();\n\n                return newRoutes;\n              });\n            }}\n            onChange={(newRoutes) => {\n              onChange({\n                ...routes,\n                routes: newRoutes,\n              });\n\n              if (isAddMode) {\n                setIsAddMode(false);\n              }\n            }}\n            receivers={receivers}\n            routes={actualRoutes}\n          />\n        </>\n      ) : (\n        <EmptyArea\n          buttonIcon=\"plus\"\n          buttonLabel=\"New specific policy\"\n          onButtonClick={addNewRoute}\n          text=\"You haven't created any specific policies yet.\"\n        />\n      )}\n    </div>\n  );\n};\n\nconst getStyles = (theme: GrafanaTheme2) => {\n  return {\n    container: css`\n      display: flex;\n      flex-flow: column nowrap;\n    `,\n    addMatcherBtn: css`\n      align-self: flex-end;\n      margin-bottom: ${theme.spacing(3.5)};\n    `,\n  };\n};\n","import React, { FC, useCallback, useEffect, useMemo, useState } from 'react';\nimport { css } from '@emotion/css';\nimport { GrafanaTheme2 } from '@grafana/data';\nimport { Alert, LoadingPlaceholder, useStyles2, withErrorBoundary } from '@grafana/ui';\nimport { useDispatch } from 'react-redux';\nimport { Redirect } from 'react-router-dom';\nimport { Receiver } from 'app/plugins/datasource/alertmanager/types';\nimport { useCleanup } from '../../../core/hooks/useCleanup';\nimport { AlertingPageWrapper } from './components/AlertingPageWrapper';\nimport { AlertManagerPicker } from './components/AlertManagerPicker';\nimport { AmRootRoute } from './components/amroutes/AmRootRoute';\nimport { AmSpecificRouting } from './components/amroutes/AmSpecificRouting';\nimport { useAlertManagerSourceName } from './hooks/useAlertManagerSourceName';\nimport { useUnifiedAlertingSelector } from './hooks/useUnifiedAlertingSelector';\nimport { fetchAlertManagerConfigAction, updateAlertManagerConfigAction } from './state/actions';\nimport { AmRouteReceiver, FormAmRoute } from './types/amroutes';\nimport { amRouteToFormAmRoute, formAmRouteToAmRoute, stringsToSelectableValues } from './utils/amroutes';\nimport { initialAsyncRequestState } from './utils/redux';\n\nconst AmRoutes: FC = () => {\n  const dispatch = useDispatch();\n  const styles = useStyles2(getStyles);\n  const [isRootRouteEditMode, setIsRootRouteEditMode] = useState(false);\n\n  const [alertManagerSourceName, setAlertManagerSourceName] = useAlertManagerSourceName();\n  const amConfigs = useUnifiedAlertingSelector((state) => state.amConfigs);\n\n  const fetchConfig = useCallback(() => {\n    if (alertManagerSourceName) {\n      dispatch(fetchAlertManagerConfigAction(alertManagerSourceName));\n    }\n  }, [alertManagerSourceName, dispatch]);\n\n  useEffect(() => {\n    fetchConfig();\n  }, [fetchConfig]);\n\n  const { result, loading: resultLoading, error: resultError } =\n    (alertManagerSourceName && amConfigs[alertManagerSourceName]) || initialAsyncRequestState;\n\n  const config = result?.alertmanager_config;\n  const [rootRoute, id2ExistingRoute] = useMemo(() => amRouteToFormAmRoute(config?.route), [config?.route]);\n\n  const receivers = stringsToSelectableValues(\n    (config?.receivers ?? []).map((receiver: Receiver) => receiver.name)\n  ) as AmRouteReceiver[];\n\n  const enterRootRouteEditMode = () => {\n    setIsRootRouteEditMode(true);\n  };\n\n  const exitRootRouteEditMode = () => {\n    setIsRootRouteEditMode(false);\n  };\n\n  useCleanup((state) => state.unifiedAlerting.saveAMConfig);\n  const handleSave = (data: Partial<FormAmRoute>) => {\n    const newData = formAmRouteToAmRoute(\n      {\n        ...rootRoute,\n        ...data,\n      },\n      id2ExistingRoute\n    );\n\n    if (isRootRouteEditMode) {\n      exitRootRouteEditMode();\n    }\n\n    dispatch(\n      updateAlertManagerConfigAction({\n        newConfig: {\n          ...result,\n          alertmanager_config: {\n            ...result.alertmanager_config,\n            route: newData,\n          },\n        },\n        oldConfig: result,\n        alertManagerSourceName: alertManagerSourceName!,\n        successMessage: 'Saved',\n        refetch: true,\n      })\n    );\n  };\n\n  if (!alertManagerSourceName) {\n    return <Redirect to=\"/alerting/routes\" />;\n  }\n\n  return (\n    <AlertingPageWrapper pageId=\"am-routes\">\n      <AlertManagerPicker current={alertManagerSourceName} onChange={setAlertManagerSourceName} />\n      {resultError && !resultLoading && (\n        <Alert severity=\"error\" title=\"Error loading Alertmanager config\">\n          {resultError.message || 'Unknown error.'}\n        </Alert>\n      )}\n      {resultLoading && <LoadingPlaceholder text=\"Loading Alertmanager config...\" />}\n      {result && !resultLoading && !resultError && (\n        <>\n          <AmRootRoute\n            alertManagerSourceName={alertManagerSourceName}\n            isEditMode={isRootRouteEditMode}\n            onSave={handleSave}\n            onEnterEditMode={enterRootRouteEditMode}\n            onExitEditMode={exitRootRouteEditMode}\n            receivers={receivers}\n            routes={rootRoute}\n          />\n          <div className={styles.break} />\n          <AmSpecificRouting\n            onChange={handleSave}\n            onRootRouteEdit={enterRootRouteEditMode}\n            receivers={receivers}\n            routes={rootRoute}\n          />\n        </>\n      )}\n    </AlertingPageWrapper>\n  );\n};\n\nexport default withErrorBoundary(AmRoutes, { style: 'page' });\n\nconst getStyles = (theme: GrafanaTheme2) => ({\n  break: css`\n    width: 100%;\n    height: 0;\n    margin-bottom: ${theme.spacing(2)};\n    border-bottom: solid 1px ${theme.colors.border.medium};\n  `,\n});\n","import React, { useCallback } from 'react';\nimport { GrafanaTheme } from '@grafana/data';\nimport { useStyles } from '@grafana/ui';\nimport { css } from '@emotion/css';\nimport { Matcher } from 'app/plugins/datasource/alertmanager/types';\nimport { AlertLabel } from '../AlertLabel';\nimport { matcherToOperator } from '../../utils/alertmanager';\n\ntype MatchersProps = { matchers: Matcher[]; onRemoveLabel?(index: number): void };\n\nexport const Matchers = ({ matchers, onRemoveLabel }: MatchersProps) => {\n  const styles = useStyles(getStyles);\n\n  const removeLabel = useCallback(\n    (index: number) => {\n      if (!!onRemoveLabel) {\n        onRemoveLabel(index);\n      }\n    },\n    [onRemoveLabel]\n  );\n\n  return (\n    <div className={styles.wrapper}>\n      {matchers.map((matcher, index) => {\n        const { name, value } = matcher;\n        return (\n          <AlertLabel\n            key={`${name}-${value}-${index}`}\n            labelKey={name}\n            value={value}\n            operator={matcherToOperator(matcher)}\n            onRemoveLabel={!!onRemoveLabel ? () => removeLabel(index) : undefined}\n          />\n        );\n      })}\n    </div>\n  );\n};\n\nconst getStyles = (theme: GrafanaTheme) => ({\n  wrapper: css`\n    & > * {\n      margin-top: ${theme.spacing.xs};\n      margin-right: ${theme.spacing.xs};\n    }\n    padding-bottom: ${theme.spacing.xs};\n  `,\n});\n","import { useEffect, useRef } from 'react';\nimport { useDispatch } from 'react-redux';\nimport { cleanUpAction, StateSelector } from '../actions/cleanUp';\n\nexport function useCleanup<T>(stateSelector: StateSelector<T>) {\n  const dispatch = useDispatch();\n  //bit of a hack to unburden user from having to wrap stateSelcetor in a useCallback. Otherwise cleanup would happen on every render\n  const selectorRef = useRef(stateSelector);\n  selectorRef.current = stateSelector;\n  useEffect(() => {\n    return () => {\n      dispatch(cleanUpAction({ stateSelector: selectorRef.current }));\n    };\n  }, [dispatch]);\n}\n","var scope = (typeof global !== \"undefined\" && global) ||\n            (typeof self !== \"undefined\" && self) ||\n            window;\nvar apply = Function.prototype.apply;\n\n// DOM APIs, for completeness\n\nexports.setTimeout = function() {\n  return new Timeout(apply.call(setTimeout, scope, arguments), clearTimeout);\n};\nexports.setInterval = function() {\n  return new Timeout(apply.call(setInterval, scope, arguments), clearInterval);\n};\nexports.clearTimeout =\nexports.clearInterval = function(timeout) {\n  if (timeout) {\n    timeout.close();\n  }\n};\n\nfunction Timeout(id, clearFn) {\n  this._id = id;\n  this._clearFn = clearFn;\n}\nTimeout.prototype.unref = Timeout.prototype.ref = function() {};\nTimeout.prototype.close = function() {\n  this._clearFn.call(scope, this._id);\n};\n\n// Does not start the time, just sets up the members needed.\nexports.enroll = function(item, msecs) {\n  clearTimeout(item._idleTimeoutId);\n  item._idleTimeout = msecs;\n};\n\nexports.unenroll = function(item) {\n  clearTimeout(item._idleTimeoutId);\n  item._idleTimeout = -1;\n};\n\nexports._unrefActive = exports.active = function(item) {\n  clearTimeout(item._idleTimeoutId);\n\n  var msecs = item._idleTimeout;\n  if (msecs >= 0) {\n    item._idleTimeoutId = setTimeout(function onTimeout() {\n      if (item._onTimeout)\n        item._onTimeout();\n    }, msecs);\n  }\n};\n\n// setimmediate attaches itself to the global object\nrequire(\"setimmediate\");\n// On some exotic environments, it's not clear which object `setimmediate` was\n// able to install onto.  Search each possibility in the same order as the\n// `setimmediate` library.\nexports.setImmediate = (typeof self !== \"undefined\" && self.setImmediate) ||\n                       (typeof global !== \"undefined\" && global.setImmediate) ||\n                       (this && this.setImmediate);\nexports.clearImmediate = (typeof self !== \"undefined\" && self.clearImmediate) ||\n                         (typeof global !== \"undefined\" && global.clearImmediate) ||\n                         (this && this.clearImmediate);\n","(function (global, undefined) {\n    \"use strict\";\n\n    if (global.setImmediate) {\n        return;\n    }\n\n    var nextHandle = 1; // Spec says greater than zero\n    var tasksByHandle = {};\n    var currentlyRunningATask = false;\n    var doc = global.document;\n    var registerImmediate;\n\n    function setImmediate(callback) {\n      // Callback can either be a function or a string\n      if (typeof callback !== \"function\") {\n        callback = new Function(\"\" + callback);\n      }\n      // Copy function arguments\n      var args = new Array(arguments.length - 1);\n      for (var i = 0; i < args.length; i++) {\n          args[i] = arguments[i + 1];\n      }\n      // Store and register the task\n      var task = { callback: callback, args: args };\n      tasksByHandle[nextHandle] = task;\n      registerImmediate(nextHandle);\n      return nextHandle++;\n    }\n\n    function clearImmediate(handle) {\n        delete tasksByHandle[handle];\n    }\n\n    function run(task) {\n        var callback = task.callback;\n        var args = task.args;\n        switch (args.length) {\n        case 0:\n            callback();\n            break;\n        case 1:\n            callback(args[0]);\n            break;\n        case 2:\n            callback(args[0], args[1]);\n            break;\n        case 3:\n            callback(args[0], args[1], args[2]);\n            break;\n        default:\n            callback.apply(undefined, args);\n            break;\n        }\n    }\n\n    function runIfPresent(handle) {\n        // From the spec: \"Wait until any invocations of this algorithm started before this one have completed.\"\n        // So if we're currently running a task, we'll need to delay this invocation.\n        if (currentlyRunningATask) {\n            // Delay by doing a setTimeout. setImmediate was tried instead, but in Firefox 7 it generated a\n            // \"too much recursion\" error.\n            setTimeout(runIfPresent, 0, handle);\n        } else {\n            var task = tasksByHandle[handle];\n            if (task) {\n                currentlyRunningATask = true;\n                try {\n                    run(task);\n                } finally {\n                    clearImmediate(handle);\n                    currentlyRunningATask = false;\n                }\n            }\n        }\n    }\n\n    function installNextTickImplementation() {\n        registerImmediate = function(handle) {\n            process.nextTick(function () { runIfPresent(handle); });\n        };\n    }\n\n    function canUsePostMessage() {\n        // The test against `importScripts` prevents this implementation from being installed inside a web worker,\n        // where `global.postMessage` means something completely different and can't be used for this purpose.\n        if (global.postMessage && !global.importScripts) {\n            var postMessageIsAsynchronous = true;\n            var oldOnMessage = global.onmessage;\n            global.onmessage = function() {\n                postMessageIsAsynchronous = false;\n            };\n            global.postMessage(\"\", \"*\");\n            global.onmessage = oldOnMessage;\n            return postMessageIsAsynchronous;\n        }\n    }\n\n    function installPostMessageImplementation() {\n        // Installs an event handler on `global` for the `message` event: see\n        // * https://developer.mozilla.org/en/DOM/window.postMessage\n        // * http://www.whatwg.org/specs/web-apps/current-work/multipage/comms.html#crossDocumentMessages\n\n        var messagePrefix = \"setImmediate$\" + Math.random() + \"$\";\n        var onGlobalMessage = function(event) {\n            if (event.source === global &&\n                typeof event.data === \"string\" &&\n                event.data.indexOf(messagePrefix) === 0) {\n                runIfPresent(+event.data.slice(messagePrefix.length));\n            }\n        };\n\n        if (global.addEventListener) {\n            global.addEventListener(\"message\", onGlobalMessage, false);\n        } else {\n            global.attachEvent(\"onmessage\", onGlobalMessage);\n        }\n\n        registerImmediate = function(handle) {\n            global.postMessage(messagePrefix + handle, \"*\");\n        };\n    }\n\n    function installMessageChannelImplementation() {\n        var channel = new MessageChannel();\n        channel.port1.onmessage = function(event) {\n            var handle = event.data;\n            runIfPresent(handle);\n        };\n\n        registerImmediate = function(handle) {\n            channel.port2.postMessage(handle);\n        };\n    }\n\n    function installReadyStateChangeImplementation() {\n        var html = doc.documentElement;\n        registerImmediate = function(handle) {\n            // Create a <script> element; its readystatechange event will be fired asynchronously once it is inserted\n            // into the document. Do so, thus queuing up the task. Remember to clean up once it's been called.\n            var script = doc.createElement(\"script\");\n            script.onreadystatechange = function () {\n                runIfPresent(handle);\n                script.onreadystatechange = null;\n                html.removeChild(script);\n                script = null;\n            };\n            html.appendChild(script);\n        };\n    }\n\n    function installSetTimeoutImplementation() {\n        registerImmediate = function(handle) {\n            setTimeout(runIfPresent, 0, handle);\n        };\n    }\n\n    // If supported, we should attach to the prototype of global, since that is where setTimeout et al. live.\n    var attachTo = Object.getPrototypeOf && Object.getPrototypeOf(global);\n    attachTo = attachTo && attachTo.setTimeout ? attachTo : global;\n\n    // Don't get fooled by e.g. browserify environments.\n    if ({}.toString.call(global.process) === \"[object process]\") {\n        // For Node.js before 0.9\n        installNextTickImplementation();\n\n    } else if (canUsePostMessage()) {\n        // For non-IE10 modern browsers\n        installPostMessageImplementation();\n\n    } else if (global.MessageChannel) {\n        // For web workers, where supported\n        installMessageChannelImplementation();\n\n    } else if (doc && \"onreadystatechange\" in doc.createElement(\"script\")) {\n        // For IE 6–8\n        installReadyStateChangeImplementation();\n\n    } else {\n        // For older browsers\n        installSetTimeoutImplementation();\n    }\n\n    attachTo.setImmediate = setImmediate;\n    attachTo.clearImmediate = clearImmediate;\n}(typeof self === \"undefined\" ? typeof global === \"undefined\" ? this : global : self));\n","import { useQueryParams } from 'app/core/hooks/useQueryParams';\nimport store from 'app/core/store';\nimport { useCallback } from 'react';\nimport { ALERTMANAGER_NAME_LOCAL_STORAGE_KEY, ALERTMANAGER_NAME_QUERY_KEY } from '../utils/constants';\nimport { getAlertManagerDataSources, GRAFANA_RULES_SOURCE_NAME } from '../utils/datasource';\n\nfunction isAlertManagerSource(alertManagerSourceName: string): boolean {\n  return (\n    alertManagerSourceName === GRAFANA_RULES_SOURCE_NAME ||\n    !!getAlertManagerDataSources().find((ds) => ds.name === alertManagerSourceName)\n  );\n}\n\n/* this will return am name either from query params or from local storage or a default (grafana).\n *\n * fallbackUrl - if provided, will redirect to this url if alertmanager provided in query no longer\n */\nexport function useAlertManagerSourceName(): [string | undefined, (alertManagerSourceName: string) => void] {\n  const [queryParams, updateQueryParams] = useQueryParams();\n\n  const update = useCallback(\n    (alertManagerSourceName: string) => {\n      if (!isAlertManagerSource(alertManagerSourceName)) {\n        return;\n      }\n      if (alertManagerSourceName === GRAFANA_RULES_SOURCE_NAME) {\n        store.delete(ALERTMANAGER_NAME_LOCAL_STORAGE_KEY);\n        updateQueryParams({ [ALERTMANAGER_NAME_QUERY_KEY]: null });\n      } else {\n        store.set(ALERTMANAGER_NAME_LOCAL_STORAGE_KEY, alertManagerSourceName);\n        updateQueryParams({ [ALERTMANAGER_NAME_QUERY_KEY]: alertManagerSourceName });\n      }\n    },\n    [updateQueryParams]\n  );\n\n  const querySource = queryParams[ALERTMANAGER_NAME_QUERY_KEY];\n\n  if (querySource && typeof querySource === 'string') {\n    if (isAlertManagerSource(querySource)) {\n      return [querySource, update];\n    } else {\n      // non existing alertmanager\n      return [undefined, update];\n    }\n  }\n  const storeSource = store.get(ALERTMANAGER_NAME_LOCAL_STORAGE_KEY);\n  if (storeSource && typeof storeSource === 'string' && isAlertManagerSource(storeSource)) {\n    update(storeSource);\n    return [storeSource, update];\n  }\n\n  return [GRAFANA_RULES_SOURCE_NAME, update];\n}\n","import { SelectableValue, GrafanaTheme2 } from '@grafana/data';\nimport { DataSourceType, GRAFANA_RULES_SOURCE_NAME } from '../utils/datasource';\nimport React, { FC, useMemo } from 'react';\nimport { Field, Select, useStyles2 } from '@grafana/ui';\nimport { getAllDataSources } from '../utils/config';\nimport { css } from '@emotion/css';\n\ninterface Props {\n  onChange: (alertManagerSourceName: string) => void;\n  current?: string;\n  disabled?: boolean;\n}\n\nexport const AlertManagerPicker: FC<Props> = ({ onChange, current, disabled = false }) => {\n  const styles = useStyles2(getStyles);\n\n  const options: Array<SelectableValue<string>> = useMemo(() => {\n    return [\n      {\n        label: 'Grafana',\n        value: GRAFANA_RULES_SOURCE_NAME,\n        imgUrl: 'public/img/grafana_icon.svg',\n        meta: {},\n      },\n      ...getAllDataSources()\n        .filter((ds) => ds.type === DataSourceType.Alertmanager)\n        .map((ds) => ({\n          label: ds.name.substr(0, 37),\n          value: ds.name,\n          imgUrl: ds.meta.info.logos.small,\n          meta: ds.meta,\n        })),\n    ];\n  }, []);\n\n  // no need to show the picker if there's only one option\n  if (options.length === 1) {\n    return null;\n  }\n\n  return (\n    <Field\n      className={styles.field}\n      label={disabled ? 'Alertmanager' : 'Choose Alertmanager'}\n      disabled={disabled}\n      data-testid=\"alertmanager-picker\"\n    >\n      <Select\n        menuShouldPortal\n        width={29}\n        className=\"ds-picker select-container\"\n        backspaceRemovesValue={false}\n        onChange={(value) => value.value && onChange(value.value)}\n        options={options}\n        maxMenuHeight={500}\n        noOptionsMessage=\"No datasources found\"\n        value={current}\n        getOptionLabel={(o) => o.label}\n      />\n    </Field>\n  );\n};\n\nconst getStyles = (theme: GrafanaTheme2) => ({\n  field: css`\n    margin-bottom: ${theme.spacing(4)};\n  `,\n});\n","import React, { FC } from 'react';\nimport Page from 'app/core/components/Page/Page';\nimport { getNavModel } from 'app/core/selectors/navModel';\nimport { useSelector } from 'react-redux';\nimport { StoreState } from 'app/types/store';\n\ninterface Props {\n  pageId: string;\n  isLoading?: boolean;\n}\n\nexport const AlertingPageWrapper: FC<Props> = ({ children, pageId, isLoading }) => {\n  const navModel = getNavModel(\n    useSelector((state: StoreState) => state.navIndex),\n    pageId\n  );\n\n  return (\n    <Page navModel={navModel}>\n      <Page.Contents isLoading={isLoading}>{children}</Page.Contents>\n    </Page>\n  );\n};\n","import React, { ReactNode, useState } from 'react';\nimport { css, cx } from '@emotion/css';\nimport { GrafanaTheme2 } from '@grafana/data';\nimport { IconButton, useStyles2 } from '@grafana/ui';\n\nexport interface DynamicTableColumnProps<T = unknown> {\n  id: string | number;\n  label: string;\n\n  renderCell: (item: DynamicTableItemProps<T>, index: number) => ReactNode;\n  size?: number | string;\n}\n\nexport interface DynamicTableItemProps<T = unknown> {\n  id: string | number;\n  data: T;\n  renderExpandedContent?: () => ReactNode;\n}\n\nexport interface DynamicTableProps<T = unknown> {\n  cols: Array<DynamicTableColumnProps<T>>;\n  items: Array<DynamicTableItemProps<T>>;\n\n  isExpandable?: boolean;\n\n  // provide these to manually control expanded status\n  onCollapse?: (item: DynamicTableItemProps<T>) => void;\n  onExpand?: (item: DynamicTableItemProps<T>) => void;\n  isExpanded?: (item: DynamicTableItemProps<T>) => boolean;\n\n  renderExpandedContent?: (\n    item: DynamicTableItemProps<T>,\n    index: number,\n    items: Array<DynamicTableItemProps<T>>\n  ) => ReactNode;\n  testIdGenerator?: (item: DynamicTableItemProps<T>, index: number) => string;\n  renderPrefixHeader?: () => ReactNode;\n  renderPrefixCell?: (\n    item: DynamicTableItemProps<T>,\n    index: number,\n    items: Array<DynamicTableItemProps<T>>\n  ) => ReactNode;\n}\n\nexport const DynamicTable = <T extends object>({\n  cols,\n  items,\n  isExpandable = false,\n  onCollapse,\n  onExpand,\n  isExpanded,\n  renderExpandedContent,\n  testIdGenerator,\n\n  // render a cell BEFORE expand icon for header/ each row.\n  // currently use by RuleList to render guidelines\n  renderPrefixCell,\n  renderPrefixHeader,\n}: DynamicTableProps<T>) => {\n  if ((onCollapse || onExpand || isExpanded) && !(onCollapse && onExpand && isExpanded)) {\n    throw new Error('either all of onCollapse, onExpand, isExpanded must be provided, or none');\n  }\n  if ((isExpandable || renderExpandedContent) && !(isExpandable && renderExpandedContent)) {\n    throw new Error('either both isExpanded and renderExpandedContent must be provided, or neither');\n  }\n  const styles = useStyles2(getStyles(cols, isExpandable, !!renderPrefixHeader));\n\n  const [expandedIds, setExpandedIds] = useState<Array<DynamicTableItemProps['id']>>([]);\n\n  const toggleExpanded = (item: DynamicTableItemProps<T>) => {\n    if (isExpanded && onCollapse && onExpand) {\n      isExpanded(item) ? onCollapse(item) : onExpand(item);\n    } else {\n      setExpandedIds(\n        expandedIds.includes(item.id) ? expandedIds.filter((itemId) => itemId !== item.id) : [...expandedIds, item.id]\n      );\n    }\n  };\n  return (\n    <div className={styles.container} data-testid=\"dynamic-table\">\n      <div className={styles.row} data-testid=\"header\">\n        {renderPrefixHeader && renderPrefixHeader()}\n        {isExpandable && <div className={styles.cell} />}\n        {cols.map((col) => (\n          <div className={styles.cell} key={col.id}>\n            {col.label}\n          </div>\n        ))}\n      </div>\n\n      {items.map((item, index) => {\n        const isItemExpanded = isExpanded ? isExpanded(item) : expandedIds.includes(item.id);\n        return (\n          <div className={styles.row} key={item.id} data-testid={testIdGenerator?.(item, index) ?? 'row'}>\n            {renderPrefixCell && renderPrefixCell(item, index, items)}\n            {isExpandable && (\n              <div className={cx(styles.cell, styles.expandCell)}>\n                <IconButton\n                  size=\"xl\"\n                  data-testid=\"collapse-toggle\"\n                  className={styles.expandButton}\n                  name={isItemExpanded ? 'angle-down' : 'angle-right'}\n                  onClick={() => toggleExpanded(item)}\n                  type=\"button\"\n                />\n              </div>\n            )}\n            {cols.map((col) => (\n              <div className={cx(styles.cell, styles.bodyCell)} data-column={col.label} key={`${item.id}-${col.id}`}>\n                {col.renderCell(item, index)}\n              </div>\n            ))}\n            {isItemExpanded && renderExpandedContent && (\n              <div className={styles.expandedContentRow} data-testid=\"expanded-content\">\n                {renderExpandedContent(item, index, items)}\n              </div>\n            )}\n          </div>\n        );\n      })}\n    </div>\n  );\n};\n\nconst getStyles = <T extends unknown>(\n  cols: Array<DynamicTableColumnProps<T>>,\n  isExpandable: boolean,\n  hasPrefixCell: boolean\n) => {\n  const sizes = cols.map((col) => {\n    if (!col.size) {\n      return 'auto';\n    }\n\n    if (typeof col.size === 'number') {\n      return `${col.size}fr`;\n    }\n\n    return col.size;\n  });\n\n  if (isExpandable) {\n    sizes.unshift('calc(1em + 16px)');\n  }\n\n  if (hasPrefixCell) {\n    sizes.unshift('0');\n  }\n\n  return (theme: GrafanaTheme2) => ({\n    container: css`\n      border: 1px solid ${theme.colors.border.strong};\n      border-radius: 2px;\n      color: ${theme.colors.text.secondary};\n    `,\n    row: css`\n      display: grid;\n      grid-template-columns: ${sizes.join(' ')};\n      grid-template-rows: 1fr auto;\n\n      &:nth-child(2n + 1) {\n        background-color: ${theme.colors.background.secondary};\n      }\n\n      &:nth-child(2n) {\n        background-color: ${theme.colors.background.primary};\n      }\n\n      ${theme.breakpoints.down('sm')} {\n        grid-template-columns: auto 1fr;\n        grid-template-areas: 'left right';\n        padding: 0 ${theme.spacing(0.5)};\n\n        &:first-child {\n          display: none;\n        }\n\n        ${hasPrefixCell\n          ? `\n            & > *:first-child {\n              display: none;\n            }\n          `\n          : ''}\n      }\n    `,\n    cell: css`\n      align-items: center;\n      padding: ${theme.spacing(1)};\n\n      ${theme.breakpoints.down('sm')} {\n        padding: ${theme.spacing(1)} 0;\n        grid-template-columns: 1fr;\n      }\n    `,\n    bodyCell: css`\n      overflow: hidden;\n      word-break: break-all;\n      ${theme.breakpoints.down('sm')} {\n        grid-column-end: right;\n        grid-column-start: right;\n\n        &::before {\n          content: attr(data-column);\n          display: block;\n          color: ${theme.colors.text.primary};\n        }\n      }\n    `,\n    expandCell: css`\n      justify-content: center;\n\n      ${theme.breakpoints.down('sm')} {\n        align-items: start;\n        grid-area: left;\n      }\n    `,\n    expandedContentRow: css`\n      grid-column-end: ${sizes.length + 1};\n      grid-column-start: ${hasPrefixCell ? 3 : 2};\n      grid-row: 2;\n      padding: 0 ${theme.spacing(3)} 0 ${theme.spacing(1)};\n      position: relative;\n\n      ${theme.breakpoints.down('sm')} {\n        grid-column-start: 2;\n        border-top: 1px solid ${theme.colors.border.strong};\n        grid-row: auto;\n        padding: ${theme.spacing(1)} 0 0 0;\n      }\n    `,\n    expandButton: css`\n      margin-right: 0;\n      display: block;\n    `,\n  });\n};\n"],"sourceRoot":""}
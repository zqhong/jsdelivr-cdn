{"version":3,"sources":["webpack:///./public/app/features/api-keys/ApiKeysActionBar.tsx","webpack:///./public/app/features/api-keys/ApiKeysTable.tsx","webpack:///./public/app/features/api-keys/state/selectors.ts","webpack:///./public/app/features/api-keys/ApiKeysForm.tsx","webpack:///./public/app/features/api-keys/state/actions.ts","webpack:///./public/app/features/api-keys/ApiKeysPage.tsx","webpack:///./public/app/features/api-keys/ApiKeysAddedModal.tsx","webpack:///./public/app/features/api-keys/ApiKeysController.tsx"],"names":["ApiKeysActionBar","searchQuery","disabled","onAddClick","onSearchChange","className","placeholder","value","onChange","onClick","ApiKeysTable","apiKeys","timeZone","onDelete","style","width","length","map","key","name","role","formatDate","expiration","size","onConfirm","id","dateTimeFormat","getApiKeysCount","state","keys","getApiKeys","regex","RegExp","filter","test","Input","LegacyForms","isValidInterval","rangeUtil","intervalToSeconds","timeRangeValidationEvents","EventsWithValidation","onBlur","rule","errorMessage","ApiKeysForm","show","onClose","onKeyAdded","setName","useState","setRole","OrgRole","Viewer","secondsToLive","setSecondsToLive","useEffect","in","onSubmit","event","preventDefault","type","currentTarget","Object","label","tooltip","validationEvents","addApiKey","apiKey","openModal","includeExpired","async","result","getBackendSrv","post","dispatch","setSearchQuery","loadApiKeys","response","get","apiKeysLoaded","deleteApiKey","delete","then","mapDispatchToProps","connector","connect","navModel","getNavModel","navIndex","apiKeysCount","hasFetched","getTimeZone","user","ApiKeysPageUnconnected","PureComponent","constructor","props","super","this","setState","checked","fetchApiKeys","newApiKey","rootPath","window","location","origin","config","appSubUrl","appEvents","publish","ShowModalReactEvent","component","ApiKeysAddedModal","prevState","isAdding","err","console","error","componentDidMount","render","Contents","isLoading","toggleIsAdding","showCTA","showTable","title","buttonIcon","buttonTitle","proTip","onSearchQueryChange","onAddApiKey","onIncludeExpiredChange","onDeleteApiKey","ApiKeysPage","hot","module","onDismiss","styles","useStyles2","getStyles","onClickBackdrop","isOpen","severity","small","theme","css","spacing","colors","background","secondary","shape","borderRadius","typography","bodySmall","fontSize","fontWeight","ApiKeysController","children","setIsAdding","useCallback"],"mappings":"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","file":"ApiKeysPage.62c612232a976d8836f5.js","sourcesContent":["import React, { FC } from 'react';\nimport { Button } from '@grafana/ui';\nimport { FilterInput } from '../../core/components/FilterInput/FilterInput';\n\ninterface Props {\n  searchQuery: string;\n  disabled: boolean;\n  onAddClick: () => void;\n  onSearchChange: (value: string) => void;\n}\n\nexport const ApiKeysActionBar: FC<Props> = ({ searchQuery, disabled, onAddClick, onSearchChange }) => {\n  return (\n    <div className=\"page-action-bar\">\n      <div className=\"gf-form gf-form--grow\">\n        <FilterInput placeholder=\"Search keys\" value={searchQuery} onChange={onSearchChange} />\n      </div>\n      <Button className=\"pull-right\" onClick={onAddClick} disabled={disabled}>\n        Add API key\n      </Button>\n    </div>\n  );\n};\n","import React, { FC } from 'react';\nimport { DeleteButton } from '@grafana/ui';\nimport { dateTimeFormat, TimeZone } from '@grafana/data';\n\nimport { ApiKey } from '../../types';\n\ninterface Props {\n  apiKeys: ApiKey[];\n  timeZone: TimeZone;\n  onDelete: (apiKey: ApiKey) => void;\n}\n\nexport const ApiKeysTable: FC<Props> = ({ apiKeys, timeZone, onDelete }) => {\n  return (\n    <table className=\"filter-table\">\n      <thead>\n        <tr>\n          <th>Name</th>\n          <th>Role</th>\n          <th>Expires</th>\n          <th style={{ width: '34px' }} />\n        </tr>\n      </thead>\n      {apiKeys.length > 0 ? (\n        <tbody>\n          {apiKeys.map((key) => {\n            return (\n              <tr key={key.id}>\n                <td>{key.name}</td>\n                <td>{key.role}</td>\n                <td>{formatDate(key.expiration, timeZone)}</td>\n                <td>\n                  <DeleteButton size=\"sm\" onConfirm={() => onDelete(key)} />\n                </td>\n              </tr>\n            );\n          })}\n        </tbody>\n      ) : null}\n    </table>\n  );\n};\n\nfunction formatDate(expiration: string | undefined, timeZone: TimeZone): string {\n  if (!expiration) {\n    return 'No expiration date';\n  }\n  return dateTimeFormat(expiration, { timeZone });\n}\n","import { ApiKeysState } from 'app/types';\n\nexport const getApiKeysCount = (state: ApiKeysState) => state.keys.length;\n\nexport const getApiKeys = (state: ApiKeysState) => {\n  const regex = RegExp(state.searchQuery, 'i');\n\n  return state.keys.filter((key) => {\n    return regex.test(key.name) || regex.test(key.role);\n  });\n};\n","import React, { ChangeEvent, FC, FormEvent, useEffect, useState } from 'react';\nimport { EventsWithValidation, InlineFormLabel, LegacyForms, ValidationEvents, Button } from '@grafana/ui';\nimport { NewApiKey, OrgRole } from '../../types';\nimport { rangeUtil } from '@grafana/data';\nimport { SlideDown } from '../../core/components/Animations/SlideDown';\nimport { CloseButton } from 'app/core/components/CloseButton/CloseButton';\n\nconst { Input } = LegacyForms;\n\ninterface Props {\n  show: boolean;\n  onClose: () => void;\n  onKeyAdded: (apiKey: NewApiKey) => void;\n}\n\nfunction isValidInterval(value: string): boolean {\n  if (!value) {\n    return true;\n  }\n  try {\n    rangeUtil.intervalToSeconds(value);\n    return true;\n  } catch {}\n  return false;\n}\n\nconst timeRangeValidationEvents: ValidationEvents = {\n  [EventsWithValidation.onBlur]: [\n    {\n      rule: isValidInterval,\n      errorMessage: 'Not a valid duration',\n    },\n  ],\n};\n\nconst tooltipText =\n  'The API key life duration. For example, 1d if your key is going to last for one day. Supported units are: s,m,h,d,w,M,y';\n\nexport const ApiKeysForm: FC<Props> = ({ show, onClose, onKeyAdded }) => {\n  const [name, setName] = useState<string>('');\n  const [role, setRole] = useState<OrgRole>(OrgRole.Viewer);\n  const [secondsToLive, setSecondsToLive] = useState<string>('');\n  useEffect(() => {\n    setName('');\n    setRole(OrgRole.Viewer);\n    setSecondsToLive('');\n  }, [show]);\n\n  const onSubmit = (event: FormEvent) => {\n    event.preventDefault();\n    if (isValidInterval(secondsToLive)) {\n      onKeyAdded({ name, role, secondsToLive });\n      onClose();\n    }\n  };\n  const onNameChange = (event: ChangeEvent<HTMLInputElement>) => {\n    setName(event.currentTarget.value);\n  };\n  const onRoleChange = (event: ChangeEvent<HTMLSelectElement>) => {\n    setRole(event.currentTarget.value as OrgRole);\n  };\n  const onSecondsToLiveChange = (event: ChangeEvent<HTMLInputElement>) => {\n    setSecondsToLive(event.currentTarget.value);\n  };\n\n  return (\n    <SlideDown in={show}>\n      <div className=\"gf-form-inline cta-form\">\n        <CloseButton onClick={onClose} />\n        <form className=\"gf-form-group\" onSubmit={onSubmit}>\n          <h5>Add API Key</h5>\n          <div className=\"gf-form-inline\">\n            <div className=\"gf-form max-width-21\">\n              <span className=\"gf-form-label\">Key name</span>\n              <Input type=\"text\" className=\"gf-form-input\" value={name} placeholder=\"Name\" onChange={onNameChange} />\n            </div>\n            <div className=\"gf-form\">\n              <span className=\"gf-form-label\">Role</span>\n              <span className=\"gf-form-select-wrapper\">\n                <select className=\"gf-form-input gf-size-auto\" value={role} onChange={onRoleChange}>\n                  {Object.keys(OrgRole).map((role) => {\n                    return (\n                      <option key={role} label={role} value={role}>\n                        {role}\n                      </option>\n                    );\n                  })}\n                </select>\n              </span>\n            </div>\n            <div className=\"gf-form max-width-21\">\n              <InlineFormLabel tooltip={tooltipText}>Time to live</InlineFormLabel>\n              <Input\n                type=\"text\"\n                className=\"gf-form-input\"\n                placeholder=\"1d\"\n                validationEvents={timeRangeValidationEvents}\n                value={secondsToLive}\n                onChange={onSecondsToLiveChange}\n              />\n            </div>\n            <div className=\"gf-form\">\n              <Button>Add</Button>\n            </div>\n          </div>\n        </form>\n      </div>\n    </SlideDown>\n  );\n};\n","import { getBackendSrv } from 'app/core/services/backend_srv';\nimport { ApiKey, ThunkResult } from 'app/types';\nimport { apiKeysLoaded, setSearchQuery } from './reducers';\n\nexport function addApiKey(\n  apiKey: ApiKey,\n  openModal: (key: string) => void,\n  includeExpired: boolean\n): ThunkResult<void> {\n  return async (dispatch) => {\n    const result = await getBackendSrv().post('/api/auth/keys', apiKey);\n    dispatch(setSearchQuery(''));\n    dispatch(loadApiKeys(includeExpired));\n    openModal(result.key);\n  };\n}\n\nexport function loadApiKeys(includeExpired: boolean): ThunkResult<void> {\n  return async (dispatch) => {\n    const response = await getBackendSrv().get('/api/auth/keys?includeExpired=' + includeExpired);\n    dispatch(apiKeysLoaded(response));\n  };\n}\n\nexport function deleteApiKey(id: number, includeExpired: boolean): ThunkResult<void> {\n  return async (dispatch) => {\n    getBackendSrv()\n      .delete(`/api/auth/keys/${id}`)\n      .then(() => dispatch(loadApiKeys(includeExpired)));\n  };\n}\n","import React, { PureComponent } from 'react';\nimport { connect, ConnectedProps } from 'react-redux';\nimport { hot } from 'react-hot-loader';\n// Utils\nimport { ApiKey, NewApiKey, StoreState } from 'app/types';\nimport { getNavModel } from 'app/core/selectors/navModel';\nimport { getApiKeys, getApiKeysCount } from './state/selectors';\nimport { addApiKey, deleteApiKey, loadApiKeys } from './state/actions';\nimport Page from 'app/core/components/Page/Page';\nimport { ApiKeysAddedModal } from './ApiKeysAddedModal';\nimport config from 'app/core/config';\nimport appEvents from 'app/core/app_events';\nimport EmptyListCTA from 'app/core/components/EmptyListCTA/EmptyListCTA';\nimport { InlineField, InlineSwitch, VerticalGroup } from '@grafana/ui';\nimport { rangeUtil } from '@grafana/data';\nimport { getTimeZone } from 'app/features/profile/state/selectors';\nimport { setSearchQuery } from './state/reducers';\nimport { ApiKeysForm } from './ApiKeysForm';\nimport { ApiKeysActionBar } from './ApiKeysActionBar';\nimport { ApiKeysTable } from './ApiKeysTable';\nimport { ApiKeysController } from './ApiKeysController';\nimport { ShowModalReactEvent } from 'app/types/events';\n\nfunction mapStateToProps(state: StoreState) {\n  return {\n    navModel: getNavModel(state.navIndex, 'apikeys'),\n    apiKeys: getApiKeys(state.apiKeys),\n    searchQuery: state.apiKeys.searchQuery,\n    apiKeysCount: getApiKeysCount(state.apiKeys),\n    hasFetched: state.apiKeys.hasFetched,\n    timeZone: getTimeZone(state.user),\n  };\n}\n\nconst mapDispatchToProps = {\n  loadApiKeys,\n  deleteApiKey,\n  setSearchQuery,\n  addApiKey,\n};\n\nconst connector = connect(mapStateToProps, mapDispatchToProps);\n\ninterface OwnProps {}\n\nexport type Props = OwnProps & ConnectedProps<typeof connector>;\n\ninterface State {\n  includeExpired: boolean;\n  hasFetched: boolean;\n}\n\nexport class ApiKeysPageUnconnected extends PureComponent<Props, State> {\n  constructor(props: Props) {\n    super(props);\n    this.state = { includeExpired: false, hasFetched: false };\n  }\n\n  componentDidMount() {\n    this.fetchApiKeys();\n  }\n\n  async fetchApiKeys() {\n    await this.props.loadApiKeys(this.state.includeExpired);\n  }\n\n  onDeleteApiKey = (key: ApiKey) => {\n    this.props.deleteApiKey(key.id!, this.state.includeExpired);\n  };\n\n  onSearchQueryChange = (value: string) => {\n    this.props.setSearchQuery(value);\n  };\n\n  onIncludeExpiredChange = (event: React.SyntheticEvent<HTMLInputElement>) => {\n    this.setState({ hasFetched: false, includeExpired: event.currentTarget.checked }, this.fetchApiKeys);\n  };\n\n  onAddApiKey = (newApiKey: NewApiKey) => {\n    const openModal = (apiKey: string) => {\n      const rootPath = window.location.origin + config.appSubUrl;\n\n      appEvents.publish(\n        new ShowModalReactEvent({\n          props: {\n            apiKey,\n            rootPath,\n          },\n          component: ApiKeysAddedModal,\n        })\n      );\n    };\n\n    const secondsToLive = newApiKey.secondsToLive;\n    try {\n      const secondsToLiveAsNumber = secondsToLive ? rangeUtil.intervalToSeconds(secondsToLive) : null;\n      const apiKey: ApiKey = {\n        ...newApiKey,\n        secondsToLive: secondsToLiveAsNumber,\n      };\n      this.props.addApiKey(apiKey, openModal, this.state.includeExpired);\n      this.setState((prevState: State) => {\n        return {\n          ...prevState,\n          isAdding: false,\n        };\n      });\n    } catch (err) {\n      console.error(err);\n    }\n  };\n\n  render() {\n    const { hasFetched, navModel, apiKeysCount, apiKeys, searchQuery, timeZone } = this.props;\n    const { includeExpired } = this.state;\n\n    if (!hasFetched) {\n      return (\n        <Page navModel={navModel}>\n          <Page.Contents isLoading={true}>{}</Page.Contents>\n        </Page>\n      );\n    }\n\n    return (\n      <Page navModel={navModel}>\n        <Page.Contents isLoading={false}>\n          <ApiKeysController>\n            {({ isAdding, toggleIsAdding }) => {\n              const showCTA = !isAdding && apiKeysCount === 0;\n              const showTable = apiKeysCount > 0;\n              return (\n                <>\n                  {showCTA ? (\n                    <EmptyListCTA\n                      title=\"You haven't added any API keys yet.\"\n                      buttonIcon=\"key-skeleton-alt\"\n                      onClick={toggleIsAdding}\n                      buttonTitle=\"New API key\"\n                      proTip=\"Remember, you can provide view-only API access to other applications.\"\n                    />\n                  ) : null}\n                  {showTable ? (\n                    <ApiKeysActionBar\n                      searchQuery={searchQuery}\n                      disabled={isAdding}\n                      onAddClick={toggleIsAdding}\n                      onSearchChange={this.onSearchQueryChange}\n                    />\n                  ) : null}\n                  <ApiKeysForm show={isAdding} onClose={toggleIsAdding} onKeyAdded={this.onAddApiKey} />\n                  {showTable ? (\n                    <VerticalGroup>\n                      <InlineField label=\"Show expired\">\n                        <InlineSwitch id=\"showExpired\" value={includeExpired} onChange={this.onIncludeExpiredChange} />\n                      </InlineField>\n                      <ApiKeysTable apiKeys={apiKeys} timeZone={timeZone} onDelete={this.onDeleteApiKey} />\n                    </VerticalGroup>\n                  ) : null}\n                </>\n              );\n            }}\n          </ApiKeysController>\n        </Page.Contents>\n      </Page>\n    );\n  }\n}\n\nconst ApiKeysPage = connector(ApiKeysPageUnconnected);\nexport default hot(module)(ApiKeysPage);\n","import React from 'react';\nimport { css } from '@emotion/css';\nimport { Alert, Field, Modal, useStyles2 } from '@grafana/ui';\nimport { GrafanaTheme2 } from '@grafana/data';\n\nexport interface Props {\n  onDismiss: () => void;\n  apiKey: string;\n  rootPath: string;\n}\n\nexport function ApiKeysAddedModal({ onDismiss, apiKey, rootPath }: Props): JSX.Element {\n  const styles = useStyles2(getStyles);\n  return (\n    <Modal title=\"API Key Created\" onDismiss={onDismiss} onClickBackdrop={onDismiss} isOpen>\n      <Field label=\"Key\">\n        <span className={styles.label}>{apiKey}</span>\n      </Field>\n\n      <Alert severity=\"info\" title=\"You will only be able to view this key here once!\">\n        It is not stored in this form, so be sure to copy it now.\n      </Alert>\n\n      <p className=\"text-muted\">You can authenticate a request using the Authorization HTTP header, example:</p>\n      <pre className={styles.small}>\n        curl -H &quot;Authorization: Bearer {apiKey}&quot; {rootPath}/api/dashboards/home\n      </pre>\n    </Modal>\n  );\n}\n\nfunction getStyles(theme: GrafanaTheme2) {\n  return {\n    label: css`\n      padding: ${theme.spacing(1)};\n      background-color: ${theme.colors.background.secondary};\n      border-radius: ${theme.shape.borderRadius()};\n    `,\n    small: css`\n      font-size: ${theme.typography.bodySmall.fontSize};\n      font-weight: ${theme.typography.bodySmall.fontWeight};\n    `,\n  };\n}\n","import { FC, useCallback, useState } from 'react';\n\ninterface Api {\n  isAdding: boolean;\n  toggleIsAdding: () => void;\n}\n\ninterface Props {\n  children: (props: Api) => JSX.Element;\n}\n\nexport const ApiKeysController: FC<Props> = ({ children }) => {\n  const [isAdding, setIsAdding] = useState<boolean>(false);\n  const toggleIsAdding = useCallback(() => {\n    setIsAdding(!isAdding);\n  }, [isAdding]);\n\n  return children({ isAdding, toggleIsAdding });\n};\n"],"sourceRoot":""}
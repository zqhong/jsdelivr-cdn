{"version":3,"sources":["webpack:///./public/app/core/hooks/useQueryParams.ts","webpack:///./public/app/features/alerting/unified/components/rules/ActionButton.tsx","webpack:///./public/app/features/alerting/unified/components/silences/SilencedAlertsTableRow.tsx","webpack:///./public/app/features/alerting/unified/components/silences/SilencedAlertsTable.tsx","webpack:///./public/app/features/alerting/unified/components/silences/SilenceStateTag.tsx","webpack:///./public/app/features/alerting/unified/components/silences/SilenceTableRow.tsx","webpack:///./public/app/features/alerting/unified/components/silences/NoSilencesCTA.tsx","webpack:///./public/app/features/alerting/unified/components/silences/SilencesTable.tsx","webpack:///./public/app/features/alerting/unified/components/silences/MatchersField.tsx","webpack:///./public/app/features/alerting/unified/components/silences/SilencePeriod.tsx","webpack:///./public/app/features/alerting/unified/components/silences/SilencesEditor.tsx","webpack:///./public/app/features/alerting/unified/utils/matchers.ts","webpack:///./public/app/features/alerting/unified/Silences.tsx","webpack:///./public/app/features/alerting/unified/components/silences/Matchers.tsx","webpack:///./public/app/features/alerting/unified/components/rules/ActionIcon.tsx","webpack:///./public/app/features/alerting/unified/styles/table.ts","webpack:///./public/app/features/alerting/unified/components/silences/AmAlertStateTag.tsx","webpack:///./public/app/core/hooks/useCleanup.ts","webpack:///./node_modules/timers-browserify/main.js","webpack:///./node_modules/setimmediate/setImmediate.js","webpack:///./public/app/features/alerting/unified/hooks/useAlertManagerSourceName.ts","webpack:///./public/app/features/alerting/unified/components/AlertManagerPicker.tsx","webpack:///./public/app/features/alerting/unified/components/AlertingPageWrapper.tsx","webpack:///./public/app/features/alerting/unified/components/CollapseToggle.tsx"],"names":["useQueryParams","search","useLocation","useMemo","locationSearchToObject","useCallback","values","replace","setImmediate","locationService","partial","ActionButton","className","restProps","Button","variant","size","cx","useStyles","getStyle","theme","css","typography","sm","SilencedAlertsTableRow","alert","isCollapsed","setIsCollapsed","useState","tableStyles","useStyles2","getAlertTableStyles","alertDuration","toDuration","dateTimeAsMoment","endsAt","diff","startsAt","asSeconds","alertName","Object","entries","labels","reduce","name","labelKey","labelValue","CollapseToggle","onToggle","collapsed","AmAlertStateTag","state","status","actionsCell","ActionIcon","icon","to","generatorURL","tooltip","colSpan","AlertLabels","getStyles","tableMargin","spacing","colState","colName","SilencedAlertsTable","silencedAlerts","styles","length","table","colExpand","map","index","evenRow","fingerprint","silenceStateToState","SilenceState","Active","Expired","Pending","SilenceStateTag","StateTag","matchersCell","xs","alertRulesCell","SilenceTableRow","silence","alertManagerSourceName","dispatch","useDispatch","matchers","comment","createdBy","startsAtDate","dateMath","parse","endsAtDate","duration","intervalToAbbreviatedDurationString","start","Date","end","detailsColspan","contextSrv","isEditor","value","Matchers","format","href","makeAMLink","id","onClick","expireSilenceAction","NoSilencesSplash","EmptyListCTA","title","buttonIcon","buttonLink","buttonTitle","callToActionElement","message","topButtonContainer","addNewSilence","colMatchers","callout","colors","background","secondary","info","border","calloutIcon","text","SilencesTable","silences","alertManagerAlerts","queryParams","filteredSilences","silenceIdsString","silenceIds","filter","split","includes","silencedBy","undefined","wrapper","row","removeButton","MatchersField","formApi","useFormContext","register","formState","errors","fields","append","remove","useFieldArray","label","required","matcher","invalid","error","defaultValue","placeholder","defaultChecked","isRegex","isEqual","type","SilencePeriod","control","getValues","field","onChange","onChangeStartsAt","fieldState","startsAtInvalid","useController","rules","validate","onChangeEndsAt","endsAtInvalid","onChangeTimeZone","timeZone","from","dateTime","timeRange","raw","newValue","hideTimeZone","hideQuickRanges","defaultsFromQuery","defaults","formMatchers","x","trim","parseMatcher","textArea","flexRow","SilencesEditor","defaultValues","now","interval","addDurationToDate","hours","toISOString","matcherName","matcherValue","DefaultTimeZone","config","bootData","user","getDefaultFormValues","formAPI","useForm","loading","useUnifiedAlertingSelector","updateSilence","useCleanup","unifiedAlerting","handleSubmit","watch","setValue","clearErrors","prevDuration","setPrevDuration","useDebounce","isValidDate","parseDuration","startValue","valueOf","nextDuration","onSubmit","data","payload","pickBy","createOrUpdateSilenceAction","exitOnSave","successMessage","keys","disabled","fill","withErrorBoundary","setAlertManagerSourceName","useAlertManagerSourceName","alertsRequests","amAlerts","alertsRequest","initialAsyncRequestState","isRoot","pathname","endsWith","useEffect","fetchAll","fetchSilencesAction","fetchAmAlertsAction","setInterval","SILENCES_POLL_INTERVAL_MS","clearInterval","result","getSilenceById","find","AlertingPageWrapper","pageId","AlertManagerPicker","current","severity","exact","path","match","params","style","onRemoveLabel","removeLabel","operator","matcherToOperator","target","tooltipPlacement","rest","iconEl","content","placement","shape","borderRadius","weak","primary","alertStateToState","AlertState","Unprocessed","Suppressed","stateSelector","selectorRef","useRef","cleanUpAction","self","window","apply","Function","prototype","Timeout","clearFn","this","_id","_clearFn","exports","setTimeout","call","scope","arguments","clearTimeout","timeout","close","unref","ref","enroll","item","msecs","_idleTimeoutId","_idleTimeout","unenroll","_unrefActive","active","_onTimeout","global","clearImmediate","registerImmediate","html","channel","messagePrefix","onGlobalMessage","nextHandle","tasksByHandle","currentlyRunningATask","doc","document","attachTo","getPrototypeOf","toString","process","handle","nextTick","runIfPresent","postMessage","importScripts","postMessageIsAsynchronous","oldOnMessage","onmessage","canUsePostMessage","MessageChannel","port1","event","port2","createElement","documentElement","script","onreadystatechange","removeChild","appendChild","Math","random","source","indexOf","slice","addEventListener","attachEvent","callback","args","Array","i","task","run","isAlertManagerSource","GRAFANA_RULES_SOURCE_NAME","getAlertManagerDataSources","ds","updateQueryParams","update","store","delete","ALERTMANAGER_NAME_LOCAL_STORAGE_KEY","ALERTMANAGER_NAME_QUERY_KEY","set","querySource","storeSource","get","options","imgUrl","meta","getAllDataSources","DataSourceType","Alertmanager","substr","logos","small","data-testid","menuShouldPortal","width","backspaceRemovesValue","maxMenuHeight","noOptionsMessage","getOptionLabel","o","children","isLoading","navModel","getNavModel","useSelector","navIndex","Contents","restOfProps","expandButton"],"mappings":"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","file":"AlertSilences.62c612232a976d8836f5.js","sourcesContent":["import { UrlQueryMap } from '@grafana/data';\nimport { locationSearchToObject, locationService } from '@grafana/runtime';\nimport { useCallback, useMemo } from 'react';\nimport { useLocation } from 'react-router-dom';\n\nexport function useQueryParams(): [UrlQueryMap, (values: UrlQueryMap, replace?: boolean) => void] {\n  const { search } = useLocation();\n  const queryParams = useMemo(() => locationSearchToObject(search || ''), [search]);\n  const update = useCallback(\n    (values: UrlQueryMap, replace?: boolean) => setImmediate(() => locationService.partial(values, replace)),\n    []\n  );\n  return [queryParams, update];\n}\n","import { Button, ButtonProps } from '@grafana/ui/src/components/Button';\nimport React, { FC } from 'react';\nimport { css, cx } from '@emotion/css';\nimport { GrafanaTheme } from '@grafana/data';\nimport { useStyles } from '@grafana/ui';\n\ntype Props = Omit<ButtonProps, 'variant' | 'size'>;\n\nexport const ActionButton: FC<Props> = ({ className, ...restProps }) => (\n  <Button variant=\"secondary\" size=\"xs\" className={cx(useStyles(getStyle), className)} {...restProps} />\n);\n\nexport const getStyle = (theme: GrafanaTheme) => css`\n  height: 24px;\n  font-size: ${theme.typography.size.sm};\n`;\n","import { AlertmanagerAlert } from 'app/plugins/datasource/alertmanager/types';\nimport React, { FC, useState } from 'react';\nimport { CollapseToggle } from '../CollapseToggle';\nimport { ActionIcon } from '../rules/ActionIcon';\nimport { getAlertTableStyles } from '../../styles/table';\nimport { useStyles2 } from '@grafana/ui';\nimport { dateTimeAsMoment, toDuration } from '@grafana/data';\nimport { AlertLabels } from '../AlertLabels';\nimport { AmAlertStateTag } from './AmAlertStateTag';\n\ninterface Props {\n  alert: AlertmanagerAlert;\n  className?: string;\n}\n\nexport const SilencedAlertsTableRow: FC<Props> = ({ alert, className }) => {\n  const [isCollapsed, setIsCollapsed] = useState(true);\n  const tableStyles = useStyles2(getAlertTableStyles);\n  const alertDuration = toDuration(dateTimeAsMoment(alert.endsAt).diff(alert.startsAt)).asSeconds();\n  const alertName = Object.entries(alert.labels).reduce((name, [labelKey, labelValue]) => {\n    if (labelKey === 'alertname' || labelKey === '__alert_rule_title__') {\n      name = labelValue;\n    }\n    return name;\n  }, '');\n  return (\n    <>\n      <tr className={className}>\n        <td>\n          <CollapseToggle isCollapsed={isCollapsed} onToggle={(collapsed) => setIsCollapsed(collapsed)} />\n        </td>\n        <td>\n          <AmAlertStateTag state={alert.status.state} />\n        </td>\n        <td>for {alertDuration} seconds</td>\n        <td>{alertName}</td>\n        <td className={tableStyles.actionsCell}>\n          <ActionIcon icon=\"chart-line\" to={alert.generatorURL} tooltip=\"View in explorer\" />\n        </td>\n      </tr>\n      {!isCollapsed && (\n        <tr className={className}>\n          <td></td>\n          <td colSpan={5}>\n            <AlertLabels labels={alert.labels} />\n          </td>\n        </tr>\n      )}\n    </>\n  );\n};\n","import { AlertmanagerAlert } from 'app/plugins/datasource/alertmanager/types';\nimport React, { FC } from 'react';\nimport { getAlertTableStyles } from '../../styles/table';\nimport { useStyles2 } from '@grafana/ui';\nimport { SilencedAlertsTableRow } from './SilencedAlertsTableRow';\nimport { GrafanaTheme2 } from '@grafana/data';\nimport { css, cx } from '@emotion/css';\n\ninterface Props {\n  silencedAlerts: AlertmanagerAlert[];\n}\n\nconst SilencedAlertsTable: FC<Props> = ({ silencedAlerts }) => {\n  const tableStyles = useStyles2(getAlertTableStyles);\n  const styles = useStyles2(getStyles);\n\n  if (!!silencedAlerts.length) {\n    return (\n      <table className={cx(tableStyles.table, styles.tableMargin)}>\n        <colgroup>\n          <col className={tableStyles.colExpand} />\n          <col className={styles.colState} />\n          <col />\n          <col className={styles.colName} />\n          <col />\n        </colgroup>\n        <thead>\n          <tr>\n            <th></th>\n            <th>State</th>\n            <th></th>\n            <th>Alert name</th>\n            <th>Actions</th>\n          </tr>\n        </thead>\n        <tbody>\n          {silencedAlerts.map((alert, index) => {\n            return (\n              <SilencedAlertsTableRow\n                key={alert.fingerprint}\n                alert={alert}\n                className={index % 2 === 0 ? tableStyles.evenRow : ''}\n              />\n            );\n          })}\n        </tbody>\n      </table>\n    );\n  } else {\n    return null;\n  }\n};\n\nconst getStyles = (theme: GrafanaTheme2) => ({\n  tableMargin: css`\n    margin-bottom: ${theme.spacing(1)};\n  `,\n  colState: css`\n    width: 110px;\n  `,\n  colName: css`\n    width: 65%;\n  `,\n});\n\nexport default SilencedAlertsTable;\n","import { SilenceState } from 'app/plugins/datasource/alertmanager/types';\nimport React, { FC } from 'react';\nimport { State, StateTag } from '../StateTag';\n\nconst silenceStateToState: Record<SilenceState, State> = {\n  [SilenceState.Active]: 'good',\n  [SilenceState.Expired]: 'neutral',\n  [SilenceState.Pending]: 'neutral',\n};\n\ninterface Props {\n  state: SilenceState;\n}\n\nexport const SilenceStateTag: FC<Props> = ({ state }) => (\n  <StateTag state={silenceStateToState[state]}>{state}</StateTag>\n);\n","import React, { FC, Fragment, useState } from 'react';\nimport { dateMath, GrafanaTheme, intervalToAbbreviatedDurationString } from '@grafana/data';\nimport { css, cx } from '@emotion/css';\nimport { Silence, AlertmanagerAlert } from 'app/plugins/datasource/alertmanager/types';\nimport { CollapseToggle } from '../CollapseToggle';\nimport { ActionButton } from '../rules/ActionButton';\nimport { ActionIcon } from '../rules/ActionIcon';\nimport { useStyles, Link } from '@grafana/ui';\nimport SilencedAlertsTable from './SilencedAlertsTable';\nimport { expireSilenceAction } from '../../state/actions';\nimport { useDispatch } from 'react-redux';\nimport { Matchers } from './Matchers';\nimport { SilenceStateTag } from './SilenceStateTag';\nimport { makeAMLink } from '../../utils/misc';\nimport { contextSrv } from 'app/core/services/context_srv';\ninterface Props {\n  className?: string;\n  silence: Silence;\n  silencedAlerts: AlertmanagerAlert[];\n  alertManagerSourceName: string;\n}\n\nconst SilenceTableRow: FC<Props> = ({ silence, className, silencedAlerts, alertManagerSourceName }) => {\n  const [isCollapsed, setIsCollapsed] = useState<boolean>(true);\n  const dispatch = useDispatch();\n\n  const styles = useStyles(getStyles);\n  const { status, matchers = [], startsAt, endsAt, comment, createdBy } = silence;\n\n  const dateDisplayFormat = 'YYYY-MM-DD HH:mm';\n  const startsAtDate = dateMath.parse(startsAt);\n  const endsAtDate = dateMath.parse(endsAt);\n  const duration = intervalToAbbreviatedDurationString({ start: new Date(startsAt), end: new Date(endsAt) });\n\n  const handleExpireSilenceClick = () => {\n    dispatch(expireSilenceAction(alertManagerSourceName, silence.id));\n  };\n\n  const detailsColspan = contextSrv.isEditor ? 4 : 3;\n\n  return (\n    <Fragment>\n      <tr className={className}>\n        <td>\n          <CollapseToggle isCollapsed={isCollapsed} onToggle={(value) => setIsCollapsed(value)} />\n        </td>\n        <td>\n          <SilenceStateTag state={status.state} />\n        </td>\n        <td className={styles.matchersCell}>\n          <Matchers matchers={matchers} />\n        </td>\n        <td>{silencedAlerts.length}</td>\n        <td>\n          {startsAtDate?.format(dateDisplayFormat)} {'-'}\n          <br />\n          {endsAtDate?.format(dateDisplayFormat)}\n        </td>\n        {contextSrv.isEditor && (\n          <td className={styles.actionsCell}>\n            {status.state === 'expired' ? (\n              <Link href={makeAMLink(`/alerting/silence/${silence.id}/edit`, alertManagerSourceName)}>\n                <ActionButton icon=\"sync\">Recreate</ActionButton>\n              </Link>\n            ) : (\n              <ActionButton icon=\"bell\" onClick={handleExpireSilenceClick}>\n                Unsilence\n              </ActionButton>\n            )}\n            {status.state !== 'expired' && (\n              <ActionIcon\n                to={makeAMLink(`/alerting/silence/${silence.id}/edit`, alertManagerSourceName)}\n                icon=\"pen\"\n                tooltip=\"edit\"\n              />\n            )}\n          </td>\n        )}\n      </tr>\n      {!isCollapsed && (\n        <>\n          <tr className={className}>\n            <td />\n            <td>Comment</td>\n            <td colSpan={detailsColspan}>{comment}</td>\n          </tr>\n          <tr className={className}>\n            <td />\n            <td>Schedule</td>\n            <td colSpan={detailsColspan}>{`${startsAtDate?.format(dateDisplayFormat)} - ${endsAtDate?.format(\n              dateDisplayFormat\n            )}`}</td>\n          </tr>\n          <tr className={className}>\n            <td />\n            <td>Duration</td>\n            <td colSpan={detailsColspan}>{duration}</td>\n          </tr>\n          <tr className={className}>\n            <td />\n            <td>Created by</td>\n            <td colSpan={detailsColspan}>{createdBy}</td>\n          </tr>\n          {!!silencedAlerts.length && (\n            <tr className={cx(className, styles.alertRulesCell)}>\n              <td />\n              <td>Affected alerts</td>\n              <td colSpan={detailsColspan}>\n                <SilencedAlertsTable silencedAlerts={silencedAlerts} />\n              </td>\n            </tr>\n          )}\n        </>\n      )}\n    </Fragment>\n  );\n};\n\nconst getStyles = (theme: GrafanaTheme) => ({\n  matchersCell: css`\n    & > * + * {\n      margin-left: ${theme.spacing.xs};\n    }\n  `,\n  actionsCell: css`\n    text-align: right;\n    width: 1%;\n    white-space: nowrap;\n\n    & > * + * {\n      margin-left: ${theme.spacing.sm};\n    }\n  `,\n  alertRulesCell: css`\n    vertical-align: top;\n  `,\n});\n\nexport default SilenceTableRow;\n","import { CallToActionCard } from '@grafana/ui';\nimport EmptyListCTA from 'app/core/components/EmptyListCTA/EmptyListCTA';\nimport { contextSrv } from 'app/core/services/context_srv';\nimport React, { FC } from 'react';\nimport { makeAMLink } from '../../utils/misc';\n\ntype Props = {\n  alertManagerSourceName: string;\n};\n\nexport const NoSilencesSplash: FC<Props> = ({ alertManagerSourceName }) => {\n  if (contextSrv.isEditor) {\n    return (\n      <EmptyListCTA\n        title=\"You haven't created any silences yet\"\n        buttonIcon=\"bell-slash\"\n        buttonLink={makeAMLink('alerting/silence/new', alertManagerSourceName)}\n        buttonTitle=\"New silence\"\n      />\n    );\n  }\n  return <CallToActionCard callToActionElement={<div />} message=\"No silences found.\" />;\n};\n","import React, { FC, useMemo } from 'react';\nimport { GrafanaTheme2 } from '@grafana/data';\nimport { Icon, useStyles2, Link, Button } from '@grafana/ui';\nimport { css } from '@emotion/css';\nimport { AlertmanagerAlert, Silence } from 'app/plugins/datasource/alertmanager/types';\nimport SilenceTableRow from './SilenceTableRow';\nimport { getAlertTableStyles } from '../../styles/table';\nimport { NoSilencesSplash } from './NoSilencesCTA';\nimport { makeAMLink } from '../../utils/misc';\nimport { contextSrv } from 'app/core/services/context_srv';\nimport { useQueryParams } from 'app/core/hooks/useQueryParams';\ninterface Props {\n  silences: Silence[];\n  alertManagerAlerts: AlertmanagerAlert[];\n  alertManagerSourceName: string;\n}\n\nconst SilencesTable: FC<Props> = ({ silences, alertManagerAlerts, alertManagerSourceName }) => {\n  const styles = useStyles2(getStyles);\n  const tableStyles = useStyles2(getAlertTableStyles);\n  const [queryParams] = useQueryParams();\n\n  const filteredSilences = useMemo(() => {\n    const silenceIdsString = queryParams?.silenceIds;\n    if (typeof silenceIdsString === 'string') {\n      return silences.filter((silence) => silenceIdsString.split(',').includes(silence.id));\n    }\n    return silences;\n  }, [queryParams, silences]);\n\n  const findSilencedAlerts = (id: string) => {\n    return alertManagerAlerts.filter((alert) => alert.status.silencedBy.includes(id));\n  };\n\n  return (\n    <>\n      {!!silences.length && (\n        <>\n          {contextSrv.isEditor && (\n            <div className={styles.topButtonContainer}>\n              <Link href={makeAMLink('/alerting/silence/new', alertManagerSourceName)}>\n                <Button className={styles.addNewSilence} icon=\"plus\">\n                  New Silence\n                </Button>\n              </Link>\n            </div>\n          )}\n          <table className={tableStyles.table}>\n            <colgroup>\n              <col className={tableStyles.colExpand} />\n              <col className={styles.colState} />\n              <col className={styles.colMatchers} />\n              <col />\n              <col />\n              {contextSrv.isEditor && <col />}\n            </colgroup>\n            <thead>\n              <tr>\n                <th />\n                <th>State</th>\n                <th>Matching labels</th>\n                <th>Alerts</th>\n                <th>Schedule</th>\n                {contextSrv.isEditor && <th>Action</th>}\n              </tr>\n            </thead>\n            <tbody>\n              {filteredSilences.map((silence, index) => {\n                const silencedAlerts = findSilencedAlerts(silence.id);\n                return (\n                  <SilenceTableRow\n                    key={silence.id}\n                    silence={silence}\n                    className={index % 2 === 0 ? tableStyles.evenRow : undefined}\n                    silencedAlerts={silencedAlerts}\n                    alertManagerSourceName={alertManagerSourceName}\n                  />\n                );\n              })}\n            </tbody>\n          </table>\n          <div className={styles.callout}>\n            <Icon className={styles.calloutIcon} name=\"info-circle\" />\n            <span>Expired silences are automatically deleted after 5 days.</span>\n          </div>\n        </>\n      )}\n      {!silences.length && <NoSilencesSplash alertManagerSourceName={alertManagerSourceName} />}\n    </>\n  );\n};\n\nconst getStyles = (theme: GrafanaTheme2) => ({\n  topButtonContainer: css`\n    display: flex;\n    flex-direction: row;\n    justify-content: flex-end;\n  `,\n  addNewSilence: css`\n    margin-bottom: ${theme.spacing(1)};\n  `,\n  colState: css`\n    width: 110px;\n  `,\n  colMatchers: css`\n    width: 50%;\n  `,\n  callout: css`\n    background-color: ${theme.colors.background.secondary};\n    border-top: 3px solid ${theme.colors.info.border};\n    border-radius: 2px;\n    height: 62px;\n    display: flex;\n    flex-direction: row;\n    align-items: center;\n    margin-top: ${theme.spacing(2)};\n\n    & > * {\n      margin-left: ${theme.spacing(1)};\n    }\n  `,\n  calloutIcon: css`\n    color: ${theme.colors.info.text};\n  `,\n});\n\nexport default SilencesTable;\n","import React, { FC } from 'react';\nimport { Button, Field, Input, Checkbox, IconButton, useStyles2 } from '@grafana/ui';\nimport { GrafanaTheme2 } from '@grafana/data';\nimport { css, cx } from '@emotion/css';\nimport { useFormContext, useFieldArray } from 'react-hook-form';\nimport { SilenceFormFields } from '../../types/silence-form';\nimport { Matcher } from 'app/plugins/datasource/alertmanager/types';\n\ninterface Props {\n  className?: string;\n}\n\nconst MatchersField: FC<Props> = ({ className }) => {\n  const styles = useStyles2(getStyles);\n  const formApi = useFormContext<SilenceFormFields>();\n  const {\n    register,\n    formState: { errors },\n  } = formApi;\n  const { fields: matchers = [], append, remove } = useFieldArray<SilenceFormFields>({ name: 'matchers' });\n\n  return (\n    <div className={cx(className, styles.wrapper)}>\n      <Field label=\"Matching labels\" required>\n        <div>\n          <div className={styles.matchers}>\n            {matchers.map((matcher, index) => {\n              return (\n                <div className={styles.row} key={`${matcher.id}`}>\n                  <Field\n                    label=\"Label\"\n                    invalid={!!errors?.matchers?.[index]?.name}\n                    error={errors?.matchers?.[index]?.name?.message}\n                  >\n                    <Input\n                      {...register(`matchers.${index}.name` as const, {\n                        required: { value: true, message: 'Required.' },\n                      })}\n                      defaultValue={matcher.name}\n                      placeholder=\"label\"\n                    />\n                  </Field>\n                  <Field\n                    label=\"Value\"\n                    invalid={!!errors?.matchers?.[index]?.value}\n                    error={errors?.matchers?.[index]?.value?.message}\n                  >\n                    <Input\n                      {...register(`matchers.${index}.value` as const, {\n                        required: { value: true, message: 'Required.' },\n                      })}\n                      defaultValue={matcher.value}\n                      placeholder=\"value\"\n                    />\n                  </Field>\n                  <Field label=\"Regex\">\n                    <Checkbox {...register(`matchers.${index}.isRegex` as const)} defaultChecked={matcher.isRegex} />\n                  </Field>\n                  <Field label=\"Equal\">\n                    <Checkbox {...register(`matchers.${index}.isEqual` as const)} defaultChecked={matcher.isEqual} />\n                  </Field>\n                  {matchers.length > 1 && (\n                    <IconButton\n                      className={styles.removeButton}\n                      tooltip=\"Remove matcher\"\n                      name={'trash-alt'}\n                      onClick={() => remove(index)}\n                    >\n                      Remove\n                    </IconButton>\n                  )}\n                </div>\n              );\n            })}\n          </div>\n          <Button\n            type=\"button\"\n            icon=\"plus\"\n            variant=\"secondary\"\n            onClick={() => {\n              const newMatcher: Matcher = { name: '', value: '', isRegex: false, isEqual: true };\n              append(newMatcher);\n            }}\n          >\n            Add matcher\n          </Button>\n        </div>\n      </Field>\n    </div>\n  );\n};\n\nconst getStyles = (theme: GrafanaTheme2) => {\n  return {\n    wrapper: css`\n      margin-top: ${theme.spacing(2)};\n    `,\n    row: css`\n      display: flex;\n      align-items: flex-start;\n      flex-direction: row;\n      background-color: ${theme.colors.background.secondary};\n      padding: ${theme.spacing(1)} ${theme.spacing(1)} 0 ${theme.spacing(1)};\n      & > * + * {\n        margin-left: ${theme.spacing(2)};\n      }\n    `,\n    removeButton: css`\n      margin-left: ${theme.spacing(1)};\n      margin-top: ${theme.spacing(2.5)};\n    `,\n    matchers: css`\n      max-width: 585px;\n      margin: ${theme.spacing(1)} 0;\n      padding-top: ${theme.spacing(0.5)};\n    `,\n  };\n};\n\nexport default MatchersField;\n","import { css } from '@emotion/css';\nimport { dateTime, GrafanaTheme } from '@grafana/data';\nimport { Field, TimeRangeInput, useStyles } from '@grafana/ui';\nimport React from 'react';\nimport { useController, useFormContext } from 'react-hook-form';\nimport { SilenceFormFields } from '../../types/silence-form';\n\nexport const SilencePeriod = () => {\n  const { control, getValues } = useFormContext<SilenceFormFields>();\n  const styles = useStyles(getStyles);\n  const {\n    field: { onChange: onChangeStartsAt, value: startsAt },\n    fieldState: { invalid: startsAtInvalid },\n  } = useController({\n    name: 'startsAt',\n    control,\n    rules: {\n      validate: (value) => getValues().endsAt > value,\n    },\n  });\n\n  const {\n    field: { onChange: onChangeEndsAt, value: endsAt },\n    fieldState: { invalid: endsAtInvalid },\n  } = useController({\n    name: 'endsAt',\n    control,\n    rules: {\n      validate: (value) => getValues().startsAt < value,\n    },\n  });\n\n  const {\n    field: { onChange: onChangeTimeZone, value: timeZone },\n  } = useController({\n    name: 'timeZone',\n    control,\n  });\n\n  const invalid = startsAtInvalid || endsAtInvalid;\n\n  const from = dateTime(startsAt);\n  const to = dateTime(endsAt);\n\n  return (\n    <Field\n      className={styles.timeRange}\n      label=\"Silence start and end\"\n      error={invalid ? 'To is before or the same as from' : ''}\n      invalid={invalid}\n    >\n      <TimeRangeInput\n        value={{\n          from,\n          to,\n          raw: {\n            from,\n            to,\n          },\n        }}\n        timeZone={timeZone}\n        onChange={(newValue) => {\n          onChangeStartsAt(dateTime(newValue.from));\n          onChangeEndsAt(dateTime(newValue.to));\n        }}\n        onChangeTimeZone={(newValue) => onChangeTimeZone(newValue)}\n        hideTimeZone={false}\n        hideQuickRanges={true}\n      />\n    </Field>\n  );\n};\n\nconst getStyles = (theme: GrafanaTheme) => ({\n  timeRange: css`\n    width: 400px;\n  `,\n});\n","import { Silence, SilenceCreatePayload } from 'app/plugins/datasource/alertmanager/types';\nimport React, { FC, useMemo, useState } from 'react';\nimport { Button, Field, FieldSet, Input, LinkButton, TextArea, useStyles } from '@grafana/ui';\nimport {\n  DefaultTimeZone,\n  GrafanaTheme,\n  parseDuration,\n  intervalToAbbreviatedDurationString,\n  addDurationToDate,\n  dateTime,\n  isValidDate,\n  UrlQueryMap,\n} from '@grafana/data';\nimport { useDebounce } from 'react-use';\nimport { config } from '@grafana/runtime';\nimport { pickBy } from 'lodash';\nimport MatchersField from './MatchersField';\nimport { useForm, FormProvider } from 'react-hook-form';\nimport { SilenceFormFields } from '../../types/silence-form';\nimport { useDispatch } from 'react-redux';\nimport { createOrUpdateSilenceAction } from '../../state/actions';\nimport { SilencePeriod } from './SilencePeriod';\nimport { css, cx } from '@emotion/css';\nimport { useUnifiedAlertingSelector } from '../../hooks/useUnifiedAlertingSelector';\nimport { makeAMLink } from '../../utils/misc';\nimport { useCleanup } from 'app/core/hooks/useCleanup';\nimport { useQueryParams } from 'app/core/hooks/useQueryParams';\nimport { parseQueryParamMatchers } from '../../utils/matchers';\n\ninterface Props {\n  silence?: Silence;\n  alertManagerSourceName: string;\n}\n\nconst defaultsFromQuery = (queryParams: UrlQueryMap): Partial<SilenceFormFields> => {\n  const defaults: Partial<SilenceFormFields> = {};\n\n  const { matchers, comment } = queryParams;\n\n  if (typeof matchers === 'string') {\n    const formMatchers = parseQueryParamMatchers(matchers);\n    if (formMatchers.length) {\n      defaults.matchers = formMatchers;\n    }\n  }\n\n  if (typeof comment === 'string') {\n    defaults.comment = comment;\n  }\n\n  return defaults;\n};\n\nconst getDefaultFormValues = (queryParams: UrlQueryMap, silence?: Silence): SilenceFormFields => {\n  const now = new Date();\n  if (silence) {\n    const isExpired = Date.parse(silence.endsAt) < Date.now();\n    const interval = isExpired\n      ? {\n          start: now,\n          end: addDurationToDate(now, { hours: 2 }),\n        }\n      : { start: new Date(silence.startsAt), end: new Date(silence.endsAt) };\n    return {\n      id: silence.id,\n      startsAt: interval.start.toISOString(),\n      endsAt: interval.end.toISOString(),\n      comment: silence.comment,\n      createdBy: silence.createdBy,\n      duration: intervalToAbbreviatedDurationString(interval),\n      isRegex: false,\n      matchers: silence.matchers || [],\n      matcherName: '',\n      matcherValue: '',\n      timeZone: DefaultTimeZone,\n    };\n  } else {\n    const endsAt = addDurationToDate(now, { hours: 2 }); // Default time period is now + 2h\n    return {\n      id: '',\n      startsAt: now.toISOString(),\n      endsAt: endsAt.toISOString(),\n      comment: '',\n      createdBy: config.bootData.user.name,\n      duration: '2h',\n      isRegex: false,\n      matchers: [{ name: '', value: '', isRegex: false, isEqual: true }],\n      matcherName: '',\n      matcherValue: '',\n      timeZone: DefaultTimeZone,\n      ...defaultsFromQuery(queryParams),\n    };\n  }\n};\n\nexport const SilencesEditor: FC<Props> = ({ silence, alertManagerSourceName }) => {\n  const [queryParams] = useQueryParams();\n  const defaultValues = useMemo(() => getDefaultFormValues(queryParams, silence), [silence, queryParams]);\n  const formAPI = useForm({ defaultValues });\n  const dispatch = useDispatch();\n  const styles = useStyles(getStyles);\n\n  const { loading } = useUnifiedAlertingSelector((state) => state.updateSilence);\n\n  useCleanup((state) => state.unifiedAlerting.updateSilence);\n\n  const { register, handleSubmit, formState, watch, setValue, clearErrors } = formAPI;\n\n  const onSubmit = (data: SilenceFormFields) => {\n    const { id, startsAt, endsAt, comment, createdBy, matchers } = data;\n    const payload = pickBy(\n      {\n        id,\n        startsAt,\n        endsAt,\n        comment,\n        createdBy,\n        matchers,\n      },\n      (value) => !!value\n    ) as SilenceCreatePayload;\n    dispatch(\n      createOrUpdateSilenceAction({\n        alertManagerSourceName,\n        payload,\n        exitOnSave: true,\n        successMessage: `Silence ${payload.id ? 'updated' : 'created'}`,\n      })\n    );\n  };\n\n  const duration = watch('duration');\n  const startsAt = watch('startsAt');\n  const endsAt = watch('endsAt');\n\n  // Keep duration and endsAt in sync\n  const [prevDuration, setPrevDuration] = useState(duration);\n  useDebounce(\n    () => {\n      if (isValidDate(startsAt) && isValidDate(endsAt)) {\n        if (duration !== prevDuration) {\n          setValue('endsAt', dateTime(addDurationToDate(new Date(startsAt), parseDuration(duration))).toISOString());\n          setPrevDuration(duration);\n        } else {\n          const startValue = new Date(startsAt).valueOf();\n          const endValue = new Date(endsAt).valueOf();\n          if (endValue > startValue) {\n            const nextDuration = intervalToAbbreviatedDurationString({\n              start: new Date(startsAt),\n              end: new Date(endsAt),\n            });\n            setValue('duration', nextDuration);\n            setPrevDuration(nextDuration);\n          }\n        }\n      }\n    },\n    700,\n    [clearErrors, duration, endsAt, prevDuration, setValue, startsAt]\n  );\n\n  return (\n    <FormProvider {...formAPI}>\n      <form onSubmit={handleSubmit(onSubmit)}>\n        <FieldSet label={`${silence ? 'Recreate silence' : 'Create silence'}`}>\n          <div className={styles.flexRow}>\n            <SilencePeriod />\n            <Field\n              label=\"Duration\"\n              invalid={!!formState.errors.duration}\n              error={\n                formState.errors.duration &&\n                (formState.errors.duration.type === 'required' ? 'Required field' : formState.errors.duration.message)\n              }\n            >\n              <Input\n                className={styles.createdBy}\n                {...register('duration', {\n                  validate: (value) =>\n                    Object.keys(parseDuration(value)).length === 0\n                      ? 'Invalid duration. Valid example: 1d 4h (Available units: y, M, w, d, h, m, s)'\n                      : undefined,\n                })}\n                id=\"duration\"\n              />\n            </Field>\n          </div>\n\n          <MatchersField />\n          <Field\n            className={cx(styles.field, styles.textArea)}\n            label=\"Comment\"\n            required\n            error={formState.errors.comment?.message}\n            invalid={!!formState.errors.comment}\n          >\n            <TextArea {...register('comment', { required: { value: true, message: 'Required.' } })} />\n          </Field>\n          <Field\n            className={cx(styles.field, styles.createdBy)}\n            label=\"Created by\"\n            required\n            error={formState.errors.createdBy?.message}\n            invalid={!!formState.errors.createdBy}\n          >\n            <Input {...register('createdBy', { required: { value: true, message: 'Required.' } })} />\n          </Field>\n        </FieldSet>\n        <div className={styles.flexRow}>\n          {loading && (\n            <Button disabled={true} icon=\"fa fa-spinner\" variant=\"primary\">\n              Saving...\n            </Button>\n          )}\n          {!loading && <Button type=\"submit\">Submit</Button>}\n          <LinkButton\n            href={makeAMLink('alerting/silences', alertManagerSourceName)}\n            variant={'secondary'}\n            fill=\"outline\"\n          >\n            Cancel\n          </LinkButton>\n        </div>\n      </form>\n    </FormProvider>\n  );\n};\n\nconst getStyles = (theme: GrafanaTheme) => ({\n  field: css`\n    margin: ${theme.spacing.sm} 0;\n  `,\n  textArea: css`\n    width: 600px;\n  `,\n  createdBy: css`\n    width: 200px;\n  `,\n  flexRow: css`\n    display: flex;\n    flex-direction: row;\n    justify-content: flex-start;\n\n    & > * {\n      margin-right: ${theme.spacing.sm};\n    }\n  `,\n});\n\nexport default SilencesEditor;\n","import { Matcher } from 'app/plugins/datasource/alertmanager/types';\nimport { parseMatcher } from './alertmanager';\n\n// parses comma separated matchers like \"foo=bar,baz=~bad*\" into SilenceMatcher[]\nexport function parseQueryParamMatchers(paramValue: string): Matcher[] {\n  return paramValue\n    .split(',')\n    .filter((x) => !!x.trim())\n    .map((x) => parseMatcher(x.trim()));\n}\n","import React, { FC, useEffect, useCallback } from 'react';\nimport { Alert, LoadingPlaceholder, withErrorBoundary } from '@grafana/ui';\n\nimport { useDispatch } from 'react-redux';\nimport { Redirect, Route, RouteChildrenProps, Switch, useLocation } from 'react-router-dom';\nimport { AlertingPageWrapper } from './components/AlertingPageWrapper';\nimport SilencesTable from './components/silences/SilencesTable';\nimport { useAlertManagerSourceName } from './hooks/useAlertManagerSourceName';\nimport { useUnifiedAlertingSelector } from './hooks/useUnifiedAlertingSelector';\nimport { fetchAmAlertsAction, fetchSilencesAction } from './state/actions';\nimport { SILENCES_POLL_INTERVAL_MS } from './utils/constants';\nimport { AsyncRequestState, initialAsyncRequestState } from './utils/redux';\nimport SilencesEditor from './components/silences/SilencesEditor';\nimport { AlertManagerPicker } from './components/AlertManagerPicker';\nimport { Silence } from 'app/plugins/datasource/alertmanager/types';\n\nconst Silences: FC = () => {\n  const [alertManagerSourceName, setAlertManagerSourceName] = useAlertManagerSourceName();\n  const dispatch = useDispatch();\n  const silences = useUnifiedAlertingSelector((state) => state.silences);\n  const alertsRequests = useUnifiedAlertingSelector((state) => state.amAlerts);\n  const alertsRequest = alertManagerSourceName\n    ? alertsRequests[alertManagerSourceName] || initialAsyncRequestState\n    : undefined;\n\n  const location = useLocation();\n  const isRoot = location.pathname.endsWith('/alerting/silences');\n\n  useEffect(() => {\n    function fetchAll() {\n      if (alertManagerSourceName) {\n        dispatch(fetchSilencesAction(alertManagerSourceName));\n        dispatch(fetchAmAlertsAction(alertManagerSourceName));\n      }\n    }\n    fetchAll();\n    const interval = setInterval(() => fetchAll, SILENCES_POLL_INTERVAL_MS);\n    return () => {\n      clearInterval(interval);\n    };\n  }, [alertManagerSourceName, dispatch]);\n\n  const { result, loading, error }: AsyncRequestState<Silence[]> =\n    (alertManagerSourceName && silences[alertManagerSourceName]) || initialAsyncRequestState;\n\n  const getSilenceById = useCallback((id: string) => result && result.find((silence) => silence.id === id), [result]);\n\n  if (!alertManagerSourceName) {\n    return <Redirect to=\"/alerting/silences\" />;\n  }\n\n  return (\n    <AlertingPageWrapper pageId=\"silences\">\n      <AlertManagerPicker disabled={!isRoot} current={alertManagerSourceName} onChange={setAlertManagerSourceName} />\n      {error && !loading && (\n        <Alert severity=\"error\" title=\"Error loading silences\">\n          {error.message || 'Unknown error.'}\n        </Alert>\n      )}\n      {alertsRequest?.error && !alertsRequest?.loading && (\n        <Alert severity=\"error\" title=\"Error loading alert manager alerts\">\n          {alertsRequest.error?.message || 'Unknown error.'}\n        </Alert>\n      )}\n      {loading && <LoadingPlaceholder text=\"loading silences...\" />}\n      {result && !error && (\n        <Switch>\n          <Route exact path=\"/alerting/silences\">\n            <SilencesTable\n              silences={result}\n              alertManagerAlerts={alertsRequest?.result ?? []}\n              alertManagerSourceName={alertManagerSourceName}\n            />\n          </Route>\n          <Route exact path=\"/alerting/silence/new\">\n            <SilencesEditor alertManagerSourceName={alertManagerSourceName} />\n          </Route>\n          <Route exact path=\"/alerting/silence/:id/edit\">\n            {({ match }: RouteChildrenProps<{ id: string }>) => {\n              return (\n                match?.params.id && (\n                  <SilencesEditor\n                    silence={getSilenceById(match.params.id)}\n                    alertManagerSourceName={alertManagerSourceName}\n                  />\n                )\n              );\n            }}\n          </Route>\n        </Switch>\n      )}\n    </AlertingPageWrapper>\n  );\n};\n\nexport default withErrorBoundary(Silences, { style: 'page' });\n","import React, { useCallback } from 'react';\nimport { GrafanaTheme } from '@grafana/data';\nimport { useStyles } from '@grafana/ui';\nimport { css } from '@emotion/css';\nimport { Matcher } from 'app/plugins/datasource/alertmanager/types';\nimport { AlertLabel } from '../AlertLabel';\nimport { matcherToOperator } from '../../utils/alertmanager';\n\ntype MatchersProps = { matchers: Matcher[]; onRemoveLabel?(index: number): void };\n\nexport const Matchers = ({ matchers, onRemoveLabel }: MatchersProps) => {\n  const styles = useStyles(getStyles);\n\n  const removeLabel = useCallback(\n    (index: number) => {\n      if (!!onRemoveLabel) {\n        onRemoveLabel(index);\n      }\n    },\n    [onRemoveLabel]\n  );\n\n  return (\n    <div className={styles.wrapper}>\n      {matchers.map((matcher, index) => {\n        const { name, value } = matcher;\n        return (\n          <AlertLabel\n            key={`${name}-${value}-${index}`}\n            labelKey={name}\n            value={value}\n            operator={matcherToOperator(matcher)}\n            onRemoveLabel={!!onRemoveLabel ? () => removeLabel(index) : undefined}\n          />\n        );\n      })}\n    </div>\n  );\n};\n\nconst getStyles = (theme: GrafanaTheme) => ({\n  wrapper: css`\n    & > * {\n      margin-top: ${theme.spacing.xs};\n      margin-right: ${theme.spacing.xs};\n    }\n    padding-bottom: ${theme.spacing.xs};\n  `,\n});\n","import { Icon, IconName, useStyles, Tooltip } from '@grafana/ui';\nimport { PopoverContent } from '@grafana/ui/src/components/Tooltip/Tooltip';\nimport { TooltipPlacement } from '@grafana/ui/src/components/Tooltip/PopoverController';\nimport React, { FC } from 'react';\nimport { css, cx } from '@emotion/css';\nimport { Link } from 'react-router-dom';\n\ninterface Props {\n  tooltip: PopoverContent;\n  icon: IconName;\n\n  className?: string;\n  tooltipPlacement?: TooltipPlacement;\n  to?: string;\n  target?: string;\n  onClick?: (e: React.MouseEvent<HTMLDivElement, MouseEvent>) => void;\n  'data-testid'?: string;\n}\n\nexport const ActionIcon: FC<Props> = ({\n  tooltip,\n  icon,\n  to,\n  target,\n  onClick,\n  className,\n  tooltipPlacement = 'top',\n  ...rest\n}) => {\n  const iconEl = <Icon className={cx(useStyles(getStyle), className)} onClick={onClick} name={icon} {...rest} />;\n\n  return (\n    <Tooltip content={tooltip} placement={tooltipPlacement}>\n      {(() => {\n        if (to) {\n          return (\n            <Link to={to} target={target}>\n              {iconEl}\n            </Link>\n          );\n        }\n        return iconEl;\n      })()}\n    </Tooltip>\n  );\n};\n\nexport const getStyle = () => css`\n  cursor: pointer;\n`;\n","import { GrafanaTheme2 } from '@grafana/data';\nimport { css } from '@emotion/css';\n\nexport const getAlertTableStyles = (theme: GrafanaTheme2) => ({\n  table: css`\n    width: 100%;\n    border-radius: ${theme.shape.borderRadius()};\n    border: solid 1px ${theme.colors.border.weak};\n    background-color: ${theme.colors.background.secondary};\n\n    th {\n      padding: ${theme.spacing(1)};\n    }\n\n    td {\n      padding: 0 ${theme.spacing(1)};\n    }\n\n    tr {\n      height: 38px;\n    }\n  `,\n  evenRow: css`\n    background-color: ${theme.colors.background.primary};\n  `,\n  colExpand: css`\n    width: 36px;\n  `,\n  actionsCell: css`\n    text-align: right;\n    width: 1%;\n    white-space: nowrap;\n\n    & > * + * {\n      margin-left: ${theme.spacing(1)};\n    }\n  `,\n});\n","import { AlertState } from 'app/plugins/datasource/alertmanager/types';\nimport React, { FC } from 'react';\nimport { State, StateTag } from '../StateTag';\n\nconst alertStateToState: Record<AlertState, State> = {\n  [AlertState.Active]: 'bad',\n  [AlertState.Unprocessed]: 'neutral',\n  [AlertState.Suppressed]: 'info',\n};\n\ninterface Props {\n  state: AlertState;\n}\n\nexport const AmAlertStateTag: FC<Props> = ({ state }) => <StateTag state={alertStateToState[state]}>{state}</StateTag>;\n","import { useEffect, useRef } from 'react';\nimport { useDispatch } from 'react-redux';\nimport { cleanUpAction, StateSelector } from '../actions/cleanUp';\n\nexport function useCleanup<T>(stateSelector: StateSelector<T>) {\n  const dispatch = useDispatch();\n  //bit of a hack to unburden user from having to wrap stateSelcetor in a useCallback. Otherwise cleanup would happen on every render\n  const selectorRef = useRef(stateSelector);\n  selectorRef.current = stateSelector;\n  useEffect(() => {\n    return () => {\n      dispatch(cleanUpAction({ stateSelector: selectorRef.current }));\n    };\n  }, [dispatch]);\n}\n","var scope = (typeof global !== \"undefined\" && global) ||\n            (typeof self !== \"undefined\" && self) ||\n            window;\nvar apply = Function.prototype.apply;\n\n// DOM APIs, for completeness\n\nexports.setTimeout = function() {\n  return new Timeout(apply.call(setTimeout, scope, arguments), clearTimeout);\n};\nexports.setInterval = function() {\n  return new Timeout(apply.call(setInterval, scope, arguments), clearInterval);\n};\nexports.clearTimeout =\nexports.clearInterval = function(timeout) {\n  if (timeout) {\n    timeout.close();\n  }\n};\n\nfunction Timeout(id, clearFn) {\n  this._id = id;\n  this._clearFn = clearFn;\n}\nTimeout.prototype.unref = Timeout.prototype.ref = function() {};\nTimeout.prototype.close = function() {\n  this._clearFn.call(scope, this._id);\n};\n\n// Does not start the time, just sets up the members needed.\nexports.enroll = function(item, msecs) {\n  clearTimeout(item._idleTimeoutId);\n  item._idleTimeout = msecs;\n};\n\nexports.unenroll = function(item) {\n  clearTimeout(item._idleTimeoutId);\n  item._idleTimeout = -1;\n};\n\nexports._unrefActive = exports.active = function(item) {\n  clearTimeout(item._idleTimeoutId);\n\n  var msecs = item._idleTimeout;\n  if (msecs >= 0) {\n    item._idleTimeoutId = setTimeout(function onTimeout() {\n      if (item._onTimeout)\n        item._onTimeout();\n    }, msecs);\n  }\n};\n\n// setimmediate attaches itself to the global object\nrequire(\"setimmediate\");\n// On some exotic environments, it's not clear which object `setimmediate` was\n// able to install onto.  Search each possibility in the same order as the\n// `setimmediate` library.\nexports.setImmediate = (typeof self !== \"undefined\" && self.setImmediate) ||\n                       (typeof global !== \"undefined\" && global.setImmediate) ||\n                       (this && this.setImmediate);\nexports.clearImmediate = (typeof self !== \"undefined\" && self.clearImmediate) ||\n                         (typeof global !== \"undefined\" && global.clearImmediate) ||\n                         (this && this.clearImmediate);\n","(function (global, undefined) {\n    \"use strict\";\n\n    if (global.setImmediate) {\n        return;\n    }\n\n    var nextHandle = 1; // Spec says greater than zero\n    var tasksByHandle = {};\n    var currentlyRunningATask = false;\n    var doc = global.document;\n    var registerImmediate;\n\n    function setImmediate(callback) {\n      // Callback can either be a function or a string\n      if (typeof callback !== \"function\") {\n        callback = new Function(\"\" + callback);\n      }\n      // Copy function arguments\n      var args = new Array(arguments.length - 1);\n      for (var i = 0; i < args.length; i++) {\n          args[i] = arguments[i + 1];\n      }\n      // Store and register the task\n      var task = { callback: callback, args: args };\n      tasksByHandle[nextHandle] = task;\n      registerImmediate(nextHandle);\n      return nextHandle++;\n    }\n\n    function clearImmediate(handle) {\n        delete tasksByHandle[handle];\n    }\n\n    function run(task) {\n        var callback = task.callback;\n        var args = task.args;\n        switch (args.length) {\n        case 0:\n            callback();\n            break;\n        case 1:\n            callback(args[0]);\n            break;\n        case 2:\n            callback(args[0], args[1]);\n            break;\n        case 3:\n            callback(args[0], args[1], args[2]);\n            break;\n        default:\n            callback.apply(undefined, args);\n            break;\n        }\n    }\n\n    function runIfPresent(handle) {\n        // From the spec: \"Wait until any invocations of this algorithm started before this one have completed.\"\n        // So if we're currently running a task, we'll need to delay this invocation.\n        if (currentlyRunningATask) {\n            // Delay by doing a setTimeout. setImmediate was tried instead, but in Firefox 7 it generated a\n            // \"too much recursion\" error.\n            setTimeout(runIfPresent, 0, handle);\n        } else {\n            var task = tasksByHandle[handle];\n            if (task) {\n                currentlyRunningATask = true;\n                try {\n                    run(task);\n                } finally {\n                    clearImmediate(handle);\n                    currentlyRunningATask = false;\n                }\n            }\n        }\n    }\n\n    function installNextTickImplementation() {\n        registerImmediate = function(handle) {\n            process.nextTick(function () { runIfPresent(handle); });\n        };\n    }\n\n    function canUsePostMessage() {\n        // The test against `importScripts` prevents this implementation from being installed inside a web worker,\n        // where `global.postMessage` means something completely different and can't be used for this purpose.\n        if (global.postMessage && !global.importScripts) {\n            var postMessageIsAsynchronous = true;\n            var oldOnMessage = global.onmessage;\n            global.onmessage = function() {\n                postMessageIsAsynchronous = false;\n            };\n            global.postMessage(\"\", \"*\");\n            global.onmessage = oldOnMessage;\n            return postMessageIsAsynchronous;\n        }\n    }\n\n    function installPostMessageImplementation() {\n        // Installs an event handler on `global` for the `message` event: see\n        // * https://developer.mozilla.org/en/DOM/window.postMessage\n        // * http://www.whatwg.org/specs/web-apps/current-work/multipage/comms.html#crossDocumentMessages\n\n        var messagePrefix = \"setImmediate$\" + Math.random() + \"$\";\n        var onGlobalMessage = function(event) {\n            if (event.source === global &&\n                typeof event.data === \"string\" &&\n                event.data.indexOf(messagePrefix) === 0) {\n                runIfPresent(+event.data.slice(messagePrefix.length));\n            }\n        };\n\n        if (global.addEventListener) {\n            global.addEventListener(\"message\", onGlobalMessage, false);\n        } else {\n            global.attachEvent(\"onmessage\", onGlobalMessage);\n        }\n\n        registerImmediate = function(handle) {\n            global.postMessage(messagePrefix + handle, \"*\");\n        };\n    }\n\n    function installMessageChannelImplementation() {\n        var channel = new MessageChannel();\n        channel.port1.onmessage = function(event) {\n            var handle = event.data;\n            runIfPresent(handle);\n        };\n\n        registerImmediate = function(handle) {\n            channel.port2.postMessage(handle);\n        };\n    }\n\n    function installReadyStateChangeImplementation() {\n        var html = doc.documentElement;\n        registerImmediate = function(handle) {\n            // Create a <script> element; its readystatechange event will be fired asynchronously once it is inserted\n            // into the document. Do so, thus queuing up the task. Remember to clean up once it's been called.\n            var script = doc.createElement(\"script\");\n            script.onreadystatechange = function () {\n                runIfPresent(handle);\n                script.onreadystatechange = null;\n                html.removeChild(script);\n                script = null;\n            };\n            html.appendChild(script);\n        };\n    }\n\n    function installSetTimeoutImplementation() {\n        registerImmediate = function(handle) {\n            setTimeout(runIfPresent, 0, handle);\n        };\n    }\n\n    // If supported, we should attach to the prototype of global, since that is where setTimeout et al. live.\n    var attachTo = Object.getPrototypeOf && Object.getPrototypeOf(global);\n    attachTo = attachTo && attachTo.setTimeout ? attachTo : global;\n\n    // Don't get fooled by e.g. browserify environments.\n    if ({}.toString.call(global.process) === \"[object process]\") {\n        // For Node.js before 0.9\n        installNextTickImplementation();\n\n    } else if (canUsePostMessage()) {\n        // For non-IE10 modern browsers\n        installPostMessageImplementation();\n\n    } else if (global.MessageChannel) {\n        // For web workers, where supported\n        installMessageChannelImplementation();\n\n    } else if (doc && \"onreadystatechange\" in doc.createElement(\"script\")) {\n        // For IE 6–8\n        installReadyStateChangeImplementation();\n\n    } else {\n        // For older browsers\n        installSetTimeoutImplementation();\n    }\n\n    attachTo.setImmediate = setImmediate;\n    attachTo.clearImmediate = clearImmediate;\n}(typeof self === \"undefined\" ? typeof global === \"undefined\" ? this : global : self));\n","import { useQueryParams } from 'app/core/hooks/useQueryParams';\nimport store from 'app/core/store';\nimport { useCallback } from 'react';\nimport { ALERTMANAGER_NAME_LOCAL_STORAGE_KEY, ALERTMANAGER_NAME_QUERY_KEY } from '../utils/constants';\nimport { getAlertManagerDataSources, GRAFANA_RULES_SOURCE_NAME } from '../utils/datasource';\n\nfunction isAlertManagerSource(alertManagerSourceName: string): boolean {\n  return (\n    alertManagerSourceName === GRAFANA_RULES_SOURCE_NAME ||\n    !!getAlertManagerDataSources().find((ds) => ds.name === alertManagerSourceName)\n  );\n}\n\n/* this will return am name either from query params or from local storage or a default (grafana).\n *\n * fallbackUrl - if provided, will redirect to this url if alertmanager provided in query no longer\n */\nexport function useAlertManagerSourceName(): [string | undefined, (alertManagerSourceName: string) => void] {\n  const [queryParams, updateQueryParams] = useQueryParams();\n\n  const update = useCallback(\n    (alertManagerSourceName: string) => {\n      if (!isAlertManagerSource(alertManagerSourceName)) {\n        return;\n      }\n      if (alertManagerSourceName === GRAFANA_RULES_SOURCE_NAME) {\n        store.delete(ALERTMANAGER_NAME_LOCAL_STORAGE_KEY);\n        updateQueryParams({ [ALERTMANAGER_NAME_QUERY_KEY]: null });\n      } else {\n        store.set(ALERTMANAGER_NAME_LOCAL_STORAGE_KEY, alertManagerSourceName);\n        updateQueryParams({ [ALERTMANAGER_NAME_QUERY_KEY]: alertManagerSourceName });\n      }\n    },\n    [updateQueryParams]\n  );\n\n  const querySource = queryParams[ALERTMANAGER_NAME_QUERY_KEY];\n\n  if (querySource && typeof querySource === 'string') {\n    if (isAlertManagerSource(querySource)) {\n      return [querySource, update];\n    } else {\n      // non existing alertmanager\n      return [undefined, update];\n    }\n  }\n  const storeSource = store.get(ALERTMANAGER_NAME_LOCAL_STORAGE_KEY);\n  if (storeSource && typeof storeSource === 'string' && isAlertManagerSource(storeSource)) {\n    update(storeSource);\n    return [storeSource, update];\n  }\n\n  return [GRAFANA_RULES_SOURCE_NAME, update];\n}\n","import { SelectableValue, GrafanaTheme2 } from '@grafana/data';\nimport { DataSourceType, GRAFANA_RULES_SOURCE_NAME } from '../utils/datasource';\nimport React, { FC, useMemo } from 'react';\nimport { Field, Select, useStyles2 } from '@grafana/ui';\nimport { getAllDataSources } from '../utils/config';\nimport { css } from '@emotion/css';\n\ninterface Props {\n  onChange: (alertManagerSourceName: string) => void;\n  current?: string;\n  disabled?: boolean;\n}\n\nexport const AlertManagerPicker: FC<Props> = ({ onChange, current, disabled = false }) => {\n  const styles = useStyles2(getStyles);\n\n  const options: Array<SelectableValue<string>> = useMemo(() => {\n    return [\n      {\n        label: 'Grafana',\n        value: GRAFANA_RULES_SOURCE_NAME,\n        imgUrl: 'public/img/grafana_icon.svg',\n        meta: {},\n      },\n      ...getAllDataSources()\n        .filter((ds) => ds.type === DataSourceType.Alertmanager)\n        .map((ds) => ({\n          label: ds.name.substr(0, 37),\n          value: ds.name,\n          imgUrl: ds.meta.info.logos.small,\n          meta: ds.meta,\n        })),\n    ];\n  }, []);\n\n  // no need to show the picker if there's only one option\n  if (options.length === 1) {\n    return null;\n  }\n\n  return (\n    <Field\n      className={styles.field}\n      label={disabled ? 'Alertmanager' : 'Choose Alertmanager'}\n      disabled={disabled}\n      data-testid=\"alertmanager-picker\"\n    >\n      <Select\n        menuShouldPortal\n        width={29}\n        className=\"ds-picker select-container\"\n        backspaceRemovesValue={false}\n        onChange={(value) => value.value && onChange(value.value)}\n        options={options}\n        maxMenuHeight={500}\n        noOptionsMessage=\"No datasources found\"\n        value={current}\n        getOptionLabel={(o) => o.label}\n      />\n    </Field>\n  );\n};\n\nconst getStyles = (theme: GrafanaTheme2) => ({\n  field: css`\n    margin-bottom: ${theme.spacing(4)};\n  `,\n});\n","import React, { FC } from 'react';\nimport Page from 'app/core/components/Page/Page';\nimport { getNavModel } from 'app/core/selectors/navModel';\nimport { useSelector } from 'react-redux';\nimport { StoreState } from 'app/types/store';\n\ninterface Props {\n  pageId: string;\n  isLoading?: boolean;\n}\n\nexport const AlertingPageWrapper: FC<Props> = ({ children, pageId, isLoading }) => {\n  const navModel = getNavModel(\n    useSelector((state: StoreState) => state.navIndex),\n    pageId\n  );\n\n  return (\n    <Page navModel={navModel}>\n      <Page.Contents isLoading={isLoading}>{children}</Page.Contents>\n    </Page>\n  );\n};\n","import React, { FC, HTMLAttributes } from 'react';\nimport { css, cx } from '@emotion/css';\nimport { IconSize, useStyles, Icon } from '@grafana/ui';\n\ninterface Props extends HTMLAttributes<HTMLButtonElement> {\n  isCollapsed: boolean;\n  onToggle: (isCollapsed: boolean) => void;\n  size?: IconSize;\n  className?: string;\n  text?: string;\n}\n\nexport const CollapseToggle: FC<Props> = ({ isCollapsed, onToggle, className, text, size = 'xl', ...restOfProps }) => {\n  const styles = useStyles(getStyles);\n\n  return (\n    <button className={cx(styles.expandButton, className)} onClick={() => onToggle(!isCollapsed)} {...restOfProps}>\n      <Icon size={size} name={isCollapsed ? 'angle-right' : 'angle-down'} />\n      {text}\n    </button>\n  );\n};\n\nexport const getStyles = () => ({\n  expandButton: css`\n    background: none;\n    border: none;\n\n    outline: none !important;\n\n    display: inline-flex;\n    align-items: center;\n\n    svg {\n      margin-bottom: 0;\n    }\n  `,\n});\n"],"sourceRoot":""}
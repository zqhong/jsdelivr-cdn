{"version":3,"sources":["webpack:///./public/app/core/hooks/useQueryParams.ts","webpack:///./public/app/features/alerting/unified/Admin.tsx","webpack:///./node_modules/timers-browserify/main.js","webpack:///./node_modules/setimmediate/setImmediate.js","webpack:///./public/app/features/alerting/unified/hooks/useAlertManagerSourceName.ts","webpack:///./public/app/features/alerting/unified/components/AlertManagerPicker.tsx","webpack:///./public/app/features/alerting/unified/components/AlertingPageWrapper.tsx"],"names":["useQueryParams","search","useLocation","useMemo","locationSearchToObject","useCallback","values","replace","setImmediate","locationService","partial","Admin","dispatch","useDispatch","alertManagerSourceName","setAlertManagerSourceName","useAlertManagerSourceName","showConfirmDeleteAMConfig","setShowConfirmDeleteAMConfig","useState","loading","isDeleting","useUnifiedAlertingSelector","state","deleteAMConfig","isSaving","saveAMConfig","configRequests","amConfigs","result","config","isLoadingConfig","error","loadingError","initialAsyncRequestState","useEffect","fetchAlertManagerConfigAction","resetConfig","deleteAlertManagerConfigAction","defaultValues","configJSON","JSON","stringify","pageId","current","onChange","severity","title","message","GRAFANA_RULES_SOURCE_NAME","onSubmit","updateAlertManagerConfigAction","newConfig","parse","oldConfig","successMessage","refetch","register","errors","disabled","label","invalid","required","value","validate","v","e","id","rows","type","variant","onClick","isOpen","body","confirmText","onConfirm","onDismiss","self","window","apply","Function","prototype","Timeout","clearFn","this","_id","_clearFn","exports","setTimeout","call","scope","arguments","clearTimeout","setInterval","clearInterval","timeout","close","unref","ref","enroll","item","msecs","_idleTimeoutId","_idleTimeout","unenroll","_unrefActive","active","_onTimeout","global","clearImmediate","registerImmediate","html","channel","messagePrefix","onGlobalMessage","nextHandle","tasksByHandle","currentlyRunningATask","doc","document","attachTo","Object","getPrototypeOf","toString","process","handle","nextTick","runIfPresent","postMessage","importScripts","postMessageIsAsynchronous","oldOnMessage","onmessage","canUsePostMessage","MessageChannel","port1","event","data","port2","createElement","documentElement","script","onreadystatechange","removeChild","appendChild","Math","random","source","indexOf","slice","length","addEventListener","attachEvent","callback","args","Array","i","task","run","isAlertManagerSource","getAlertManagerDataSources","find","ds","name","queryParams","updateQueryParams","update","store","delete","ALERTMANAGER_NAME_LOCAL_STORAGE_KEY","ALERTMANAGER_NAME_QUERY_KEY","set","querySource","undefined","storeSource","get","AlertManagerPicker","styles","useStyles2","getStyles","options","imgUrl","meta","getAllDataSources","filter","DataSourceType","Alertmanager","map","substr","info","logos","small","className","field","data-testid","menuShouldPortal","width","backspaceRemovesValue","maxMenuHeight","noOptionsMessage","getOptionLabel","o","theme","css","spacing","AlertingPageWrapper","children","isLoading","navModel","getNavModel","useSelector","navIndex","Contents"],"mappings":"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","file":"AlertingAdmin.62c612232a976d8836f5.js","sourcesContent":["import { UrlQueryMap } from '@grafana/data';\nimport { locationSearchToObject, locationService } from '@grafana/runtime';\nimport { useCallback, useMemo } from 'react';\nimport { useLocation } from 'react-router-dom';\n\nexport function useQueryParams(): [UrlQueryMap, (values: UrlQueryMap, replace?: boolean) => void] {\n  const { search } = useLocation();\n  const queryParams = useMemo(() => locationSearchToObject(search || ''), [search]);\n  const update = useCallback(\n    (values: UrlQueryMap, replace?: boolean) => setImmediate(() => locationService.partial(values, replace)),\n    []\n  );\n  return [queryParams, update];\n}\n","import React, { useEffect, useState, useMemo } from 'react';\nimport { Alert, Button, ConfirmModal, TextArea, HorizontalGroup, Field, Form } from '@grafana/ui';\nimport { useAlertManagerSourceName } from './hooks/useAlertManagerSourceName';\nimport { AlertingPageWrapper } from './components/AlertingPageWrapper';\nimport { AlertManagerPicker } from './components/AlertManagerPicker';\nimport { GRAFANA_RULES_SOURCE_NAME } from './utils/datasource';\nimport { useDispatch } from 'react-redux';\nimport {\n  deleteAlertManagerConfigAction,\n  fetchAlertManagerConfigAction,\n  updateAlertManagerConfigAction,\n} from './state/actions';\nimport { useUnifiedAlertingSelector } from './hooks/useUnifiedAlertingSelector';\nimport { initialAsyncRequestState } from './utils/redux';\n\ninterface FormValues {\n  configJSON: string;\n}\n\nexport default function Admin(): JSX.Element {\n  const dispatch = useDispatch();\n  const [alertManagerSourceName, setAlertManagerSourceName] = useAlertManagerSourceName();\n  const [showConfirmDeleteAMConfig, setShowConfirmDeleteAMConfig] = useState(false);\n  const { loading: isDeleting } = useUnifiedAlertingSelector((state) => state.deleteAMConfig);\n  const { loading: isSaving } = useUnifiedAlertingSelector((state) => state.saveAMConfig);\n\n  const configRequests = useUnifiedAlertingSelector((state) => state.amConfigs);\n\n  const { result: config, loading: isLoadingConfig, error: loadingError } =\n    (alertManagerSourceName && configRequests[alertManagerSourceName]) || initialAsyncRequestState;\n\n  useEffect(() => {\n    if (alertManagerSourceName) {\n      dispatch(fetchAlertManagerConfigAction(alertManagerSourceName));\n    }\n  }, [alertManagerSourceName, dispatch]);\n\n  const resetConfig = () => {\n    if (alertManagerSourceName) {\n      dispatch(deleteAlertManagerConfigAction(alertManagerSourceName));\n    }\n    setShowConfirmDeleteAMConfig(false);\n  };\n\n  const defaultValues = useMemo(\n    (): FormValues => ({\n      configJSON: config ? JSON.stringify(config, null, 2) : '',\n    }),\n    [config]\n  );\n\n  const loading = isDeleting || isLoadingConfig || isSaving;\n\n  const onSubmit = (values: FormValues) => {\n    if (alertManagerSourceName) {\n      dispatch(\n        updateAlertManagerConfigAction({\n          newConfig: JSON.parse(values.configJSON),\n          oldConfig: config,\n          alertManagerSourceName,\n          successMessage: 'Alertmanager configuration updated.',\n          refetch: true,\n        })\n      );\n    }\n  };\n\n  return (\n    <AlertingPageWrapper pageId=\"alerting-admin\">\n      <AlertManagerPicker current={alertManagerSourceName} onChange={setAlertManagerSourceName} />\n      {loadingError && !loading && (\n        <Alert severity=\"error\" title=\"Error loading Alertmanager configuration\">\n          {loadingError.message || 'Unknown error.'}\n        </Alert>\n      )}\n      {isDeleting && alertManagerSourceName !== GRAFANA_RULES_SOURCE_NAME && (\n        <Alert severity=\"info\" title=\"Resetting Alertmanager configuration\">\n          It might take a while...\n        </Alert>\n      )}\n      {alertManagerSourceName && config && (\n        <Form defaultValues={defaultValues} onSubmit={onSubmit} key={defaultValues.configJSON}>\n          {({ register, errors }) => (\n            <>\n              <Field\n                disabled={loading}\n                label=\"Configuration\"\n                invalid={!!errors.configJSON}\n                error={errors.configJSON?.message}\n              >\n                <TextArea\n                  {...register('configJSON', {\n                    required: { value: true, message: 'Required.' },\n                    validate: (v) => {\n                      try {\n                        JSON.parse(v);\n                        return true;\n                      } catch (e) {\n                        return e.message;\n                      }\n                    },\n                  })}\n                  id=\"configuration\"\n                  rows={25}\n                />\n              </Field>\n              <HorizontalGroup>\n                <Button type=\"submit\" variant=\"primary\" disabled={loading}>\n                  Save\n                </Button>\n                <Button\n                  type=\"button\"\n                  disabled={loading}\n                  variant=\"destructive\"\n                  onClick={() => setShowConfirmDeleteAMConfig(true)}\n                >\n                  Reset configuration\n                </Button>\n              </HorizontalGroup>\n              {!!showConfirmDeleteAMConfig && (\n                <ConfirmModal\n                  isOpen={true}\n                  title=\"Reset Alertmanager configuration\"\n                  body={`Are you sure you want to reset configuration ${\n                    alertManagerSourceName === GRAFANA_RULES_SOURCE_NAME\n                      ? 'for the Grafana Alertmanager'\n                      : `for \"${alertManagerSourceName}\"`\n                  }? Contact points and notification policies will be reset to their defaults.`}\n                  confirmText=\"Yes, reset configuration\"\n                  onConfirm={resetConfig}\n                  onDismiss={() => setShowConfirmDeleteAMConfig(false)}\n                />\n              )}\n            </>\n          )}\n        </Form>\n      )}\n    </AlertingPageWrapper>\n  );\n}\n","var scope = (typeof global !== \"undefined\" && global) ||\n            (typeof self !== \"undefined\" && self) ||\n            window;\nvar apply = Function.prototype.apply;\n\n// DOM APIs, for completeness\n\nexports.setTimeout = function() {\n  return new Timeout(apply.call(setTimeout, scope, arguments), clearTimeout);\n};\nexports.setInterval = function() {\n  return new Timeout(apply.call(setInterval, scope, arguments), clearInterval);\n};\nexports.clearTimeout =\nexports.clearInterval = function(timeout) {\n  if (timeout) {\n    timeout.close();\n  }\n};\n\nfunction Timeout(id, clearFn) {\n  this._id = id;\n  this._clearFn = clearFn;\n}\nTimeout.prototype.unref = Timeout.prototype.ref = function() {};\nTimeout.prototype.close = function() {\n  this._clearFn.call(scope, this._id);\n};\n\n// Does not start the time, just sets up the members needed.\nexports.enroll = function(item, msecs) {\n  clearTimeout(item._idleTimeoutId);\n  item._idleTimeout = msecs;\n};\n\nexports.unenroll = function(item) {\n  clearTimeout(item._idleTimeoutId);\n  item._idleTimeout = -1;\n};\n\nexports._unrefActive = exports.active = function(item) {\n  clearTimeout(item._idleTimeoutId);\n\n  var msecs = item._idleTimeout;\n  if (msecs >= 0) {\n    item._idleTimeoutId = setTimeout(function onTimeout() {\n      if (item._onTimeout)\n        item._onTimeout();\n    }, msecs);\n  }\n};\n\n// setimmediate attaches itself to the global object\nrequire(\"setimmediate\");\n// On some exotic environments, it's not clear which object `setimmediate` was\n// able to install onto.  Search each possibility in the same order as the\n// `setimmediate` library.\nexports.setImmediate = (typeof self !== \"undefined\" && self.setImmediate) ||\n                       (typeof global !== \"undefined\" && global.setImmediate) ||\n                       (this && this.setImmediate);\nexports.clearImmediate = (typeof self !== \"undefined\" && self.clearImmediate) ||\n                         (typeof global !== \"undefined\" && global.clearImmediate) ||\n                         (this && this.clearImmediate);\n","(function (global, undefined) {\n    \"use strict\";\n\n    if (global.setImmediate) {\n        return;\n    }\n\n    var nextHandle = 1; // Spec says greater than zero\n    var tasksByHandle = {};\n    var currentlyRunningATask = false;\n    var doc = global.document;\n    var registerImmediate;\n\n    function setImmediate(callback) {\n      // Callback can either be a function or a string\n      if (typeof callback !== \"function\") {\n        callback = new Function(\"\" + callback);\n      }\n      // Copy function arguments\n      var args = new Array(arguments.length - 1);\n      for (var i = 0; i < args.length; i++) {\n          args[i] = arguments[i + 1];\n      }\n      // Store and register the task\n      var task = { callback: callback, args: args };\n      tasksByHandle[nextHandle] = task;\n      registerImmediate(nextHandle);\n      return nextHandle++;\n    }\n\n    function clearImmediate(handle) {\n        delete tasksByHandle[handle];\n    }\n\n    function run(task) {\n        var callback = task.callback;\n        var args = task.args;\n        switch (args.length) {\n        case 0:\n            callback();\n            break;\n        case 1:\n            callback(args[0]);\n            break;\n        case 2:\n            callback(args[0], args[1]);\n            break;\n        case 3:\n            callback(args[0], args[1], args[2]);\n            break;\n        default:\n            callback.apply(undefined, args);\n            break;\n        }\n    }\n\n    function runIfPresent(handle) {\n        // From the spec: \"Wait until any invocations of this algorithm started before this one have completed.\"\n        // So if we're currently running a task, we'll need to delay this invocation.\n        if (currentlyRunningATask) {\n            // Delay by doing a setTimeout. setImmediate was tried instead, but in Firefox 7 it generated a\n            // \"too much recursion\" error.\n            setTimeout(runIfPresent, 0, handle);\n        } else {\n            var task = tasksByHandle[handle];\n            if (task) {\n                currentlyRunningATask = true;\n                try {\n                    run(task);\n                } finally {\n                    clearImmediate(handle);\n                    currentlyRunningATask = false;\n                }\n            }\n        }\n    }\n\n    function installNextTickImplementation() {\n        registerImmediate = function(handle) {\n            process.nextTick(function () { runIfPresent(handle); });\n        };\n    }\n\n    function canUsePostMessage() {\n        // The test against `importScripts` prevents this implementation from being installed inside a web worker,\n        // where `global.postMessage` means something completely different and can't be used for this purpose.\n        if (global.postMessage && !global.importScripts) {\n            var postMessageIsAsynchronous = true;\n            var oldOnMessage = global.onmessage;\n            global.onmessage = function() {\n                postMessageIsAsynchronous = false;\n            };\n            global.postMessage(\"\", \"*\");\n            global.onmessage = oldOnMessage;\n            return postMessageIsAsynchronous;\n        }\n    }\n\n    function installPostMessageImplementation() {\n        // Installs an event handler on `global` for the `message` event: see\n        // * https://developer.mozilla.org/en/DOM/window.postMessage\n        // * http://www.whatwg.org/specs/web-apps/current-work/multipage/comms.html#crossDocumentMessages\n\n        var messagePrefix = \"setImmediate$\" + Math.random() + \"$\";\n        var onGlobalMessage = function(event) {\n            if (event.source === global &&\n                typeof event.data === \"string\" &&\n                event.data.indexOf(messagePrefix) === 0) {\n                runIfPresent(+event.data.slice(messagePrefix.length));\n            }\n        };\n\n        if (global.addEventListener) {\n            global.addEventListener(\"message\", onGlobalMessage, false);\n        } else {\n            global.attachEvent(\"onmessage\", onGlobalMessage);\n        }\n\n        registerImmediate = function(handle) {\n            global.postMessage(messagePrefix + handle, \"*\");\n        };\n    }\n\n    function installMessageChannelImplementation() {\n        var channel = new MessageChannel();\n        channel.port1.onmessage = function(event) {\n            var handle = event.data;\n            runIfPresent(handle);\n        };\n\n        registerImmediate = function(handle) {\n            channel.port2.postMessage(handle);\n        };\n    }\n\n    function installReadyStateChangeImplementation() {\n        var html = doc.documentElement;\n        registerImmediate = function(handle) {\n            // Create a <script> element; its readystatechange event will be fired asynchronously once it is inserted\n            // into the document. Do so, thus queuing up the task. Remember to clean up once it's been called.\n            var script = doc.createElement(\"script\");\n            script.onreadystatechange = function () {\n                runIfPresent(handle);\n                script.onreadystatechange = null;\n                html.removeChild(script);\n                script = null;\n            };\n            html.appendChild(script);\n        };\n    }\n\n    function installSetTimeoutImplementation() {\n        registerImmediate = function(handle) {\n            setTimeout(runIfPresent, 0, handle);\n        };\n    }\n\n    // If supported, we should attach to the prototype of global, since that is where setTimeout et al. live.\n    var attachTo = Object.getPrototypeOf && Object.getPrototypeOf(global);\n    attachTo = attachTo && attachTo.setTimeout ? attachTo : global;\n\n    // Don't get fooled by e.g. browserify environments.\n    if ({}.toString.call(global.process) === \"[object process]\") {\n        // For Node.js before 0.9\n        installNextTickImplementation();\n\n    } else if (canUsePostMessage()) {\n        // For non-IE10 modern browsers\n        installPostMessageImplementation();\n\n    } else if (global.MessageChannel) {\n        // For web workers, where supported\n        installMessageChannelImplementation();\n\n    } else if (doc && \"onreadystatechange\" in doc.createElement(\"script\")) {\n        // For IE 6–8\n        installReadyStateChangeImplementation();\n\n    } else {\n        // For older browsers\n        installSetTimeoutImplementation();\n    }\n\n    attachTo.setImmediate = setImmediate;\n    attachTo.clearImmediate = clearImmediate;\n}(typeof self === \"undefined\" ? typeof global === \"undefined\" ? this : global : self));\n","import { useQueryParams } from 'app/core/hooks/useQueryParams';\nimport store from 'app/core/store';\nimport { useCallback } from 'react';\nimport { ALERTMANAGER_NAME_LOCAL_STORAGE_KEY, ALERTMANAGER_NAME_QUERY_KEY } from '../utils/constants';\nimport { getAlertManagerDataSources, GRAFANA_RULES_SOURCE_NAME } from '../utils/datasource';\n\nfunction isAlertManagerSource(alertManagerSourceName: string): boolean {\n  return (\n    alertManagerSourceName === GRAFANA_RULES_SOURCE_NAME ||\n    !!getAlertManagerDataSources().find((ds) => ds.name === alertManagerSourceName)\n  );\n}\n\n/* this will return am name either from query params or from local storage or a default (grafana).\n *\n * fallbackUrl - if provided, will redirect to this url if alertmanager provided in query no longer\n */\nexport function useAlertManagerSourceName(): [string | undefined, (alertManagerSourceName: string) => void] {\n  const [queryParams, updateQueryParams] = useQueryParams();\n\n  const update = useCallback(\n    (alertManagerSourceName: string) => {\n      if (!isAlertManagerSource(alertManagerSourceName)) {\n        return;\n      }\n      if (alertManagerSourceName === GRAFANA_RULES_SOURCE_NAME) {\n        store.delete(ALERTMANAGER_NAME_LOCAL_STORAGE_KEY);\n        updateQueryParams({ [ALERTMANAGER_NAME_QUERY_KEY]: null });\n      } else {\n        store.set(ALERTMANAGER_NAME_LOCAL_STORAGE_KEY, alertManagerSourceName);\n        updateQueryParams({ [ALERTMANAGER_NAME_QUERY_KEY]: alertManagerSourceName });\n      }\n    },\n    [updateQueryParams]\n  );\n\n  const querySource = queryParams[ALERTMANAGER_NAME_QUERY_KEY];\n\n  if (querySource && typeof querySource === 'string') {\n    if (isAlertManagerSource(querySource)) {\n      return [querySource, update];\n    } else {\n      // non existing alertmanager\n      return [undefined, update];\n    }\n  }\n  const storeSource = store.get(ALERTMANAGER_NAME_LOCAL_STORAGE_KEY);\n  if (storeSource && typeof storeSource === 'string' && isAlertManagerSource(storeSource)) {\n    update(storeSource);\n    return [storeSource, update];\n  }\n\n  return [GRAFANA_RULES_SOURCE_NAME, update];\n}\n","import { SelectableValue, GrafanaTheme2 } from '@grafana/data';\nimport { DataSourceType, GRAFANA_RULES_SOURCE_NAME } from '../utils/datasource';\nimport React, { FC, useMemo } from 'react';\nimport { Field, Select, useStyles2 } from '@grafana/ui';\nimport { getAllDataSources } from '../utils/config';\nimport { css } from '@emotion/css';\n\ninterface Props {\n  onChange: (alertManagerSourceName: string) => void;\n  current?: string;\n  disabled?: boolean;\n}\n\nexport const AlertManagerPicker: FC<Props> = ({ onChange, current, disabled = false }) => {\n  const styles = useStyles2(getStyles);\n\n  const options: Array<SelectableValue<string>> = useMemo(() => {\n    return [\n      {\n        label: 'Grafana',\n        value: GRAFANA_RULES_SOURCE_NAME,\n        imgUrl: 'public/img/grafana_icon.svg',\n        meta: {},\n      },\n      ...getAllDataSources()\n        .filter((ds) => ds.type === DataSourceType.Alertmanager)\n        .map((ds) => ({\n          label: ds.name.substr(0, 37),\n          value: ds.name,\n          imgUrl: ds.meta.info.logos.small,\n          meta: ds.meta,\n        })),\n    ];\n  }, []);\n\n  // no need to show the picker if there's only one option\n  if (options.length === 1) {\n    return null;\n  }\n\n  return (\n    <Field\n      className={styles.field}\n      label={disabled ? 'Alertmanager' : 'Choose Alertmanager'}\n      disabled={disabled}\n      data-testid=\"alertmanager-picker\"\n    >\n      <Select\n        menuShouldPortal\n        width={29}\n        className=\"ds-picker select-container\"\n        backspaceRemovesValue={false}\n        onChange={(value) => value.value && onChange(value.value)}\n        options={options}\n        maxMenuHeight={500}\n        noOptionsMessage=\"No datasources found\"\n        value={current}\n        getOptionLabel={(o) => o.label}\n      />\n    </Field>\n  );\n};\n\nconst getStyles = (theme: GrafanaTheme2) => ({\n  field: css`\n    margin-bottom: ${theme.spacing(4)};\n  `,\n});\n","import React, { FC } from 'react';\nimport Page from 'app/core/components/Page/Page';\nimport { getNavModel } from 'app/core/selectors/navModel';\nimport { useSelector } from 'react-redux';\nimport { StoreState } from 'app/types/store';\n\ninterface Props {\n  pageId: string;\n  isLoading?: boolean;\n}\n\nexport const AlertingPageWrapper: FC<Props> = ({ children, pageId, isLoading }) => {\n  const navModel = getNavModel(\n    useSelector((state: StoreState) => state.navIndex),\n    pageId\n  );\n\n  return (\n    <Page navModel={navModel}>\n      <Page.Contents isLoading={isLoading}>{children}</Page.Contents>\n    </Page>\n  );\n};\n"],"sourceRoot":""}
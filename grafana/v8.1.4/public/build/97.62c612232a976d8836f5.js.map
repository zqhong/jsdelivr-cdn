{"version":3,"sources":["webpack:///./public/app/core/components/Signup/SignupPage.tsx"],"names":["SignupPage","props","defaultValues","email","queryParams","code","onSubmit","async","formData","name","confirm","getBackendSrv","post","username","orgName","password","catch","err","msg","data","message","appEvents","emit","AppEvents","alertWarning","window","location","assign","getConfig","appSubUrl","errors","register","getValues","label","id","placeholder","invalid","error","required","pattern","value","type","autoAssignOrg","verifyEmailEnabled","autoFocus","autoComplete","validate","v","fill","href"],"mappings":"6cA2BO,MAAMA,EAAyBC,IACpC,MA0BMC,EAAgB,CACpBC,MAAOF,EAAMG,YAAYD,MACzBE,KAAMJ,EAAMG,YAAYC,MAG1B,OACE,cAAC,IAAD,UACE,cAAC,IAAD,UACE,cAAC,OAAD,CAAMH,cAAeA,EAAeI,SAlCzBC,UACO,KAAlBC,EAASC,aACJD,EAASC,YAEXD,EAASE,QAgBM,kCAdCC,0BACpBC,KAAK,yBAA0B,CAC9BT,MAAOK,EAASL,MAChBE,KAAMG,EAASH,KACfQ,SAAUL,EAASL,MACnBW,QAASN,EAASM,QAClBC,SAAUP,EAASO,SACnBN,KAAMD,EAASC,OAEhBO,MAAOC,IAAQ,MACd,MAAMC,GAAM,UAAAD,EAAIE,YAAJ,eAAUC,UAAWH,EACjCI,IAAUC,KAAKC,YAAUC,aAAc,CAACN,OAG/Bb,MACXoB,OAAOC,SAASC,OAAOC,cAAYC,UAAY,gCAEjDJ,OAAOC,SAASC,OAAOC,cAAYC,UAAY,MAW3C,SACG,EAAGC,SAAQC,WAAUC,gBAArB,iBACC,qCACE,cAAC,QAAD,CAAOC,MAAM,YAAb,SACE,cAAC,QAAD,GAAOC,GAAG,aAAgBH,EAAS,QAAnC,CAA4CI,YAAY,kBAE1D,cAAC,QAAD,CAAOF,MAAM,QAAQG,UAAWN,EAAO3B,MAAOkC,MAAK,UAAEP,EAAO3B,aAAT,aAAE,EAAciB,QAAnE,SACE,cAAC,QAAD,GACEc,GAAG,SACCH,EAAS,QAAS,CACpBO,SAAU,oBACVC,QAAS,CACPC,MAAO,YACPpB,QAAS,sBANf,CASEqB,KAAK,QACLN,YAAY,cAGdP,cAAYc,eACZ,cAAC,QAAD,CAAOT,MAAM,YAAb,SACE,cAAC,QAAD,GAAOC,GAAG,YAAeH,EAAS,WAAlC,CAA8CI,YAAY,iBAG7DP,cAAYe,oBACX,cAAC,QAAD,CAAOV,MAAM,+CAAb,SACE,cAAC,QAAD,GAAOC,GAAG,qBAAwBH,EAAS,QAA3C,CAAoDI,YAAY,YAGpE,cAAC,QAAD,CAAOF,MAAM,WAAWG,UAAWN,EAAOf,SAAUsB,MAAOP,SAAF,UAAEA,EAAQf,gBAAV,aAAE,EAAkBK,QAA7E,SACE,cAAC,IAAD,GACEc,GAAG,eACHU,WAAS,EACTC,aAAa,gBACTd,EAAS,WAAY,CAAEO,SAAU,6BAGzC,cAAC,QAAD,CAAOL,MAAM,mBAAmBG,UAAWN,EAAOpB,QAAS2B,MAAOP,SAAF,UAAEA,EAAQpB,eAAV,aAAE,EAAiBU,QAAnF,SACE,cAAC,IAAD,GACEc,GAAG,uBACHW,aAAa,gBACTd,EAAS,UAAW,CACtBO,SAAU,iCACVQ,SAAWC,GAAMA,IAAMf,IAAYjB,UAAY,8BAKrD,eAAC,kBAAD,iBACE,cAAC,SAAD,CAAQ0B,KAAK,SAAb,qBACA,cAAC,aAAD,CAAYO,KAAK,OAAOC,KAAMrB,cAAYC,UAAY,SAAtD,yCAYD7B","file":"97.62c612232a976d8836f5.js","sourcesContent":["import React, { FC } from 'react';\nimport { Form, Field, Input, Button, HorizontalGroup, LinkButton, FormAPI } from '@grafana/ui';\nimport { getConfig } from 'app/core/config';\nimport { getBackendSrv } from '@grafana/runtime';\nimport appEvents from 'app/core/app_events';\nimport { AppEvents } from '@grafana/data';\nimport { GrafanaRouteComponentProps } from 'app/core/navigation/types';\nimport { InnerBox, LoginLayout } from '../Login/LoginLayout';\nimport { PasswordField } from '../PasswordField/PasswordField';\n\ninterface SignupDTO {\n  name?: string;\n  email: string;\n  username: string;\n  orgName?: string;\n  password: string;\n  code: string;\n  confirm?: string;\n}\n\ninterface QueryParams {\n  email?: string;\n  code?: string;\n}\n\ninterface Props extends GrafanaRouteComponentProps<{}, QueryParams> {}\n\nexport const SignupPage: FC<Props> = (props) => {\n  const onSubmit = async (formData: SignupDTO) => {\n    if (formData.name === '') {\n      delete formData.name;\n    }\n    delete formData.confirm;\n\n    const response = await getBackendSrv()\n      .post('/api/user/signup/step2', {\n        email: formData.email,\n        code: formData.code,\n        username: formData.email,\n        orgName: formData.orgName,\n        password: formData.password,\n        name: formData.name,\n      })\n      .catch((err) => {\n        const msg = err.data?.message || err;\n        appEvents.emit(AppEvents.alertWarning, [msg]);\n      });\n\n    if (response.code === 'redirect-to-select-org') {\n      window.location.assign(getConfig().appSubUrl + '/profile/select-org?signup=1');\n    }\n    window.location.assign(getConfig().appSubUrl + '/');\n  };\n\n  const defaultValues = {\n    email: props.queryParams.email,\n    code: props.queryParams.code,\n  };\n\n  return (\n    <LoginLayout>\n      <InnerBox>\n        <Form defaultValues={defaultValues} onSubmit={onSubmit}>\n          {({ errors, register, getValues }: FormAPI<SignupDTO>) => (\n            <>\n              <Field label=\"Your name\">\n                <Input id=\"user-name\" {...register('name')} placeholder=\"(optional)\" />\n              </Field>\n              <Field label=\"Email\" invalid={!!errors.email} error={errors.email?.message}>\n                <Input\n                  id=\"email\"\n                  {...register('email', {\n                    required: 'Email is required',\n                    pattern: {\n                      value: /^\\S+@\\S+$/,\n                      message: 'Email is invalid',\n                    },\n                  })}\n                  type=\"email\"\n                  placeholder=\"Email\"\n                />\n              </Field>\n              {!getConfig().autoAssignOrg && (\n                <Field label=\"Org. name\">\n                  <Input id=\"org-name\" {...register('orgName')} placeholder=\"Org. name\" />\n                </Field>\n              )}\n              {getConfig().verifyEmailEnabled && (\n                <Field label=\"Email verification code (sent to your email)\">\n                  <Input id=\"verification-code\" {...register('code')} placeholder=\"Code\" />\n                </Field>\n              )}\n              <Field label=\"Password\" invalid={!!errors.password} error={errors?.password?.message}>\n                <PasswordField\n                  id=\"new-password\"\n                  autoFocus\n                  autoComplete=\"new-password\"\n                  {...register('password', { required: 'Password is required' })}\n                />\n              </Field>\n              <Field label=\"Confirm password\" invalid={!!errors.confirm} error={errors?.confirm?.message}>\n                <PasswordField\n                  id=\"confirm-new-password\"\n                  autoComplete=\"new-password\"\n                  {...register('confirm', {\n                    required: 'Confirmed password is required',\n                    validate: (v) => v === getValues().password || 'Passwords must match!',\n                  })}\n                />\n              </Field>\n\n              <HorizontalGroup>\n                <Button type=\"submit\">Submit</Button>\n                <LinkButton fill=\"text\" href={getConfig().appSubUrl + '/login'}>\n                  Back to login\n                </LinkButton>\n              </HorizontalGroup>\n            </>\n          )}\n        </Form>\n      </InnerBox>\n    </LoginLayout>\n  );\n};\n\nexport default SignupPage;\n"],"sourceRoot":""}
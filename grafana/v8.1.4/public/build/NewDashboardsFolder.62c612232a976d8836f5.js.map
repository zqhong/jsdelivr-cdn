{"version":3,"sources":["webpack:///./public/app/features/folders/state/actions.ts","webpack:///./public/app/features/folders/components/NewDashboardsFolder.tsx","webpack:///./public/app/features/folders/state/navModel.ts"],"names":["getFolderByUid","uid","async","folder","backendSrv","dispatch","loadFolder","updateNavIndex","buildNavModel","saveFolder","res","put","title","version","appEvents","emit","AppEvents","alertSuccess","locationService","push","url","deleteFolder","delete","getFolderPermissions","permissions","get","loadFolderPermissions","toUpdateItem","item","userId","teamId","role","permission","updateFolderPermission","itemToUpdate","level","getStore","itemsToUpdate","inherited","updated","post","items","removeFolderPermission","itemToDelete","addFolderPermission","newItem","createNewFolder","folderName","newFolder","getBackendSrv","locationUtil","stripBaseFromUrl","initialFormModel","NewDashboardsFolder","PureComponent","formData","this","props","validationSrv","validateNewFolderName","then","catch","e","message","render","navModel","Contents","defaultValues","onSubmit","register","errors","label","invalid","error","required","validate","validateFolderName","v","type","mapDispatchToProps","connect","state","getNavModel","navIndex","model","icon","id","subTitle","text","breadcrumbs","children","active","canAdmin","canSave","getLoadingNav","tabIndex","main","canEdit","node"],"mappings":"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","file":"NewDashboardsFolder.62c612232a976d8836f5.js","sourcesContent":["import { AppEvents, locationUtil } from '@grafana/data';\nimport { getBackendSrv, locationService } from '@grafana/runtime';\nimport { backendSrv } from 'app/core/services/backend_srv';\nimport { FolderState, ThunkResult } from 'app/types';\nimport { DashboardAcl, DashboardAclUpdateDTO, NewDashboardAclItem, PermissionLevel } from 'app/types/acl';\nimport { updateNavIndex } from 'app/core/actions';\nimport { buildNavModel } from './navModel';\nimport appEvents from 'app/core/app_events';\nimport { loadFolder, loadFolderPermissions } from './reducers';\n\nexport function getFolderByUid(uid: string): ThunkResult<void> {\n  return async (dispatch) => {\n    const folder = await backendSrv.getFolderByUid(uid);\n    dispatch(loadFolder(folder));\n    dispatch(updateNavIndex(buildNavModel(folder)));\n  };\n}\n\nexport function saveFolder(folder: FolderState): ThunkResult<void> {\n  return async (dispatch) => {\n    const res = await backendSrv.put(`/api/folders/${folder.uid}`, {\n      title: folder.title,\n      version: folder.version,\n    });\n\n    // this should be redux action at some point\n    appEvents.emit(AppEvents.alertSuccess, ['Folder saved']);\n    locationService.push(`${res.url}/settings`);\n  };\n}\n\nexport function deleteFolder(uid: string): ThunkResult<void> {\n  return async (dispatch) => {\n    await backendSrv.delete(`/api/folders/${uid}?forceDeleteRules=true`);\n    locationService.push('/dashboards');\n  };\n}\n\nexport function getFolderPermissions(uid: string): ThunkResult<void> {\n  return async (dispatch) => {\n    const permissions = await backendSrv.get(`/api/folders/${uid}/permissions`);\n    dispatch(loadFolderPermissions(permissions));\n  };\n}\n\nfunction toUpdateItem(item: DashboardAcl): DashboardAclUpdateDTO {\n  return {\n    userId: item.userId,\n    teamId: item.teamId,\n    role: item.role,\n    permission: item.permission,\n  };\n}\n\nexport function updateFolderPermission(itemToUpdate: DashboardAcl, level: PermissionLevel): ThunkResult<void> {\n  return async (dispatch, getStore) => {\n    const folder = getStore().folder;\n    const itemsToUpdate = [];\n\n    for (const item of folder.permissions) {\n      if (item.inherited) {\n        continue;\n      }\n\n      const updated = toUpdateItem(item);\n\n      // if this is the item we want to update, update it's permission\n      if (itemToUpdate === item) {\n        updated.permission = level;\n      }\n\n      itemsToUpdate.push(updated);\n    }\n\n    await backendSrv.post(`/api/folders/${folder.uid}/permissions`, { items: itemsToUpdate });\n    await dispatch(getFolderPermissions(folder.uid));\n  };\n}\n\nexport function removeFolderPermission(itemToDelete: DashboardAcl): ThunkResult<void> {\n  return async (dispatch, getStore) => {\n    const folder = getStore().folder;\n    const itemsToUpdate = [];\n\n    for (const item of folder.permissions) {\n      if (item.inherited || item === itemToDelete) {\n        continue;\n      }\n      itemsToUpdate.push(toUpdateItem(item));\n    }\n\n    await backendSrv.post(`/api/folders/${folder.uid}/permissions`, { items: itemsToUpdate });\n    await dispatch(getFolderPermissions(folder.uid));\n  };\n}\n\nexport function addFolderPermission(newItem: NewDashboardAclItem): ThunkResult<void> {\n  return async (dispatch, getStore) => {\n    const folder = getStore().folder;\n    const itemsToUpdate = [];\n\n    for (const item of folder.permissions) {\n      if (item.inherited) {\n        continue;\n      }\n      itemsToUpdate.push(toUpdateItem(item));\n    }\n\n    itemsToUpdate.push({\n      userId: newItem.userId,\n      teamId: newItem.teamId,\n      role: newItem.role,\n      permission: newItem.permission,\n    });\n\n    await backendSrv.post(`/api/folders/${folder.uid}/permissions`, { items: itemsToUpdate });\n    await dispatch(getFolderPermissions(folder.uid));\n  };\n}\n\nexport function createNewFolder(folderName: string): ThunkResult<void> {\n  return async () => {\n    const newFolder = await getBackendSrv().post('/api/folders', { title: folderName });\n    appEvents.emit(AppEvents.alertSuccess, ['Folder Created', 'OK']);\n    locationService.push(locationUtil.stripBaseFromUrl(newFolder.url));\n  };\n}\n","import React, { PureComponent } from 'react';\nimport { connect, MapDispatchToProps, MapStateToProps } from 'react-redux';\nimport { NavModel } from '@grafana/data';\nimport { Button, Input, Form, Field } from '@grafana/ui';\nimport Page from 'app/core/components/Page/Page';\nimport { createNewFolder } from '../state/actions';\nimport { getNavModel } from 'app/core/selectors/navModel';\nimport { StoreState } from 'app/types';\nimport validationSrv from '../../manage-dashboards/services/ValidationSrv';\n\ninterface OwnProps {}\n\ninterface ConnectedProps {\n  navModel: NavModel;\n}\n\ninterface DispatchProps {\n  createNewFolder: typeof createNewFolder;\n}\n\ninterface FormModel {\n  folderName: string;\n}\n\nconst initialFormModel: FormModel = { folderName: '' };\n\ntype Props = OwnProps & ConnectedProps & DispatchProps;\n\nexport class NewDashboardsFolder extends PureComponent<Props> {\n  onSubmit = (formData: FormModel) => {\n    this.props.createNewFolder(formData.folderName);\n  };\n\n  validateFolderName = (folderName: string) => {\n    return validationSrv\n      .validateNewFolderName(folderName)\n      .then(() => {\n        return true;\n      })\n      .catch((e) => {\n        return e.message;\n      });\n  };\n\n  render() {\n    return (\n      <Page navModel={this.props.navModel}>\n        <Page.Contents>\n          <h3>New dashboard folder</h3>\n          <Form defaultValues={initialFormModel} onSubmit={this.onSubmit}>\n            {({ register, errors }) => (\n              <>\n                <Field\n                  label=\"Folder name\"\n                  invalid={!!errors.folderName}\n                  error={errors.folderName && errors.folderName.message}\n                >\n                  <Input\n                    {...register('folderName', {\n                      required: 'Folder name is required.',\n                      validate: async (v) => await this.validateFolderName(v),\n                    })}\n                  />\n                </Field>\n                <Button type=\"submit\">Create</Button>\n              </>\n            )}\n          </Form>\n        </Page.Contents>\n      </Page>\n    );\n  }\n}\n\nconst mapStateToProps: MapStateToProps<ConnectedProps, OwnProps, StoreState> = (state) => ({\n  navModel: getNavModel(state.navIndex, 'manage-dashboards'),\n});\n\nconst mapDispatchToProps: MapDispatchToProps<DispatchProps, OwnProps> = {\n  createNewFolder,\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(NewDashboardsFolder);\n","import { NavModel, NavModelItem } from '@grafana/data';\n\nimport { FolderDTO } from 'app/types';\n\nexport function buildNavModel(folder: FolderDTO): NavModelItem {\n  const model = {\n    icon: 'folder',\n    id: 'manage-folder',\n    subTitle: 'Manage folder dashboards and permissions',\n    url: '',\n    text: folder.title,\n    breadcrumbs: [{ title: 'Dashboards', url: 'dashboards' }],\n    children: [\n      {\n        active: false,\n        icon: 'apps',\n        id: `folder-dashboards-${folder.uid}`,\n        text: 'Dashboards',\n        url: folder.url,\n      },\n    ],\n  };\n\n  model.children.push({\n    active: false,\n    icon: 'library-panel',\n    id: `folder-library-panels-${folder.uid}`,\n    text: 'Panels',\n    url: `${folder.url}/library-panels`,\n  });\n\n  if (folder.canAdmin) {\n    model.children.push({\n      active: false,\n      icon: 'lock',\n      id: `folder-permissions-${folder.uid}`,\n      text: 'Permissions',\n      url: `${folder.url}/permissions`,\n    });\n  }\n\n  if (folder.canSave) {\n    model.children.push({\n      active: false,\n      icon: 'cog',\n      id: `folder-settings-${folder.uid}`,\n      text: 'Settings',\n      url: `${folder.url}/settings`,\n    });\n  }\n\n  return model;\n}\n\nexport function getLoadingNav(tabIndex: number): NavModel {\n  const main = buildNavModel({\n    id: 1,\n    uid: 'loading',\n    title: 'Loading',\n    url: 'url',\n    canSave: true,\n    canEdit: true,\n    canAdmin: true,\n    version: 0,\n  });\n\n  main.children![tabIndex].active = true;\n\n  return {\n    main: main,\n    node: main.children![tabIndex],\n  };\n}\n"],"sourceRoot":""}
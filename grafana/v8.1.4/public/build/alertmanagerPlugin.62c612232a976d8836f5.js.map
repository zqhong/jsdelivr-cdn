{"version":3,"sources":["webpack:///./public/app/plugins/datasource/alertmanager/DataSource.ts","webpack:///./public/app/plugins/datasource/alertmanager/module.ts","webpack:///./public/app/plugins/datasource/alertmanager/ConfigEditor.tsx"],"names":["AlertManagerDatasource","DataSourceApi","constructor","instanceSettings","super","query","of","data","_request","url","options","headers","method","this","basicAuth","withCredentials","Authorization","getBackendSrv","fetch","toPromise","alertmanagerResponse","cortexAlertmanagerResponse","status","message","e","plugin","DataSourcePlugin","setConfigEditor","onOptionsChange","severity","title","defaultUrl","dataSourceConfig","showAccessOptions","onChange"],"mappings":"uLAQO,MAAMA,UAA+BC,gBAC1CC,YAAmBC,GACjBC,MAAMD,GADyD,KAA9CA,mBAOnBE,QACE,OAAOC,YAAG,CACRC,KAAM,KAIVC,SAASC,GACP,MAAMC,EAA6B,CACjCC,QAAS,GACTC,OAAQ,MACRH,IAAKI,KAAKV,iBAAiBM,IAAMA,GAWnC,OARII,KAAKV,iBAAiBW,WAAaD,KAAKV,iBAAiBY,mBAC3DF,KAAKV,iBAAiBY,iBAAkB,GAGtCF,KAAKV,iBAAiBW,YACxBJ,EAAQC,QAASK,cAAgBH,KAAKV,iBAAiBW,WAGlDG,0BAAgBC,MAAWR,GAASS,YAGzB,uBAAG,MACrB,IAAIC,EACAC,EAEJ,IAAI,MAEF,GADAD,QAA6BP,KAAKL,SAAS,kBACvCY,GAAyD,OAAb,QAApB,EAAAA,SAAA,eAAsBE,QAChD,MAAO,CACLA,OAAQ,QACRC,QACE,uGAGN,MAAOC,IACT,IACEH,QAAmCR,KAAKL,SAAS,+BACjD,MAAOgB,IAET,OAA8C,OAAb,QAA1B,EAAAH,SAAA,eAA4BC,QAC/B,CACEA,OAAQ,UACRC,QAAS,wBAEX,CACED,OAAQ,QACRC,QAAS,yBCjEnB,uCAOO,MAAME,EAAS,IAAIC,mBAAiB1B,GAAwB2B,gBCDtB,EAAGjB,UAASkB,qBAErD,2CACE,cAAC,QAAD,CAAOC,SAAS,OAAOC,MAAM,wCAA7B,+FAGA,cAAC,yBAAD,CACEC,WAAY,GACZC,iBAAkBtB,EAClBuB,mBAAmB,EACnBC,SAAUN","file":"alertmanagerPlugin.62c612232a976d8836f5.js","sourcesContent":["import { DataQuery, DataQueryResponse, DataSourceApi, DataSourceInstanceSettings } from '@grafana/data';\nimport { BackendSrvRequest, getBackendSrv } from '@grafana/runtime';\nimport { Observable, of } from 'rxjs';\n\nexport type AlertManagerQuery = {\n  query: string;\n} & DataQuery;\n\nexport class AlertManagerDatasource extends DataSourceApi<AlertManagerQuery> {\n  constructor(public instanceSettings: DataSourceInstanceSettings) {\n    super(instanceSettings);\n  }\n\n  // `query()` has to be implemented but we actually don't use it, just need this\n  // data source to proxy requests.\n  // @ts-ignore\n  query(): Observable<DataQueryResponse> {\n    return of({\n      data: [],\n    });\n  }\n\n  _request(url: string) {\n    const options: BackendSrvRequest = {\n      headers: {},\n      method: 'GET',\n      url: this.instanceSettings.url + url,\n    };\n\n    if (this.instanceSettings.basicAuth || this.instanceSettings.withCredentials) {\n      this.instanceSettings.withCredentials = true;\n    }\n\n    if (this.instanceSettings.basicAuth) {\n      options.headers!.Authorization = this.instanceSettings.basicAuth;\n    }\n\n    return getBackendSrv().fetch<any>(options).toPromise();\n  }\n\n  async testDatasource() {\n    let alertmanagerResponse;\n    let cortexAlertmanagerResponse;\n\n    try {\n      alertmanagerResponse = await this._request('/api/v2/status');\n      if (alertmanagerResponse && alertmanagerResponse?.status === 200) {\n        return {\n          status: 'error',\n          message:\n            'Only Cortex alert manager implementation is supported. A URL to cortex instance should be provided.',\n        };\n      }\n    } catch (e) {}\n    try {\n      cortexAlertmanagerResponse = await this._request('/alertmanager/api/v2/status');\n    } catch (e) {}\n\n    return cortexAlertmanagerResponse?.status === 200\n      ? {\n          status: 'success',\n          message: 'Health check passed.',\n        }\n      : {\n          status: 'error',\n          message: 'Health check failed.',\n        };\n  }\n}\n","import { DataSourcePlugin } from '@grafana/data';\nimport { ConfigEditor } from './ConfigEditor';\nimport { AlertManagerDatasource } from './DataSource';\n\n// This is not actually a data source but since 7.1,\n// it is required to specify query types. Which we don't have.\n// @ts-ignore\nexport const plugin = new DataSourcePlugin(AlertManagerDatasource).setConfigEditor(ConfigEditor);\n","import { DataSourcePluginOptionsEditorProps } from '@grafana/data';\nimport { Alert, DataSourceHttpSettings } from '@grafana/ui';\nimport React from 'react';\n\nexport type Props = DataSourcePluginOptionsEditorProps;\n\nexport const ConfigEditor: React.FC<Props> = ({ options, onOptionsChange }) => {\n  return (\n    <>\n      <Alert severity=\"info\" title=\"Only Cortex alertmanager is supported\">\n        Note that only Cortex implementation of alert manager is supported at this time.\n      </Alert>\n      <DataSourceHttpSettings\n        defaultUrl={''}\n        dataSourceConfig={options}\n        showAccessOptions={true}\n        onChange={onOptionsChange}\n      />\n    </>\n  );\n};\n"],"sourceRoot":""}
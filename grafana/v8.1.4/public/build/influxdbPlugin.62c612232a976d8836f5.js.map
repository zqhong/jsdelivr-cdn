{"version":3,"sources":["webpack:///./public/app/plugins/datasource/influxdb/influx_series.ts","webpack:///./public/app/plugins/datasource/influxdb/query_part.ts","webpack:///./public/app/plugins/datasource/influxdb/influx_query_model.ts","webpack:///./public/app/plugins/datasource/influxdb/response_parser.ts","webpack:///./public/app/plugins/datasource/influxdb/query_builder.ts","webpack:///./public/app/plugins/datasource/influxdb/types.ts","webpack:///./public/app/plugins/datasource/influxdb/components/FluxQueryEditor.tsx","webpack:///./public/app/plugins/datasource/influxdb/queryUtils.ts","webpack:///./public/app/plugins/datasource/influxdb/datasource.ts","webpack:///./public/app/plugins/datasource/influxdb/components/useShadowedState.ts","webpack:///./public/app/plugins/datasource/influxdb/components/useUniqueId.ts","webpack:///./public/app/plugins/datasource/influxdb/components/constants.ts","webpack:///./public/app/plugins/datasource/influxdb/components/RawInfluxQLEditor.tsx","webpack:///./public/app/plugins/datasource/influxdb/components/VisualInfluxQLEditor/Seg.tsx","webpack:///./public/app/plugins/datasource/influxdb/components/VisualInfluxQLEditor/toSelectableValue.ts","webpack:///./public/app/plugins/datasource/influxdb/components/VisualInfluxQLEditor/FromSection.tsx","webpack:///./public/app/plugins/datasource/influxdb/components/VisualInfluxQLEditor/tagUtils.ts","webpack:///./public/app/plugins/datasource/influxdb/components/VisualInfluxQLEditor/unwrap.ts","webpack:///./public/app/plugins/datasource/influxdb/components/VisualInfluxQLEditor/AddButton.tsx","webpack:///./public/app/plugins/datasource/influxdb/components/VisualInfluxQLEditor/TagsSection.tsx","webpack:///./public/app/plugins/datasource/influxdb/components/VisualInfluxQLEditor/PartListSection.tsx","webpack:///./public/app/plugins/datasource/influxdb/components/VisualInfluxQLEditor/styles.ts","webpack:///./public/app/plugins/datasource/influxdb/components/VisualInfluxQLEditor/OrderByTimeSection.tsx","webpack:///./public/app/plugins/datasource/influxdb/components/VisualInfluxQLEditor/InputSection.tsx","webpack:///./public/app/plugins/datasource/influxdb/influxQLMetadataQuery.ts","webpack:///./public/app/plugins/datasource/influxdb/components/VisualInfluxQLEditor/FormatAsSection.tsx","webpack:///./public/app/plugins/datasource/influxdb/components/VisualInfluxQLEditor/SectionLabel.tsx","webpack:///./public/app/plugins/datasource/influxdb/components/VisualInfluxQLEditor/SectionFill.tsx","webpack:///./public/app/plugins/datasource/influxdb/components/VisualInfluxQLEditor/partListUtils.tsx","webpack:///./public/app/plugins/datasource/influxdb/components/VisualInfluxQLEditor/Editor.tsx","webpack:///./public/app/plugins/datasource/influxdb/components/QueryEditorModeSwitcher.tsx","webpack:///./public/app/plugins/datasource/influxdb/components/InfluxCheatSheet.tsx","webpack:///./public/app/plugins/datasource/influxdb/components/InfluxStartPage.tsx","webpack:///./public/app/plugins/datasource/influxdb/components/ConfigEditor.tsx","webpack:///./public/app/plugins/datasource/influxdb/components/VariableQueryEditor.tsx","webpack:///./public/app/plugins/datasource/influxdb/module.ts","webpack:///./public/app/plugins/datasource/influxdb/components/QueryEditor.tsx","webpack:///./node_modules/react-use/esm/usePrevious.js"],"names":["InfluxSeries","constructor","options","this","series","alias","annotation","meta","refId","getTimeSeries","output","i","j","length","each","columns","tags","map","value","key","seriesName","name","columnName","_getSeriesName","join","datapoints","values","push","title","target","index","segments","split","replace","match","g1","g2","group","segIndex","parseInt","isNaN","indexOf","tag","getAnnotations","list","titleCol","timeCol","timeEndCol","tagsCol","textCol","column","titleColumn","includes","tagsColumn","textColumn","timeEndColumn","data","time","Date","timeEnd","flatten","filter","t","text","getTable","table","TableModel","seriesIndex","type","FieldType","keys","reordered","hasOwnProperty","rows","categories","Aggregations","Selectors","Transformations","Predictors","Math","Aliasing","Fields","createPart","part","def","message","QueryPart","register","QueryPartDef","category","groupByTimeFunctions","fieldRenderer","innerExpr","params","replaceAggregationAddStrategy","selectParts","partModel","morePartsAvailable","splice","addTransformationStrategy","addStrategy","query","parts","clone","selectModels","dynamicLookup","defaultParams","renderer","functionRenderer","partCount","suffixRenderer","quote","renderMode","create","getCategories","replaceAggregationAdd","InfluxQueryModel","templateSrv","scopedVars","policy","resultFormat","orderByTime","groupBy","select","updateProjection","queryPart","groupByParts","updatePersistedParts","hasGroupByTime","find","g","hasFill","addGroupBy","stringParts","typePart","arg","removeGroupByPart","s","removeSelect","removeSelectPart","modelsIndex","partIndex","addSelectPart","renderTagCondition","interpolate","str","operator","condition","test","getMeasurementAndPolicy","measurement","interpolateQueryStr","variable","defaultFormatFn","multi","includeAll","kbn","regexEscape","render","rawQuery","y","selectText","conditions","groupBySection","fill","limit","slimit","tz","renderAdhocFilters","filters","ResponseParser","parse","results","influxResults","normalizedQuery","toLowerCase","isValueFirst","res","Set","serie","isArray","addUnique","undefined","Array","from","v","add","toString","InfluxQueryBuilder","database","buildExploreQuery","withKey","withMeasurementFilter","whereConditions","reduce","memo","InfluxVersion","samples","label","description","FluxQueryEditor","PureComponent","props","onChange","onRunQuery","val","forceUpdate","sugs","kind","CodeEditorSuggestionItemKind","Property","detail","getTemplateSrv","getVariables","forEach","Text","editor","setTimeout","layout","helpTooltip","height","language","onBlur","onFluxQueryChange","onSave","showMiniMap","showLineNumbers","getSuggestions","onEditorDidMount","editorDidMountCallbackHack","className","cx","css","icon","variant","href","onSampleChange","width","tooltip","buildRawQuery","queryCopy","cloneDeep","getFieldType","firstNotNull","number","valueType","string","boolean","Error","timeSeriesToDataFrame","timeSeries","times","points","point","fields","TIME_SERIES_TIME_FIELD_NAME","config","ArrayVector","TIME_SERIES_VALUE_FIELD_NAME","displayNameFromDS","labels","InfluxDatasource","DataSourceWithBackend","instanceSettings","super","urls","url","trim","username","password","basicAuth","withCredentials","settingsData","jsonData","interval","timeInterval","httpMode","responseParser","isFlux","version","Flux","annotations","QueryEditor","request","filteredRequest","targets","hide","classicQuery","getQueryDisplayText","filterQuery","applyTemplateVariables","timeFilter","getTimeFilter","queryTargets","allQueries","_map","__interval","acc","current","of","adhocFilters","getAdhocFilters","_seriesQuery","pipe","seriesList","result","executedQueryString","influxSeries","preferredVisualisationType","Promise","reject","rangeRaw","timezone","dashboard","toPromise","then","targetContainsTemplate","queryText","variableExists","interpolateVariablesInQueries","queries","expandedQueries","expandedQuery","datasource","rsp","frameToMetricFindValue","interpolated","resp","getTagKeys","metricFindQuery","getTagValues","range","_influxRequest","q","epoch","serializeParams","encodeURIComponent","testDatasource","requestId","id","uuidv4","dashboardId","panelId","intervalMs","maxDataPoints","dateTime","to","state","LoadingState","Done","console","error","status","first","catch","err","get","method","currentUrl","shift","u","p","db","has","extend","omit","pick","req","precision","inspect","paramSerializer","headers","Authorization","getBackendSrv","fetch","errors","elem","catchError","cancelled","throwError","handleErrors","Number","isInteger","statusText","getInfluxTime","date","roundUp","isString","exec","dateMath","valueOf","useShadowedState","outsideVal","currentVal","setCurrentVal","useState","prevOutsideVal","usePrevious","useEffect","useUniqueId","idRefLazy","useRef","uniqueId","RESULT_FORMATS","RawInfluxQLEditor","currentQuery","setCurrentQuery","currentAlias","setCurrentAlias","aliasElementId","selectElementId","applyDelayedChangesAndRunQuery","aria-label","spellCheck","placeholder","e","currentTarget","htmlFor","menuShouldPortal","inputId","selectClass","minWidth","formatCreateLabel","SelReload","loadOptions","allowCustomValue","onClose","debouncedLoadOptions","debouncePromise","leading","defaultOptions","autoFocus","isOpen","onCloseMenu","SelSingleLoad","loadState","doLoad","useAsyncFn","isLoading","loading","Sel","filterByLoadOptions","Inp","initialValue","currentValue","setCurrentValue","onKeyDown","defaultButtonClass","cursor","Seg","buttonClassName","setOpen","as","onClick","toSelectableValue","FromSection","getPolicyOptions","getMeasurementOptions","async","allPolicies","some","isRegex","getOperator","getCondition","isFirst","adjustOperatorIfNeeded","currentOperator","newTagValue","isCurrentOperatorRegex","unwrap","AddButton","onAdd","operatorOptions","condititonOptions","loadConditionOptions","resolve","loadOperatorOptions","Tag","onRemove","getTagKeyOptions","getTagValueOptions","op","TagsSection","newT","newTag","newTags","onTagChange","onTagRemove","tagKey","minimalTag","addNewTag","noRightMarginPaddingClass","paddingRight","marginRight","RemovableName","renderMenuItems","renderRemovableNameMenuItems","ariaLabel","openMenu","noHorizMarginPaddingClass","paddingLeft","marginLeft","Part","theme","useTheme2","partClass","useMemo","lineHeight","typography","body","fontSize","getPartClass","isLast","items","Fragment","par","newParams","onParamChange","PartListSection","getNewPartOptions","onAddNewPart","onRemovePart","pars","paddingRightClass","OPTIONS","OrderByTimeSection","InputSection","isWide","runExploreQuery","FormatAsSection","format","uppercaseClass","textTransform","SectionLabel","isInitial","SectionFill","getPartParams","dynamicParamOptions","paramValues","defParam","makePartList","queryParts","qp","withTemplateVariableOptions","optionsPromise","SectionWrap","initialName","children","Editor","normalizeQuery","selectLists","dynamicSelectPartOptions","Map","item","getFieldKeysForMeasurement","sel","getTagKeysForMeasurementAndTags","groupByList","dynamicGroupByPartOptions","onAppliedChange","newQuery","getAllPolicies","measurementFilter","getAllMeasurementsForTags","m","Object","x","getNewSelectPartOptions","listIndex","newSel","changeSelectPart","model","addNewSelectPart","selectModel","tagKeys","getNewGroupByPartOptions","newGroupBy","changeGroupByPart","addNewGroupByPart","QueryEditorModeSwitcher","isRaw","isModalOpen","setModalOpen","confirmText","dismissText","onConfirm","onDismiss","CHEAT_SHEET_ITEMS","InfluxCheatSheet","InfluxStartPage","onClickExample","Select","Input","SecretFormField","LegacyForms","httpModes","versions","InfluxQL","ConfigEditor","maxSeries","updateDatasourcePluginResetOption","selected","onOptionsChange","copy","access","user","renderInflux2x","secureJsonFields","secureJsonData","organization","onUpdateDatasourceJsonDataOption","isConfigured","token","labelWidth","inputWidth","onReset","onResetToken","onUpdateDatasourceSecureJsonDataOption","defaultBucket","renderInflux1x","onUpdateDatasourceOption","onResetPassword","defaultValue","onUpdateDatasourceJsonDataOptionSelect","onVersionChanged","severity","showAccessOptions","dataSourceConfig","defaultUrl","event","setState","updateDatasourcePluginJsonDataOption","isFinite","VariableQueryEditor","onRefresh","InfluxAnnotationsQueryCtrl","plugin","DataSourcePlugin","setConfigEditor","setQueryEditor","display","flexGrow","setAnnotationQueryCtrl","setVariableQueryEditor","setQueryEditorHelp","ref"],"mappings":"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","file":"influxdbPlugin.62c612232a976d8836f5.js","sourcesContent":["import { each, map, includes, flatten, keys } from 'lodash';\nimport TableModel from 'app/core/table_model';\nimport { FieldType, QueryResultMeta, TimeSeries, TableData } from '@grafana/data';\n\nexport default class InfluxSeries {\n  refId?: string;\n  series: any;\n  alias: any;\n  annotation: any;\n  meta?: QueryResultMeta;\n\n  constructor(options: { series: any; alias?: any; annotation?: any; meta?: QueryResultMeta; refId?: string }) {\n    this.series = options.series;\n    this.alias = options.alias;\n    this.annotation = options.annotation;\n    this.meta = options.meta;\n    this.refId = options.refId;\n  }\n\n  getTimeSeries(): TimeSeries[] {\n    const output: TimeSeries[] = [];\n    let i, j;\n\n    if (this.series.length === 0) {\n      return output;\n    }\n\n    each(this.series, (series) => {\n      const columns = series.columns.length;\n      const tags = map(series.tags, (value, key) => {\n        return key + ': ' + value;\n      });\n\n      for (j = 1; j < columns; j++) {\n        let seriesName = series.name;\n        const columnName = series.columns[j];\n        if (columnName !== 'value') {\n          seriesName = seriesName + '.' + columnName;\n        }\n\n        if (this.alias) {\n          seriesName = this._getSeriesName(series, j);\n        } else if (series.tags) {\n          seriesName = seriesName + ' {' + tags.join(', ') + '}';\n        }\n\n        const datapoints = [];\n        if (series.values) {\n          for (i = 0; i < series.values.length; i++) {\n            datapoints[i] = [series.values[i][j], series.values[i][0]];\n          }\n        }\n\n        output.push({\n          title: seriesName,\n          target: seriesName,\n          datapoints: datapoints,\n          tags: series.tags,\n          meta: this.meta,\n          refId: this.refId,\n        });\n      }\n    });\n\n    return output;\n  }\n\n  _getSeriesName(series: any, index: number) {\n    const regex = /\\$(\\w+)|\\[\\[([\\s\\S]+?)\\]\\]/g;\n    const segments = series.name.split('.');\n\n    return this.alias.replace(regex, (match: any, g1: any, g2: any) => {\n      const group = g1 || g2;\n      const segIndex = parseInt(group, 10);\n\n      if (group === 'm' || group === 'measurement') {\n        return series.name;\n      }\n      if (group === 'col') {\n        return series.columns[index];\n      }\n      if (!isNaN(segIndex)) {\n        return segments[segIndex];\n      }\n      if (group.indexOf('tag_') !== 0) {\n        return match;\n      }\n\n      const tag = group.replace('tag_', '');\n      if (!series.tags) {\n        return match;\n      }\n      return series.tags[tag];\n    });\n  }\n\n  getAnnotations() {\n    const list: any[] = [];\n\n    each(this.series, (series) => {\n      let titleCol: any = null;\n      let timeCol: any = null;\n      let timeEndCol: any = null;\n      const tagsCol: any = [];\n      let textCol: any = null;\n\n      each(series.columns, (column, index) => {\n        if (column === 'time') {\n          timeCol = index;\n          return;\n        }\n        if (column === 'sequence_number') {\n          return;\n        }\n        if (column === this.annotation.titleColumn) {\n          titleCol = index;\n          return;\n        }\n        if (includes((this.annotation.tagsColumn || '').replace(' ', '').split(','), column)) {\n          tagsCol.push(index);\n          return;\n        }\n        if (column === this.annotation.textColumn) {\n          textCol = index;\n          return;\n        }\n        if (column === this.annotation.timeEndColumn) {\n          timeEndCol = index;\n          return;\n        }\n        // legacy case\n        if (!titleCol && textCol !== index) {\n          titleCol = index;\n        }\n      });\n\n      each(series.values, (value) => {\n        const data = {\n          annotation: this.annotation,\n          time: +new Date(value[timeCol]),\n          title: value[titleCol],\n          timeEnd: value[timeEndCol],\n          // Remove empty values, then split in different tags for comma separated values\n          tags: flatten(\n            tagsCol\n              .filter((t: any) => {\n                return value[t];\n              })\n              .map((t: any) => {\n                return value[t].split(',');\n              })\n          ),\n          text: value[textCol],\n        };\n\n        list.push(data);\n      });\n    });\n\n    return list;\n  }\n\n  getTable(): TableData {\n    const table = new TableModel();\n    let i, j;\n\n    table.refId = this.refId;\n    table.meta = this.meta;\n\n    if (this.series.length === 0) {\n      return table;\n    }\n\n    each(this.series, (series: any, seriesIndex: number) => {\n      if (seriesIndex === 0) {\n        j = 0;\n        // Check that the first column is indeed 'time'\n        if (series.columns[0] === 'time') {\n          // Push this now before the tags and with the right type\n          table.columns.push({ text: 'Time', type: FieldType.time });\n          j++;\n        }\n        each(keys(series.tags), (key) => {\n          table.columns.push({ text: key });\n        });\n        for (; j < series.columns.length; j++) {\n          table.columns.push({ text: series.columns[j] });\n        }\n      }\n\n      if (series.values) {\n        for (i = 0; i < series.values.length; i++) {\n          const values = series.values[i];\n          const reordered = [values[0]];\n          if (series.tags) {\n            for (const key in series.tags) {\n              if (series.tags.hasOwnProperty(key)) {\n                reordered.push(series.tags[key]);\n              }\n            }\n          }\n          for (j = 1; j < values.length; j++) {\n            reordered.push(values[j]);\n          }\n          table.rows.push(reordered);\n        }\n      }\n    });\n\n    return table;\n  }\n}\n","import { map, clone } from 'lodash';\nimport { QueryPartDef, QueryPart, functionRenderer, suffixRenderer } from 'app/core/components/query_part/query_part';\n\nconst index: any[] = [];\nconst categories: any = {\n  Aggregations: [],\n  Selectors: [],\n  Transformations: [],\n  Predictors: [],\n  Math: [],\n  Aliasing: [],\n  Fields: [],\n};\n\nfunction createPart(part: any): any {\n  const def = index[part.type];\n  if (!def) {\n    throw { message: 'Could not find query part ' + part.type };\n  }\n\n  return new QueryPart(part, def);\n}\n\nfunction register(options: any) {\n  index[options.type] = new QueryPartDef(options);\n  options.category.push(index[options.type]);\n}\n\nconst groupByTimeFunctions: any[] = [];\n\nfunction aliasRenderer(part: { params: string[] }, innerExpr: string) {\n  return innerExpr + ' AS ' + '\"' + part.params[0] + '\"';\n}\n\nfunction fieldRenderer(part: { params: string[] }, innerExpr: any) {\n  if (part.params[0] === '*') {\n    return '*';\n  }\n  return '\"' + part.params[0] + '\"';\n}\n\nfunction replaceAggregationAddStrategy(selectParts: any[], partModel: { def: { type: string } }) {\n  // look for existing aggregation\n  for (let i = 0; i < selectParts.length; i++) {\n    const part = selectParts[i];\n    if (part.def.category === categories.Aggregations) {\n      if (part.def.type === partModel.def.type) {\n        return;\n      }\n      // count distinct is allowed\n      if (part.def.type === 'count' && partModel.def.type === 'distinct') {\n        break;\n      }\n      // remove next aggregation if distinct was replaced\n      if (part.def.type === 'distinct') {\n        const morePartsAvailable = selectParts.length >= i + 2;\n        if (partModel.def.type !== 'count' && morePartsAvailable) {\n          const nextPart = selectParts[i + 1];\n          if (nextPart.def.category === categories.Aggregations) {\n            selectParts.splice(i + 1, 1);\n          }\n        } else if (partModel.def.type === 'count') {\n          if (!morePartsAvailable || selectParts[i + 1].def.type !== 'count') {\n            selectParts.splice(i + 1, 0, partModel);\n          }\n          return;\n        }\n      }\n      selectParts[i] = partModel;\n      return;\n    }\n    if (part.def.category === categories.Selectors) {\n      selectParts[i] = partModel;\n      return;\n    }\n  }\n\n  selectParts.splice(1, 0, partModel);\n}\n\nfunction addTransformationStrategy(selectParts: any[], partModel: any) {\n  let i;\n  // look for index to add transformation\n  for (i = 0; i < selectParts.length; i++) {\n    const part = selectParts[i];\n    if (part.def.category === categories.Math || part.def.category === categories.Aliasing) {\n      break;\n    }\n  }\n\n  selectParts.splice(i, 0, partModel);\n}\n\nfunction addMathStrategy(selectParts: any[], partModel: any) {\n  const partCount = selectParts.length;\n  if (partCount > 0) {\n    // if last is math, replace it\n    if (selectParts[partCount - 1].def.type === 'math') {\n      selectParts[partCount - 1] = partModel;\n      return;\n    }\n    // if next to last is math, replace it\n    if (partCount > 1 && selectParts[partCount - 2].def.type === 'math') {\n      selectParts[partCount - 2] = partModel;\n      return;\n    } else if (selectParts[partCount - 1].def.type === 'alias') {\n      // if last is alias add it before\n      selectParts.splice(partCount - 1, 0, partModel);\n      return;\n    }\n  }\n  selectParts.push(partModel);\n}\n\nfunction addAliasStrategy(selectParts: any[], partModel: any) {\n  const partCount = selectParts.length;\n  if (partCount > 0) {\n    // if last is alias, replace it\n    if (selectParts[partCount - 1].def.type === 'alias') {\n      selectParts[partCount - 1] = partModel;\n      return;\n    }\n  }\n  selectParts.push(partModel);\n}\n\nfunction addFieldStrategy(selectParts: any, partModel: any, query: { selectModels: any[][] }) {\n  // copy all parts\n  const parts = map(selectParts, (part: any) => {\n    return createPart({ type: part.def.type, params: clone(part.params) });\n  });\n\n  query.selectModels.push(parts);\n}\n\nregister({\n  type: 'field',\n  addStrategy: addFieldStrategy,\n  category: categories.Fields,\n  params: [{ type: 'field', dynamicLookup: true }],\n  defaultParams: ['value'],\n  renderer: fieldRenderer,\n});\n\n// Aggregations\nregister({\n  type: 'count',\n  addStrategy: replaceAggregationAddStrategy,\n  category: categories.Aggregations,\n  params: [],\n  defaultParams: [],\n  renderer: functionRenderer,\n});\n\nregister({\n  type: 'distinct',\n  addStrategy: replaceAggregationAddStrategy,\n  category: categories.Aggregations,\n  params: [],\n  defaultParams: [],\n  renderer: functionRenderer,\n});\n\nregister({\n  type: 'integral',\n  addStrategy: replaceAggregationAddStrategy,\n  category: categories.Aggregations,\n  params: [],\n  defaultParams: [],\n  renderer: functionRenderer,\n});\n\nregister({\n  type: 'mean',\n  addStrategy: replaceAggregationAddStrategy,\n  category: categories.Aggregations,\n  params: [],\n  defaultParams: [],\n  renderer: functionRenderer,\n});\n\nregister({\n  type: 'median',\n  addStrategy: replaceAggregationAddStrategy,\n  category: categories.Aggregations,\n  params: [],\n  defaultParams: [],\n  renderer: functionRenderer,\n});\n\nregister({\n  type: 'mode',\n  addStrategy: replaceAggregationAddStrategy,\n  category: categories.Aggregations,\n  params: [],\n  defaultParams: [],\n  renderer: functionRenderer,\n});\n\nregister({\n  type: 'sum',\n  addStrategy: replaceAggregationAddStrategy,\n  category: categories.Aggregations,\n  params: [],\n  defaultParams: [],\n  renderer: functionRenderer,\n});\n\n// transformations\n\nregister({\n  type: 'derivative',\n  addStrategy: addTransformationStrategy,\n  category: categories.Transformations,\n  params: [\n    {\n      name: 'duration',\n      type: 'interval',\n      options: ['1s', '10s', '1m', '5m', '10m', '15m', '1h'],\n    },\n  ],\n  defaultParams: ['10s'],\n  renderer: functionRenderer,\n});\n\nregister({\n  type: 'spread',\n  addStrategy: addTransformationStrategy,\n  category: categories.Transformations,\n  params: [],\n  defaultParams: [],\n  renderer: functionRenderer,\n});\n\nregister({\n  type: 'non_negative_derivative',\n  addStrategy: addTransformationStrategy,\n  category: categories.Transformations,\n  params: [\n    {\n      name: 'duration',\n      type: 'interval',\n      options: ['1s', '10s', '1m', '5m', '10m', '15m', '1h'],\n    },\n  ],\n  defaultParams: ['10s'],\n  renderer: functionRenderer,\n});\n\nregister({\n  type: 'difference',\n  addStrategy: addTransformationStrategy,\n  category: categories.Transformations,\n  params: [],\n  defaultParams: [],\n  renderer: functionRenderer,\n});\n\nregister({\n  type: 'non_negative_difference',\n  addStrategy: addTransformationStrategy,\n  category: categories.Transformations,\n  params: [],\n  defaultParams: [],\n  renderer: functionRenderer,\n});\n\nregister({\n  type: 'moving_average',\n  addStrategy: addTransformationStrategy,\n  category: categories.Transformations,\n  params: [{ name: 'window', type: 'int', options: [5, 10, 20, 30, 40] }],\n  defaultParams: [10],\n  renderer: functionRenderer,\n});\n\nregister({\n  type: 'cumulative_sum',\n  addStrategy: addTransformationStrategy,\n  category: categories.Transformations,\n  params: [],\n  defaultParams: [],\n  renderer: functionRenderer,\n});\n\nregister({\n  type: 'stddev',\n  addStrategy: addTransformationStrategy,\n  category: categories.Transformations,\n  params: [],\n  defaultParams: [],\n  renderer: functionRenderer,\n});\n\nregister({\n  type: 'time',\n  category: groupByTimeFunctions,\n  params: [\n    {\n      name: 'interval',\n      type: 'time',\n      options: ['$__interval', '1s', '10s', '1m', '5m', '10m', '15m', '1h'],\n    },\n  ],\n  defaultParams: ['$__interval'],\n  renderer: functionRenderer,\n});\n\nregister({\n  type: 'fill',\n  category: groupByTimeFunctions,\n  params: [\n    {\n      name: 'fill',\n      type: 'string',\n      options: ['none', 'null', '0', 'previous', 'linear'],\n    },\n  ],\n  defaultParams: ['null'],\n  renderer: functionRenderer,\n});\n\nregister({\n  type: 'elapsed',\n  addStrategy: addTransformationStrategy,\n  category: categories.Transformations,\n  params: [\n    {\n      name: 'duration',\n      type: 'interval',\n      options: ['1s', '10s', '1m', '5m', '10m', '15m', '1h'],\n    },\n  ],\n  defaultParams: ['10s'],\n  renderer: functionRenderer,\n});\n\n// predictions\nregister({\n  type: 'holt_winters',\n  addStrategy: addTransformationStrategy,\n  category: categories.Predictors,\n  params: [\n    { name: 'number', type: 'int', options: [5, 10, 20, 30, 40] },\n    { name: 'season', type: 'int', options: [0, 1, 2, 5, 10] },\n  ],\n  defaultParams: [10, 2],\n  renderer: functionRenderer,\n});\n\nregister({\n  type: 'holt_winters_with_fit',\n  addStrategy: addTransformationStrategy,\n  category: categories.Predictors,\n  params: [\n    { name: 'number', type: 'int', options: [5, 10, 20, 30, 40] },\n    { name: 'season', type: 'int', options: [0, 1, 2, 5, 10] },\n  ],\n  defaultParams: [10, 2],\n  renderer: functionRenderer,\n});\n\n// Selectors\nregister({\n  type: 'bottom',\n  addStrategy: replaceAggregationAddStrategy,\n  category: categories.Selectors,\n  params: [{ name: 'count', type: 'int' }],\n  defaultParams: [3],\n  renderer: functionRenderer,\n});\n\nregister({\n  type: 'first',\n  addStrategy: replaceAggregationAddStrategy,\n  category: categories.Selectors,\n  params: [],\n  defaultParams: [],\n  renderer: functionRenderer,\n});\n\nregister({\n  type: 'last',\n  addStrategy: replaceAggregationAddStrategy,\n  category: categories.Selectors,\n  params: [],\n  defaultParams: [],\n  renderer: functionRenderer,\n});\n\nregister({\n  type: 'max',\n  addStrategy: replaceAggregationAddStrategy,\n  category: categories.Selectors,\n  params: [],\n  defaultParams: [],\n  renderer: functionRenderer,\n});\n\nregister({\n  type: 'min',\n  addStrategy: replaceAggregationAddStrategy,\n  category: categories.Selectors,\n  params: [],\n  defaultParams: [],\n  renderer: functionRenderer,\n});\n\nregister({\n  type: 'percentile',\n  addStrategy: replaceAggregationAddStrategy,\n  category: categories.Selectors,\n  params: [{ name: 'nth', type: 'int' }],\n  defaultParams: [95],\n  renderer: functionRenderer,\n});\n\nregister({\n  type: 'top',\n  addStrategy: replaceAggregationAddStrategy,\n  category: categories.Selectors,\n  params: [{ name: 'count', type: 'int' }],\n  defaultParams: [3],\n  renderer: functionRenderer,\n});\n\nregister({\n  type: 'tag',\n  category: groupByTimeFunctions,\n  params: [{ name: 'tag', type: 'string', dynamicLookup: true }],\n  defaultParams: ['tag'],\n  renderer: fieldRenderer,\n});\n\nregister({\n  type: 'math',\n  addStrategy: addMathStrategy,\n  category: categories.Math,\n  params: [{ name: 'expr', type: 'string' }],\n  defaultParams: [' / 100'],\n  renderer: suffixRenderer,\n});\n\nregister({\n  type: 'alias',\n  addStrategy: addAliasStrategy,\n  category: categories.Aliasing,\n  params: [{ name: 'name', type: 'string', quote: 'double' }],\n  defaultParams: ['alias'],\n  renderMode: 'suffix',\n  renderer: aliasRenderer,\n});\n\nexport default {\n  create: createPart,\n  getCategories: () => {\n    return categories;\n  },\n  replaceAggregationAdd: replaceAggregationAddStrategy,\n};\n","import { map, find, filter, indexOf } from 'lodash';\nimport queryPart from './query_part';\nimport kbn from 'app/core/utils/kbn';\nimport { InfluxQuery, InfluxQueryTag } from './types';\nimport { ScopedVars } from '@grafana/data';\nimport { TemplateSrv } from '@grafana/runtime';\n\nexport default class InfluxQueryModel {\n  target: InfluxQuery;\n  selectModels: any[] = [];\n  queryBuilder: any;\n  groupByParts: any;\n  templateSrv: any;\n  scopedVars: any;\n  refId?: string;\n\n  /** @ngInject */\n  constructor(target: InfluxQuery, templateSrv?: TemplateSrv, scopedVars?: ScopedVars) {\n    this.target = target;\n    this.templateSrv = templateSrv;\n    this.scopedVars = scopedVars;\n\n    target.policy = target.policy || 'default';\n    target.resultFormat = target.resultFormat || 'time_series';\n    target.orderByTime = target.orderByTime || 'ASC';\n    target.tags = target.tags || [];\n    target.groupBy = target.groupBy || [\n      { type: 'time', params: ['$__interval'] },\n      { type: 'fill', params: ['null'] },\n    ];\n    target.select = target.select || [\n      [\n        { type: 'field', params: ['value'] },\n        { type: 'mean', params: [] },\n      ],\n    ];\n\n    this.updateProjection();\n  }\n\n  updateProjection() {\n    this.selectModels = map(this.target.select, (parts: any) => {\n      return map(parts, queryPart.create);\n    });\n    this.groupByParts = map(this.target.groupBy, queryPart.create);\n  }\n\n  updatePersistedParts() {\n    this.target.select = map(this.selectModels, (selectParts) => {\n      return map(selectParts, (part: any) => {\n        return { type: part.def.type, params: part.params };\n      });\n    });\n  }\n\n  hasGroupByTime() {\n    return find(this.target.groupBy, (g: any) => g.type === 'time');\n  }\n\n  hasFill() {\n    return find(this.target.groupBy, (g: any) => g.type === 'fill');\n  }\n\n  addGroupBy(value: string) {\n    let stringParts = value.match(/^(\\w+)\\((.*)\\)$/);\n\n    if (!stringParts || !this.target.groupBy) {\n      return;\n    }\n\n    const typePart = stringParts[1];\n    const arg = stringParts[2];\n    const partModel = queryPart.create({ type: typePart, params: [arg] });\n    const partCount = this.target.groupBy.length;\n\n    if (partCount === 0) {\n      this.target.groupBy.push(partModel.part);\n    } else if (typePart === 'time') {\n      this.target.groupBy.splice(0, 0, partModel.part);\n    } else if (typePart === 'tag') {\n      if (this.target.groupBy[partCount - 1].type === 'fill') {\n        this.target.groupBy.splice(partCount - 1, 0, partModel.part);\n      } else {\n        this.target.groupBy.push(partModel.part);\n      }\n    } else {\n      this.target.groupBy.push(partModel.part);\n    }\n\n    this.updateProjection();\n  }\n\n  removeGroupByPart(part: { def: { type: string } }, index: number) {\n    const categories = queryPart.getCategories();\n\n    if (part.def.type === 'time') {\n      // remove fill\n      this.target.groupBy = filter(this.target.groupBy, (g: any) => g.type !== 'fill');\n      // remove aggregations\n      this.target.select = map(this.target.select, (s: any) => {\n        return filter(s, (part: any) => {\n          const partModel = queryPart.create(part);\n          if (partModel.def.category === categories.Aggregations) {\n            return false;\n          }\n          if (partModel.def.category === categories.Selectors) {\n            return false;\n          }\n          return true;\n        });\n      });\n    }\n\n    this.target.groupBy!.splice(index, 1);\n    this.updateProjection();\n  }\n\n  removeSelect(index: number) {\n    this.target.select!.splice(index, 1);\n    this.updateProjection();\n  }\n\n  removeSelectPart(selectParts: any[], part: any) {\n    // if we remove the field remove the whole statement\n    if (part.def.type === 'field') {\n      if (this.selectModels.length > 1) {\n        const modelsIndex = indexOf(this.selectModels, selectParts);\n        this.selectModels.splice(modelsIndex, 1);\n      }\n    } else {\n      const partIndex = indexOf(selectParts, part);\n      selectParts.splice(partIndex, 1);\n    }\n\n    this.updatePersistedParts();\n  }\n\n  addSelectPart(selectParts: any[], type: string) {\n    const partModel = queryPart.create({ type: type });\n    partModel.def.addStrategy(selectParts, partModel, this);\n    this.updatePersistedParts();\n  }\n\n  private renderTagCondition(tag: InfluxQueryTag, index: number, interpolate?: boolean) {\n    let str = '';\n    let operator = tag.operator;\n    let value = tag.value;\n    if (index > 0) {\n      str = (tag.condition || 'AND') + ' ';\n    }\n\n    if (!operator) {\n      if (/^\\/.*\\/$/.test(value)) {\n        operator = '=~';\n      } else {\n        operator = '=';\n      }\n    }\n\n    // quote value unless regex\n    if (operator !== '=~' && operator !== '!~') {\n      if (interpolate) {\n        value = this.templateSrv.replace(value, this.scopedVars);\n      }\n      if (operator !== '>' && operator !== '<') {\n        value = \"'\" + value.replace(/\\\\/g, '\\\\\\\\').replace(/\\'/g, \"\\\\'\") + \"'\";\n      }\n    } else if (interpolate) {\n      value = this.templateSrv.replace(value, this.scopedVars, 'regex');\n    }\n\n    return str + '\"' + tag.key + '\" ' + operator + ' ' + value;\n  }\n\n  getMeasurementAndPolicy(interpolate: any) {\n    let policy = this.target.policy;\n    let measurement = this.target.measurement || 'measurement';\n\n    if (!measurement.match('^/.*/$')) {\n      measurement = '\"' + measurement + '\"';\n    } else if (interpolate) {\n      measurement = this.templateSrv.replace(measurement, this.scopedVars, 'regex');\n    }\n\n    if (policy !== 'default') {\n      policy = '\"' + this.target.policy + '\".';\n    } else {\n      policy = '';\n    }\n\n    return policy + measurement;\n  }\n\n  interpolateQueryStr(value: any[], variable: { multi: any; includeAll: any }, defaultFormatFn: any) {\n    // if no multi or include all do not regexEscape\n    if (!variable.multi && !variable.includeAll) {\n      return value;\n    }\n\n    if (typeof value === 'string') {\n      return kbn.regexEscape(value);\n    }\n\n    const escapedValues = map(value, kbn.regexEscape);\n    return '(' + escapedValues.join('|') + ')';\n  }\n\n  render(interpolate?: boolean) {\n    const target = this.target;\n\n    if (target.rawQuery) {\n      if (interpolate) {\n        return this.templateSrv.replace(target.query, this.scopedVars, this.interpolateQueryStr);\n      } else {\n        return target.query;\n      }\n    }\n\n    let query = 'SELECT ';\n    let i, y;\n    for (i = 0; i < this.selectModels.length; i++) {\n      const parts = this.selectModels[i];\n      let selectText = '';\n      for (y = 0; y < parts.length; y++) {\n        const part = parts[y];\n        selectText = part.render(selectText);\n      }\n\n      if (i > 0) {\n        query += ', ';\n      }\n      query += selectText;\n    }\n\n    query += ' FROM ' + this.getMeasurementAndPolicy(interpolate) + ' WHERE ';\n    const conditions = map(target.tags, (tag, index) => {\n      return this.renderTagCondition(tag, index, interpolate);\n    });\n\n    if (conditions.length > 0) {\n      query += '(' + conditions.join(' ') + ') AND ';\n    }\n\n    query += '$timeFilter';\n\n    let groupBySection = '';\n    for (i = 0; i < this.groupByParts.length; i++) {\n      const part = this.groupByParts[i];\n      if (i > 0) {\n        // for some reason fill has no separator\n        groupBySection += part.def.type === 'fill' ? ' ' : ', ';\n      }\n      groupBySection += part.render('');\n    }\n\n    if (groupBySection.length) {\n      query += ' GROUP BY ' + groupBySection;\n    }\n\n    if (target.fill) {\n      query += ' fill(' + target.fill + ')';\n    }\n\n    if (target.orderByTime === 'DESC') {\n      query += ' ORDER BY time DESC';\n    }\n\n    if (target.limit) {\n      query += ' LIMIT ' + target.limit;\n    }\n\n    if (target.slimit) {\n      query += ' SLIMIT ' + target.slimit;\n    }\n\n    if (target.tz) {\n      query += \" tz('\" + target.tz + \"')\";\n    }\n\n    return query;\n  }\n\n  renderAdhocFilters(filters: any[]) {\n    const conditions = map(filters, (tag, index) => {\n      return this.renderTagCondition(tag, index, true);\n    });\n    return conditions.join(' ');\n  }\n}\n","import { each, isArray } from 'lodash';\n\nexport default class ResponseParser {\n  parse(query: string, results: { results: any }) {\n    if (!results?.results || results.results.length === 0) {\n      return [];\n    }\n\n    const influxResults = results.results[0];\n    if (!influxResults.series) {\n      return [];\n    }\n\n    const normalizedQuery = query.toLowerCase();\n    const isValueFirst =\n      normalizedQuery.indexOf('show field keys') >= 0 || normalizedQuery.indexOf('show retention policies') >= 0;\n\n    const res = new Set<string>();\n    each(influxResults.series, (serie) => {\n      each(serie.values, (value) => {\n        if (isArray(value)) {\n          // In general, there are 2 possible shapes for the returned value.\n          // The first one is a two-element array,\n          // where the first element is somewhat a metadata value:\n          // the tag name for SHOW TAG VALUES queries,\n          // the time field for SELECT queries, etc.\n          // The second shape is an one-element array,\n          // that is containing an immediate value.\n          // For example, SHOW FIELD KEYS queries return such shape.\n          // Note, pre-0.11 versions return\n          // the second shape for SHOW TAG VALUES queries\n          // (while the newer versions—first).\n\n          if (isValueFirst) {\n            addUnique(res, value[0]);\n          } else if (value[1] !== undefined) {\n            addUnique(res, value[1]);\n          } else {\n            addUnique(res, value[0]);\n          }\n        } else {\n          addUnique(res, value);\n        }\n      });\n    });\n\n    // NOTE: it is important to keep the order of items in the parsed output\n    // the same as it was in the influxdb-response.\n    // we use a `Set` to collect the unique-results, and `Set` iteration\n    // order is insertion-order, so this should be ok.\n    return Array.from(res).map((v) => ({ text: v }));\n  }\n}\n\nfunction addUnique(s: Set<string>, value: string | number) {\n  s.add(value.toString());\n}\n","import { reduce } from 'lodash';\nimport kbn from 'app/core/utils/kbn';\n\nfunction renderTagCondition(tag: { operator: any; value: string; condition: any; key: string }, index: number) {\n  let str = '';\n  let operator = tag.operator;\n  let value = tag.value;\n  if (index > 0) {\n    str = (tag.condition || 'AND') + ' ';\n  }\n\n  if (!operator) {\n    if (/^\\/.*\\/$/.test(tag.value)) {\n      operator = '=~';\n    } else {\n      operator = '=';\n    }\n  }\n\n  // quote value unless regex or number, or if empty-string\n  if (value === '' || (operator !== '=~' && operator !== '!~' && isNaN(+value))) {\n    value = \"'\" + value + \"'\";\n  }\n\n  return str + '\"' + tag.key + '\" ' + operator + ' ' + value;\n}\n\nexport class InfluxQueryBuilder {\n  constructor(private target: { measurement: any; tags: any; policy?: any }, private database?: string) {}\n\n  buildExploreQuery(type: string, withKey?: string, withMeasurementFilter?: string): string {\n    let query = '';\n    let measurement;\n    let policy;\n\n    if (type === 'TAG_KEYS') {\n      query = 'SHOW TAG KEYS';\n      measurement = this.target.measurement;\n      policy = this.target.policy;\n    } else if (type === 'TAG_VALUES') {\n      query = 'SHOW TAG VALUES';\n      measurement = this.target.measurement;\n      policy = this.target.policy;\n    } else if (type === 'MEASUREMENTS') {\n      query = 'SHOW MEASUREMENTS';\n      if (withMeasurementFilter) {\n        // we do a case-insensitive regex-based lookup\n        query += ' WITH MEASUREMENT =~ /(?i)' + kbn.regexEscape(withMeasurementFilter) + '/';\n      }\n    } else if (type === 'FIELDS') {\n      measurement = this.target.measurement;\n      policy = this.target.policy;\n\n      if (!measurement.match('^/.*/')) {\n        measurement = '\"' + measurement + '\"';\n\n        if (policy && policy !== 'default') {\n          policy = '\"' + policy + '\"';\n          measurement = policy + '.' + measurement;\n        }\n      }\n\n      return 'SHOW FIELD KEYS FROM ' + measurement;\n    } else if (type === 'RETENTION POLICIES') {\n      query = 'SHOW RETENTION POLICIES on \"' + this.database + '\"';\n      return query;\n    }\n\n    if (measurement) {\n      if (!measurement.match('^/.*/') && !measurement.match(/^merge\\(.*\\)/)) {\n        measurement = '\"' + measurement + '\"';\n      }\n\n      if (policy && policy !== 'default') {\n        policy = '\"' + policy + '\"';\n        measurement = policy + '.' + measurement;\n      }\n\n      query += ' FROM ' + measurement;\n    }\n\n    if (withKey) {\n      query += ' WITH KEY = \"' + withKey + '\"';\n    }\n\n    if (this.target.tags && this.target.tags.length > 0) {\n      const whereConditions = reduce(\n        this.target.tags,\n        (memo, tag) => {\n          // do not add a condition for the key we want to explore for\n          if (tag.key === withKey) {\n            return memo;\n          }\n\n          // value operators not supported in these types of queries\n          if (tag.operator === '>' || tag.operator === '<') {\n            return memo;\n          }\n\n          memo.push(renderTagCondition(tag, memo.length));\n          return memo;\n        },\n        [] as string[]\n      );\n\n      if (whereConditions.length > 0) {\n        query += ' WHERE ' + whereConditions.join(' ');\n      }\n    }\n\n    if (type === 'MEASUREMENTS') {\n      query += ' LIMIT 100';\n      //Solve issue #2524 by limiting the number of measurements returned\n      //LIMIT must be after WITH MEASUREMENT and WHERE clauses\n      //This also could be used for TAG KEYS and TAG VALUES, if desired\n    }\n\n    return query;\n  }\n}\n","import { DataQuery, DataSourceJsonData } from '@grafana/data';\n\nexport enum InfluxVersion {\n  InfluxQL = 'InfluxQL',\n  Flux = 'Flux',\n}\n\nexport interface InfluxOptions extends DataSourceJsonData {\n  version?: InfluxVersion;\n\n  timeInterval: string;\n  httpMode: string;\n\n  // With Flux\n  organization?: string;\n  defaultBucket?: string;\n  maxSeries?: number;\n}\n\nexport interface InfluxSecureJsonData {\n  // For Flux\n  token?: string;\n\n  // In 1x a different password can be sent than then HTTP auth\n  password?: string;\n}\n\nexport interface InfluxQueryPart {\n  type: string;\n  params?: Array<string | number>;\n  // FIXME: `interval` does not seem to be used.\n  // check all the influxdb parts (query-generation etc.),\n  // if it is really so, and if yes, remove it\n  interval?: string;\n}\n\nexport interface InfluxQueryTag {\n  key: string;\n  operator?: string;\n  condition?: string;\n  value: string;\n}\n\nexport type ResultFormat = 'time_series' | 'table' | 'logs';\n\nexport interface InfluxQuery extends DataQuery {\n  policy?: string;\n  measurement?: string;\n  resultFormat?: ResultFormat;\n  orderByTime?: string;\n  tags?: InfluxQueryTag[];\n  groupBy?: InfluxQueryPart[];\n  select?: InfluxQueryPart[][];\n  limit?: string | number;\n  slimit?: string | number;\n  tz?: string;\n  // NOTE: `fill` is not used in the query-editor anymore, and is removed\n  // if any change happens in the query-editor. the query-generation still\n  // supports it for now.\n  fill?: string;\n  rawQuery?: boolean;\n  query?: string;\n  alias?: string;\n}\n","import React, { PureComponent } from 'react';\nimport { InfluxQuery } from '../types';\nimport { SelectableValue } from '@grafana/data';\nimport { cx, css } from '@emotion/css';\nimport {\n  InlineFormLabel,\n  LinkButton,\n  Segment,\n  CodeEditor,\n  MonacoEditor,\n  CodeEditorSuggestionItem,\n  CodeEditorSuggestionItemKind,\n} from '@grafana/ui';\nimport { getTemplateSrv } from '@grafana/runtime';\nimport InfluxDatasource from '../datasource';\n\ntype Props = {\n  onChange: (query: InfluxQuery) => void;\n  onRunQuery: () => void;\n  query: InfluxQuery;\n  // `datasource` is not used internally, but this component is used at some places\n  // directly, where the `datasource` prop has to exist. later, when the whole\n  // query-editor gets converted to react we can stop using this component directly\n  // and then we can probably remove the datasource attribute.\n  datasource: InfluxDatasource;\n};\n\nconst samples: Array<SelectableValue<string>> = [\n  { label: 'Show buckets', description: 'List the available buckets (table)', value: 'buckets()' },\n  {\n    label: 'Simple query',\n    description: 'filter by measurement and field',\n    value: `from(bucket: \"db/rp\")\n  |> range(start: v.timeRangeStart, stop:v.timeRangeStop)\n  |> filter(fn: (r) =>\n    r._measurement == \"example-measurement\" and\n    r._field == \"example-field\"\n  )`,\n  },\n  {\n    label: 'Grouped Query',\n    description: 'Group by (min/max/sum/median)',\n    value: `// v.windowPeriod is a variable referring to the current optimized window period (currently: $interval)\nfrom(bucket: v.bucket)\n  |> range(start: v.timeRangeStart, stop: v.timeRangeStop)\n  |> filter(fn: (r) => r[\"_measurement\"] == \"measurement1\" or r[\"_measurement\"] =~ /^.*?regex.*$/)\n  |> filter(fn: (r) => r[\"_field\"] == \"field2\" or r[\"_field\"] =~ /^.*?regex.*$/)\n  |> aggregateWindow(every: v.windowPeriod, fn: mean|median|max|count|derivative|sum)\n  |> yield(name: \"some-name\")`,\n  },\n  {\n    label: 'Filter by value',\n    description: 'Results between a min/max',\n    value: `// v.bucket, v.timeRangeStart, and v.timeRange stop are all variables supported by the flux plugin and influxdb\nfrom(bucket: v.bucket)\n  |> range(start: v.timeRangeStart, stop: v.timeRangeStop)\n  |> filter(fn: (r) => r[\"_value\"] >= 10 and r[\"_value\"] <= 20)`,\n  },\n  {\n    label: 'Schema Exploration: (measurements)',\n    description: 'Get a list of measurement using flux',\n    value: `import \"influxdata/influxdb/v1\"\nv1.measurements(bucket: v.bucket)`,\n  },\n  {\n    label: 'Schema Exploration: (fields)',\n    description: 'Return every possible key in a single table',\n    value: `from(bucket: v.bucket)\n  |> range(start: v.timeRangeStart, stop:v.timeRangeStop)\n  |> keys()\n  |> keep(columns: [\"_value\"])\n  |> group()\n  |> distinct()`,\n  },\n  {\n    label: 'Schema Exploration: (tag keys)',\n    description: 'Get a list of tag keys using flux',\n    value: `import \"influxdata/influxdb/v1\"\nv1.tagKeys(bucket: v.bucket)`,\n  },\n  {\n    label: 'Schema Exploration: (tag values)',\n    description: 'Get a list of tag values using flux',\n    value: `import \"influxdata/influxdb/v1\"\nv1.tagValues(\n    bucket: v.bucket,\n    tag: \"host\",\n    predicate: (r) => true,\n    start: -1d\n)`,\n  },\n];\n\nexport class FluxQueryEditor extends PureComponent<Props> {\n  onFluxQueryChange = (query: string) => {\n    this.props.onChange({ ...this.props.query, query });\n    this.props.onRunQuery();\n  };\n\n  onSampleChange = (val: SelectableValue<string>) => {\n    this.props.onChange({\n      ...this.props.query,\n      query: val.value!,\n    });\n\n    // Angular HACK: Since the target does not actually change!\n    this.forceUpdate();\n    this.props.onRunQuery();\n  };\n\n  getSuggestions = (): CodeEditorSuggestionItem[] => {\n    const sugs: CodeEditorSuggestionItem[] = [\n      {\n        label: 'v.timeRangeStart',\n        kind: CodeEditorSuggestionItemKind.Property,\n        detail: 'The start time',\n      },\n      {\n        label: 'v.timeRangeStop',\n        kind: CodeEditorSuggestionItemKind.Property,\n        detail: 'The stop time',\n      },\n      {\n        label: 'v.windowPeriod',\n        kind: CodeEditorSuggestionItemKind.Property,\n        detail: 'based on max data points',\n      },\n      {\n        label: 'v.defaultBucket',\n        kind: CodeEditorSuggestionItemKind.Property,\n        detail: 'bucket configured in the datsource',\n      },\n      {\n        label: 'v.organization',\n        kind: CodeEditorSuggestionItemKind.Property,\n        detail: 'org configured for the datsource',\n      },\n    ];\n\n    const templateSrv = getTemplateSrv();\n    templateSrv.getVariables().forEach((variable) => {\n      const label = '${' + variable.name + '}';\n      let val = templateSrv.replace(label);\n      if (val === label) {\n        val = '';\n      }\n      sugs.push({\n        label,\n        kind: CodeEditorSuggestionItemKind.Text,\n        detail: `(Template Variable) ${val}`,\n      });\n    });\n\n    return sugs;\n  };\n\n  // For some reason in angular, when this component gets re-mounted, the width\n  // is not set properly.  This forces the layout shortly after mount so that it\n  // displays OK.  Note: this is not an issue when used directly in react\n  editorDidMountCallbackHack = (editor: MonacoEditor) => {\n    setTimeout(() => editor.layout(), 100);\n  };\n\n  render() {\n    const { query } = this.props;\n\n    const helpTooltip = (\n      <div>\n        Type: <i>ctrl+space</i> to show template variable suggestions <br />\n        Many queries can be copied from chronograph\n      </div>\n    );\n\n    return (\n      <>\n        <CodeEditor\n          height={'200px'}\n          language=\"sql\"\n          value={query.query || ''}\n          onBlur={this.onFluxQueryChange}\n          onSave={this.onFluxQueryChange}\n          showMiniMap={false}\n          showLineNumbers={true}\n          getSuggestions={this.getSuggestions}\n          onEditorDidMount={this.editorDidMountCallbackHack}\n        />\n        <div\n          className={cx(\n            'gf-form-inline',\n            css`\n              margin-top: 6px;\n            `\n          )}\n        >\n          <LinkButton\n            icon=\"external-link-alt\"\n            variant=\"secondary\"\n            target=\"blank\"\n            href=\"https://docs.influxdata.com/influxdb/latest/query-data/get-started/\"\n          >\n            Flux language syntax\n          </LinkButton>\n          <Segment options={samples} value=\"Sample Query\" onChange={this.onSampleChange} />\n          <div className=\"gf-form gf-form--grow\">\n            <div className=\"gf-form-label gf-form-label--grow\"></div>\n          </div>\n          <InlineFormLabel width={5} tooltip={helpTooltip}>\n            Help\n          </InlineFormLabel>\n        </div>\n      </>\n    );\n  }\n}\n","import { cloneDeep } from 'lodash';\nimport InfluxQueryModel from './influx_query_model';\nimport { InfluxQuery } from './types';\n\n// FIXME: these functions are a beginning of a refactoring of influx_query_model.ts\n// into a simpler approach with full typescript types.\n// later we should be able to migrate the unit-tests\n// that relate to these functions here, and then perhaps even move the implementation\n// to this place\n\nexport function buildRawQuery(query: InfluxQuery): string {\n  const queryCopy = cloneDeep(query); // the query-model mutates the query\n  const model = new InfluxQueryModel(queryCopy);\n  return model.render(false);\n}\n\nexport function normalizeQuery(query: InfluxQuery): InfluxQuery {\n  // we return the original query if there is no need to update it\n  if (\n    query.policy !== undefined &&\n    query.resultFormat !== undefined &&\n    query.orderByTime !== undefined &&\n    query.tags !== undefined &&\n    query.groupBy !== undefined &&\n    query.select !== undefined\n  ) {\n    return query;\n  }\n\n  // FIXME: we should move the whole normalizeQuery logic here,\n  // and then have influxQueryModel call this function,\n  // to concentrate the whole logic here\n\n  const queryCopy = cloneDeep(query); // the query-model mutates the query\n  return new InfluxQueryModel(queryCopy).target;\n}\n\nexport function addNewSelectPart(query: InfluxQuery, type: string, index: number): InfluxQuery {\n  const queryCopy = cloneDeep(query); // the query-model mutates the query\n  const model = new InfluxQueryModel(queryCopy);\n  model.addSelectPart(model.selectModels[index], type);\n  return model.target;\n}\n\nexport function removeSelectPart(query: InfluxQuery, partIndex: number, index: number): InfluxQuery {\n  const queryCopy = cloneDeep(query); // the query-model mutates the query\n  const model = new InfluxQueryModel(queryCopy);\n  const selectModel = model.selectModels[index];\n  model.removeSelectPart(selectModel, selectModel[partIndex]);\n  return model.target;\n}\n\nexport function changeSelectPart(\n  query: InfluxQuery,\n  listIndex: number,\n  partIndex: number,\n  newParams: string[]\n): InfluxQuery {\n  // we need to make shallow copy of `query.select` down to `query.select[listIndex][partIndex]`\n  const newSel = [...(query.select ?? [])];\n  newSel[listIndex] = [...newSel[listIndex]];\n  newSel[listIndex][partIndex] = {\n    ...newSel[listIndex][partIndex],\n    params: newParams,\n  };\n  return { ...query, select: newSel };\n}\n\nexport function addNewGroupByPart(query: InfluxQuery, type: string): InfluxQuery {\n  const queryCopy = cloneDeep(query); // the query-model mutates the query\n  const model = new InfluxQueryModel(queryCopy);\n  model.addGroupBy(type);\n  return model.target;\n}\n\nexport function removeGroupByPart(query: InfluxQuery, partIndex: number): InfluxQuery {\n  const queryCopy = cloneDeep(query); // the query-model mutates the query\n  const model = new InfluxQueryModel(queryCopy);\n  model.removeGroupByPart(model.groupByParts[partIndex], partIndex);\n  return model.target;\n}\n\nexport function changeGroupByPart(query: InfluxQuery, partIndex: number, newParams: string[]): InfluxQuery {\n  // we need to make shallow copy of `query.groupBy` down to `query.groupBy[partIndex]`\n  const newGroupBy = [...(query.groupBy ?? [])];\n  newGroupBy[partIndex] = {\n    ...newGroupBy[partIndex],\n    params: newParams,\n  };\n  return { ...query, groupBy: newGroupBy };\n}\n","import { cloneDeep, map as _map, reduce, get, has, extend, omit, pick, isString } from 'lodash';\n\nimport {\n  dateMath,\n  DataSourceInstanceSettings,\n  ScopedVars,\n  DataQueryRequest,\n  DataQueryResponse,\n  dateTime,\n  LoadingState,\n  QueryResultMeta,\n  MetricFindValue,\n  AnnotationQueryRequest,\n  AnnotationEvent,\n  DataQueryError,\n  DataFrame,\n  TimeSeries,\n  TIME_SERIES_TIME_FIELD_NAME,\n  TIME_SERIES_VALUE_FIELD_NAME,\n  FieldType,\n  ArrayVector,\n} from '@grafana/data';\nimport { v4 as uuidv4 } from 'uuid';\nimport InfluxSeries from './influx_series';\nimport InfluxQueryModel from './influx_query_model';\nimport ResponseParser from './response_parser';\nimport { InfluxQueryBuilder } from './query_builder';\nimport { InfluxQuery, InfluxOptions, InfluxVersion } from './types';\nimport { getTemplateSrv, TemplateSrv } from 'app/features/templating/template_srv';\nimport { getBackendSrv, DataSourceWithBackend, frameToMetricFindValue } from '@grafana/runtime';\nimport { Observable, throwError, of } from 'rxjs';\nimport { FluxQueryEditor } from './components/FluxQueryEditor';\nimport { catchError, map } from 'rxjs/operators';\nimport { buildRawQuery } from './queryUtils';\n\n// we detect the field type based on the value-array\nfunction getFieldType(values: unknown[]): FieldType {\n  // the values-array may contain a lot of nulls.\n  // we need the first not-null item\n  const firstNotNull = values.find((v) => v !== null);\n\n  if (firstNotNull === undefined) {\n    // we could not find any not-null values\n    return FieldType.number;\n  }\n\n  const valueType = typeof firstNotNull;\n\n  switch (valueType) {\n    case 'string':\n      return FieldType.string;\n    case 'boolean':\n      return FieldType.boolean;\n    case 'number':\n      return FieldType.number;\n    default:\n      // this should never happen, influxql values\n      // can only be numbers, strings and booleans.\n      throw new Error(`InfluxQL: invalid value type ${valueType}`);\n  }\n}\n\n// this conversion function is specialized to work with the timeseries\n// data returned by InfluxDatasource.getTimeSeries()\nfunction timeSeriesToDataFrame(timeSeries: TimeSeries): DataFrame {\n  const times: number[] = [];\n  const values: unknown[] = [];\n\n  // the data we process here is not correctly typed.\n  // the typescript types say every data-point is number|null,\n  // but in fact it can be string or boolean too.\n\n  const points = timeSeries.datapoints;\n  for (const point of points) {\n    values.push(point[0]);\n    times.push(point[1] as number);\n  }\n\n  const timeField = {\n    name: TIME_SERIES_TIME_FIELD_NAME,\n    type: FieldType.time,\n    config: {},\n    values: new ArrayVector<number>(times),\n  };\n\n  const valueField = {\n    name: TIME_SERIES_VALUE_FIELD_NAME,\n    type: getFieldType(values),\n    config: {\n      displayNameFromDS: timeSeries.title,\n    },\n    values: new ArrayVector<unknown>(values),\n    labels: timeSeries.tags,\n  };\n\n  const fields = [timeField, valueField];\n\n  return {\n    name: timeSeries.target,\n    refId: timeSeries.refId,\n    meta: timeSeries.meta,\n    fields,\n    length: values.length,\n  };\n}\n\nexport default class InfluxDatasource extends DataSourceWithBackend<InfluxQuery, InfluxOptions> {\n  type: string;\n  urls: string[];\n  username: string;\n  password: string;\n  name: string;\n  database: any;\n  basicAuth: any;\n  withCredentials: any;\n  interval: any;\n  responseParser: any;\n  httpMode: string;\n  isFlux: boolean;\n\n  constructor(\n    instanceSettings: DataSourceInstanceSettings<InfluxOptions>,\n    private readonly templateSrv: TemplateSrv = getTemplateSrv()\n  ) {\n    super(instanceSettings);\n\n    this.type = 'influxdb';\n    this.urls = (instanceSettings.url ?? '').split(',').map((url) => {\n      return url.trim();\n    });\n\n    this.username = instanceSettings.username ?? '';\n    this.password = instanceSettings.password ?? '';\n    this.name = instanceSettings.name;\n    this.database = instanceSettings.database;\n    this.basicAuth = instanceSettings.basicAuth;\n    this.withCredentials = instanceSettings.withCredentials;\n    const settingsData = instanceSettings.jsonData || ({} as InfluxOptions);\n    this.interval = settingsData.timeInterval;\n    this.httpMode = settingsData.httpMode || 'GET';\n    this.responseParser = new ResponseParser();\n    this.isFlux = settingsData.version === InfluxVersion.Flux;\n\n    if (this.isFlux) {\n      // When flux, use an annotation processor rather than the `annotationQuery` lifecycle\n      this.annotations = {\n        QueryEditor: FluxQueryEditor,\n      };\n    }\n  }\n\n  query(request: DataQueryRequest<InfluxQuery>): Observable<DataQueryResponse> {\n    if (this.isFlux) {\n      // for not-flux queries we call `this.classicQuery`, and that\n      // handles the is-hidden situation.\n      // for the flux-case, we do the filtering here\n      const filteredRequest = {\n        ...request,\n        targets: request.targets.filter((t) => t.hide !== true),\n      };\n      return super.query(filteredRequest);\n    }\n\n    // Fallback to classic query support\n    return this.classicQuery(request);\n  }\n\n  getQueryDisplayText(query: InfluxQuery) {\n    if (this.isFlux) {\n      return query.query;\n    }\n    return new InfluxQueryModel(query).render(false);\n  }\n\n  /**\n   * Returns false if the query should be skipped\n   */\n  filterQuery(query: InfluxQuery): boolean {\n    if (this.isFlux) {\n      return !!query.query;\n    }\n    return true;\n  }\n\n  /**\n   * Only applied on flux queries\n   */\n  applyTemplateVariables(query: InfluxQuery, scopedVars: ScopedVars): Record<string, any> {\n    return {\n      ...query,\n      query: this.templateSrv.replace(query.query ?? '', scopedVars), // The raw query text\n    };\n  }\n\n  /**\n   * The unchanged pre 7.1 query implementation\n   */\n  classicQuery(options: any): Observable<DataQueryResponse> {\n    let timeFilter = this.getTimeFilter(options);\n    const scopedVars = options.scopedVars;\n    const targets = cloneDeep(options.targets);\n    const queryTargets: any[] = [];\n\n    let i, y;\n\n    let allQueries = _map(targets, (target) => {\n      if (target.hide) {\n        return '';\n      }\n\n      queryTargets.push(target);\n\n      // backward compatibility\n      scopedVars.interval = scopedVars.__interval;\n\n      return new InfluxQueryModel(target, this.templateSrv, scopedVars).render(true);\n    }).reduce((acc, current) => {\n      if (current !== '') {\n        acc += ';' + current;\n      }\n      return acc;\n    });\n\n    if (allQueries === '') {\n      return of({ data: [] });\n    }\n\n    // add global adhoc filters to timeFilter\n    const adhocFilters = this.templateSrv.getAdhocFilters(this.name);\n    if (adhocFilters.length > 0) {\n      const tmpQuery = new InfluxQueryModel({ refId: 'A' }, this.templateSrv, scopedVars);\n      timeFilter += ' AND ' + tmpQuery.renderAdhocFilters(adhocFilters);\n    }\n\n    // replace grafana variables\n    scopedVars.timeFilter = { value: timeFilter };\n\n    // replace templated variables\n    allQueries = this.templateSrv.replace(allQueries, scopedVars);\n\n    return this._seriesQuery(allQueries, options).pipe(\n      map((data: any) => {\n        if (!data || !data.results) {\n          return { data: [] };\n        }\n\n        const seriesList = [];\n        for (i = 0; i < data.results.length; i++) {\n          const result = data.results[i];\n          if (!result || !result.series) {\n            continue;\n          }\n\n          const target = queryTargets[i];\n          let alias = target.alias;\n          if (alias) {\n            alias = this.templateSrv.replace(target.alias, options.scopedVars);\n          }\n\n          const meta: QueryResultMeta = {\n            executedQueryString: data.executedQueryString,\n          };\n\n          const influxSeries = new InfluxSeries({\n            refId: target.refId,\n            series: data.results[i].series,\n            alias: alias,\n            meta,\n          });\n\n          switch (target.resultFormat) {\n            case 'logs':\n              meta.preferredVisualisationType = 'logs';\n            case 'table': {\n              seriesList.push(influxSeries.getTable());\n              break;\n            }\n            default: {\n              const timeSeries = influxSeries.getTimeSeries();\n              for (y = 0; y < timeSeries.length; y++) {\n                seriesList.push(timeSeriesToDataFrame(timeSeries[y]));\n              }\n              break;\n            }\n          }\n        }\n\n        return { data: seriesList };\n      })\n    );\n  }\n\n  async annotationQuery(options: AnnotationQueryRequest<any>): Promise<AnnotationEvent[]> {\n    if (this.isFlux) {\n      return Promise.reject({\n        message: 'Flux requires the standard annotation query',\n      });\n    }\n\n    // InfluxQL puts a query string on the annotation\n    if (!options.annotation.query) {\n      return Promise.reject({\n        message: 'Query missing in annotation definition',\n      });\n    }\n\n    const timeFilter = this.getTimeFilter({ rangeRaw: options.rangeRaw, timezone: options.dashboard.timezone });\n    let query = options.annotation.query.replace('$timeFilter', timeFilter);\n    query = this.templateSrv.replace(query, undefined, 'regex');\n\n    return this._seriesQuery(query, options)\n      .toPromise()\n      .then((data: any) => {\n        if (!data || !data.results || !data.results[0]) {\n          throw { message: 'No results in response from InfluxDB' };\n        }\n        return new InfluxSeries({\n          series: data.results[0].series,\n          annotation: options.annotation,\n        }).getAnnotations();\n      });\n  }\n\n  targetContainsTemplate(target: any) {\n    // for flux-mode we just take target.query,\n    // for influxql-mode we use InfluxQueryModel to create the text-representation\n    const queryText = this.isFlux ? target.query : buildRawQuery(target);\n\n    return this.templateSrv.variableExists(queryText);\n  }\n\n  interpolateVariablesInQueries(queries: InfluxQuery[], scopedVars: ScopedVars): InfluxQuery[] {\n    if (!queries || queries.length === 0) {\n      return [];\n    }\n\n    let expandedQueries = queries;\n    if (queries && queries.length > 0) {\n      expandedQueries = queries.map((query) => {\n        const expandedQuery = {\n          ...query,\n          datasource: this.name,\n          measurement: this.templateSrv.replace(query.measurement ?? '', scopedVars, 'regex'),\n          policy: this.templateSrv.replace(query.policy ?? '', scopedVars, 'regex'),\n        };\n\n        if (query.rawQuery) {\n          expandedQuery.query = this.templateSrv.replace(query.query ?? '', scopedVars, 'regex');\n        }\n\n        if (query.tags) {\n          expandedQuery.tags = query.tags.map((tag) => {\n            return {\n              ...tag,\n              value: this.templateSrv.replace(tag.value, undefined, 'regex'),\n            };\n          });\n        }\n        return expandedQuery;\n      });\n    }\n    return expandedQueries;\n  }\n\n  async metricFindQuery(query: string, options?: any): Promise<MetricFindValue[]> {\n    if (this.isFlux) {\n      const target: InfluxQuery = {\n        refId: 'metricFindQuery',\n        query,\n      };\n      return super\n        .query({\n          ...options, // includes 'range'\n          targets: [target],\n        } as DataQueryRequest)\n        .toPromise()\n        .then((rsp) => {\n          if (rsp.data?.length) {\n            return frameToMetricFindValue(rsp.data[0]);\n          }\n          return [];\n        });\n    }\n\n    const interpolated = this.templateSrv.replace(query, undefined, 'regex');\n\n    return this._seriesQuery(interpolated, options)\n      .toPromise()\n      .then((resp) => {\n        return this.responseParser.parse(query, resp);\n      });\n  }\n\n  getTagKeys(options: any = {}) {\n    const queryBuilder = new InfluxQueryBuilder({ measurement: options.measurement || '', tags: [] }, this.database);\n    const query = queryBuilder.buildExploreQuery('TAG_KEYS');\n    return this.metricFindQuery(query, options);\n  }\n\n  getTagValues(options: any = {}) {\n    const queryBuilder = new InfluxQueryBuilder({ measurement: options.measurement || '', tags: [] }, this.database);\n    const query = queryBuilder.buildExploreQuery('TAG_VALUES', options.key);\n    return this.metricFindQuery(query, options);\n  }\n\n  _seriesQuery(query: string, options?: any) {\n    if (!query) {\n      return of({ results: [] });\n    }\n\n    if (options && options.range) {\n      const timeFilter = this.getTimeFilter({ rangeRaw: options.range, timezone: options.timezone });\n      query = query.replace('$timeFilter', timeFilter);\n    }\n\n    return this._influxRequest(this.httpMode, '/query', { q: query, epoch: 'ms' }, options);\n  }\n\n  serializeParams(params: any) {\n    if (!params) {\n      return '';\n    }\n\n    return reduce(\n      params,\n      (memo, value, key) => {\n        if (value === null || value === undefined) {\n          return memo;\n        }\n        memo.push(encodeURIComponent(key) + '=' + encodeURIComponent(value));\n        return memo;\n      },\n      [] as string[]\n    ).join('&');\n  }\n\n  testDatasource() {\n    if (this.isFlux) {\n      // TODO: eventually use the real /health endpoint\n      const request: DataQueryRequest<InfluxQuery> = {\n        targets: [{ refId: 'test', query: 'buckets()' }],\n        requestId: `${this.id}-health-${uuidv4()}`,\n        dashboardId: 0,\n        panelId: 0,\n        interval: '1m',\n        intervalMs: 60000,\n        maxDataPoints: 423,\n        range: {\n          from: dateTime(1000),\n          to: dateTime(2000),\n        },\n      } as DataQueryRequest<InfluxQuery>;\n\n      return super\n        .query(request)\n        .toPromise()\n        .then((res: DataQueryResponse) => {\n          if (!res || !res.data || res.state !== LoadingState.Done) {\n            console.error('InfluxDB Error', res);\n            return { status: 'error', message: 'Error reading InfluxDB' };\n          }\n          const first = res.data[0];\n          if (first && first.length) {\n            return { status: 'success', message: `${first.length} buckets found` };\n          }\n          console.error('InfluxDB Error', res);\n          return { status: 'error', message: 'Error reading buckets' };\n        })\n        .catch((err: any) => {\n          console.error('InfluxDB Error', err);\n          return { status: 'error', message: err.message };\n        });\n    }\n\n    const queryBuilder = new InfluxQueryBuilder({ measurement: '', tags: [] }, this.database);\n    const query = queryBuilder.buildExploreQuery('RETENTION POLICIES');\n\n    return this._seriesQuery(query)\n      .toPromise()\n      .then((res: any) => {\n        const error = get(res, 'results[0].error');\n        if (error) {\n          return { status: 'error', message: error };\n        }\n        return { status: 'success', message: 'Data source is working' };\n      })\n      .catch((err: any) => {\n        return { status: 'error', message: err.message };\n      });\n  }\n\n  _influxRequest(method: string, url: string, data: any, options?: any) {\n    const currentUrl = this.urls.shift()!;\n    this.urls.push(currentUrl);\n\n    const params: any = {};\n\n    if (this.username) {\n      params.u = this.username;\n      params.p = this.password;\n    }\n\n    if (options && options.database) {\n      params.db = options.database;\n    } else if (this.database) {\n      params.db = this.database;\n    }\n\n    const { q } = data;\n\n    if (method === 'POST' && has(data, 'q')) {\n      // verb is POST and 'q' param is defined\n      extend(params, omit(data, ['q']));\n      data = this.serializeParams(pick(data, ['q']));\n    } else if (method === 'GET' || method === 'POST') {\n      // verb is GET, or POST without 'q' param\n      extend(params, data);\n      data = null;\n    }\n\n    const req: any = {\n      method: method,\n      url: currentUrl + url,\n      params: params,\n      data: data,\n      precision: 'ms',\n      inspect: { type: 'influxdb' },\n      paramSerializer: this.serializeParams,\n    };\n\n    req.headers = req.headers || {};\n    if (this.basicAuth || this.withCredentials) {\n      req.withCredentials = true;\n    }\n    if (this.basicAuth) {\n      req.headers.Authorization = this.basicAuth;\n    }\n\n    if (method === 'POST') {\n      req.headers['Content-type'] = 'application/x-www-form-urlencoded';\n    }\n\n    return getBackendSrv()\n      .fetch(req)\n      .pipe(\n        map((result: any) => {\n          const { data } = result;\n          if (data) {\n            data.executedQueryString = q;\n            if (data.results) {\n              const errors = result.data.results.filter((elem: any) => elem.error);\n\n              if (errors.length > 0) {\n                throw {\n                  message: 'InfluxDB Error: ' + errors[0].error,\n                  data,\n                };\n              }\n            }\n          }\n          return data;\n        }),\n        catchError((err) => {\n          if (err.cancelled) {\n            return of(err);\n          }\n\n          return throwError(this.handleErrors(err));\n        })\n      );\n  }\n\n  handleErrors(err: any) {\n    const error: DataQueryError = {\n      message:\n        (err && err.status) ||\n        (err && err.message) ||\n        'Unknown error during query transaction. Please check JS console logs.',\n    };\n\n    if ((Number.isInteger(err.status) && err.status !== 0) || err.status >= 300) {\n      if (err.data && err.data.error) {\n        error.message = 'InfluxDB Error: ' + err.data.error;\n        error.data = err.data;\n        // @ts-ignore\n        error.config = err.config;\n      } else {\n        error.message = 'Network Error: ' + err.statusText + '(' + err.status + ')';\n        error.data = err.data;\n        // @ts-ignore\n        error.config = err.config;\n      }\n    }\n\n    return error;\n  }\n\n  getTimeFilter(options: any) {\n    const from = this.getInfluxTime(options.rangeRaw.from, false, options.timezone);\n    const until = this.getInfluxTime(options.rangeRaw.to, true, options.timezone);\n\n    return 'time >= ' + from + ' and time <= ' + until;\n  }\n\n  getInfluxTime(date: any, roundUp: any, timezone: any) {\n    if (isString(date)) {\n      if (date === 'now') {\n        return 'now()';\n      }\n\n      const parts = /^now-(\\d+)([dhms])$/.exec(date);\n      if (parts) {\n        const amount = parseInt(parts[1], 10);\n        const unit = parts[2];\n        return 'now() - ' + amount + unit;\n      }\n      date = dateMath.parse(date, roundUp, timezone);\n    }\n\n    return date.valueOf() + 'ms';\n  }\n}\n","import { useState, useEffect } from 'react';\nimport { usePrevious } from 'react-use';\n\nexport function useShadowedState<T>(outsideVal: T): [T, (newVal: T) => void] {\n  const [currentVal, setCurrentVal] = useState(outsideVal);\n  const prevOutsideVal = usePrevious(outsideVal);\n\n  useEffect(() => {\n    const isOutsideValChanged = prevOutsideVal !== outsideVal;\n    // if the value changes from the outside, we accept it into the state\n    // (we only set it if it is different from the current value)\n    if (isOutsideValChanged && currentVal !== outsideVal) {\n      setCurrentVal(outsideVal);\n    }\n  }, [outsideVal, currentVal, prevOutsideVal]);\n\n  return [currentVal, setCurrentVal];\n}\n","import { useRef } from 'react';\nimport { uniqueId } from 'lodash';\n\nexport function useUniqueId(): string {\n  // we need to lazy-init this ref.\n  // otherwise we would call `uniqueId`\n  // on every render. unfortunately\n  // useRef does not have lazy-init builtin,\n  // like useState does. we do it manually.\n  const idRefLazy = useRef<string | null>(null);\n\n  if (idRefLazy.current == null) {\n    idRefLazy.current = uniqueId();\n  }\n\n  return idRefLazy.current;\n}\n","import { SelectableValue } from '@grafana/data';\nimport { ResultFormat } from '../types';\n\nexport const RESULT_FORMATS: Array<SelectableValue<ResultFormat>> = [\n  { label: 'Time series', value: 'time_series' },\n  { label: 'Table', value: 'table' },\n  { label: 'Logs', value: 'logs' },\n];\n\nexport const DEFAULT_RESULT_FORMAT: ResultFormat = 'time_series';\n","import React from 'react';\nimport { TextArea, InlineFormLabel, Input, Select, HorizontalGroup } from '@grafana/ui';\nimport { InfluxQuery } from '../types';\nimport { useShadowedState } from './useShadowedState';\nimport { useUniqueId } from './useUniqueId';\nimport { RESULT_FORMATS, DEFAULT_RESULT_FORMAT } from './constants';\n\ntype Props = {\n  query: InfluxQuery;\n  onChange: (query: InfluxQuery) => void;\n  onRunQuery: () => void;\n};\n\n// we handle 3 fields: \"query\", \"alias\", \"resultFormat\"\n// \"resultFormat\" changes are applied immediately\n// \"query\" and \"alias\" changes only happen on onblur\nexport const RawInfluxQLEditor = ({ query, onChange, onRunQuery }: Props): JSX.Element => {\n  const [currentQuery, setCurrentQuery] = useShadowedState(query.query);\n  const [currentAlias, setCurrentAlias] = useShadowedState(query.alias);\n  const aliasElementId = useUniqueId();\n  const selectElementId = useUniqueId();\n\n  const applyDelayedChangesAndRunQuery = () => {\n    onChange({\n      ...query,\n      query: currentQuery,\n      alias: currentAlias,\n    });\n    onRunQuery();\n  };\n\n  return (\n    <div>\n      <TextArea\n        aria-label=\"query\"\n        rows={3}\n        spellCheck={false}\n        placeholder=\"InfluxDB Query\"\n        onBlur={applyDelayedChangesAndRunQuery}\n        onChange={(e) => {\n          setCurrentQuery(e.currentTarget.value);\n        }}\n        value={currentQuery ?? ''}\n      />\n      <HorizontalGroup>\n        <InlineFormLabel htmlFor={selectElementId}>Format as</InlineFormLabel>\n        <Select\n          menuShouldPortal\n          inputId={selectElementId}\n          onChange={(v) => {\n            onChange({ ...query, resultFormat: v.value });\n            onRunQuery();\n          }}\n          value={query.resultFormat ?? DEFAULT_RESULT_FORMAT}\n          options={RESULT_FORMATS}\n        />\n        <InlineFormLabel htmlFor={aliasElementId}>Alias by</InlineFormLabel>\n        <Input\n          id={aliasElementId}\n          type=\"text\"\n          spellCheck={false}\n          placeholder=\"Naming pattern\"\n          onBlur={applyDelayedChangesAndRunQuery}\n          onChange={(e) => {\n            setCurrentAlias(e.currentTarget.value);\n          }}\n          value={currentAlias ?? ''}\n        />\n      </HorizontalGroup>\n    </div>\n  );\n};\n","import React, { useState, useEffect } from 'react';\nimport debouncePromise from 'debounce-promise';\nimport { cx, css } from '@emotion/css';\nimport { SelectableValue } from '@grafana/data';\nimport { useAsyncFn } from 'react-use';\nimport { InlineLabel, Select, AsyncSelect, Input } from '@grafana/ui';\nimport { useShadowedState } from '../useShadowedState';\n\n// this file is a simpler version of `grafana-ui / SegmentAsync.tsx`\n// with some changes:\n// 1. click-outside does not select the value. i think it's better to be explicit here.\n// 2. we set a min-width on the select-element to handle cases where the `value`\n//    is very short, like \"x\", and then you click on it and the select opens,\n//    and it tries to be as short as \"x\" and it does not work well.\n\n// NOTE: maybe these changes could be migrated into the SegmentAsync later\n\ntype SelVal = SelectableValue<string>;\n\n// when allowCustomValue is true, there is no way to enforce the selectableValue\n// enum-type, so i just go with `string`\n\ntype LoadOptions = (filter: string) => Promise<SelVal[]>;\n\ntype Props = {\n  value: string;\n  buttonClassName?: string;\n  loadOptions?: LoadOptions;\n  // if filterByLoadOptions is false,\n  // loadOptions is only executed once,\n  // when the select-box opens,\n  // and as you write, the list gets filtered\n  // by the select-box.\n  // if filterByLoadOptions is true,\n  // as you write the loadOptions is executed again and again,\n  // and it is relied on to filter the results.\n  filterByLoadOptions?: boolean;\n  onChange: (v: SelVal) => void;\n  allowCustomValue?: boolean;\n};\n\nconst selectClass = css({\n  minWidth: '160px',\n});\n\ntype SelProps = {\n  loadOptions: LoadOptions;\n  filterByLoadOptions?: boolean;\n  onClose: () => void;\n  onChange: (v: SelVal) => void;\n  allowCustomValue?: boolean;\n};\n\ntype SelReloadProps = {\n  loadOptions: (filter: string) => Promise<SelVal[]>;\n  onClose: () => void;\n  onChange: (v: SelVal) => void;\n  allowCustomValue?: boolean;\n};\n\n// when a custom value is written into a select-box,\n// by default the new value is prefixed with \"Create:\",\n// and that sounds confusing because here we do not create\n// anything. we change this to just be the entered string.\nconst formatCreateLabel = (v: string) => v;\n\nconst SelReload = ({ loadOptions, allowCustomValue, onChange, onClose }: SelReloadProps): JSX.Element => {\n  // here we rely on the fact that writing text into the <AsyncSelect/>\n  // does not cause a re-render of the current react component.\n  // this way there is only a single render-call,\n  // so there is only a single `debouncedLoadOptions`.\n  // if we want ot make this \"re-render safe,\n  // we will have to put the debounced call into an useRef,\n  // and probably have an useEffect\n  const debouncedLoadOptions = debouncePromise(loadOptions, 1000, { leading: true });\n  return (\n    <div className={selectClass}>\n      <AsyncSelect\n        menuShouldPortal\n        formatCreateLabel={formatCreateLabel}\n        defaultOptions\n        autoFocus\n        isOpen\n        onCloseMenu={onClose}\n        allowCustomValue={allowCustomValue}\n        loadOptions={debouncedLoadOptions}\n        onChange={onChange}\n      />\n    </div>\n  );\n};\n\ntype SelSingleLoadProps = {\n  loadOptions: (filter: string) => Promise<SelVal[]>;\n  onClose: () => void;\n  onChange: (v: SelVal) => void;\n  allowCustomValue?: boolean;\n};\n\nconst SelSingleLoad = ({ loadOptions, allowCustomValue, onChange, onClose }: SelSingleLoadProps): JSX.Element => {\n  const [loadState, doLoad] = useAsyncFn(loadOptions, [loadOptions]);\n\n  useEffect(() => {\n    doLoad();\n  }, [doLoad, loadOptions]);\n\n  return (\n    <div className={selectClass}>\n      <Select\n        menuShouldPortal\n        isLoading={loadState.loading}\n        formatCreateLabel={formatCreateLabel}\n        autoFocus\n        isOpen\n        onCloseMenu={onClose}\n        allowCustomValue={allowCustomValue}\n        options={loadState.value ?? []}\n        onChange={onChange}\n      />\n    </div>\n  );\n};\n\nconst Sel = ({ loadOptions, filterByLoadOptions, allowCustomValue, onChange, onClose }: SelProps): JSX.Element => {\n  // unfortunately <Segment/> and <SegmentAsync/> have somewhat different behavior,\n  // so the simplest approach was to just create two separate wrapper-components\n  return filterByLoadOptions ? (\n    <SelReload loadOptions={loadOptions} allowCustomValue={allowCustomValue} onChange={onChange} onClose={onClose} />\n  ) : (\n    <SelSingleLoad\n      loadOptions={loadOptions}\n      allowCustomValue={allowCustomValue}\n      onChange={onChange}\n      onClose={onClose}\n    />\n  );\n};\n\ntype InpProps = {\n  initialValue: string;\n  onChange: (newVal: string) => void;\n  onClose: () => void;\n};\n\nconst Inp = ({ initialValue, onChange, onClose }: InpProps): JSX.Element => {\n  const [currentValue, setCurrentValue] = useShadowedState(initialValue);\n\n  return (\n    <Input\n      autoFocus\n      type=\"text\"\n      spellCheck={false}\n      onBlur={onClose}\n      onKeyDown={(e) => {\n        if (e.key === 'Enter') {\n          onChange(currentValue);\n        }\n      }}\n      onChange={(e) => {\n        setCurrentValue(e.currentTarget.value);\n      }}\n      value={currentValue}\n    />\n  );\n};\n\nconst defaultButtonClass = css({\n  width: 'auto',\n  cursor: 'pointer',\n});\n\nexport const Seg = ({\n  value,\n  buttonClassName,\n  loadOptions,\n  filterByLoadOptions,\n  allowCustomValue,\n  onChange,\n}: Props): JSX.Element => {\n  const [isOpen, setOpen] = useState(false);\n  if (!isOpen) {\n    const className = cx(defaultButtonClass, buttonClassName);\n    return (\n      <InlineLabel\n        as=\"button\"\n        className={className}\n        onClick={() => {\n          setOpen(true);\n        }}\n      >\n        {value}\n      </InlineLabel>\n    );\n  } else {\n    if (loadOptions !== undefined) {\n      return (\n        <Sel\n          loadOptions={loadOptions}\n          filterByLoadOptions={filterByLoadOptions ?? false}\n          allowCustomValue={allowCustomValue}\n          onChange={(v) => {\n            setOpen(false);\n            onChange(v);\n          }}\n          onClose={() => {\n            setOpen(false);\n          }}\n        />\n      );\n    } else {\n      return (\n        <Inp\n          initialValue={value}\n          onClose={() => {\n            setOpen(false);\n          }}\n          onChange={(v) => {\n            setOpen(false);\n            onChange({ value: v, label: v });\n          }}\n        />\n      );\n    }\n  }\n};\n","import { SelectableValue } from '@grafana/data';\n\nexport function toSelectableValue<T extends string>(t: T): SelectableValue<T> {\n  return { label: t, value: t };\n}\n","import React from 'react';\nimport { Seg } from './Seg';\nimport { toSelectableValue } from './toSelectableValue';\n\nconst DEFAULT_POLICY = 'default';\n\n// we use the value \"default\" as a magic-value, it means\n// we use the default retention-policy.\n// unfortunately, IF the user has a retention-policy named \"default\",\n// and it is not the default-retention-policy in influxdb,\n// bad things will happen.\n// https://github.com/grafana/grafana/issues/4347 :-(\n// FIXME: we could maybe at least detect here that problem-is-happening,\n// and show an error message or something.\n// unfortunately, currently the ResponseParser does not return the\n// is-default info for the retention-policies, so that should change first.\n\ntype Props = {\n  onChange: (policy: string | undefined, measurement: string | undefined) => void;\n  policy: string | undefined;\n  measurement: string | undefined;\n  getPolicyOptions: () => Promise<string[]>;\n  getMeasurementOptions: (filter: string) => Promise<string[]>;\n};\n\nexport const FromSection = ({\n  policy,\n  measurement,\n  onChange,\n  getPolicyOptions,\n  getMeasurementOptions,\n}: Props): JSX.Element => {\n  const handlePolicyLoadOptions = async () => {\n    const allPolicies = await getPolicyOptions();\n    // if `default` does not exist in the list of policies, we add it\n    const allPoliciesWithDefault = allPolicies.some((p) => p === 'default')\n      ? allPolicies\n      : [DEFAULT_POLICY, ...allPolicies];\n\n    return allPoliciesWithDefault.map(toSelectableValue);\n  };\n\n  const handleMeasurementLoadOptions = async (filter: string) => {\n    const allMeasurements = await getMeasurementOptions(filter);\n    return allMeasurements.map(toSelectableValue);\n  };\n\n  return (\n    <>\n      <Seg\n        allowCustomValue\n        value={policy ?? 'using default policy'}\n        loadOptions={handlePolicyLoadOptions}\n        onChange={(v) => {\n          onChange(v.value, measurement);\n        }}\n      />\n      <Seg\n        allowCustomValue\n        value={measurement ?? 'select measurement'}\n        loadOptions={handleMeasurementLoadOptions}\n        filterByLoadOptions\n        onChange={(v) => {\n          onChange(policy, v.value);\n        }}\n      />\n    </>\n  );\n};\n","import { InfluxQueryTag } from '../../types';\n\nfunction isRegex(text: string): boolean {\n  return /^\\/.*\\/$/.test(text);\n}\n\n// FIXME: sync these to the query-string-generation-code\n// probably it's in influx_query_model.ts\nexport function getOperator(tag: InfluxQueryTag): string {\n  return tag.operator ?? (isRegex(tag.value) ? '=~' : '=');\n}\n\n// FIXME: sync these to the query-string-generation-code\n// probably it's in influx_query_model.ts\nexport function getCondition(tag: InfluxQueryTag, isFirst: boolean): string | undefined {\n  return isFirst ? undefined : tag.condition ?? 'AND';\n}\n\nexport function adjustOperatorIfNeeded(currentOperator: string, newTagValue: string): string {\n  const isCurrentOperatorRegex = currentOperator === '=~' || currentOperator === '!~';\n  const isNewTagValueRegex = isRegex(newTagValue);\n\n  if (isNewTagValueRegex) {\n    return isCurrentOperatorRegex ? currentOperator : '=~';\n  } else {\n    return isCurrentOperatorRegex ? '=' : currentOperator;\n  }\n}\n","export function unwrap<T>(value: T | null | undefined): T {\n  if (value == null) {\n    throw new Error('value must not be nullish');\n  }\n  return value;\n}\n","import React from 'react';\nimport { SelectableValue } from '@grafana/data';\nimport { Seg } from './Seg';\nimport { unwrap } from './unwrap';\n\ntype Props = {\n  loadOptions: () => Promise<SelectableValue[]>;\n  allowCustomValue?: boolean;\n  onAdd: (v: string) => void;\n};\n\nexport const AddButton = ({ loadOptions, allowCustomValue, onAdd }: Props): JSX.Element => {\n  return (\n    <Seg\n      value=\"+\"\n      loadOptions={loadOptions}\n      allowCustomValue={allowCustomValue}\n      onChange={(v) => {\n        onAdd(unwrap(v.value));\n      }}\n    />\n  );\n};\n","import React from 'react';\nimport { SelectableValue } from '@grafana/data';\nimport { Seg } from './Seg';\nimport { InfluxQueryTag } from '../../types';\nimport { toSelectableValue } from './toSelectableValue';\nimport { adjustOperatorIfNeeded, getCondition, getOperator } from './tagUtils';\nimport { AddButton } from './AddButton';\n\ntype KnownOperator = '=' | '!=' | '<>' | '<' | '>' | '=~' | '!~';\nconst knownOperators: KnownOperator[] = ['=', '!=', '<>', '<', '>', '=~', '!~'];\n\ntype KnownCondition = 'AND' | 'OR';\nconst knownConditions: KnownCondition[] = ['AND', 'OR'];\n\nconst operatorOptions: Array<SelectableValue<KnownOperator>> = knownOperators.map(toSelectableValue);\nconst condititonOptions: Array<SelectableValue<KnownCondition>> = knownConditions.map(toSelectableValue);\n\ntype Props = {\n  tags: InfluxQueryTag[];\n  onChange: (tags: InfluxQueryTag[]) => void;\n  getTagKeyOptions: () => Promise<string[]>;\n  getTagValueOptions: (key: string) => Promise<string[]>;\n};\n\ntype TagProps = {\n  tag: InfluxQueryTag;\n  isFirst: boolean;\n  onRemove: () => void;\n  onChange: (tag: InfluxQueryTag) => void;\n  getTagKeyOptions: () => Promise<string[]>;\n  getTagValueOptions: (key: string) => Promise<string[]>;\n};\n\nconst loadConditionOptions = () => Promise.resolve(condititonOptions);\n\nconst loadOperatorOptions = () => Promise.resolve(operatorOptions);\n\nconst Tag = ({ tag, isFirst, onRemove, onChange, getTagKeyOptions, getTagValueOptions }: TagProps): JSX.Element => {\n  const operator = getOperator(tag);\n  const condition = getCondition(tag, isFirst);\n\n  const getTagKeySegmentOptions = () => {\n    return getTagKeyOptions().then((tags) => [\n      { label: '-- remove filter --', value: undefined },\n      ...tags.map(toSelectableValue),\n    ]);\n  };\n\n  const getTagValueSegmentOptions = () => {\n    return getTagValueOptions(tag.key).then((tags) => tags.map(toSelectableValue));\n  };\n\n  return (\n    <div className=\"gf-form\">\n      {condition != null && (\n        <Seg\n          value={condition}\n          loadOptions={loadConditionOptions}\n          onChange={(v) => {\n            onChange({ ...tag, condition: v.value });\n          }}\n        />\n      )}\n      <Seg\n        allowCustomValue\n        value={tag.key}\n        loadOptions={getTagKeySegmentOptions}\n        onChange={(v) => {\n          const { value } = v;\n          if (value === undefined) {\n            onRemove();\n          } else {\n            onChange({ ...tag, key: value ?? '' });\n          }\n        }}\n      />\n      <Seg\n        value={operator}\n        loadOptions={loadOperatorOptions}\n        onChange={(op) => {\n          onChange({ ...tag, operator: op.value });\n        }}\n      />\n      <Seg\n        allowCustomValue\n        value={tag.value}\n        loadOptions={getTagValueSegmentOptions}\n        onChange={(v) => {\n          const value = v.value ?? '';\n          onChange({ ...tag, value, operator: adjustOperatorIfNeeded(operator, value) });\n        }}\n      />\n    </div>\n  );\n};\n\nexport const TagsSection = ({ tags, onChange, getTagKeyOptions, getTagValueOptions }: Props): JSX.Element => {\n  const onTagChange = (newTag: InfluxQueryTag, index: number) => {\n    const newTags = tags.map((tag, i) => {\n      return index === i ? newTag : tag;\n    });\n    onChange(newTags);\n  };\n\n  const onTagRemove = (index: number) => {\n    const newTags = tags.filter((t, i) => i !== index);\n    onChange(newTags);\n  };\n\n  const getTagKeySegmentOptions = () => {\n    return getTagKeyOptions().then((tags) => tags.map(toSelectableValue));\n  };\n\n  const addNewTag = (tagKey: string, isFirst: boolean) => {\n    const minimalTag: InfluxQueryTag = {\n      key: tagKey,\n      value: 'select tag value',\n    };\n\n    const newTag: InfluxQueryTag = {\n      key: minimalTag.key,\n      value: minimalTag.value,\n      operator: getOperator(minimalTag),\n      condition: getCondition(minimalTag, isFirst),\n    };\n\n    onChange([...tags, newTag]);\n  };\n\n  return (\n    <>\n      {tags.map((t, i) => (\n        <Tag\n          tag={t}\n          isFirst={i === 0}\n          key={i}\n          onChange={(newT) => {\n            onTagChange(newT, i);\n          }}\n          onRemove={() => {\n            onTagRemove(i);\n          }}\n          getTagKeyOptions={getTagKeyOptions}\n          getTagValueOptions={getTagValueOptions}\n        />\n      ))}\n      <AddButton\n        allowCustomValue\n        loadOptions={getTagKeySegmentOptions}\n        onAdd={(v) => {\n          addNewTag(v, tags.length === 0);\n        }}\n      />\n    </>\n  );\n};\n","import React, { useMemo } from 'react';\nimport { cx, css } from '@emotion/css';\nimport { MenuItem, WithContextMenu, MenuGroup, useTheme2 } from '@grafana/ui';\nimport { SelectableValue, GrafanaTheme2 } from '@grafana/data';\nimport { Seg } from './Seg';\nimport { unwrap } from './unwrap';\nimport { toSelectableValue } from './toSelectableValue';\nimport { AddButton } from './AddButton';\n\nexport type PartParams = Array<{\n  value: string;\n  options: (() => Promise<string[]>) | null;\n}>;\n\ntype Props = {\n  parts: Array<{\n    name: string;\n    params: PartParams;\n  }>;\n  getNewPartOptions: () => Promise<SelectableValue[]>;\n  onChange: (partIndex: number, paramValues: string[]) => void;\n  onRemovePart: (index: number) => void;\n  onAddNewPart: (type: string) => void;\n};\n\nconst renderRemovableNameMenuItems = (onClick: () => void) => {\n  return (\n    <MenuGroup label=\"\" ariaLabel=\"\">\n      <MenuItem label=\"remove\" ariaLabel=\"remove\" onClick={onClick} />\n    </MenuGroup>\n  );\n};\n\nconst noRightMarginPaddingClass = css({\n  paddingRight: '0',\n  marginRight: '0',\n});\n\nconst RemovableName = ({ name, onRemove }: { name: string; onRemove: () => void }) => {\n  return (\n    <WithContextMenu renderMenuItems={() => renderRemovableNameMenuItems(onRemove)}>\n      {({ openMenu }) => (\n        <button className={cx('gf-form-label', noRightMarginPaddingClass)} onClick={openMenu}>\n          {name}\n        </button>\n      )}\n    </WithContextMenu>\n  );\n};\n\ntype PartProps = {\n  name: string;\n  params: PartParams;\n  onRemove: () => void;\n  onChange: (paramValues: string[]) => void;\n};\n\nconst noHorizMarginPaddingClass = css({\n  paddingLeft: '0',\n  paddingRight: '0',\n  marginLeft: '0',\n  marginRight: '0',\n});\n\nconst getPartClass = (theme: GrafanaTheme2) => {\n  return cx(\n    'gf-form-label',\n    css({\n      paddingLeft: '0',\n      // gf-form-label class makes certain css attributes incorrect\n      // for the selectbox-dropdown, so we have to \"reset\" them back\n      lineHeight: theme.typography.body.lineHeight,\n      fontSize: theme.typography.body.fontSize,\n    })\n  );\n};\n\nconst Part = ({ name, params, onChange, onRemove }: PartProps): JSX.Element => {\n  const theme = useTheme2();\n  const partClass = useMemo(() => getPartClass(theme), [theme]);\n\n  const onParamChange = (par: string, i: number) => {\n    const newParams = params.map((p) => p.value);\n    newParams[i] = par;\n    onChange(newParams);\n  };\n  return (\n    <div className={partClass}>\n      <RemovableName name={name} onRemove={onRemove} />(\n      {params.map((p, i) => {\n        const { value, options } = p;\n        const isLast = i === params.length - 1;\n        const loadOptions =\n          options !== null ? () => options().then((items) => items.map(toSelectableValue)) : undefined;\n        return (\n          <React.Fragment key={i}>\n            <Seg\n              allowCustomValue\n              value={value}\n              buttonClassName={noHorizMarginPaddingClass}\n              loadOptions={loadOptions}\n              onChange={(v) => {\n                onParamChange(unwrap(v.value), i);\n              }}\n            />\n            {!isLast && ','}\n          </React.Fragment>\n        );\n      })}\n      )\n    </div>\n  );\n};\n\nexport const PartListSection = ({\n  parts,\n  getNewPartOptions,\n  onAddNewPart,\n  onRemovePart,\n  onChange,\n}: Props): JSX.Element => {\n  return (\n    <>\n      {parts.map((part, index) => (\n        <Part\n          key={index}\n          name={part.name}\n          params={part.params}\n          onRemove={() => {\n            onRemovePart(index);\n          }}\n          onChange={(pars) => {\n            onChange(index, pars);\n          }}\n        />\n      ))}\n      <AddButton loadOptions={getNewPartOptions} onAdd={onAddNewPart} />\n    </>\n  );\n};\n","import { css } from '@emotion/css';\n\nexport const paddingRightClass = css({\n  paddingRight: '4px',\n});\n","import React from 'react';\nimport { cx } from '@emotion/css';\nimport { SelectableValue } from '@grafana/data';\nimport { unwrap } from './unwrap';\nimport { Select } from '@grafana/ui';\nimport { paddingRightClass } from './styles';\n\ntype Mode = 'ASC' | 'DESC';\n\nconst OPTIONS: Array<SelectableValue<Mode>> = [\n  { label: 'ascending', value: 'ASC' },\n  { label: 'descending', value: 'DESC' },\n];\n\nconst className = cx('width-9', paddingRightClass);\n\ntype Props = {\n  value: Mode;\n  onChange: (value: Mode) => void;\n};\n\nexport const OrderByTimeSection = ({ value, onChange }: Props): JSX.Element => {\n  return (\n    <>\n      <Select<Mode>\n        className={className}\n        onChange={(v) => {\n          onChange(unwrap(v.value));\n        }}\n        value={value}\n        options={OPTIONS}\n      />\n    </>\n  );\n};\n","import React from 'react';\nimport { cx } from '@emotion/css';\nimport { Input } from '@grafana/ui';\nimport { useShadowedState } from '../useShadowedState';\nimport { paddingRightClass } from './styles';\n\ntype Props = {\n  value: string | undefined;\n  onChange: (value: string | undefined) => void;\n  isWide?: boolean;\n  placeholder?: string;\n};\n\nexport const InputSection = ({ value, onChange, isWide, placeholder }: Props): JSX.Element => {\n  const [currentValue, setCurrentValue] = useShadowedState(value);\n\n  const onBlur = () => {\n    // we send empty-string as undefined\n    const newValue = currentValue === '' ? undefined : currentValue;\n    onChange(newValue);\n  };\n\n  return (\n    <>\n      <Input\n        placeholder={placeholder}\n        className={cx(isWide ?? false ? 'width-14' : 'width-8', paddingRightClass)}\n        type=\"text\"\n        spellCheck={false}\n        onBlur={onBlur}\n        onChange={(e) => {\n          setCurrentValue(e.currentTarget.value);\n        }}\n        value={currentValue ?? ''}\n      />\n    </>\n  );\n};\n","import { InfluxQueryTag } from './types';\nimport InfluxDatasource from './datasource';\nimport { InfluxQueryBuilder } from './query_builder';\n\nconst runExploreQuery = (\n  type: string,\n  withKey: string | undefined,\n  withMeasurementFilter: string | undefined,\n  target: { measurement: string | undefined; tags: InfluxQueryTag[]; policy: string | undefined },\n  datasource: InfluxDatasource\n): Promise<Array<{ text: string }>> => {\n  const builder = new InfluxQueryBuilder(target, datasource.database);\n  const q = builder.buildExploreQuery(type, withKey, withMeasurementFilter);\n  return datasource.metricFindQuery(q);\n};\n\nexport async function getAllPolicies(datasource: InfluxDatasource): Promise<string[]> {\n  const target = { tags: [], measurement: undefined, policy: undefined };\n  const data = await runExploreQuery('RETENTION POLICIES', undefined, undefined, target, datasource);\n  return data.map((item) => item.text);\n}\n\nexport async function getAllMeasurementsForTags(\n  measurementFilter: string | undefined,\n  tags: InfluxQueryTag[],\n  datasource: InfluxDatasource\n): Promise<string[]> {\n  const target = { tags, measurement: undefined, policy: undefined };\n  const data = await runExploreQuery('MEASUREMENTS', undefined, measurementFilter, target, datasource);\n  return data.map((item) => item.text);\n}\n\nexport async function getTagKeysForMeasurementAndTags(\n  measurement: string | undefined,\n  policy: string | undefined,\n  tags: InfluxQueryTag[],\n  datasource: InfluxDatasource\n): Promise<string[]> {\n  const target = { tags, measurement, policy };\n  const data = await runExploreQuery('TAG_KEYS', undefined, undefined, target, datasource);\n  return data.map((item) => item.text);\n}\n\nexport async function getTagValues(\n  tagKey: string,\n  measurement: string | undefined,\n  policy: string | undefined,\n  tags: InfluxQueryTag[],\n  datasource: InfluxDatasource\n): Promise<string[]> {\n  const target = { tags, measurement, policy };\n  const data = await runExploreQuery('TAG_VALUES', tagKey, undefined, target, datasource);\n  return data.map((item) => item.text);\n}\n\nexport async function getFieldKeysForMeasurement(\n  measurement: string,\n  policy: string | undefined,\n  datasource: InfluxDatasource\n): Promise<string[]> {\n  const target = { tags: [], measurement, policy };\n  const data = await runExploreQuery('FIELDS', undefined, undefined, target, datasource);\n  return data.map((item) => item.text);\n}\n","import { Select } from '@grafana/ui';\nimport { cx } from '@emotion/css';\nimport { ResultFormat } from '../../types';\nimport React from 'react';\nimport { unwrap } from './unwrap';\nimport { RESULT_FORMATS } from '../constants';\nimport { paddingRightClass } from './styles';\n\ntype Props = {\n  format: ResultFormat;\n  onChange: (newFormat: ResultFormat) => void;\n};\n\nconst className = cx('width-8', paddingRightClass);\n\nexport const FormatAsSection = ({ format, onChange }: Props): JSX.Element => {\n  return (\n    <Select<ResultFormat>\n      className={className}\n      onChange={(v) => {\n        onChange(unwrap(v.value));\n      }}\n      value={format}\n      options={RESULT_FORMATS}\n    />\n  );\n};\n","import React from 'react';\nimport { cx, css } from '@emotion/css';\n\ntype Props = {\n  name: string;\n  isInitial?: boolean;\n};\n\nconst uppercaseClass = css({\n  textTransform: 'uppercase',\n});\n\nexport const SectionLabel = ({ name, isInitial }: Props) => (\n  <label className={cx('gf-form-label query-keyword', { 'width-7': isInitial ?? false }, uppercaseClass)}>{name}</label>\n);\n","import React from 'react';\n\nexport const SectionFill = () => (\n  <div className=\"gf-form gf-form--grow\">\n    <label className=\"gf-form-label gf-form-label--grow\"></label>\n  </div>\n);\n","import { InfluxQuery, InfluxQueryPart } from '../../types';\nimport { SelectableValue } from '@grafana/data';\nimport { PartParams } from './PartListSection';\nimport InfluxQueryModel from '../../influx_query_model';\nimport { unwrap } from './unwrap';\nimport queryPart from '../../query_part';\nimport { toSelectableValue } from './toSelectableValue';\nimport { QueryPartDef } from '../../../../../core/components/query_part/query_part';\n\ntype Categories = Record<string, QueryPartDef[]>;\n\nexport function getNewSelectPartOptions(): SelectableValue[] {\n  const categories: Categories = queryPart.getCategories();\n  const options: SelectableValue[] = [];\n\n  const keys = Object.keys(categories);\n\n  keys.forEach((key) => {\n    const children: SelectableValue[] = categories[key].map((x) => toSelectableValue(x.type));\n\n    options.push({\n      label: key,\n      options: children,\n    });\n  });\n\n  return options;\n}\n\nexport async function getNewGroupByPartOptions(\n  query: InfluxQuery,\n  getTagKeys: () => Promise<string[]>\n): Promise<Array<SelectableValue<string>>> {\n  const tagKeys = await getTagKeys();\n  const queryCopy = { ...query }; // the query-model mutates the query\n  const model = new InfluxQueryModel(queryCopy);\n  const options: Array<SelectableValue<string>> = [];\n  if (!model.hasFill()) {\n    options.push(toSelectableValue('fill(null)'));\n  }\n  if (!model.hasGroupByTime()) {\n    options.push(toSelectableValue('time($interval)'));\n  }\n  tagKeys.forEach((key) => {\n    options.push(toSelectableValue(`tag(${key})`));\n  });\n  return options;\n}\n\ntype Part = {\n  name: string;\n  params: PartParams;\n};\n\nfunction getPartParams(part: InfluxQueryPart, dynamicParamOptions: Map<string, () => Promise<string[]>>): PartParams {\n  // NOTE: the way the system is constructed,\n  // there always can only be one possible dynamic-lookup\n  // field. in case of select it is the field,\n  // in case of group-by it is the tag\n  const def = queryPart.create(part).def;\n\n  // we switch the numbers to strings, it will work that way too,\n  // and it makes the code simpler\n  const paramValues = (part.params ?? []).map((p) => p.toString());\n\n  if (paramValues.length !== def.params.length) {\n    throw new Error('Invalid query-segment');\n  }\n\n  return paramValues.map((val, index) => {\n    const defParam = def.params[index];\n    if (defParam.dynamicLookup) {\n      return {\n        value: val,\n        options: unwrap(dynamicParamOptions.get(`${def.type}_${index}`)),\n      };\n    }\n\n    if (defParam.options != null) {\n      return {\n        value: val,\n        options: () => Promise.resolve(defParam.options),\n      };\n    }\n\n    return {\n      value: val,\n      options: null,\n    };\n  });\n}\n\nexport function makePartList(\n  queryParts: InfluxQueryPart[],\n  dynamicParamOptions: Map<string, () => Promise<string[]>>\n): Part[] {\n  return queryParts.map((qp) => {\n    return {\n      name: qp.type,\n      params: getPartParams(qp, dynamicParamOptions),\n    };\n  });\n}\n","import React, { useMemo } from 'react';\nimport { InfluxQuery, InfluxQueryTag } from '../../types';\nimport { getTemplateSrv } from '@grafana/runtime';\nimport InfluxDatasource from '../../datasource';\nimport { FromSection } from './FromSection';\nimport { TagsSection } from './TagsSection';\nimport { PartListSection } from './PartListSection';\nimport { OrderByTimeSection } from './OrderByTimeSection';\nimport { InputSection } from './InputSection';\nimport {\n  getAllMeasurementsForTags,\n  getAllPolicies,\n  getFieldKeysForMeasurement,\n  getTagKeysForMeasurementAndTags,\n  getTagValues,\n} from '../../influxQLMetadataQuery';\nimport {\n  normalizeQuery,\n  addNewSelectPart,\n  removeSelectPart,\n  addNewGroupByPart,\n  removeGroupByPart,\n  changeSelectPart,\n  changeGroupByPart,\n} from '../../queryUtils';\nimport { FormatAsSection } from './FormatAsSection';\nimport { SectionLabel } from './SectionLabel';\nimport { SectionFill } from './SectionFill';\nimport { DEFAULT_RESULT_FORMAT } from '../constants';\nimport { getNewSelectPartOptions, getNewGroupByPartOptions, makePartList } from './partListUtils';\n\ntype Props = {\n  query: InfluxQuery;\n  onChange: (query: InfluxQuery) => void;\n  onRunQuery: () => void;\n  datasource: InfluxDatasource;\n};\n\nfunction getTemplateVariableOptions() {\n  return (\n    getTemplateSrv()\n      .getVariables()\n      // we make them regex-params, i'm not 100% sure why.\n      // probably because this way multi-value variables work ok too.\n      .map((v) => `/^$${v.name}$/`)\n  );\n}\n\n// helper function to make it easy to call this from the widget-render-code\nfunction withTemplateVariableOptions(optionsPromise: Promise<string[]>): Promise<string[]> {\n  return optionsPromise.then((options) => [...getTemplateVariableOptions(), ...options]);\n}\n\nconst SectionWrap = ({ initialName, children }: { initialName: string; children: React.ReactNode }) => (\n  <div className=\"gf-form-inline\">\n    <SectionLabel name={initialName} isInitial={true} />\n    {children}\n    <SectionFill />\n  </div>\n);\n\nexport const Editor = (props: Props): JSX.Element => {\n  const query = normalizeQuery(props.query);\n  const { datasource } = props;\n  const { measurement, policy } = query;\n\n  const selectLists = useMemo(() => {\n    const dynamicSelectPartOptions = new Map([\n      [\n        'field_0',\n        () => {\n          return measurement !== undefined\n            ? getFieldKeysForMeasurement(measurement, policy, datasource)\n            : Promise.resolve([]);\n        },\n      ],\n    ]);\n    return (query.select ?? []).map((sel) => makePartList(sel, dynamicSelectPartOptions));\n  }, [measurement, policy, query.select, datasource]);\n\n  // the following function is not complicated enough to memoize, but it's result\n  // is used in both memoized and un-memoized parts, so we have no choice\n  const getTagKeys = useMemo(() => {\n    return () => getTagKeysForMeasurementAndTags(measurement, policy, query.tags ?? [], datasource);\n  }, [measurement, policy, query.tags, datasource]);\n\n  const groupByList = useMemo(() => {\n    const dynamicGroupByPartOptions = new Map([['tag_0', getTagKeys]]);\n\n    return makePartList(query.groupBy ?? [], dynamicGroupByPartOptions);\n  }, [getTagKeys, query.groupBy]);\n\n  const onAppliedChange = (newQuery: InfluxQuery) => {\n    props.onChange(newQuery);\n    props.onRunQuery();\n  };\n  const handleFromSectionChange = (p: string | undefined, m: string | undefined) => {\n    onAppliedChange({\n      ...query,\n      policy: p,\n      measurement: m,\n    });\n  };\n\n  const handleTagsSectionChange = (tags: InfluxQueryTag[]) => {\n    // we set empty-arrays to undefined\n    onAppliedChange({\n      ...query,\n      tags: tags.length === 0 ? undefined : tags,\n    });\n  };\n\n  return (\n    <div>\n      <SectionWrap initialName=\"from\">\n        <FromSection\n          policy={policy}\n          measurement={measurement}\n          getPolicyOptions={() => getAllPolicies(datasource)}\n          getMeasurementOptions={(filter) =>\n            withTemplateVariableOptions(\n              getAllMeasurementsForTags(filter === '' ? undefined : filter, query.tags ?? [], datasource)\n            )\n          }\n          onChange={handleFromSectionChange}\n        />\n        <SectionLabel name=\"where\" />\n        <TagsSection\n          tags={query.tags ?? []}\n          onChange={handleTagsSectionChange}\n          getTagKeyOptions={getTagKeys}\n          getTagValueOptions={(key: string) =>\n            withTemplateVariableOptions(getTagValues(key, measurement, policy, query.tags ?? [], datasource))\n          }\n        />\n      </SectionWrap>\n      {selectLists.map((sel, index) => (\n        <SectionWrap key={index} initialName={index === 0 ? 'select' : ''}>\n          <PartListSection\n            parts={sel}\n            getNewPartOptions={() => Promise.resolve(getNewSelectPartOptions())}\n            onChange={(partIndex, newParams) => {\n              const newQuery = changeSelectPart(query, index, partIndex, newParams);\n              onAppliedChange(newQuery);\n            }}\n            onAddNewPart={(type) => {\n              onAppliedChange(addNewSelectPart(query, type, index));\n            }}\n            onRemovePart={(partIndex) => {\n              onAppliedChange(removeSelectPart(query, partIndex, index));\n            }}\n          />\n        </SectionWrap>\n      ))}\n      <SectionWrap initialName=\"group by\">\n        <PartListSection\n          parts={groupByList}\n          getNewPartOptions={() => getNewGroupByPartOptions(query, getTagKeys)}\n          onChange={(partIndex, newParams) => {\n            const newQuery = changeGroupByPart(query, partIndex, newParams);\n            onAppliedChange(newQuery);\n          }}\n          onAddNewPart={(type) => {\n            onAppliedChange(addNewGroupByPart(query, type));\n          }}\n          onRemovePart={(partIndex) => {\n            onAppliedChange(removeGroupByPart(query, partIndex));\n          }}\n        />\n      </SectionWrap>\n      <SectionWrap initialName=\"timezone\">\n        <InputSection\n          placeholder=\"(optional)\"\n          value={query.tz}\n          onChange={(tz) => {\n            onAppliedChange({ ...query, tz });\n          }}\n        />\n        <SectionLabel name=\"order by time\" />\n        <OrderByTimeSection\n          value={query.orderByTime === 'DESC' ? 'DESC' : 'ASC' /* FIXME: make this shared with influx_query_model */}\n          onChange={(v) => {\n            onAppliedChange({ ...query, orderByTime: v });\n          }}\n        />\n      </SectionWrap>\n      {/* query.fill is ignored in the query-editor, and it is deleted whenever\n          query-editor changes. the influx_query_model still handles it, but the new\n          approach seem to be to handle \"fill\" inside query.groupBy. so, if you\n          have a panel where in the json you have query.fill, it will be appled,\n          as long as you do not edit that query. */}\n      <SectionWrap initialName=\"limit\">\n        <InputSection\n          placeholder=\"(optional)\"\n          value={query.limit?.toString()}\n          onChange={(limit) => {\n            onAppliedChange({ ...query, limit });\n          }}\n        />\n        <SectionLabel name=\"slimit\" />\n        <InputSection\n          placeholder=\"(optional)\"\n          value={query.slimit?.toString()}\n          onChange={(slimit) => {\n            onAppliedChange({ ...query, slimit });\n          }}\n        />\n      </SectionWrap>\n      <SectionWrap initialName=\"format as\">\n        <FormatAsSection\n          format={query.resultFormat ?? DEFAULT_RESULT_FORMAT}\n          onChange={(format) => {\n            onAppliedChange({ ...query, resultFormat: format });\n          }}\n        />\n        {query.resultFormat !== 'table' && (\n          <>\n            <SectionLabel name=\"alias\" />\n            <InputSection\n              isWide\n              placeholder=\"Naming pattern\"\n              value={query.alias}\n              onChange={(alias) => {\n                onAppliedChange({ ...query, alias });\n              }}\n            />\n          </>\n        )}\n      </SectionWrap>\n    </div>\n  );\n};\n","import React, { useEffect, useState } from 'react';\nimport { Button, ConfirmModal } from '@grafana/ui';\n\ntype Props = {\n  isRaw: boolean;\n  onChange: (newIsRaw: boolean) => void;\n};\n\nexport const QueryEditorModeSwitcher = ({ isRaw, onChange }: Props): JSX.Element => {\n  const [isModalOpen, setModalOpen] = useState(false);\n\n  useEffect(() => {\n    // if the isRaw changes, we hide the modal\n    setModalOpen(false);\n  }, [isRaw]);\n\n  if (isRaw) {\n    return (\n      <>\n        <Button\n          icon=\"pen\"\n          variant=\"secondary\"\n          type=\"button\"\n          onClick={() => {\n            // we show the are-you-sure modal\n            setModalOpen(true);\n          }}\n        ></Button>\n        <ConfirmModal\n          isOpen={isModalOpen}\n          title=\"Switch to visual editor mode\"\n          body=\"Are you sure to switch to visual editor mode? You will loose the changes done in raw query mode.\"\n          confirmText=\"Yes, switch to editor mode\"\n          dismissText=\"No, stay in raw query mode\"\n          onConfirm={() => {\n            onChange(false);\n          }}\n          onDismiss={() => {\n            setModalOpen(false);\n          }}\n        />\n      </>\n    );\n  } else {\n    return (\n      <Button\n        icon=\"pen\"\n        variant=\"secondary\"\n        type=\"button\"\n        onClick={() => {\n          onChange(true);\n        }}\n      ></Button>\n    );\n  }\n};\n","import React from 'react';\n\nconst CHEAT_SHEET_ITEMS = [\n  {\n    title: 'Getting started',\n    label:\n      'Start by selecting a measurement and field from the dropdown above. You can then use the tag selector to further narrow your search.',\n  },\n];\n\nconst InfluxCheatSheet = (props: any) => (\n  <div>\n    <h2>InfluxDB Cheat Sheet</h2>\n    {CHEAT_SHEET_ITEMS.map((item) => (\n      <div className=\"cheat-sheet-item\" key={item.title}>\n        <div className=\"cheat-sheet-item__title\">{item.title}</div>\n        <div className=\"cheat-sheet-item__label\">{item.label}</div>\n      </div>\n    ))}\n  </div>\n);\n\nexport default InfluxCheatSheet;\n","import React, { PureComponent } from 'react';\nimport { QueryEditorHelpProps } from '@grafana/data';\nimport InfluxCheatSheet from './InfluxCheatSheet';\n\nexport default class InfluxStartPage extends PureComponent<QueryEditorHelpProps> {\n  render() {\n    return <InfluxCheatSheet onClickExample={this.props.onClickExample} />;\n  }\n}\n","import React, { PureComponent } from 'react';\nimport {\n  DataSourcePluginOptionsEditorProps,\n  SelectableValue,\n  onUpdateDatasourceOption,\n  updateDatasourcePluginResetOption,\n  onUpdateDatasourceJsonDataOption,\n  onUpdateDatasourceJsonDataOptionSelect,\n  onUpdateDatasourceSecureJsonDataOption,\n  updateDatasourcePluginJsonDataOption,\n} from '@grafana/data';\nimport { Alert, DataSourceHttpSettings, InfoBox, InlineField, InlineFormLabel, LegacyForms } from '@grafana/ui';\nconst { Select, Input, SecretFormField } = LegacyForms;\nimport { InfluxOptions, InfluxSecureJsonData, InfluxVersion } from '../types';\n\nconst httpModes = [\n  { label: 'GET', value: 'GET' },\n  { label: 'POST', value: 'POST' },\n] as SelectableValue[];\n\nconst versions = [\n  {\n    label: 'InfluxQL',\n    value: InfluxVersion.InfluxQL,\n    description: 'The InfluxDB SQL-like query language.  Supported in InfluxDB 1.x',\n  },\n  {\n    label: 'Flux',\n    value: InfluxVersion.Flux,\n    description: 'Advanced data scripting and query language.  Supported in InfluxDB 2.x and 1.8+ (beta)',\n  },\n] as Array<SelectableValue<InfluxVersion>>;\n\nexport type Props = DataSourcePluginOptionsEditorProps<InfluxOptions>;\ntype State = {\n  maxSeries: string | undefined;\n};\n\nexport class ConfigEditor extends PureComponent<Props, State> {\n  state = {\n    maxSeries: '',\n  };\n\n  constructor(props: Props) {\n    super(props);\n    this.state.maxSeries = props.options.jsonData.maxSeries?.toString() || '';\n  }\n\n  // 1x\n  onResetPassword = () => {\n    updateDatasourcePluginResetOption(this.props, 'password');\n  };\n\n  // 2x\n  onResetToken = () => {\n    updateDatasourcePluginResetOption(this.props, 'token');\n  };\n\n  onVersionChanged = (selected: SelectableValue<InfluxVersion>) => {\n    const { options, onOptionsChange } = this.props;\n\n    const copy: any = {\n      ...options,\n      jsonData: {\n        ...options.jsonData,\n        version: selected.value,\n      },\n    };\n    if (selected.value === InfluxVersion.Flux) {\n      copy.access = 'proxy';\n      copy.basicAuth = true;\n      copy.jsonData.httpMode = 'POST';\n\n      // Remove old 1x configs\n      delete copy.user;\n      delete copy.database;\n    }\n\n    onOptionsChange(copy);\n  };\n\n  renderInflux2x() {\n    const { options } = this.props;\n    const { secureJsonFields } = options;\n    const secureJsonData = (options.secureJsonData || {}) as InfluxSecureJsonData;\n\n    return (\n      <>\n        <div className=\"gf-form-inline\">\n          <div className=\"gf-form\">\n            <InlineFormLabel className=\"width-10\">Organization</InlineFormLabel>\n            <div className=\"width-10\">\n              <Input\n                className=\"width-20\"\n                value={options.jsonData.organization || ''}\n                onChange={onUpdateDatasourceJsonDataOption(this.props, 'organization')}\n              />\n            </div>\n          </div>\n        </div>\n        <div className=\"gf-form-inline\">\n          <div className=\"gf-form\">\n            <SecretFormField\n              isConfigured={(secureJsonFields && secureJsonFields.token) as boolean}\n              value={secureJsonData.token || ''}\n              label=\"Token\"\n              labelWidth={10}\n              inputWidth={20}\n              onReset={this.onResetToken}\n              onChange={onUpdateDatasourceSecureJsonDataOption(this.props, 'token')}\n            />\n          </div>\n        </div>\n        <div className=\"gf-form-inline\">\n          <div className=\"gf-form\">\n            <InlineFormLabel className=\"width-10\">Default Bucket</InlineFormLabel>\n            <div className=\"width-10\">\n              <Input\n                className=\"width-20\"\n                placeholder=\"default bucket\"\n                value={options.jsonData.defaultBucket || ''}\n                onChange={onUpdateDatasourceJsonDataOption(this.props, 'defaultBucket')}\n              />\n            </div>\n          </div>\n        </div>\n\n        <div className=\"gf-form-inline\">\n          <div className=\"gf-form\">\n            <InlineFormLabel\n              className=\"width-10\"\n              tooltip=\"A lower limit for the auto group by time interval. Recommended to be set to write frequency,\n\t\t\t\tfor example 1m if your data is written every minute.\"\n            >\n              Min time interval\n            </InlineFormLabel>\n            <div className=\"width-10\">\n              <Input\n                className=\"width-10\"\n                placeholder=\"10s\"\n                value={options.jsonData.timeInterval || ''}\n                onChange={onUpdateDatasourceJsonDataOption(this.props, 'timeInterval')}\n              />\n            </div>\n          </div>\n        </div>\n      </>\n    );\n  }\n\n  renderInflux1x() {\n    const { options } = this.props;\n    const { secureJsonFields } = options;\n    const secureJsonData = (options.secureJsonData || {}) as InfluxSecureJsonData;\n\n    return (\n      <>\n        <InfoBox>\n          <h5>Database Access</h5>\n          <p>\n            Setting the database for this datasource does not deny access to other databases. The InfluxDB query syntax\n            allows switching the database in the query. For example:\n            <code>SHOW MEASUREMENTS ON _internal</code> or\n            <code>SELECT * FROM &quot;_internal&quot;..&quot;database&quot; LIMIT 10</code>\n            <br />\n            <br />\n            To support data isolation and security, make sure appropriate permissions are configured in InfluxDB.\n          </p>\n        </InfoBox>\n        <div className=\"gf-form-inline\">\n          <div className=\"gf-form\">\n            <InlineFormLabel className=\"width-10\">Database</InlineFormLabel>\n            <div className=\"width-20\">\n              <Input\n                className=\"width-20\"\n                value={options.database || ''}\n                onChange={onUpdateDatasourceOption(this.props, 'database')}\n              />\n            </div>\n          </div>\n        </div>\n        <div className=\"gf-form-inline\">\n          <div className=\"gf-form\">\n            <InlineFormLabel className=\"width-10\">User</InlineFormLabel>\n            <div className=\"width-10\">\n              <Input\n                className=\"width-20\"\n                value={options.user || ''}\n                onChange={onUpdateDatasourceOption(this.props, 'user')}\n              />\n            </div>\n          </div>\n        </div>\n        <div className=\"gf-form-inline\">\n          <div className=\"gf-form\">\n            <SecretFormField\n              isConfigured={(secureJsonFields && secureJsonFields.password) as boolean}\n              value={secureJsonData.password || ''}\n              label=\"Password\"\n              labelWidth={10}\n              inputWidth={20}\n              onReset={this.onResetPassword}\n              onChange={onUpdateDatasourceSecureJsonDataOption(this.props, 'password')}\n            />\n          </div>\n        </div>\n        <div className=\"gf-form-inline\">\n          <div className=\"gf-form\">\n            <InlineFormLabel\n              className=\"width-10\"\n              tooltip=\"You can use either GET or POST HTTP method to query your InfluxDB database. The POST\n          method allows you to perform heavy requests (with a lots of WHERE clause) while the GET method\n          will restrict you and return an error if the query is too large.\"\n            >\n              HTTP Method\n            </InlineFormLabel>\n            <Select\n              menuShouldPortal\n              className=\"width-10\"\n              value={httpModes.find((httpMode) => httpMode.value === options.jsonData.httpMode)}\n              options={httpModes}\n              defaultValue={options.jsonData.httpMode}\n              onChange={onUpdateDatasourceJsonDataOptionSelect(this.props, 'httpMode')}\n            />\n          </div>\n        </div>\n\n        <div className=\"gf-form-inline\">\n          <div className=\"gf-form\">\n            <InlineFormLabel\n              className=\"width-10\"\n              tooltip=\"A lower limit for the auto group by time interval. Recommended to be set to write frequency,\n\t\t\t\tfor example 1m if your data is written every minute.\"\n            >\n              Min time interval\n            </InlineFormLabel>\n            <div className=\"width-10\">\n              <Input\n                className=\"width-10\"\n                placeholder=\"10s\"\n                value={options.jsonData.timeInterval || ''}\n                onChange={onUpdateDatasourceJsonDataOption(this.props, 'timeInterval')}\n              />\n            </div>\n          </div>\n        </div>\n      </>\n    );\n  }\n\n  render() {\n    const { options, onOptionsChange } = this.props;\n\n    return (\n      <>\n        <h3 className=\"page-heading\">Query Language</h3>\n        <div className=\"gf-form-group\">\n          <div className=\"gf-form-inline\">\n            <div className=\"gf-form\">\n              <Select\n                menuShouldPortal\n                className=\"width-30\"\n                value={options.jsonData.version === InfluxVersion.Flux ? versions[1] : versions[0]}\n                options={versions}\n                defaultValue={versions[0]}\n                onChange={this.onVersionChanged}\n              />\n            </div>\n          </div>\n        </div>\n\n        {options.jsonData.version === InfluxVersion.Flux && (\n          <InfoBox>\n            <h5>Support for Flux in Grafana is currently in beta</h5>\n            <p>\n              Please report any issues to: <br />\n              <a href=\"https://github.com/grafana/grafana/issues/new/choose\">\n                https://github.com/grafana/grafana/issues\n              </a>\n            </p>\n          </InfoBox>\n        )}\n\n        {options.access === 'direct' && (\n          <Alert title=\"Deprecation Notice\" severity=\"warning\">\n            Browser access mode in the InfluxDB datasource is deprecated and will be removed in a future release.\n          </Alert>\n        )}\n\n        <DataSourceHttpSettings\n          showAccessOptions={true}\n          dataSourceConfig={options}\n          defaultUrl=\"http://localhost:8086\"\n          onChange={onOptionsChange}\n        />\n\n        <div className=\"gf-form-group\">\n          <div>\n            <h3 className=\"page-heading\">InfluxDB Details</h3>\n          </div>\n          {options.jsonData.version === InfluxVersion.Flux ? this.renderInflux2x() : this.renderInflux1x()}\n          <div className=\"gf-form-inline\">\n            <InlineField\n              labelWidth={20}\n              label=\"Max series\"\n              tooltip=\"Limit the number of series/tables that Grafana will process. Lower this number to prevent abuse, and increase it if you have lots of small time series and not all are shown. Defaults to 1000.\"\n            >\n              <Input\n                placeholder=\"1000\"\n                type=\"number\"\n                className=\"width-10\"\n                value={this.state.maxSeries}\n                onChange={(event) => {\n                  // We duplicate this state so that we allow to write freely inside the input. We don't have\n                  // any influence over saving so this seems to be only way to do this.\n                  this.setState({ maxSeries: event.currentTarget.value });\n                  const val = parseInt(event.currentTarget.value, 10);\n                  updateDatasourcePluginJsonDataOption(this.props, 'maxSeries', Number.isFinite(val) ? val : undefined);\n                }}\n              />\n            </InlineField>\n          </div>\n        </div>\n      </>\n    );\n  }\n}\n\nexport default ConfigEditor;\n","import React, { PureComponent } from 'react';\nimport InfluxDatasource from '../datasource';\nimport { InlineFormLabel, TextArea } from '@grafana/ui';\nimport { FluxQueryEditor } from './FluxQueryEditor';\n\ninterface Props {\n  query: string; // before flux, it was always a string\n  onChange: (query?: string) => void;\n  datasource: InfluxDatasource;\n}\n\nexport default class VariableQueryEditor extends PureComponent<Props> {\n  onRefresh = () => {\n    // noop\n  };\n\n  render() {\n    let { query, datasource, onChange } = this.props;\n    if (datasource.isFlux) {\n      return (\n        <FluxQueryEditor\n          datasource={datasource}\n          query={{\n            refId: 'A',\n            query,\n          }}\n          onRunQuery={this.onRefresh}\n          onChange={(v) => onChange(v.query)}\n        />\n      );\n    }\n\n    return (\n      <div className=\"gf-form-inline\">\n        <InlineFormLabel width={10}>Query</InlineFormLabel>\n        <div className=\"gf-form-inline gf-form--grow\">\n          <TextArea\n            defaultValue={query || ''}\n            placeholder=\"metric name or tags query\"\n            rows={1}\n            className=\"gf-form-input\"\n            onBlur={(e) => onChange(e.currentTarget.value)}\n          />\n        </div>\n      </div>\n    );\n  }\n}\n","import InfluxDatasource from './datasource';\nimport { QueryEditor } from './components/QueryEditor';\nimport InfluxStartPage from './components/InfluxStartPage';\nimport { DataSourcePlugin } from '@grafana/data';\nimport ConfigEditor from './components/ConfigEditor';\nimport VariableQueryEditor from './components/VariableQueryEditor';\n\nclass InfluxAnnotationsQueryCtrl {\n  static templateUrl = 'partials/annotations.editor.html';\n}\n\nexport const plugin = new DataSourcePlugin(InfluxDatasource)\n  .setConfigEditor(ConfigEditor)\n  .setQueryEditor(QueryEditor)\n  .setAnnotationQueryCtrl(InfluxAnnotationsQueryCtrl)\n  .setVariableQueryEditor(VariableQueryEditor)\n  .setQueryEditorHelp(InfluxStartPage);\n","import React from 'react';\nimport { css } from '@emotion/css';\nimport { QueryEditorProps } from '@grafana/data';\nimport { InfluxOptions, InfluxQuery } from '../types';\nimport InfluxDatasource from '../datasource';\nimport { FluxQueryEditor } from './FluxQueryEditor';\nimport { RawInfluxQLEditor } from './RawInfluxQLEditor';\nimport { Editor as VisualInfluxQLEditor } from './VisualInfluxQLEditor/Editor';\nimport { QueryEditorModeSwitcher } from './QueryEditorModeSwitcher';\nimport { buildRawQuery } from '../queryUtils';\n\ntype Props = QueryEditorProps<InfluxDatasource, InfluxQuery, InfluxOptions>;\n\nexport const QueryEditor = ({ query, onChange, onRunQuery, datasource, range, data }: Props): JSX.Element => {\n  if (datasource.isFlux) {\n    return (\n      <div className=\"gf-form-query-content\">\n        <FluxQueryEditor query={query} onChange={onChange} onRunQuery={onRunQuery} datasource={datasource} />\n      </div>\n    );\n  }\n\n  return (\n    <div className={css({ display: 'flex' })}>\n      <div className={css({ flexGrow: 1 })}>\n        {query.rawQuery ? (\n          <RawInfluxQLEditor query={query} onChange={onChange} onRunQuery={onRunQuery} />\n        ) : (\n          <VisualInfluxQLEditor query={query} onChange={onChange} onRunQuery={onRunQuery} datasource={datasource} />\n        )}\n      </div>\n      <QueryEditorModeSwitcher\n        isRaw={query.rawQuery ?? false}\n        onChange={(value) => {\n          onChange({ ...query, query: buildRawQuery(query), rawQuery: value });\n          onRunQuery();\n        }}\n      />\n    </div>\n  );\n};\n","import { useEffect, useRef } from 'react';\nvar usePrevious = function (state) {\n    var ref = useRef();\n    useEffect(function () {\n        ref.current = state;\n    });\n    return ref.current;\n};\nexport default usePrevious;\n"],"sourceRoot":""}
{"version":3,"sources":["webpack:///./public/app/features/users/UsersTable.tsx","webpack:///./public/app/features/admin/AdminEditOrgPage.tsx"],"names":["UsersTable","props","users","onRoleChange","onRemoveUser","canUpdateRole","contextSrv","hasPermission","AccessControlAction","OrgUsersRoleUpdate","canRemoveFromOrg","OrgUsersRemove","showRemoveModal","setShowRemoveModal","useState","className","style","width","map","user","index","src","avatarUrl","title","login","email","name","lastSeenAtAge","value","role","disabled","onChange","newRole","size","variant","onClick","icon","body","confirmText","onDismiss","isOpen","onConfirm","userId","AdminEditOrgPage","match","navIndex","useSelector","state","navModel","getNavModel","orgId","parseInt","params","id","setUsers","orgState","fetchOrg","useAsyncFn","async","getBackendSrv","get","getOrg","fetchOrgUsers","getOrgUsers","useEffect","then","res","Contents","defaultValues","orgName","onSubmit","put","updateOrgName","values","register","errors","label","invalid","error","required","css","length","orgUser","patch","updateOrgUserRole","delete","removeOrgUser","filter"],"mappings":"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","file":"AdminEditOrgPage.62c612232a976d8836f5.js","sourcesContent":["import React, { FC, useState } from 'react';\nimport { AccessControlAction, OrgUser } from 'app/types';\nimport { OrgRolePicker } from '../admin/OrgRolePicker';\nimport { Button, ConfirmModal } from '@grafana/ui';\nimport { OrgRole } from '@grafana/data';\nimport { contextSrv } from 'app/core/core';\n\nexport interface Props {\n  users: OrgUser[];\n  onRoleChange: (role: OrgRole, user: OrgUser) => void;\n  onRemoveUser: (user: OrgUser) => void;\n}\n\nconst UsersTable: FC<Props> = (props) => {\n  const { users, onRoleChange, onRemoveUser } = props;\n  const canUpdateRole = contextSrv.hasPermission(AccessControlAction.OrgUsersRoleUpdate);\n  const canRemoveFromOrg = contextSrv.hasPermission(AccessControlAction.OrgUsersRemove);\n\n  const [showRemoveModal, setShowRemoveModal] = useState<string | boolean>(false);\n  return (\n    <table className=\"filter-table form-inline\">\n      <thead>\n        <tr>\n          <th />\n          <th>Login</th>\n          <th>Email</th>\n          <th>Name</th>\n          <th>Seen</th>\n          <th>Role</th>\n          <th style={{ width: '34px' }} />\n        </tr>\n      </thead>\n      <tbody>\n        {users.map((user, index) => {\n          return (\n            <tr key={`${user.userId}-${index}`}>\n              <td className=\"width-2 text-center\">\n                <img className=\"filter-table__avatar\" src={user.avatarUrl} />\n              </td>\n              <td className=\"max-width-6\">\n                <span className=\"ellipsis\" title={user.login}>\n                  {user.login}\n                </span>\n              </td>\n\n              <td className=\"max-width-5\">\n                <span className=\"ellipsis\" title={user.email}>\n                  {user.email}\n                </span>\n              </td>\n              <td className=\"max-width-5\">\n                <span className=\"ellipsis\" title={user.name}>\n                  {user.name}\n                </span>\n              </td>\n              <td className=\"width-1\">{user.lastSeenAtAge}</td>\n\n              <td className=\"width-8\">\n                <OrgRolePicker\n                  value={user.role}\n                  disabled={!canUpdateRole}\n                  onChange={(newRole) => onRoleChange(newRole, user)}\n                />\n              </td>\n\n              {canRemoveFromOrg && (\n                <td>\n                  <Button size=\"sm\" variant=\"destructive\" onClick={() => setShowRemoveModal(user.login)} icon=\"times\" />\n                  <ConfirmModal\n                    body={`Are you sure you want to delete user ${user.login}?`}\n                    confirmText=\"Delete\"\n                    title=\"Delete\"\n                    onDismiss={() => setShowRemoveModal(false)}\n                    isOpen={user.login === showRemoveModal}\n                    onConfirm={() => {\n                      onRemoveUser(user);\n                    }}\n                  />\n                </td>\n              )}\n            </tr>\n          );\n        })}\n      </tbody>\n    </table>\n  );\n};\n\nexport default UsersTable;\n","import React, { FC, useState, useEffect } from 'react';\nimport Page from 'app/core/components/Page/Page';\nimport { useSelector } from 'react-redux';\nimport { StoreState, OrgUser } from 'app/types';\nimport { getNavModel } from 'app/core/selectors/navModel';\nimport UsersTable from '../users/UsersTable';\nimport { useAsyncFn } from 'react-use';\nimport { getBackendSrv } from '@grafana/runtime';\nimport { UrlQueryValue } from '@grafana/data';\nimport { Form, Field, Input, Button, Legend } from '@grafana/ui';\nimport { css } from '@emotion/css';\nimport { GrafanaRouteComponentProps } from 'app/core/navigation/types';\n\ninterface OrgNameDTO {\n  orgName: string;\n}\n\nconst getOrg = async (orgId: UrlQueryValue) => {\n  return await getBackendSrv().get('/api/orgs/' + orgId);\n};\n\nconst getOrgUsers = async (orgId: UrlQueryValue) => {\n  return await getBackendSrv().get('/api/orgs/' + orgId + '/users');\n};\n\nconst updateOrgUserRole = async (orgUser: OrgUser, orgId: UrlQueryValue) => {\n  await getBackendSrv().patch('/api/orgs/' + orgId + '/users/' + orgUser.userId, orgUser);\n};\n\nconst removeOrgUser = async (orgUser: OrgUser, orgId: UrlQueryValue) => {\n  return await getBackendSrv().delete('/api/orgs/' + orgId + '/users/' + orgUser.userId);\n};\n\ninterface Props extends GrafanaRouteComponentProps<{ id: string }> {}\n\nexport const AdminEditOrgPage: FC<Props> = ({ match }) => {\n  const navIndex = useSelector((state: StoreState) => state.navIndex);\n  const navModel = getNavModel(navIndex, 'global-orgs');\n  const orgId = parseInt(match.params.id, 10);\n\n  const [users, setUsers] = useState<OrgUser[]>([]);\n\n  const [orgState, fetchOrg] = useAsyncFn(() => getOrg(orgId), []);\n  const [, fetchOrgUsers] = useAsyncFn(() => getOrgUsers(orgId), []);\n\n  useEffect(() => {\n    fetchOrg();\n    fetchOrgUsers().then((res) => setUsers(res));\n  }, [fetchOrg, fetchOrgUsers]);\n\n  const updateOrgName = async (name: string) => {\n    return await getBackendSrv().put('/api/orgs/' + orgId, { ...orgState.value, name });\n  };\n\n  return (\n    <Page navModel={navModel}>\n      <Page.Contents>\n        <>\n          <Legend>Edit organization</Legend>\n\n          {orgState.value && (\n            <Form\n              defaultValues={{ orgName: orgState.value.name }}\n              onSubmit={async (values: OrgNameDTO) => await updateOrgName(values.orgName)}\n            >\n              {({ register, errors }) => (\n                <>\n                  <Field label=\"Name\" invalid={!!errors.orgName} error=\"Name is required\">\n                    <Input {...register('orgName', { required: true })} />\n                  </Field>\n                  <Button>Update</Button>\n                </>\n              )}\n            </Form>\n          )}\n\n          <div\n            className={css`\n              margin-top: 20px;\n            `}\n          >\n            <Legend>Organization users</Legend>\n            {!!users.length && (\n              <UsersTable\n                users={users}\n                onRoleChange={(role, orgUser) => {\n                  updateOrgUserRole({ ...orgUser, role }, orgId);\n                  setUsers(\n                    users.map((user) => {\n                      if (orgUser.userId === user.userId) {\n                        return { ...orgUser, role };\n                      }\n                      return user;\n                    })\n                  );\n                  fetchOrgUsers();\n                }}\n                onRemoveUser={(orgUser) => {\n                  removeOrgUser(orgUser, orgId);\n                  setUsers(users.filter((user) => orgUser.userId !== user.userId));\n                  fetchOrgUsers();\n                }}\n              />\n            )}\n          </div>\n        </>\n      </Page.Contents>\n    </Page>\n  );\n};\n\nexport default AdminEditOrgPage;\n"],"sourceRoot":""}
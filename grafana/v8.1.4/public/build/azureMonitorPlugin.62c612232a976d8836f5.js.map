{"version":3,"sources":["webpack:///./public/app/features/explore/slate-plugins/prism/index.tsx","webpack:///./public/app/plugins/datasource/grafana-azure-monitor-datasource/editor/typeahead.tsx","webpack:///./public/app/plugins/datasource/grafana-azure-monitor-datasource/editor/query_field.tsx","webpack:///./public/app/plugins/datasource/grafana-azure-monitor-datasource/editor/kusto/kusto.ts","webpack:///./public/app/plugins/datasource/grafana-azure-monitor-datasource/editor/KustoQueryField.tsx","webpack:///./public/app/plugins/datasource/grafana-azure-monitor-datasource/editor/editor_component.tsx","webpack:///./public/app/plugins/datasource/grafana-azure-monitor-datasource/azure_monitor/url_builder.ts","webpack:///./public/app/plugins/datasource/grafana-azure-monitor-datasource/azure_monitor/response_parser.ts","webpack:///./public/app/plugins/datasource/grafana-azure-monitor-datasource/azure_monitor/supported_namespaces.ts","webpack:///./public/app/plugins/datasource/grafana-azure-monitor-datasource/credentials.ts","webpack:///./public/app/plugins/datasource/grafana-azure-monitor-datasource/azure_monitor/azure_monitor_datasource.ts","webpack:///./public/app/plugins/datasource/grafana-azure-monitor-datasource/app_insights/response_parser.ts","webpack:///./public/app/plugins/datasource/grafana-azure-monitor-datasource/app_insights/app_insights_datasource.ts","webpack:///./public/app/plugins/datasource/grafana-azure-monitor-datasource/log_analytics/querystring_builder.ts","webpack:///./public/app/plugins/datasource/grafana-azure-monitor-datasource/azure_log_analytics/response_parser.ts","webpack:///./public/app/plugins/datasource/grafana-azure-monitor-datasource/azure_log_analytics/azure_log_analytics_datasource.ts","webpack:///./public/app/plugins/datasource/grafana-azure-monitor-datasource/insights_analytics/insights_analytics_datasource.ts","webpack:///./public/app/plugins/datasource/grafana-azure-monitor-datasource/azure_resource_graph/azure_resource_graph_datasource.ts","webpack:///./public/app/plugins/datasource/grafana-azure-monitor-datasource/datasource.ts","webpack:///./public/app/plugins/datasource/grafana-azure-monitor-datasource/query_ctrl.ts","webpack:///./public/app/plugins/datasource/grafana-azure-monitor-datasource/components/AzureCredentialsForm.tsx","webpack:///./public/app/plugins/datasource/grafana-azure-monitor-datasource/components/MonitorConfig.tsx","webpack:///./public/app/plugins/datasource/grafana-azure-monitor-datasource/components/AnalyticsConfig.tsx","webpack:///./public/app/plugins/datasource/grafana-azure-monitor-datasource/components/InsightsConfig.tsx","webpack:///./public/app/plugins/datasource/grafana-azure-monitor-datasource/components/ConfigEditor.tsx","webpack:///./public/app/plugins/datasource/grafana-azure-monitor-datasource/annotations_query_ctrl.ts","webpack:///./public/app/plugins/datasource/grafana-azure-monitor-datasource/module.tsx"],"names":["PrismPlugin","definition","language","Prism","languages","renderDecoration","props","editor","next","children","decoration","type","className","data","get","decorateNode","node","texts","getTexts","toArray","tstring","map","t","text","join","grammar","tokens","tokenize","decorations","startText","shift","endText","startOffset","endOffset","start","processToken","token","acc","types","alias","content","newlines","split","length","end","available","remaining","range","createDecoration","anchor","key","offset","focus","push","subToken","TypeaheadItem","React","PureComponent","el","this","componentDidUpdate","prevProps","isSelected","offsetParent","container","offsetTop","scrollTop","offsetHeight","scrollIntoView","render","hint","label","onClickItem","ref","getRef","onClick","TypeaheadGroup","items","selected","item","display","indexOf","Typeahead","groupedItems","menuRef","selectedItems","g","flattenSuggestions","s","reduce","concat","makeFragment","lines","line","Block","create","nodes","Text","Document","Portal","Component","constructor","super","index","prefix","document","createElement","classList","add","body","appendChild","componentWillUnmount","removeChild","ReactDOM","createPortal","QueryField","context","value","changed","state","setState","requestAnimationFrame","onTypeahead","onChangeQuery","onQueryChange","Plain","serialize","event","typeaheadIndex","suggestions","keyboardEvent","menuEl","preventDefault","stopPropagation","resetTypeahead","ctrlKey","shiftKey","flattenedSuggestions","suggestion","Math","abs","applyTypeahead","max","change","Value","callback","typeaheadPrefix","typeaheadContext","onBlur","resetTimer","setTimeout","restoreEscapeKeyBinding","onFocus","removeEscapeKeyBinding","onChange","menu","selection","window","getSelection","anchorNode","parentElement","rect","getBoundingClientRect","scrollX","scrollY","screenHeight","innerHeight","menuLeft","left","menuTop","top","height","menuHeight","style","opacity","maxHeight","removeAttribute","portalPrefix","selectedIndex","selectedKeys","i","prismDefinition","prismLanguage","query","plugins","BracesPlugin","ClearPlugin","RunnerPlugin","handler","onPressEnter","NewlinePlugin","PluginPrism","labelKeys","labelValues","initialQuery","componentDidMount","updateMenu","clearTimeout","keybindingSrv","unbind","initGlobals","renderMenu","autoCorrect","handleBlur","onKeyDown","handleFocus","placeholder","spellCheck","operatorTokens","functionTokens","KEYWORDS","grafanaMacros","tokenizer","comment","pattern","lookbehind","greedy","inside","duration","RegExp","builtin","f","string","keyword","boolean","number","operator","punctuation","variable","argument","cleanText","replace","trim","wrapText","KustoQueryField","force","wrapperNode","closest","isBlurred","getRangeAt","textContent","substr","modelOffset","anchorOffset","modelPrefix","anchorText","slice","suggestionGroups","wrapperClasses","contains","getColumnSuggestions","match","getFunctionSuggestions","getTableSuggestions","db","getDBFromDatabaseFunction","normalizeQuery","schema","fetchSchema","getInitialSuggestions","getKeywordSuggestions","str","exec","getLastWord","results","toLowerCase","filteredSuggestions","group","skipFilter","filter","c","prefixMatch","typeaheadText","suggestionText","nextChar","DOMUtil","getNextCharacter","backward","deleteBackwards","suffixLength","forward","deleteBackward","deleteForward","insertText","moveForward","Databases","Default","debounce","Tables","Name","table","getTableFromContext","tableSchema","OrderedColumns","Type","normalizedQuery","getSchema","defaultSchemaTemplate","castSchema","Editor","edited","execute","variables","Kusto","templateVariables","coreModule","directive","reactDirective","watchDepth","UrlBuilder","baseUrl","subscriptionId","resourceGroup","metricDefinition","resourceName","apiVersion","metricDefinitionArray","resourceNameArray","urlArray","metricNamespace","encodeURIComponent","ResponseParser","result","textFieldName","valueFieldName","list","find","name","metricName","defaultAggTypes","metricData","v","primaryAggType","primaryAggregationType","supportedAggTypes","supportedAggregationTypes","supportedTimeGrains","parseTimeGrains","metricAvailabilities","dimensions","parseDimensions","timeGrains","forEach","avail","timeGrain","TimeGrainConverter","createTimeGrainFromISO8601Duration","metadataDimensions","dimension","localizedValue","properties","SupportedNamespaces","cloudName","azuremonitor","govazuremonitor","germanyazuremonitor","chinaazuremonitor","supportedMetricNamespaces","concealed","Symbol","getAuthType","options","jsonData","azureAuthType","tenantId","clientId","config","azure","managedIdentityEnabled","getDefaultAzureCloud","cloud","AzureCloud","Public","None","undefined","China","USGovernment","Germany","Error","getAzurePortalUrl","azureCloud","getAzureCloud","getSecret","secureJsonFields","clientSecret","secret","secureJsonData","getCredentials","authType","defaultSubscriptionId","aggregationTypeMap","Total","Minimum","Maximum","Average","Count","AzureMonitorDatasource","DataSourceWithBackend","instanceSettings","timeSrv","getTimeSrv","resourcePath","routeNames","azureMonitor","azurePortalUrl","isConfigured","validateDatasource","filterQuery","hide","aggregation","request","metricQueries","targets","prev","cur","refId","pipe","mergeMap","res","from","processResponse","df","metricQuery","subscription","url","buildAzurePortalUrl","timeRange","field","fields","links","title","targetBlank","stringifyAzurePortalUrlParam","stringValue","JSON","stringify","aggregationType","chartDef","v2charts","metrics","resourceMetadata","id","namespace","metricVisualization","displayName","resourceDisplayName","timeContext","absolute","startTime","endTime","to","applyTemplateVariables","target","scopedVars","timeGrainUnit","TimegrainConverter","createISO8601Duration","templateSrv","getTemplateSrv","toString","dimensionFilters","queryType","AzureQueryType","AzureMonitor","allowedTimeGrainsMs","metricFindQueryInternal","getSubscriptions","getResourceGroups","resourceGroupsQueryWithSub","toVariable","metricDefinitionsQuery","getMetricDefinitions","metricDefinitionsQueryWithSub","resourceNamesQuery","getResourceNames","resourceNamesQueryWithSub","metricNamespaceQuery","getMetricNamespaces","metricNamespaceQueryWithSub","metricNamesQuery","getMetricNames","metricNamesQueryWithSub","metric","getResource","then","parseSubscriptions","parseResponseValues","shouldHardcodeBlobStorage","resourceTypeDisplayNames","startsWith","parseResourceNames","buildAzureMonitorGetMetricNamespacesUrl","apiPreviewVersion","buildAzureMonitorGetMetricNamesUrl","getMetricMetadata","parseMetadata","validationError","Promise","resolve","response","status","message","e","statusText","error","code","isValidConfigField","parseQueryResult","columns","raw","xaxis","yaxises","yaxis","spliton","Columns","rows","Rows","parseRawQueryResultRow","parseQueryResultRow","columnsForDropdown","column","ColumnName","xaxisColumn","findIndex","yaxisesSplit","yaxisColumns","splitonColumn","convertTimestamp","row","yaxisColumn","yaxisName","bucket","findOrCreateBucket","epoch","dateTimeToEpoch","datapoints","isSingleValue","getMetricFieldKey","aggField","getKeyForAggregationField","hasSegmentsField","segments","j","getTargetName","meta","dataTarget","segment","segmentName","segmentValue","prop","isObject","regex","g1","g2","obj","keys","_keys","without","dataObj","intersection","dateTimeValue","dateTime","valueOf","toTextValueList","defaultAggregation","supportedAggregations","supportedGroupBy","all","parseGroupBys","parseQuerySchema","columnTable","columnName","columnType","values","AppInsightsDatasource","applicationId","appInsightsAppId","appInsights","version","createRawQueryRequest","timeColumn","valueColumn","segmentColumn","rawQuery","rawQueryString","old","timeGrainCount","groupBy","dimensionFilter","isString","ApplicationInsights","d","appInsightsGroupByQuery","getGroupBys","testDatasource","path","catch","parseMetricNames","getQuerySchema","LogAnalyticsQuerystringBuilder","defaultTimeField","generate","queryString","macroRegexp","p1","p2","getMultiContains","escape","getTimeFilter","getFrom","getUntil","interval","uriString","startOf","toISOString","rangeRaw","now","Date","until","timeFieldArg","timeField","inputs","firstCommaIndex","substring","templateVar","tables","resultFormat","parseTimeSeriesResult","parseTableResult","timeIndex","metricIndex","valueIndex","executedQueryString","col","parseToVariables","queryResult","flattenDeep","transformToAnnotations","textIndex","tagsIndex","annotation","time","floor","tags","METADATA_FUNCTION_PARAMS","transformMetadataFunction","sourceSchema","functions","fn","params","parameters","arg","defaultValue","cslDefaultValue","inputParameters","AzureLogAnalyticsDatasource","cache","Map","logAnalytics","azureMonitorPath","getWorkspaceList","val","workspaceListUrl","resourceUri","nameOrIdOrSomething","database","majorVersion","minorVersion","clusterType","cluster","connectionString","databases","transformMetadataToKustoSchema","getMetadata","azureLogAnalytics","resource","workspace","firstWorkspace","interpolateVariable","LogAnalytics","encodedQuery","custom","buildDeepLink","customMeta","base64Enc","workspaceId","details","getWorkspaceDetails","o","customerId","optionalOptions","getWorkspaces","workspacesQueryWithSub","getFirstWorkspace","resourceURI","queries","buildQuery","promises","doQueries","err","innererror","querystring","isGUIDish","datasourceId","getDefaultOrFirstSubscription","annotationQuery","reject","resourceOrWorkspace","getErrorMessage","InsightsAnalyticsDatasource","insightsAnalytics","InsightsAnalytics","AzureResourceGraphDatasource","azureResourceGraph","variableNames","getVariables","subscriptionVar","_","subscriptions","sub","includes","AzureResourceGraph","Datasource","DataSourceApi","azureMonitorDatasource","azureLogAnalyticsDatasource","azureResourceGraphDatasource","resourcePickerData","ResourcePickerData","pseudoDatasource","appInsightsDatasource","insightsAnalyticsDatasource","console","log","byType","migrateQuery","hasQueryForType","has","queryForType","cloneDeep","requestId","set","observables","Array","entries","req","ds","forkJoin","frame","LoadingState","Done","of","aiResult","amResult","alaResult","upperFirst","replaceTemplateVariable","getAppInsightsMetricNames","getAppInsightsMetricMetadata","getAppInsightsColumns","logAnalyticsColumns","getAzureLogAnalyticsWorkspaces","interpolateVariablesInQueries","migrateMetricsDimensionFilters","AzureMonitorQueryCtrl","QueryCtrl","$scope","$injector","aggOptions","datasource","defaultOrFirstWorkspace","defaultDropdownValue","panelCtrl","panel","workspaces","handleQueryCtrlError","bind","nextQuery","refresh","splice","newQuery","Object","assign","defaultsDeep","defaults","migrateTimeGrains","migrateToFromTimes","migrateToDefaultNamespace","migrateApplicationInsightsKeys","migrateApplicationInsightsDimensions","events","on","PanelEvents","dataReceived","onDataReceived","dataError","onDataError","resultFormats","dataList","lastQueryError","lastQuery","anySeriesFromQuery","oldAzureTimeGrains","convertTimeGrainsToMs","mappings","groupByOptions","onQueryTypeChange","subs","onSubscriptionChange","generateAutoUnits","findClosestTimeGrain","createKbnUnitFromISO8601Duration","getAzureMonitorAutoInterval","getApplicationInsightAutoInterval","azureMonitorAddDimensionFilter","azureMonitorRemoveDimensionFilter","onAppInsightsColumnChange","onAppInsightsMetricNameChange","aggData","getAppInsightsGroupBySegments","dummyDiminsionString","option","resetAppInsightsGroupBy","updateTimeGrainType","timeGrainType","updateAppInsightsTimeGrain","oldDimension","Select","Input","LegacyForms","authTypeOptions","AzureCredentialsForm","credentials","azureCloudOptions","onCredentialsChange","disabled","hasRequiredFields","isCredentialsComplete","setSubscriptions","useState","loadSubscriptionsClicked","onLoadSubscriptions","useReducer","useEffect","updateSubscriptions","canceled","received","autoSelect","opt","updated","tooltip","menuShouldPortal","isDisabled","variant","size","azureClouds","MonitorConfig","updateOptions","useMemo","updateCredentials","readOnly","AnalyticsConfig","primaryCredentials","azureLogAnalyticsSameAs","severity","logAnalyticsTenantId","logAnalyticsClientId","InsightsConfig","onResetOptionKey","onUpdateJsonDataOption","onUpdateSecureJsonDataOption","appInsightsApiKey","onAppInsightsResetApiKey","ConfigEditor","optionsFunc","onOptionsChange","unsaved","async","getBackendSrv","put","updateDatasourcePluginOption","saveOptions","datasourceRequest","baseURL","method","parseSubscriptionsForSelect","updateDatasourcePluginJsonDataOption","currentTarget","updateDatasourcePluginSecureJsonDataOption","updateDatasourcePluginResetOption","appInsightsInitiallyConfigured","resetSecureKey","AzureMonitorAnnotationsQueryCtrl","ctrl","defaultQuery","initDropdowns","bustCache","plugin","DataSourcePlugin","setConfigEditor","setQueryCtrl","setAnnotationQueryCtrl"],"mappings":"kOAqBe,SAASA,GAAY,WAAEC,EAAF,SAAcC,IAMhD,OALID,IAEFE,IAAMC,UAAUF,GAAYC,IAAMC,UAAUF,IAAaD,GAGpD,CAQLI,iBAAiBC,EAAYC,EAAgBC,GAC3C,MAAM,SAAEC,EAAF,WAAYC,GAAeJ,EAEjC,GAjCa,gBAiCTI,EAAWC,KACb,OAAOH,IAET,MAAMI,EAAa,SAAQF,EAAWG,KAAKC,IAAI,SAC/C,OAAO,sBAAMF,UAAWA,EAAjB,SAA6BH,KAUtCM,aAAaC,EAAWT,EAAgBC,GACtC,GAAkB,cAAdQ,EAAKL,KACP,MAAO,GAGT,MAAMM,EAAQD,EAAKE,WAAWC,UACxBC,EAAUH,EAAMI,IAAKC,GAAqBA,EAAEC,MAAMC,KAAK,MACvDC,EAAUtB,IAAMC,UAAUF,GAC1BwB,EAASvB,IAAMwB,SAASP,EAASK,GACjCG,EAA4B,GAClC,IAAIC,EAAYZ,EAAMa,QAClBC,EAAUF,EACVG,EAAc,EACdC,EAAY,EACZC,EAAQ,EAEZ,SAASC,EAAaC,EAAYC,GAEhC,MAAMC,EAAS,GAAED,GAAO,MAAMD,EAAMzB,MAAQ,MAAMyB,EAAMG,OAAS,KAGjE,GAAqB,iBAAVH,GAA+C,iBAAlBA,EAAMI,QAAsB,CAClEX,EAAYE,EACZC,EAAcC,EAEd,MAAMO,EAA2B,iBAAVJ,EAAqBA,EAAQA,EAAMI,QACpDC,EAAWD,EAAQE,MAAM,MAAMC,OAAS,EACxCA,EAASH,EAAQG,OAASF,EAC1BG,EAAMV,EAAQS,EAEpB,IAAIE,EAAYhB,EAAUN,KAAKoB,OAASX,EACpCc,EAAYH,EAIhB,IAFAV,EAAYD,EAAcc,EAEnBD,EAAYC,GACjBf,EAAUd,EAAMa,QAChBgB,EAAYH,EAASE,EACrBA,EAAYd,EAAQR,KAAKoB,OACzBV,EAAYa,EAId,GAAqB,iBAAVV,GAAsBC,EAAK,CACpC,MAAMU,EAAQ/B,EAAKgC,iBAAiB,CAClCC,OAAQ,CACNC,IAAKrB,EAAUqB,IACfC,OAAQnB,GAEVoB,MAAO,CACLF,IAAKnB,EAAQmB,IACbC,OAAQlB,GAEVtB,KApGK,cAqGLE,KAAM,CAAEyB,WAGVV,EAAYyB,KAAKN,GAGnBb,EAAQU,OACH,GAAIR,EAAMI,SAAWJ,EAAMI,QAAQG,OAExC,IAAK,MAAMW,KAAYlB,EAAMI,QAC3BL,EAAamB,EAAUhB,GAM7B,IAAK,MAAMF,KAASV,EAClBS,EAAaC,GAGf,OAAOR,I,uVClHb,MAAM2B,UAAsBC,IAAMC,cAAwB,kEAQ9CC,IACRC,KAAKD,GAAKA,IAPZE,mBAAmBC,GACbF,KAAKrD,MAAMwD,aAAeD,EAAUC,YAb5C,SAAwBJ,GACtB,IAAKA,IAAOA,EAAGK,aACb,OAEF,MAAMC,EAAYN,EAAGK,cACjBL,EAAGO,UAAYD,EAAUE,UAAYF,EAAUG,cAAgBT,EAAGO,UAAYD,EAAUE,aAC1FF,EAAUE,UAAYR,EAAGO,UAAYD,EAAUC,WAQ7CG,CAAeT,KAAKD,IAQxBW,SACE,MAAM,KAAEC,EAAF,WAAQR,EAAR,MAAoBS,EAApB,YAA2BC,GAAgBb,KAAKrD,MAChDM,EAAYkD,EAAa,0CAA4C,iBAE3E,OACE,qBAAIW,IAAKd,KAAKe,OAAQ9D,UAAWA,EAAW+D,QAF9B,IAAMH,EAAYD,GAEhC,UACGA,EACAD,GAAQR,EAAa,qBAAKlD,UAAU,sBAAf,SAAsC0D,IAAc,SAMlF,MAAMM,UAAuBpB,IAAMC,cACjCY,SACE,MAAM,MAAEQ,EAAF,MAASN,EAAT,SAAgBO,EAAhB,YAA0BN,GAAgBb,KAAKrD,MACrD,OACE,qBAAIM,UAAU,kBAAd,UACE,qBAAKA,UAAU,yBAAf,SAAyC2D,IACzC,oBAAI3D,UAAU,wBAAd,SACGiE,EAAMxD,IAAK0D,IACV,MAAMxD,EAAuB,iBAATwD,EAAoBA,EAAKxD,KAAOwD,EAC9CR,EAAwB,iBAATQ,EAAoBA,EAAKC,SAAWD,EAAKxD,KAAOwD,EACrE,OACE,cAAC,EAAD,CAEEP,YAAaA,EACbV,WAAYgB,EAASG,QAAQ1D,IAAS,EACtC+C,KAAMS,EAAKT,KACXC,MAAOA,GAJFhD,WAcrB,MAAM2D,UAAkB1B,IAAMC,cAC5BY,SACE,MAAM,aAAEc,EAAF,QAAgBC,EAAhB,cAAyBC,EAAzB,YAAwCb,GAAgBb,KAAKrD,MACnE,OACE,oBAAIM,UAAU,YAAY6D,IAAKW,EAA/B,SACGD,EAAa9D,IAAKiE,GACjB,cAAC,EAAD,GAA8Bd,YAAaA,EAAaM,SAAUO,GAAmBC,GAAhEA,EAAEf,WAOlBW,Q,iLCjEf,SAASK,EAAmBC,GAC1B,OAAOA,EAAIA,EAAEC,OAAO,CAACpD,EAAUiD,IAAWjD,EAAIqD,OAAOJ,EAAET,OAAQ,IAAM,GAGhE,MAAMc,EAAgBpE,IAC3B,MAAMqE,EAAQrE,EAAKmB,MAAM,MAAMrB,IAAKwE,GAClCC,IAAMC,OAAO,CACXpF,KAAM,YACNqF,MAAO,CAACC,IAAKF,OAAOF,OAOxB,OAHiBK,IAASH,OAAO,CAC/BC,MAAOJ,KAOX,MAAMO,UAAe3C,IAAM4C,UAGzBC,YAAY/F,GACVgG,MAAMhG,GADgB,sBAEtB,MAAM,MAAEiG,EAAQ,EAAV,OAAaC,EAAS,SAAYlG,EACxCqD,KAAK3C,KAAOyF,SAASC,cAAc,OACnC/C,KAAK3C,KAAK2F,UAAUC,IAAK,kBAAmB,mBAAkBJ,KAAUD,KACxEE,SAASI,KAAKC,YAAYnD,KAAK3C,MAGjC+F,uBACEN,SAASI,KAAKG,YAAYrD,KAAK3C,MAGjCqD,SACE,OAAO4C,IAASC,aAAavD,KAAKrD,MAAMG,SAAUkD,KAAK3C,OAI3D,MAAMmG,UAAmB3D,IAAM4C,UAK7BC,YAAY/F,EAAY8G,GACtBd,MAAMhG,EAAO8G,GADuB,+FAoC3B,EAAGC,YACZ,MAAMC,EAAUD,EAAMZ,WAAa9C,KAAK4D,MAAMF,MAAMZ,SACpD9C,KAAK6D,SAAS,CAAEH,SAAS,KACnBC,IAEFG,sBAAsB,IAAM9D,KAAK+D,eACjC/D,KAAKgE,qBA1C2B,uBA+CtB,KAEd,MAAM,cAAEC,GAAkBjE,KAAKrD,MAC3BsH,GACFA,EAAcC,IAAMC,UAAUnE,KAAK4D,MAAMF,UAnDP,mBAuD1B,CAACU,EAAcxH,EAAoBC,KAC7C,MAAM,eAAEwH,EAAF,YAAkBC,GAAgBtE,KAAK4D,MACvCW,EAAgBH,EAEtB,OAAQG,EAAchF,KACpB,IAAK,SACH,GAAIS,KAAKwE,OAIP,OAHAD,EAAcE,iBACdF,EAAcG,kBACd1E,KAAK2E,kBACE,EAET,MAGF,IAAK,IACH,GAAIJ,EAAcK,QAGhB,OAFAL,EAAcE,iBACdzE,KAAK+D,aAAY,IACV,EAET,MAGF,IAAK,MACL,IAAK,QACH,GAAI/D,KAAKwE,QAA6B,OAAnBH,EAAyB,CAG1C,GADAE,EAAcE,kBACTH,IAAgBA,EAAYtF,QAAUuF,EAAcM,UAAYN,EAAcK,QACjF,OAAO/H,IAIT,MAAMiI,EAAuBlD,EAAmB0C,GAG1CS,EAAaD,EAFFE,KAAKC,IAAIZ,GACOS,EAAqB9F,QAAU,GAGhE,OAAOgB,KAAKkF,eAAetI,EAAQmI,GAErC,MAGF,IAAK,YACC/E,KAAKwE,SAEPD,EAAcE,iBACdzE,KAAK6D,SAAS,CAAEQ,gBAAiBA,GAAkB,GAAK,KAE1D,MAGF,IAAK,UACCrE,KAAKwE,SAEPD,EAAcE,iBACdzE,KAAK6D,SAAS,CAAEQ,eAAgBW,KAAKG,IAAI,GAAId,GAAkB,GAAK,MAU1E,OAAOxH,MA1H6B,qBA6HxB,CAACuI,GAAS,EAAOhE,IACtBgE,GA9H6B,wBAiIrB,CACfxI,EACAmI,KAEO,CAAErB,MAAO,IAAI2B,OArIgB,wBAwIpBC,IAChBtF,KAAK6D,SACH,CACES,YAAa,GACbD,eAAgB,KAChBkB,gBAAiB,GACjBC,iBAAkB,MAEpBF,KAhJkC,oBAoJzB,CAAClB,EAAcxH,EAAoBC,KAC9C,MAAM,OAAE4I,GAAWzF,KAAKrD,MAQxB,OALAqD,KAAK0F,WAAaC,WAAW3F,KAAK2E,eAAgB,KAC9Cc,GACFA,IAEFzF,KAAK4F,0BACE/I,MA7J6B,qBAgKxB,CAACuH,EAAcxH,EAAoBC,KAC/C,MAAM,QAAEgJ,GAAY7F,KAAKrD,MAMzB,OALIkJ,GACFA,IAGF7F,KAAK8F,yBACEjJ,MAvK6B,qBAkLvBuE,IACb,MAAM,YAAEkD,GAAgBtE,KAAK4D,MAC7B,IAAKU,GAAsC,IAAvBA,EAAYtF,OAC9B,OAIF,MAAMoG,EAASpF,KAAKkF,iBACpBlF,KAAK+F,SAASX,KA1LsB,oBA6LzB,KACX,MAAM,YAAEd,GAAgBtE,KAAK4D,MACvBoC,EAAOhG,KAAKwE,OACZyB,EAAYC,OAAOC,eAGzB,IAAKH,IAASC,EACZ,OAGF,MAAM5I,EAAO4I,EAAUG,WAIvB,GADwB9B,GAAeA,EAAYtF,OAAS,GAO5D,GAAI3B,GAAQA,EAAKgJ,cAAe,CAE9B,MAAMC,EAAOjJ,EAAKgJ,cAAcE,wBAC1BC,EAAUN,OAAOM,QACjBC,EAAUP,OAAOO,QACjBC,EAAeR,OAAOS,YAEtBC,EAAWN,EAAKO,KAAOL,EAAU,EACjCM,EAAUR,EAAKS,IAAMN,EAAUH,EAAKU,OAAS,EAC7CC,EAAaP,EAAeI,EAAU,GAG5ChD,sBAAsB,KACpBkC,EAAKkB,MAAMC,QAAU,EACrBnB,EAAKkB,MAAMH,IAASD,EAAF,KAClBd,EAAKkB,MAAML,KAAUD,EAAF,KACnBZ,EAAKkB,MAAME,UAAeH,EAAF,aArB1BjB,EAAKqB,gBAAgB,WA5Ma,iBAsO3BtH,IACTC,KAAKwE,OAASzE,IAvOsB,oBA0OzB,KACX,MAAM,aAAEuH,GAAiBtH,KAAKrD,OACxB,YAAE2H,EAAF,eAAeD,GAAmBrE,KAAK4D,MAE7C,KADwBU,GAAeA,EAAYtF,OAAS,GAE1D,OAAO,KAIT,IAAIuI,EAAgBvC,KAAKG,IAAId,EAAgB,GAC7C,MAAMS,EAAuBlD,EAAmB0C,GAChDiD,EAAgBA,EAAgBzC,EAAqB9F,QAAU,EAC/D,MAAMwI,GAAmC,OAAnBnD,GAA2BS,EAAqB9F,OAAS,EAC3E,CAAC8F,EAAqByC,IACtB,IACF7J,IAAK+J,GAAoB,iBAANA,EAAiBA,EAAE7J,KAAO6J,GAG/C,OACE,cAAC,EAAD,CAAQ5E,OAAQyE,EAAhB,SACE,cAAC,EAAD,CACE7F,QAASzB,KAAKyB,QACdC,cAAe8F,EACf3G,YAAab,KAAKa,YAClBW,aAAc8C,QA/PpB,MAAM,gBAAEoD,EAAkB,GAApB,cAAwBC,EAAgB,SAAYhL,EA9B9BiL,MAgC5B5H,KAAK6H,QAAU,CACbC,yBACAC,wBACAC,uBAAa,CAAEC,QAAStL,EAAMuL,eAC9BC,0BACAC,EAAY,CAAE9L,WAAYoL,EAAiBnL,SAAUoL,KAGvD3H,KAAK4D,MAAQ,CACXyE,UAAW,GACXC,YAAa,GACbhE,YAAa,GACbD,eAAgB,KAChBkB,gBAAiB,GACjB7B,OA9C0BkE,EA8CHjL,EAAM4L,cAAgB,GA9CDlD,IAAMjD,OAAO,CAAEU,SAAUd,EAAa4F,OAkDtFY,oBACExI,KAAKyI,aAGPrF,uBACEpD,KAAK4F,0BACL8C,aAAa1I,KAAK0F,YAGpBzF,qBACED,KAAKyI,aAyIP3C,yBACE6C,IAAcC,OAAO,MAAO,WAG9BhD,0BACE+C,IAAcE,cAyFhBnI,SACE,OACE,sBAAKzD,UAAU,oBAAf,UACG+C,KAAK8I,aACN,cAAC,IAAD,CACEC,aAAa,EACbtD,OAAQzF,KAAKgJ,WACbC,UAAWjJ,KAAKiJ,UAChBlD,SAAU/F,KAAK+F,SACfF,QAAS7F,KAAKkJ,YACdC,YAAanJ,KAAKrD,MAAMwM,YACxBtB,QAAS7H,KAAK6H,QACduB,YAAY,EACZ1F,MAAO1D,KAAK4D,MAAMF,YAObF,QCnVR,MAAM6F,EAAiB,CAC5B,CAAEzL,KAAM,WAAY+C,KAAM,0DAC1B,CAAE/C,KAAM,KAAM+C,KAAM,4DACpB,CAAE/C,KAAM,UAAW+C,KAAM,yDACzB,CACE/C,KAAM,UACN+C,KACE,iMAEJ,CAAE/C,KAAM,QAAS+C,KAAM,0DACvB,CAAE/C,KAAM,YAAa+C,KAAM,4EAC3B,CACE/C,KAAM,WACN+C,KAAM,8FAER,CAAE/C,KAAM,WAAY+C,KAAM,oDAC1B,CAAE/C,KAAM,SAAU+C,KAAM,gEACxB,CACE/C,KAAM,eACN+C,KACE,kHAEJ,CACE/C,KAAM,QACN+C,KACE,6LAEJ,CAAE/C,KAAM,OAAQ+C,KAAM,6DACtB,CAAE/C,KAAM,OAAQ+C,KAAM,iDACtB,CAAE/C,KAAM,YAAa+C,KAAM,kEAC3B,CAAE/C,KAAM,KAAM+C,KAAM,4DACpB,CAAE/C,KAAM,SAAU+C,KAAM,sFACxB,CACE/C,KAAM,OACN+C,KACE,mHAEJ,CAAE/C,KAAM,QAAS+C,KAAM,8CACvB,CAAE/C,KAAM,cAAe+C,KAAM,sEAC7B,CAAE/C,KAAM,WAAY+C,KAAM,8CAC1B,CAAE/C,KAAM,QAAS+C,KAAM,uEACvB,CAAE/C,KAAM,QAAS+C,KAAM,2FACvB,CACE/C,KAAM,QACN+C,KACE,2JAEJ,CAAE/C,KAAM,UAAW+C,KAAM,mFACzB,CAAE/C,KAAM,eAAgB+C,KAAM,mDAC9B,CAAE/C,KAAM,iBAAkB+C,KAAM,yCAChC,CAAE/C,KAAM,QAAS+C,KAAM,8CACvB,CAAE/C,KAAM,SAAU+C,KAAM,gEACxB,CAAE/C,KAAM,SAAU+C,KAAM,oFACxB,CAAE/C,KAAM,SAAU+C,KAAM,2EACxB,CACE/C,KAAM,kBACN+C,KACE,gHAEJ,CAAE/C,KAAM,SAAU+C,KAAM,8EACxB,CAAE/C,KAAM,YAAa+C,KAAM,6EAC3B,CAAE/C,KAAM,OAAQ+C,KAAM,uEACtB,CAAE/C,KAAM,YAAa+C,KAAM,oEAC3B,CAAE/C,KAAM,OAAQ+C,KAAM,8CACtB,CAAE/C,KAAM,MAAO+C,KAAM,kEACrB,CACE/C,KAAM,cACN+C,KAAM,kGAER,CACE/C,KAAM,aACN+C,KAAM,uGAER,CAAE/C,KAAM,QAAS+C,KAAM,iEACvB,CAAE/C,KAAM,QAAS+C,KAAM,oEAGZ2I,EAAiB,CAC5B,CAAE1L,KAAM,MAAO+C,KAAM,+CACrB,CACE/C,KAAM,OACN+C,KACE,iHAEJ,CAAE/C,KAAM,MAAO+C,KAAM,iEACrB,CAAE/C,KAAM,MAAO+C,KAAM,wEACrB,CACE/C,KAAM,UACN+C,KACE,wIAEJ,CACE/C,KAAM,UACN+C,KACE,wIAEJ,CACE/C,KAAM,SACN+C,KACE,wIAEJ,CACE/C,KAAM,SACN+C,KACE,wIAEJ,CAAE/C,KAAM,eAAgB+C,KAAM,8DAC9B,CAAE/C,KAAM,eAAgB+C,KAAM,yDAC9B,CAAE/C,KAAM,cAAe+C,KAAM,wCAC7B,CACE/C,KAAM,cACN+C,KACE,uHAEJ,CACE/C,KAAM,OACN+C,KAAM,+GAER,CACE/C,KAAM,SACN+C,KAAM,kGAER,CACE/C,KAAM,OACN+C,KACE,kHAEJ,CACE/C,KAAM,QACN+C,KACE,kHAEJ,CAAE/C,KAAM,MAAO+C,KAAM,sDACrB,CACE/C,KAAM,QACN+C,KACE,sHAEJ,CAAE/C,KAAM,WAAY+C,KAAM,kEAC1B,CAAE/C,KAAM,sBAAuB+C,KAAM,6CACrC,CAAE/C,KAAM,sBAAuB+C,KAAM,qCACrC,CAAE/C,KAAM,WAAY+C,KAAM,+DAC1B,CAAE/C,KAAM,WAAY+C,KAAM,iFAC1B,CAAE/C,KAAM,WAAY+C,KAAM,kDAC1B,CAAE/C,KAAM,MAAO+C,KAAM,kEACrB,CACE/C,KAAM,SACN+C,KACE,2IAEJ,CACE/C,KAAM,WACN+C,KACE,6HAEJ,CAAE/C,KAAM,aAAc+C,KAAM,uEAC5B,CAAE/C,KAAM,aAAc+C,KAAM,kDAC5B,CAAE/C,KAAM,YAAa+C,KAAM,qEAC3B,CAAE/C,KAAM,oBAAqB+C,KAAM,6DACnC,CAAE/C,KAAM,qBAAsB+C,KAAM,8DACpC,CAAE/C,KAAM,aAAc+C,KAAM,sEAC5B,CAAE/C,KAAM,cAAe+C,KAAM,uEAC7B,CACE/C,KAAM,OACN+C,KAAM,wGAER,CACE/C,KAAM,UACN+C,KAAM,gGAER,CAAE/C,KAAM,UAAW+C,KAAM,2DACzB,CACE/C,KAAM,WACN+C,KAAM,wGAER,CAAE/C,KAAM,MAAO+C,KAAM,gCACrB,CAAE/C,KAAM,MAAO+C,KAAM,8EACrB,CACE/C,KAAM,QACN+C,KACE,mHAEJ,CAAE/C,KAAM,UAAW+C,KAAM,sEACzB,CACE/C,KAAM,UACN+C,KAAM,0GAER,CAAE/C,KAAM,oBAAqB+C,KAAM,qDACnC,CACE/C,KAAM,eACN+C,KAAM,yGAER,CACE/C,KAAM,sBACN+C,KAAM,yGAER,CAAE/C,KAAM,WAAY+C,KAAM,uFAC1B,CACE/C,KAAM,eACN+C,KACE,8LAEJ,CACE/C,KAAM,gBACN+C,KAAM,qGAER,CAAE/C,KAAM,gBAAiB+C,KAAM,yDAC/B,CAAE/C,KAAM,aAAc+C,KAAM,6EAC5B,CAAE/C,KAAM,YAAa+C,KAAM,mFAC3B,CAAE/C,KAAM,YAAa+C,KAAM,2EAC3B,CAAE/C,KAAM,SAAU+C,KAAM,gFACxB,CACE/C,KAAM,aACN+C,KACE,uIAEJ,CACE/C,KAAM,WACN+C,KACE,qHAEJ,CACE/C,KAAM,UACN+C,KACE,mHAEJ,CAAE/C,KAAM,WAAY+C,KAAM,sDAC1B,CAAE/C,KAAM,WAAY+C,KAAM,sFAC1B,CAAE/C,KAAM,aAAc+C,KAAM,wFAC5B,CAAE/C,KAAM,YAAa+C,KAAM,uFAC3B,CAAE/C,KAAM,YAAa+C,KAAM,uFAC3B,CACE/C,KAAM,qBACN+C,KAAM,qFAER,CAAE/C,KAAM,MAAO+C,KAAM,gFACrB,CACE/C,KAAM,QACN+C,KAAM,mGAER,CAAE/C,KAAM,OAAQ+C,KAAM,gFACtB,CACE/C,KAAM,YACN+C,KAAM,6GAER,CACE/C,KAAM,cACN+C,KACE,8JAEJ,CAAE/C,KAAM,UAAW+C,KAAM,wEACzB,CAAE/C,KAAM,cAAe+C,KAAM,4EAC7B,CAAE/C,KAAM,cAAe+C,KAAM,uEAC7B,CAAE/C,KAAM,QAAS+C,KAAM,2CACvB,CAAE/C,KAAM,kBAAmB+C,KAAM,uEACjC,CAAE/C,KAAM,kBAAmB+C,KAAM,uEACjC,CAAE/C,KAAM,QAAS+C,KAAM,2EACvB,CAAE/C,KAAM,WAAY+C,KAAM,gDAC1B,CAAE/C,KAAM,UAAW+C,KAAM,oDACzB,CAAE/C,KAAM,UAAW+C,KAAM,qDACzB,CAAE/C,KAAM,OAAQ+C,KAAM,6CACtB,CAAE/C,KAAM,cAAe+C,KAAM,oDAC7B,CAAE/C,KAAM,MAAO+C,KAAM,4FACrB,CACE/C,KAAM,YACN+C,KAAM,2GAER,CAAE/C,KAAM,YAAa+C,KAAM,6EAC3B,CACE/C,KAAM,MACN+C,KACE,oMAEJ,CACE/C,KAAM,MACN+C,KACE,oMAEJ,CACE/C,KAAM,UACN+C,KAAM,4GAER,CAAE/C,KAAM,iBAAkB+C,KAAM,8EAChC,CACE/C,KAAM,iBACN+C,KACE,oIAEJ,CAAE/C,KAAM,UAAW+C,KAAM,iEACzB,CAAE/C,KAAM,WAAY+C,KAAM,0EAC1B,CAAE/C,KAAM,QAAS+C,KAAM,sEACvB,CAAE/C,KAAM,QAAS+C,KAAM,sDACvB,CAAE/C,KAAM,aAAc+C,KAAM,2EAC5B,CAAE/C,KAAM,YAAa+C,KAAM,+CAC3B,CACE/C,KAAM,SACN+C,KACE,gHAEJ,CAAE/C,KAAM,MAAO+C,KAAM,2CACrB,CAAE/C,KAAM,QAAS+C,KAAM,oDACvB,CAAE/C,KAAM,OAAQ+C,KAAM,0CACtB,CACE/C,KAAM,WACN+C,KAAM,wGAER,CACE/C,KAAM,gBACN+C,KAAM,wGAER,CACE/C,KAAM,kBACN+C,KAAM,kGAER,CAAE/C,KAAM,cAAe+C,KAAM,2DAC7B,CACE/C,KAAM,gBACN+C,KAAM,sGAER,CAAE/C,KAAM,WAAY+C,KAAM,8EAC1B,CACE/C,KAAM,UACN+C,KAAM,kGAER,CACE/C,KAAM,cACN+C,KACE,yIAEJ,CAAE/C,KAAM,MAAO+C,KAAM,+CACrB,CAAE/C,KAAM,SAAU+C,KAAM,uEACxB,CACE/C,KAAM,iBACN+C,KACE,yHAEJ,CAAE/C,KAAM,MAAO+C,KAAM,+CACrB,CAAE/C,KAAM,SAAU+C,KAAM,uEACxB,CAAE/C,KAAM,cAAe+C,KAAM,6EAC7B,CACE/C,KAAM,OACN+C,KACE,mKAEJ,CAAE/C,KAAM,MAAO+C,KAAM,8CACrB,CACE/C,KAAM,MACN+C,KACE,iNAEJ,CAAE/C,KAAM,OAAQ+C,KAAM,8EACtB,CACE/C,KAAM,WACN+C,KAAM,6FAER,CAAE/C,KAAM,aAAc+C,KAAM,gDAC5B,CAAE/C,KAAM,aAAc+C,KAAM,oEAC5B,CACE/C,KAAM,aACN+C,KACE,iSAEJ,CACE/C,KAAM,aACN+C,KACE,weAEJ,CACE/C,KAAM,YACN+C,KACE,8MAEJ,CACE/C,KAAM,iBACN+C,KACE,+HAEJ,CACE/C,KAAM,mBACN+C,KACE,mOAEJ,CAAE/C,KAAM,gBAAiB+C,KAAM,mFAC/B,CACE/C,KAAM,YACN+C,KACE,wKAEJ,CACE/C,KAAM,aACN+C,KACE,yNAEJ,CACE/C,KAAM,qBACN+C,KACE,uKAEJ,CACE/C,KAAM,sBACN+C,KACE,gLAEJ,CAAE/C,KAAM,KAAM+C,KAAM,yCACpB,CAAE/C,KAAM,QAAS+C,KAAM,sDACvB,CAAE/C,KAAM,MAAO+C,KAAM,wCACrB,CACE/C,KAAM,OACN+C,KACE,kKAEJ,CACE/C,KAAM,UACN+C,KACE,mHAEJ,CAAE/C,KAAM,OAAQ+C,KAAM,4BACtB,CAAE/C,KAAM,QAAS+C,KAAM,wEACvB,CAAE/C,KAAM,SAAU+C,KAAM,+DACxB,CAAE/C,KAAM,UAAW+C,KAAM,kDACzB,CAAE/C,KAAM,UAAW+C,KAAM,2CACzB,CAAE/C,KAAM,QAAS+C,KAAM,0DACvB,CACE/C,KAAM,aACN+C,KACE,kHAEJ,CACE/C,KAAM,aACN+C,KACE,gXAEJ,CAAE/C,KAAM,aAAc+C,KAAM,sEAC5B,CAAE/C,KAAM,mBAAoB+C,KAAM,uDAClC,CACE/C,KAAM,6BACN+C,KACE,gHAEJ,CAAE/C,KAAM,4BAA6B+C,KAAM,2CAC3C,CAAE/C,KAAM,gBAAiB+C,KAAM,sEAC/B,CACE/C,KAAM,gBACN+C,KAAM,2FAER,CAAE/C,KAAM,uBAAwB+C,KAAM,uEACtC,CAAE/C,KAAM,oBAAqB+C,KAAM,wEACnC,CAAE/C,KAAM,sBAAuB+C,KAAM,sEACrC,CAAE/C,KAAM,qBAAsB+C,KAAM,gEACpC,CAAE/C,KAAM,aAAc+C,KAAM,yDAC5B,CACE/C,KAAM,oBACN+C,KAAM,mFAER,CACE/C,KAAM,4BACN+C,KAAM,iFAER,CAAE/C,KAAM,kBAAmB+C,KAAM,sEACjC,CAAE/C,KAAM,0BAA2B+C,KAAM,oEACzC,CACE/C,KAAM,iBACN+C,KAAM,2FAER,CACE/C,KAAM,wBACN+C,KAAM,sGAER,CAAE/C,KAAM,aAAc+C,KAAM,2DAC5B,CAAE/C,KAAM,cAAe+C,KAAM,wFAC7B,CACE/C,KAAM,qBACN+C,KAAM,kGAER,CAAE/C,KAAM,kBAAmB+C,KAAM,4EACjC,CACE/C,KAAM,oBACN+C,KAAM,+FAER,CAAE/C,KAAM,kBAAmB+C,KAAM,sCACjC,CAAE/C,KAAM,wBAAyB+C,KAAM,mEACvC,CACE/C,KAAM,0BACN+C,KAAM,6EAER,CACE/C,KAAM,kBACN+C,KAAM,qGAER,CAAE/C,KAAM,eAAgB+C,KAAM,wDAC9B,CAAE/C,KAAM,uBAAwB+C,KAAM,sDACtC,CAAE/C,KAAM,kBAAmB+C,KAAM,yEACjC,CAAE/C,KAAM,OAAQ+C,KAAM,gCACtB,CAAE/C,KAAM,MAAO+C,KAAM,8BACrB,CACE/C,KAAM,QACN+C,KACE,kHAEJ,CAAE/C,KAAM,OAAQ+C,KAAM,qCACtB,CAAE/C,KAAM,aAAc+C,KAAM,wFAC5B,CACE/C,KAAM,eACN+C,KAAM,0FAER,CACE/C,KAAM,cACN+C,KAAM,yFAER,CACE/C,KAAM,cACN+C,KAAM,yFAER,CACE/C,KAAM,QACN+C,KACE,6JAEJ,CACE/C,KAAM,UACN+C,KACE,sHAEJ,CACE/C,KAAM,SACN+C,KACE,gKAEJ,CAAE/C,KAAM,SAAU+C,KAAM,4CACxB,CAAE/C,KAAM,eAAgB+C,KAAM,4EAC9B,CACE/C,KAAM,eACN+C,KAAM,wFAER,CAAE/C,KAAM,SAAU+C,KAAM,yBACxB,CAAE/C,KAAM,cAAe+C,KAAM,oDAC7B,CAAE/C,KAAM,SAAU+C,KAAM,2DACxB,CAAE/C,KAAM,SAAU+C,KAAM,mFACxB,CACE/C,KAAM,YACN+C,KAAM,gGAER,CAAE/C,KAAM,MAAO+C,KAAM,kDACrB,CAAE/C,KAAM,QAAS+C,KAAM,sEACvB,CAAE/C,KAAM,QAAS+C,KAAM,8EACvB,CAAE/C,KAAM,MAAO+C,KAAM,iCACrB,CACE/C,KAAM,UACN+C,KAAM,0GAER,CACE/C,KAAM,gBACN+C,KACE,uHAEJ,CAAE/C,KAAM,SAAU+C,KAAM,4DACxB,CAAE/C,KAAM,aAAc+C,KAAM,yEAC5B,CAAE/C,KAAM,YAAa+C,KAAM,oDAC3B,CACE/C,KAAM,WACN+C,KAAM,6FAER,CACE/C,KAAM,YACN+C,KACE,oIAEJ,CAAE/C,KAAM,SAAU+C,KAAM,2EACxB,CAAE/C,KAAM,QAAS+C,KAAM,2CACvB,CAAE/C,KAAM,QAAS+C,KAAM,oEACvB,CAAE/C,KAAM,SAAU+C,KAAM,iEACxB,CAAE/C,KAAM,UAAW+C,KAAM,wCACzB,CAAE/C,KAAM,WAAY+C,KAAM,gEAC1B,CAAE/C,KAAM,WAAY+C,KAAM,8CAC1B,CAAE/C,KAAM,aAAc+C,KAAM,0EAC5B,CAAE/C,KAAM,UAAW+C,KAAM,oCACzB,CACE/C,KAAM,YACN+C,KACE,4PAEJ,CAAE/C,KAAM,WAAY+C,KAAM,iFAC1B,CAAE/C,KAAM,OAAQ+C,KAAM,iFACtB,CAAE/C,KAAM,WAAY+C,KAAM,+DAC1B,CAAE/C,KAAM,aAAc+C,KAAM,8DAC5B,CAAE/C,KAAM,aAAc+C,KAAM,2EAC5B,CACE/C,KAAM,aACN+C,KAAM,8GAER,CACE/C,KAAM,WACN+C,KACE,mJAEJ,CACE/C,KAAM,aACN+C,KACE,4HAEJ,CACE/C,KAAM,YACN+C,KACE,sJAEJ,CAAE/C,KAAM,aAAc+C,KAAM,0DAC5B,CACE/C,KAAM,aACN+C,KAAM,qGAER,CACE/C,KAAM,MACN+C,KACE,uLAIO4I,EAAW,CACtB,KACA,KACA,WACA,cACA,aACA,gBACA,aACA,MACA,UACA,QACA,OACA,QACA,MACA,KACA,SACA,MACA,SACA,OACA,WACA,OACA,OACA,OACA,WACA,QAGWC,EAAgB,CAC3B,CACE5L,KAAM,gBACNyD,QAAS,kBACTV,KAAM,0EAER,CACE/C,KAAM,YACNyD,QAAS,cACTV,KAAM,mGAER,CACE/C,KAAM,cACNyD,QAAS,gBACTV,KAAM,mGAER,CACE/C,KAAM,iBACNyD,QAAS,mBACTV,KAAM,mFAER,CAAE/C,KAAM,cAAeyD,QAAS,gBAAiBV,KAAM,8CAQnD8I,EAAY,CAChBC,QAAS,CACPC,QAAS,mBACTC,YAAY,EACZC,QAAQ,GAEV,mBAAoB,CAClBF,QAAS,wBACTG,OAAQ,IAEVC,SAAU,CACRJ,QAAS,IAAIK,OAbO,CAAC,UAAW,UAAW,QAAS,OAAQ,QAAS,SAAU,SAa/CnM,KAAK,MAAhB,IAA0B,KAC/Ce,MAAO,UAETqL,QAAS,IAAID,OAAQ,SAAQV,EAAe5L,IAAKwM,GAAMA,EAAEtM,MAAMC,KAAK,mBAAoB,KACxFsM,OAAQ,CACNR,QAAS,iDACTE,QAAQ,GAEVO,QAAS,IAAIJ,OAAQ,SAAQT,EAAS1L,KAAK,QAAQwL,EAAe3L,IAAKwM,GAAMA,EAAEtM,MAAMC,KAAK,eAAgB,KAC1GwM,QAAS,qBACTC,OAAQ,wDACRC,SAAU,yCACVC,YAAa,aACbC,SAAU,+BAGZhB,EAAU,oBAAoBK,OAAS,CACrCY,SAAU,CACRf,QAAS,mBACT/K,MAAO,UAETmL,SAAUN,EAAUM,SACpBO,OAAQb,EAAUa,OAClBL,QAASR,EAAUQ,QACnBE,OAAQV,EAAUU,OAClBM,SAAUhB,EAAUgB,UAKPhB,Q,wHCjsBf,MAkCMkB,EAAa9I,GAAcA,EAAE+I,QAAQ,yBAA0B,IAAIC,OACnEC,EAAYlN,IAAD,CAAqBA,SAEvB,MAAMmN,UAAwBvH,EAK3Cd,YAAY/F,EAAY8G,GACtBd,MAAMhG,EAAO8G,GADuB,6FAYxB,CAACuH,GAAQ,KACrB,MAAM/E,EAAYC,OAAOC,eAEzB,GAAIF,GAAaA,EAAUG,WAAY,CACrC,MAAM6E,EAAchF,EAAUG,WAAWC,cACzC,GAAoB,OAAhB4E,EACF,OAGF,IADmBA,EAAYC,QAAQ,uBACpBlL,KAAK4D,MAAMF,MAAMyH,UAElC,OAIF,MAAM/L,EAAQ6G,EAAUmF,WAAW,GAC7BxN,EAAOqI,EAAUG,WAAWiF,YAClC,GAAa,OAATzN,EACF,OAEF,MAAM4B,EAASJ,EAAMf,YACrB,IAAIwE,EAAS8H,EAAU/M,EAAK0N,OAAO,EAAG9L,IAGtC,MAAM+L,EAAcvL,KAAK4D,MAAMF,MAAM8H,aAC/BC,EAAczL,KAAK4D,MAAMF,MAAMgI,WAAW9N,KAAK+N,MAAM,EAAGJ,GAG9D,IAAIK,EAAsC,GAC1C,MAAMC,EAAiBZ,EAAYjI,UACnC,IAAIwC,EAAkC,KAGtC,GAAIqG,EAAeC,SAAS,oBAC1BtG,EAAmB,mBACnBoG,EAAmB5L,KAAK+L,4BAGnB,GAAIN,EAAYO,MAAM,uBAC3BxG,EAAmB,gBACnBoG,EAAmB5L,KAAK+L,4BAGnB,GAAIN,EAAYO,MAAM,2BAC3BxG,EAAmB,oBACnBoG,EAAmB5L,KAAKiM,8BACnB,GAAIR,EAAYO,MAAM,yDAC3BxG,EAAmB,uBACnBoG,EAAmB5L,KAAK+L,4BAGnB,GAAIN,EAAYO,MAAM,uCAC3BxG,EAAmB,aACnBoG,EAAmB5L,KAAK+L,4BAGnB,GAAIN,EAAYO,MAAM,mBAC3BxG,EAAmB,kBACnBoG,EAAmB5L,KAAK+L,4BACnB,GAAIN,EAAYO,MAAM,+BAC3BxG,EAAmB,eACnBoG,EAAmB5L,KAAKkM,2BAGnB,GAAIT,EAAYO,MAAM,yBAC3BxG,EAAmB,mBACnBoG,EAAmB5L,KAAK+L,4BAGnB,GAAIN,EAAYO,MAAM,sCAAuC,CAClExG,EAAmB,yBACnB,MAAM2G,EAAKnM,KAAKoM,0BAA0BX,GAC1CG,EAAmB5L,KAAKkM,oBAAoBC,GAC5CtJ,EAASA,EAAO+H,QAAQ,IAAK,SAGxB,GAAIyB,EAAenI,IAAMC,UAAUnE,KAAK4D,MAAMF,QAAQsI,MAAM,aAAc,CAE/E,GADAxG,EAAmB,eACfxF,KAAKsM,OAKP,OAFAtM,KAAKuM,mBACL5G,WAAW3F,KAAK+D,YAAa,GAH7B6H,EAAmB5L,KAAKwM,6BAQrB,IAAI3J,GAAWgJ,EAAeC,SAAS,aAAgBd,GASzC,IAAVA,IACTxF,EAAmB,yBACfiG,EAAYO,MAAM,UACpBnJ,EAAS,IAEX+I,EAAmB5L,KAAKyM,6BAd2C,CAEnE,GAAIhB,EAAYO,MAAM,QAEpB,YADAnJ,EAAS,IAGXA,EAwRR,SAAqB6J,GACnB,MACMV,EADkB,0BACMW,KAAKD,GACnC,GAAIV,GAASA,EAAMhN,OAAS,EAC1B,OAAOgN,EAAM,GAEf,MAAO,GA9RQY,CAAY/J,GACrB2C,EAAmB,kBACnBoG,EAAmB5L,KAAKyM,wBAS1B,IAAII,EAAU,EACdhK,EAASA,EAAOiK,cAChB,MAAMC,EAAsBnB,EACzBlO,IAAKsP,IACAA,EAAM9L,OAAS2B,IAAWmK,EAAMC,aAClCD,EAAM9L,MAAQ8L,EAAM9L,MAAMgM,OAAQC,GAAMA,EAAEvP,KAAKoB,QAAU6D,EAAO7D,QAC5DgO,EAAMI,YACRJ,EAAM9L,MAAQ8L,EAAM9L,MAAMgM,OAAQC,GAA+C,IAAzCA,EAAEvP,KAAKkP,cAAcxL,QAAQuB,IAErEmK,EAAM9L,MAAQ8L,EAAM9L,MAAMgM,OAAQC,GAAMA,EAAEvP,KAAKkP,cAAcxL,QAAQuB,IAAW,IAGpFgK,GAAWG,EAAM9L,MAAMlC,OAChBgO,IAERE,OAAQF,GAAUA,EAAM9L,MAAMlC,OAAS,GAK1CgB,KAAK6D,SAAS,CACZ0B,gBAAiB1C,EACjB2C,mBACA6H,cAAezP,EACf0G,YAAauI,EAAU,EAAIE,EAAsB,QA5IjB,wBAiJrB,CAACnQ,EAAoBmI,KACpC,MAAM,gBAAEQ,EAAF,iBAAmBC,EAAnB,cAAqC6H,GAAkBrN,KAAK4D,MAClE,IAAI0J,EAAiBvI,EAAWnH,MAAQmH,EACxC,MAIMwI,EAAWC,UAAQC,mBACD,aAApB1I,EAAW/H,KACRuQ,GAAyB,MAAbA,IACfD,GAAkB,KAEU,qBAArB9H,EACJ+H,GAAyB,MAAbA,IACfD,GAAkB,KAGfC,GAAyB,MAAbA,IACfD,GAAkB,KAKtB,MAAMI,EAAW3I,EAAW4I,iBAAmBpI,EAAgBvG,OAEzD4O,EADOjD,EAAU0C,GACGrO,OAASuG,EAAgBvG,OAC7CQ,EAAS6N,EAAc/L,QAAQiE,GAE/BsI,EADUtI,IAAqBqI,EAAe,GAAKpO,GAAU,GAAM8N,IAAmBD,GAClEO,EAAepO,EAAS,EAMlD,OAJAQ,KAAK2E,eAAe,IAClB/H,EAAOkR,eAAeJ,GAAUK,cAAcF,GAASG,WAAWV,GAAgBW,YA5BvE,GA4ByFxO,SAG/F7C,IAjLPoD,KAAKsM,OAhBwB,CAC/B4B,UAAW,CACTC,QAAS,KAgBTnO,KAAK+D,YAAcqK,mBAASpO,KAAK+D,YA9Cb,KAiDtByE,oBACE7F,MAAM6F,oBACNxI,KAAKuM,cAoOCC,wBACN,OAAOxM,KAAKkM,sBAGNO,wBACN,MAAO,CACL,CACEW,aAAa,EACbxM,MAAO,WACPM,MAAOqI,EAAS7L,IAAIoN,IAEtB,CACEsC,aAAa,EACbxM,MAAO,YACPM,MAAOmI,GAET,CACE+D,aAAa,EACbxM,MAAO,YACPM,MAAOoI,EAAe5L,IAAKmE,IACzBA,EAAE7E,KAAO,WACF6E,KAGX,CACEuL,aAAa,EACbxM,MAAO,SACPM,MAAOsI,EAAc9L,IAAKmE,IACxBA,EAAE7E,KAAO,WACF6E,KAGX,CACEuL,aAAa,EACbxM,MAAO,SACPM,MAAOxD,cAAIsC,KAAKsM,OAAO4B,UAAUC,QAAQE,OAAS1Q,IAAD,CAAeC,KAAMD,EAAE2Q,UAKtErC,yBACN,MAAO,CACL,CACEmB,aAAa,EACbxM,MAAO,YACPM,MAAOoI,EAAe5L,IAAKmE,IACzBA,EAAE7E,KAAO,WACF6E,KAGX,CACEuL,aAAa,EACbxM,MAAO,SACPM,MAAOsI,EAAc9L,IAAKmE,IACxBA,EAAE7E,KAAO,WACF6E,MAMfqK,oBAAoBC,EAAK,WAEvB,OAAInM,KAAKsM,OAAO4B,UAAU/B,GACjB,CACL,CACEiB,aAAa,EACbxM,MAAO,SAEPM,MAAOxD,cAAIsC,KAAKsM,OAAO4B,UAAU/B,GAAIkC,OAAS1Q,IAAD,CAAeC,KAAMD,EAAE2Q,UAIjE,GAIHvC,uBACN,MAAMwC,EAAQvO,KAAKwO,sBACnB,GAAID,EAAO,CACT,MAAME,EAAczO,KAAKsM,OAAO4B,UAAUC,QAAQE,OAAOE,GACzD,GAAIE,EACF,MAAO,CACL,CACErB,aAAa,EACbxM,MAAO,SACPM,MAAOxD,cAAI+Q,EAAYC,eAAiBxE,IAAD,CACrCtM,KAAMsM,EAAEoE,KACR3N,KAAMuJ,EAAEyE,UAMlB,MAAO,GAGDH,sBACN,MAEMI,EAAkBvC,EAFVnI,IAAMC,UAAUnE,KAAK4D,MAAMF,QAGnCsI,EAFe,iBAEMW,KAAKiC,GAChC,OAAI5C,GAASA,EAAMhN,OAAS,GAAKgN,EAAM,IAAMA,EAAM,GAC1CA,EAAM,GAEN,KAIHI,0BAA0BvJ,GAChC,MACMmJ,EADkB,0BACMW,KAAK9J,GACnC,OAAImJ,GAASA,EAAMhN,OAAS,GAAKgN,EAAM,IAAMA,EAAM,GAC1CA,EAAM,QAEb,EAIqB,oBACvB,IAAIM,QAAetM,KAAKrD,MAAMkS,YAC1BvC,GACkB,gBAAhBA,EAAOqC,OACTrC,EAYR,SAAoBA,GAClB,MAAMwC,EAnYyB,CAC/BZ,UAAW,CACTC,QAAS,KAmYX,OADAW,EAAsBZ,UAAUC,QAAU7B,EACnCwC,EAfQC,CAAWzC,IAEtBtM,KAAKsM,OAASA,GAEdtM,KAAKsM,OA1XsB,CAC/B4B,UAAW,CACTC,QAAS,MAsYb,SAAS9B,EAAezE,GAEtB,IAAIgH,EAAkBhH,EAAMgD,QADL,YAC6B,IAEpD,OADAgE,EAAkBA,EAAgBhE,QAAQ,KAAM,KACzCgE,E,wIClaT,MAAMI,UAAevM,YAKnBC,YAAY/F,GACVgG,MAAMhG,GADwB,uBAQf+G,IACf,MAAM,MAAEd,EAAF,OAASwC,GAAWpF,KAAKrD,OACzB,MAAEiL,GAAU5H,KAAK4D,MACjBqL,EAASrH,IAAUlE,EACzB1D,KAAK6D,SAAS,CAAEoL,SAAQrH,MAAOlE,IAC3B0B,GACFA,EAAO1B,EAAOd,KAdc,sBAkBjB,KACb,MAAM,QAAEsM,GAAYlP,KAAKrD,MACrBuS,GACFA,MAnBFlP,KAAK4D,MAAQ,CACXqL,QAAQ,EACRrH,MAAOjL,EAAMiL,OAAS,IAqB1BlH,SACE,MAAM,UAAEyO,EAAF,UAAaN,EAAb,YAAwB1F,GAAgBnJ,KAAKrD,OAC7C,OAAEsS,EAAF,MAAUrH,GAAU5H,KAAK4D,MAE/B,OACE,qBAAK3G,UAAU,gBAAgBiK,MAAO,CAAEF,OAAQ,QAAhD,SACE,cAAC,EAAD,CACEuB,aAAc0G,EAAS,KAAOrH,EAC9BM,aAAclI,KAAKkI,aACnBjE,cAAejE,KAAKgE,cACpB2D,cAAc,QACdD,gBAAiB0H,EACjBjG,YAAaA,EACbkG,kBAAmBF,EACnBN,UAAWA,O,EA5CfG,E,eACkB,CACpB7F,YAAa,kBAiDjBmG,IAAWC,UAAU,cAAe,CAClC,iBACCC,GACQA,EAAeR,EAAQ,CAC5B,SACA,WACA,UACA,QACA,YACA,cACA,CAAC,YAAa,CAAES,WAAY,kB,4BC7EnB,MAAMC,EAC2B,+CAC5CC,EACAC,EACAC,EACAC,EACAC,EACAC,GAEA,MAAMC,EAAwBH,EAAiB/Q,MAAM,KAC/CmR,EAAoBH,EAAahR,MAAM,KAEvCoR,EAAW,CAACR,EAASC,EAAgB,iBAAkBC,EAAe,YAD3DI,EAAsB9R,SAEvC,IAAK,MAAMsJ,KAAKwI,EACdE,EAASzQ,KAAKuQ,EAAsBxI,IACpC0I,EAASzQ,KAAKwQ,EAAkBzI,IAGlC,MAAQ,GADU0I,EAAStS,KAAK,kEACiDmS,IAG1C,0CACvCL,EACAC,EACAC,EACAC,EACAC,EACAK,EACAJ,GAEA,MAAMC,EAAwBH,EAAiB/Q,MAAM,KAC/CmR,EAAoBH,EAAahR,MAAM,KAEvCoR,EAAW,CAACR,EAASC,EAAgB,iBAAkBC,EAAe,YAD3DI,EAAsB9R,SAEvC,IAAK,MAAMsJ,KAAKwI,EACdE,EAASzQ,KAAKuQ,EAAsBxI,IACpC0I,EAASzQ,KAAKwQ,EAAkBzI,IAGlC,MACG,GAFe0I,EAAStS,KAAK,mEAE6CmS,qBACvDK,mBAAmBD,ICjC9B,MAAME,EACO,2BACxBC,EACAC,EACAC,GAEA,MAAMC,EAA+C,GAErD,IAAKH,EACH,OAAOG,EAGT,IAAK,IAAIjJ,EAAI,EAAGA,EAAI8I,EAAO7M,MAAM1E,OAAQyI,IACvC,IAAKkJ,eAAKD,EAAM,CAAC,QAASvT,cAAIoT,EAAO7M,MAAM+D,GAAIgJ,KAAmB,CAChE,MAAM/M,EAAQvG,cAAIoT,EAAO7M,MAAM+D,GAAIgJ,GAC7B7S,EAAOT,cAAIoT,EAAO7M,MAAM+D,GAAI+I,EAAe9M,GAEjDgN,EAAKhR,KAAK,CACR9B,KAAMA,EACN8F,MAAOA,IAIb,OAAOgN,EAGgB,0BAACH,EAAaT,GACrC,MAAMY,EAA+C,GAErD,IAAKH,EACH,OAAOG,EAGT,IAAK,IAAIjJ,EAAI,EAAGA,EAAI8I,EAAO7M,MAAM1E,OAAQyI,IACnC8I,EAAO7M,MAAM+D,GAAGzK,OAAS8S,GAC3BY,EAAKhR,KAAK,CACR9B,KAAM2S,EAAO7M,MAAM+D,GAAGmJ,KACtBlN,MAAO6M,EAAO7M,MAAM+D,GAAGmJ,OAK7B,OAAOF,EAGW,qBAACH,EAA6CM,GAAoB,QACpF,MAAMC,EAAkB,CAAC,OAAQ,UAAW,UAAW,UAAW,QAAS,SACrEC,EAAaR,aAAH,EAAGA,EAAQ7M,MAAMiN,KAAMK,GAAMA,EAAEJ,KAAKlN,QAAUmN,GAE9D,OAAKE,EASE,CACLE,eAAgBF,EAAWG,uBAC3BC,kBAAmBJ,EAAWK,2BAA6BN,EAE3DO,oBAAqB,CACnB,CAAEzQ,MAAO,OAAQ8C,MAAO,WACrB4M,EAAegB,gBAAf,UAA+BP,EAAWQ,4BAA1C,QAAkE,KAEvEC,WAAYlB,EAAemB,gBAAf,UAA+BV,EAAWS,kBAA1C,QAAwD,KAhB7D,CACLP,eAAgB,GAChBE,kBAAmBL,EACnBO,oBAAqB,GACrBG,WAAY,IAgBI,uBAACD,GACrB,MAAMG,EAAmC,GAEzC,OAAKH,GAILA,EAAqBI,QAASC,IACxBA,EAAMC,WACRH,EAAWhS,KAAK,CACdkB,MAAOkR,IAAmBC,mCAAmCH,EAAMC,WACnEnO,MAAOkO,EAAMC,cAKZH,GAZEA,EAeW,uBAACM,GACrB,OAAOA,EAAmBtU,IAAKuU,IACtB,CACLrR,MAAOqR,EAAUC,gBAAkBD,EAAUvO,MAC7CA,MAAOuO,EAAUvO,SAKE,0BAAC6M,GACxB,MAAMG,EAA+C,GAErD,IAAKH,EACH,OAAOG,EAKT,IAAK,IAAIjJ,EAAI,EAAGA,EAAI8I,EAAO7M,MAAM1E,OAAQyI,IAClCkJ,eAAKD,EAAM,CAAC,QAASvT,cAAIoT,EAAO7M,MAAM+D,GAHtB,qBAInBiJ,EAAKhR,KAAK,CACR9B,KAAO,GAAET,cAAIoT,EAAO7M,MAAM+D,GAJV,eAKhB/D,MAAOvG,cAAIoT,EAAO7M,MAAM+D,GANP,oBAWvB,OAAOiJ,EAGyB,mCAACH,GACjC,MAAMG,EAAgD,GAEtD,IAAKH,EACH,OAAOG,EAKT,IAAK,IAAIjJ,EAAI,EAAGA,EAAI8I,EAAOrT,KAAKwG,MAAM1E,OAAQyI,IACvCkJ,eAAKD,EAAM,CAAC,QAASvT,cAAIoT,EAAOrT,KAAKwG,MAAM+D,GAH3B,qBAInBiJ,EAAKhR,KAAK,CACRkB,MAAQ,GAAEzD,cAAIoT,EAAOrT,KAAKwG,MAAM+D,GAJhB,oBAIwCtK,cAAIoT,EAAOrT,KAAKwG,MAAM+D,GAL7D,oBAMjB/D,MAAOvG,cAAIoT,EAAOrT,KAAKwG,MAAM+D,GANZ,oBAWvB,OAAOiJ,EAGsB,gCAACH,GAC9B,MAAMG,EAAgD,GAEtD,IAAKH,EACH,OAAOG,EAKT,IAAK,IAAIjJ,EAAI,EAAGA,EAAI8I,EAAOrT,KAAKwG,MAAM1E,OAAQyI,IACvCkJ,eAAKD,EAAM,CAAC,QAASvT,cAAIoT,EAAOrT,KAAKwG,MAAM+D,GAAG0K,WAH9B,iBAInBzB,EAAKhR,KAAK,CACRkB,MAAOzD,cAAIoT,EAAOrT,KAAKwG,MAAM+D,GAJb,QAKhB/D,MAAOvG,cAAIoT,EAAOrT,KAAKwG,MAAM+D,GAAG0K,WANf,gBAWvB,OAAOzB,GCtKI,MAAM0B,EAoPnB1P,YAAoB2P,G,YAnPa,CAC/BC,aAAc,CACZ,qCACA,kCACA,iDACA,0CACA,gCACA,wBACA,2CACA,mDACA,uCACA,oCACA,4CACA,8CACA,yCACA,6CACA,kCACA,2CACA,sCACA,kCACA,uCACA,mCACA,iCACA,+BACA,uCACA,oCACA,4CACA,4BACA,yCACA,wCACA,6BACA,yCACA,sCACA,gCACA,8BACA,+BACA,uCACA,gCACA,4BACA,2BACA,2CACA,4BACA,iDACA,gDACA,wDACA,sCACA,kCACA,6BACA,sCACA,mCACA,wCACA,2CACA,yCACA,kDACA,gCACA,2CACA,uDACA,+BACA,gCACA,gCACA,2CACA,yDACA,2CACA,wCACA,6BACA,kCACA,kCACA,mCACA,kCACA,qCACA,iCACA,oCACA,iDACA,iDACA,kDACA,kDACA,4CACA,uDACA,uEACA,8DACA,0CACA,4BACA,sBACA,4BACA,mDACA,iDAEFC,gBAAiB,CACf,qCACA,kCACA,gCACA,wBACA,2CACA,mDACA,uCACA,oCACA,4CACA,yCACA,+BACA,oCACA,4BACA,yCACA,6BACA,yCACA,sCACA,gCACA,8BACA,uCACA,4BACA,4BACA,sCACA,kCACA,6BACA,sCACA,mCACA,wCACA,2CACA,yCACA,kDACA,gCACA,2CACA,uDACA,+BACA,yDACA,2CACA,wCACA,6BACA,kCACA,kCACA,qCACA,iCACA,oCACA,iDACA,iDACA,kDACA,kDACA,4BACA,sBACA,4BACA,mDACA,iDAEFC,oBAAqB,CACnB,qCACA,gCACA,wBACA,2CACA,mDACA,oCACA,4CACA,+BACA,oCACA,4BACA,yCACA,gCACA,8BACA,uCACA,4BACA,sCACA,kCACA,6BACA,sCACA,mCACA,wCACA,2CACA,yCACA,kDACA,gCACA,2CACA,uDACA,+BACA,yDACA,2CACA,wCACA,6BACA,kCACA,kCACA,qCACA,iCACA,oCACA,iDACA,iDACA,kDACA,kDACA,0CACA,4BACA,sBACA,4BACA,mDACA,iDAEFC,kBAAmB,CACjB,qCA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","file":"azureMonitorPlugin.62c612232a976d8836f5.js","sourcesContent":["import React from 'react';\nimport Prism from 'prismjs';\nimport { Decoration } from 'slate';\nimport { Editor } from '@grafana/slate-react';\n\nconst TOKEN_MARK = 'prism-token';\n\nexport function setPrismTokens(language: string, field: string | number, values: any, alias = 'variable') {\n  Prism.languages[language][field] = {\n    alias,\n    pattern: new RegExp(`(?:^|\\\\s)(${values.join('|')})(?:$|\\\\s)`),\n  };\n}\n\n/**\n * Code-highlighting plugin based on Prism and\n * https://github.com/ianstormtaylor/slate/blob/master/examples/code-highlighting/index.js\n *\n * (Adapted to handle nested grammar definitions.)\n */\n\nexport default function PrismPlugin({ definition, language }: { definition: any; language: string }) {\n  if (definition) {\n    // Don't override exising modified definitions\n    Prism.languages[language] = Prism.languages[language] || definition;\n  }\n\n  return {\n    /**\n     * Render a Slate mark with appropriate CSS class names\n     *\n     * @param {Object} props\n     * @returns {Element}\n     */\n\n    renderDecoration(props: any, editor: Editor, next: () => any): JSX.Element {\n      const { children, decoration } = props;\n      // Only apply spans to marks identified by this plugin\n      if (decoration.type !== TOKEN_MARK) {\n        return next();\n      }\n      const className = `token ${decoration.data.get('types')}`;\n      return <span className={className}>{children}</span>;\n    },\n\n    /**\n     * Decorate code blocks with Prism.js highlighting.\n     *\n     * @param {Node} node\n     * @returns {Array}\n     */\n\n    decorateNode(node: any, editor: Editor, next: () => any): any[] {\n      if (node.type !== 'paragraph') {\n        return [];\n      }\n\n      const texts = node.getTexts().toArray();\n      const tstring = texts.map((t: { text: any }) => t.text).join('\\n');\n      const grammar = Prism.languages[language];\n      const tokens = Prism.tokenize(tstring, grammar);\n      const decorations: Decoration[] = [];\n      let startText = texts.shift();\n      let endText = startText;\n      let startOffset = 0;\n      let endOffset = 0;\n      let start = 0;\n\n      function processToken(token: any, acc?: string) {\n        // Accumulate token types down the tree\n        const types = `${acc || ''} ${token.type || ''} ${token.alias || ''}`;\n\n        // Add mark for token node\n        if (typeof token === 'string' || typeof token.content === 'string') {\n          startText = endText;\n          startOffset = endOffset;\n\n          const content = typeof token === 'string' ? token : token.content;\n          const newlines = content.split('\\n').length - 1;\n          const length = content.length - newlines;\n          const end = start + length;\n\n          let available = startText.text.length - startOffset;\n          let remaining = length;\n\n          endOffset = startOffset + remaining;\n\n          while (available < remaining) {\n            endText = texts.shift();\n            remaining = length - available;\n            available = endText.text.length;\n            endOffset = remaining;\n          }\n\n          // Inject marks from up the tree (acc) as well\n          if (typeof token !== 'string' || acc) {\n            const range = node.createDecoration({\n              anchor: {\n                key: startText.key,\n                offset: startOffset,\n              },\n              focus: {\n                key: endText.key,\n                offset: endOffset,\n              },\n              type: TOKEN_MARK,\n              data: { types },\n            });\n\n            decorations.push(range);\n          }\n\n          start = end;\n        } else if (token.content && token.content.length) {\n          // Tokens can be nested\n          for (const subToken of token.content) {\n            processToken(subToken, types);\n          }\n        }\n      }\n\n      // Process top-level tokens\n      for (const token of tokens) {\n        processToken(token);\n      }\n\n      return decorations;\n    },\n  };\n}\n","import React from 'react';\n\nfunction scrollIntoView(el: any) {\n  if (!el || !el.offsetParent) {\n    return;\n  }\n  const container = el.offsetParent;\n  if (el.offsetTop > container.scrollTop + container.offsetHeight || el.offsetTop < container.scrollTop) {\n    container.scrollTop = el.offsetTop - container.offsetTop;\n  }\n}\n\nclass TypeaheadItem extends React.PureComponent<any, any> {\n  el: any;\n  componentDidUpdate(prevProps: any) {\n    if (this.props.isSelected && !prevProps.isSelected) {\n      scrollIntoView(this.el);\n    }\n  }\n\n  getRef = (el: any) => {\n    this.el = el;\n  };\n\n  render() {\n    const { hint, isSelected, label, onClickItem } = this.props;\n    const className = isSelected ? 'typeahead-item typeahead-item__selected' : 'typeahead-item';\n    const onClick = () => onClickItem(label);\n    return (\n      <li ref={this.getRef} className={className} onClick={onClick}>\n        {label}\n        {hint && isSelected ? <div className=\"typeahead-item-hint\">{hint}</div> : null}\n      </li>\n    );\n  }\n}\n\nclass TypeaheadGroup extends React.PureComponent<any, any> {\n  render() {\n    const { items, label, selected, onClickItem } = this.props;\n    return (\n      <li className=\"typeahead-group\">\n        <div className=\"typeahead-group__title\">{label}</div>\n        <ul className=\"typeahead-group__list\">\n          {items.map((item: any) => {\n            const text = typeof item === 'object' ? item.text : item;\n            const label = typeof item === 'object' ? item.display || item.text : item;\n            return (\n              <TypeaheadItem\n                key={text}\n                onClickItem={onClickItem}\n                isSelected={selected.indexOf(text) > -1}\n                hint={item.hint}\n                label={label}\n              />\n            );\n          })}\n        </ul>\n      </li>\n    );\n  }\n}\n\nclass Typeahead extends React.PureComponent<any, any> {\n  render() {\n    const { groupedItems, menuRef, selectedItems, onClickItem } = this.props;\n    return (\n      <ul className=\"typeahead\" ref={menuRef}>\n        {groupedItems.map((g: any) => (\n          <TypeaheadGroup key={g.label} onClickItem={onClickItem} selected={selectedItems} {...g} />\n        ))}\n      </ul>\n    );\n  }\n}\n\nexport default Typeahead;\n","import PluginPrism from 'app/features/explore/slate-plugins/prism';\nimport { BracesPlugin, ClearPlugin, RunnerPlugin, NewlinePlugin } from '@grafana/ui';\nimport Typeahead from './typeahead';\nimport { keybindingSrv } from 'app/core/services/keybindingSrv';\n\nimport { Block, Document, Text, Value, Editor as CoreEditor } from 'slate';\nimport { Editor } from '@grafana/slate-react';\nimport Plain from 'slate-plain-serializer';\nimport ReactDOM from 'react-dom';\nimport React from 'react';\n\nfunction flattenSuggestions(s: any) {\n  return s ? s.reduce((acc: any, g: any) => acc.concat(g.items), []) : [];\n}\n\nexport const makeFragment = (text: string) => {\n  const lines = text.split('\\n').map((line: any) =>\n    Block.create({\n      type: 'paragraph',\n      nodes: [Text.create(line)],\n    } as any)\n  );\n\n  const fragment = Document.create({\n    nodes: lines,\n  });\n  return fragment;\n};\n\nexport const getInitialValue = (query: string) => Value.create({ document: makeFragment(query) });\n\nclass Portal extends React.Component<any, any> {\n  node: any;\n\n  constructor(props: any) {\n    super(props);\n    const { index = 0, prefix = 'query' } = props;\n    this.node = document.createElement('div');\n    this.node.classList.add(`slate-typeahead`, `slate-typeahead-${prefix}-${index}`);\n    document.body.appendChild(this.node);\n  }\n\n  componentWillUnmount() {\n    document.body.removeChild(this.node);\n  }\n\n  render() {\n    return ReactDOM.createPortal(this.props.children, this.node);\n  }\n}\n\nclass QueryField extends React.Component<any, any> {\n  menuEl: any;\n  plugins: any;\n  resetTimer: any;\n\n  constructor(props: any, context: any) {\n    super(props, context);\n\n    const { prismDefinition = {}, prismLanguage = 'kusto' } = props;\n\n    this.plugins = [\n      BracesPlugin(),\n      ClearPlugin(),\n      RunnerPlugin({ handler: props.onPressEnter }),\n      NewlinePlugin(),\n      PluginPrism({ definition: prismDefinition, language: prismLanguage }),\n    ];\n\n    this.state = {\n      labelKeys: {},\n      labelValues: {},\n      suggestions: [],\n      typeaheadIndex: null,\n      typeaheadPrefix: '',\n      value: getInitialValue(props.initialQuery || ''),\n    };\n  }\n\n  componentDidMount() {\n    this.updateMenu();\n  }\n\n  componentWillUnmount() {\n    this.restoreEscapeKeyBinding();\n    clearTimeout(this.resetTimer);\n  }\n\n  componentDidUpdate() {\n    this.updateMenu();\n  }\n\n  onChange = ({ value }: { value: Value }) => {\n    const changed = value.document !== this.state.value.document;\n    this.setState({ value }, () => {\n      if (changed) {\n        // call typeahead only if query changed\n        requestAnimationFrame(() => this.onTypeahead());\n        this.onChangeQuery();\n      }\n    });\n  };\n\n  onChangeQuery = () => {\n    // Send text change to parent\n    const { onQueryChange } = this.props;\n    if (onQueryChange) {\n      onQueryChange(Plain.serialize(this.state.value));\n    }\n  };\n\n  onKeyDown = (event: Event, editor: CoreEditor, next: Function) => {\n    const { typeaheadIndex, suggestions } = this.state;\n    const keyboardEvent = event as KeyboardEvent;\n\n    switch (keyboardEvent.key) {\n      case 'Escape': {\n        if (this.menuEl) {\n          keyboardEvent.preventDefault();\n          keyboardEvent.stopPropagation();\n          this.resetTypeahead();\n          return true;\n        }\n        break;\n      }\n\n      case ' ': {\n        if (keyboardEvent.ctrlKey) {\n          keyboardEvent.preventDefault();\n          this.onTypeahead(true);\n          return true;\n        }\n        break;\n      }\n\n      case 'Tab':\n      case 'Enter': {\n        if (this.menuEl && typeaheadIndex !== null) {\n          // Dont blur input\n          keyboardEvent.preventDefault();\n          if (!suggestions || !suggestions.length || keyboardEvent.shiftKey || keyboardEvent.ctrlKey) {\n            return next();\n          }\n\n          // Get the currently selected suggestion\n          const flattenedSuggestions = flattenSuggestions(suggestions);\n          const selected = Math.abs(typeaheadIndex);\n          const selectedIndex = selected % flattenedSuggestions.length || 0;\n          const suggestion = flattenedSuggestions[selectedIndex];\n\n          return this.applyTypeahead(editor, suggestion);\n        }\n        break;\n      }\n\n      case 'ArrowDown': {\n        if (this.menuEl) {\n          // Select next suggestion\n          keyboardEvent.preventDefault();\n          this.setState({ typeaheadIndex: (typeaheadIndex || 0) + 1 });\n        }\n        break;\n      }\n\n      case 'ArrowUp': {\n        if (this.menuEl) {\n          // Select previous suggestion\n          keyboardEvent.preventDefault();\n          this.setState({ typeaheadIndex: Math.max(0, (typeaheadIndex || 0) - 1) });\n        }\n        break;\n      }\n\n      default: {\n        // console.log('default key', event.key, event.which, event.charCode, event.locale, data.key);\n        break;\n      }\n    }\n    return next();\n  };\n\n  onTypeahead = (change = false, item?: any): boolean | void => {\n    return change;\n  };\n\n  applyTypeahead = (\n    editor?: CoreEditor,\n    suggestion?: { text: any; type: string; deleteBackwards: any }\n  ): { value: Value } => {\n    return { value: new Value() };\n  };\n\n  resetTypeahead = (callback?: () => void) => {\n    this.setState(\n      {\n        suggestions: [],\n        typeaheadIndex: null,\n        typeaheadPrefix: '',\n        typeaheadContext: null,\n      },\n      callback\n    );\n  };\n\n  handleBlur = (event: Event, editor: CoreEditor, next: Function) => {\n    const { onBlur } = this.props;\n    // If we dont wait here, menu clicks wont work because the menu\n    // will be gone.\n    this.resetTimer = setTimeout(this.resetTypeahead, 100);\n    if (onBlur) {\n      onBlur();\n    }\n    this.restoreEscapeKeyBinding();\n    return next();\n  };\n\n  handleFocus = (event: Event, editor: CoreEditor, next: Function) => {\n    const { onFocus } = this.props;\n    if (onFocus) {\n      onFocus();\n    }\n    // Don't go back to dashboard if Escape pressed inside the editor.\n    this.removeEscapeKeyBinding();\n    return next();\n  };\n\n  removeEscapeKeyBinding() {\n    keybindingSrv.unbind('esc', 'keydown');\n  }\n\n  restoreEscapeKeyBinding() {\n    keybindingSrv.initGlobals();\n  }\n\n  onClickItem = (item: any) => {\n    const { suggestions } = this.state;\n    if (!suggestions || suggestions.length === 0) {\n      return;\n    }\n\n    // Manually triggering change\n    const change = this.applyTypeahead();\n    this.onChange(change);\n  };\n\n  updateMenu = () => {\n    const { suggestions } = this.state;\n    const menu = this.menuEl;\n    const selection = window.getSelection();\n\n    // No menu, nothing to do\n    if (!menu || !selection) {\n      return;\n    }\n\n    const node = selection.anchorNode;\n\n    // No suggestions or blur, remove menu\n    const hasSuggesstions = suggestions && suggestions.length > 0;\n    if (!hasSuggesstions) {\n      menu.removeAttribute('style');\n      return;\n    }\n\n    // Align menu overlay to editor node\n    if (node && node.parentElement) {\n      // Read from DOM\n      const rect = node.parentElement.getBoundingClientRect();\n      const scrollX = window.scrollX;\n      const scrollY = window.scrollY;\n      const screenHeight = window.innerHeight;\n\n      const menuLeft = rect.left + scrollX - 2;\n      const menuTop = rect.top + scrollY + rect.height + 4;\n      const menuHeight = screenHeight - menuTop - 10;\n\n      // Write DOM\n      requestAnimationFrame(() => {\n        menu.style.opacity = 1;\n        menu.style.top = `${menuTop}px`;\n        menu.style.left = `${menuLeft}px`;\n        menu.style.maxHeight = `${menuHeight}px`;\n      });\n    }\n  };\n\n  menuRef = (el: any) => {\n    this.menuEl = el;\n  };\n\n  renderMenu = () => {\n    const { portalPrefix } = this.props;\n    const { suggestions, typeaheadIndex } = this.state;\n    const hasSuggesstions = suggestions && suggestions.length > 0;\n    if (!hasSuggesstions) {\n      return null;\n    }\n\n    // Guard selectedIndex to be within the length of the suggestions\n    let selectedIndex = Math.max(typeaheadIndex, 0);\n    const flattenedSuggestions = flattenSuggestions(suggestions);\n    selectedIndex = selectedIndex % flattenedSuggestions.length || 0;\n    const selectedKeys = (typeaheadIndex !== null && flattenedSuggestions.length > 0\n      ? [flattenedSuggestions[selectedIndex]]\n      : []\n    ).map((i) => (typeof i === 'object' ? i.text : i));\n\n    // Create typeahead in DOM root so we can later position it absolutely\n    return (\n      <Portal prefix={portalPrefix}>\n        <Typeahead\n          menuRef={this.menuRef}\n          selectedItems={selectedKeys}\n          onClickItem={this.onClickItem}\n          groupedItems={suggestions}\n        />\n      </Portal>\n    );\n  };\n\n  render() {\n    return (\n      <div className=\"slate-query-field\">\n        {this.renderMenu()}\n        <Editor\n          autoCorrect={false}\n          onBlur={this.handleBlur}\n          onKeyDown={this.onKeyDown}\n          onChange={this.onChange}\n          onFocus={this.handleFocus}\n          placeholder={this.props.placeholder}\n          plugins={this.plugins}\n          spellCheck={false}\n          value={this.state.value}\n        />\n      </div>\n    );\n  }\n}\n\nexport default QueryField;\n","/* eslint-disable max-len */\nexport const operatorTokens = [\n  { text: '!between', hint: 'Matches the input that is outside the inclusive range.' },\n  { text: 'as', hint: \"Binds a name to the operator's input tabular expression.\" },\n  { text: 'between', hint: 'Matches the input that is inside the inclusive range.' },\n  {\n    text: 'consume',\n    hint:\n      'The `consume` operator consumes the tabular data stream handed to it. It is\\r\\nmostly used for triggering the query side-effect without actually returning\\r\\nthe results back to the caller.',\n  },\n  { text: 'count', hint: 'Returns the number of records in the input record set.' },\n  { text: 'datatable', hint: 'Returns a table whose schema and values are defined in the query itself.' },\n  {\n    text: 'distinct',\n    hint: 'Produces a table with the distinct combination of the provided columns of the input table.',\n  },\n  { text: 'evaluate', hint: 'Invokes a service-side query extension (plugin).' },\n  { text: 'extend', hint: 'Create calculated columns and append them to the result set.' },\n  {\n    text: 'externaldata',\n    hint:\n      'Returns a table whose schema is defined in the query itself, and whose data is read from an external raw file.',\n  },\n  {\n    text: 'facet',\n    hint:\n      'Returns a set of tables, one for each specified column.\\r\\nEach table specifies the list of values taken by its column.\\r\\nAn additional table can be created by using the `with` clause.',\n  },\n  { text: 'find', hint: 'Finds rows that match a predicate across a set of tables.' },\n  { text: 'fork', hint: 'Runs multiple consumer operators in parallel.' },\n  { text: 'getschema', hint: 'Produce a table that represents a tabular schema of the input.' },\n  { text: 'in', hint: 'Filters a recordset based on the provided set of values.' },\n  { text: 'invoke', hint: 'Invokes lambda that receives the source of `invoke` as tabular parameter argument.' },\n  {\n    text: 'join',\n    hint:\n      'Merge the rows of two tables to form a new table by matching values of the specified column(s) from each table.',\n  },\n  { text: 'limit', hint: 'Return up to the specified number of rows.' },\n  { text: 'make-series', hint: 'Create series of specified aggregated values along specified axis.' },\n  { text: 'mvexpand', hint: 'Expands multi-value array or property bag.' },\n  { text: 'order', hint: 'Sort the rows of the input table into order by one or more columns.' },\n  { text: 'parse', hint: 'Evaluates a string expression and parses its value into one or more calculated columns.' },\n  {\n    text: 'print',\n    hint:\n      'Evaluates one or more scalar expressions and inserts the results (as a single-row table with as many columns as there are expressions) into the output.',\n  },\n  { text: 'project', hint: 'Select the columns to include, rename or drop, and insert new computed columns.' },\n  { text: 'project-away', hint: 'Select what  columns to exclude from the input.' },\n  { text: 'project-rename', hint: 'Renames columns in the result output.' },\n  { text: 'range', hint: 'Generates a single-column table of values.' },\n  { text: 'reduce', hint: 'Groups a set of strings together based on values similarity.' },\n  { text: 'render', hint: 'Instructs the user agent to render the results of the query in a particular way.' },\n  { text: 'sample', hint: 'Returns up to the specified number of random rows from the input table.' },\n  {\n    text: 'sample-distinct',\n    hint:\n      'Returns a single column that contains up to the specified number of distinct values of the requested column.',\n  },\n  { text: 'search', hint: 'The search operator provides a multi-table/multi-column search experience.' },\n  { text: 'serialize', hint: 'Marks that order of the input row set is safe for window functions usage.' },\n  { text: 'sort', hint: 'Sort the rows of the input table into order by one or more columns.' },\n  { text: 'summarize', hint: 'Produces a table that aggregates the content of the input table.' },\n  { text: 'take', hint: 'Return up to the specified number of rows.' },\n  { text: 'top', hint: 'Returns the first *N* records sorted by the specified columns.' },\n  {\n    text: 'top-hitters',\n    hint: 'Returns an approximation of the first *N* results (assuming skewed distribution of the input).',\n  },\n  {\n    text: 'top-nested',\n    hint: 'Produces hierarchical top results, where each level is a drill-down based on previous level values.',\n  },\n  { text: 'union', hint: 'Takes two or more tables and returns the rows of all of them.' },\n  { text: 'where', hint: 'Filters a table to the subset of rows that satisfy a predicate.' },\n];\n\nexport const functionTokens = [\n  { text: 'abs', hint: 'Calculates the absolute value of the input.' },\n  {\n    text: 'acos',\n    hint:\n      'Returns the angle whose cosine is the specified number (the inverse operation of [`cos()`](cosfunction.md)) .',\n  },\n  { text: 'ago', hint: 'Subtracts the given timespan from the current UTC clock time.' },\n  { text: 'any', hint: 'Returns random non-empty value from the specified expression values.' },\n  {\n    text: 'arg_max',\n    hint:\n      'Finds a row in the group that maximizes *ExprToMaximize*, and returns the value of *ExprToReturn* (or `*` to return the entire row).',\n  },\n  {\n    text: 'arg_min',\n    hint:\n      'Finds a row in the group that minimizes *ExprToMinimize*, and returns the value of *ExprToReturn* (or `*` to return the entire row).',\n  },\n  {\n    text: 'argmax',\n    hint:\n      'Finds a row in the group that maximizes *ExprToMaximize*, and returns the value of *ExprToReturn* (or `*` to return the entire row).',\n  },\n  {\n    text: 'argmin',\n    hint:\n      'Finds a row in the group that minimizes *ExprToMinimize*, and returns the value of *ExprToReturn* (or `*` to return the entire row).',\n  },\n  { text: 'array_concat', hint: 'Concatenates a number of dynamic arrays to a single array.' },\n  { text: 'array_length', hint: 'Calculates the number of elements in a dynamic array.' },\n  { text: 'array_slice', hint: 'Extracts a slice of a dynamic array.' },\n  {\n    text: 'array_split',\n    hint:\n      'Splits an array to multiple arrays according to the split indices and packs the generated array in a dynamic array.',\n  },\n  {\n    text: 'asin',\n    hint: 'Returns the angle whose sine is the specified number (the inverse operation of [`sin()`](sinfunction.md)) .',\n  },\n  {\n    text: 'assert',\n    hint: 'Checks for a condition; if the condition is false, outputs error messages and fails the query.',\n  },\n  {\n    text: 'atan',\n    hint:\n      'Returns the angle whose tangent is the specified number (the inverse operation of [`tan()`](tanfunction.md)) .',\n  },\n  {\n    text: 'atan2',\n    hint:\n      'Calculates the angle, in radians, between the positive x-axis and the ray from the origin to the point (y, x).',\n  },\n  { text: 'avg', hint: 'Calculates the average of *Expr* across the group.' },\n  {\n    text: 'avgif',\n    hint:\n      'Calculates the [average](avg-aggfunction.md) of *Expr* across the group for which *Predicate* evaluates to `true`.',\n  },\n  { text: 'bag_keys', hint: 'Enumerates all the root keys in a dynamic property-bag object.' },\n  { text: 'base64_decodestring', hint: 'Decodes a base64 string to a UTF-8 string' },\n  { text: 'base64_encodestring', hint: 'Encodes a string as base64 string' },\n  { text: 'beta_cdf', hint: 'Returns the standard cumulative beta distribution function.' },\n  { text: 'beta_inv', hint: 'Returns the inverse of the beta cumulative probability beta density function.' },\n  { text: 'beta_pdf', hint: 'Returns the probability density beta function.' },\n  { text: 'bin', hint: 'Rounds values down to an integer multiple of a given bin size.' },\n  {\n    text: 'bin_at',\n    hint:\n      \"Rounds values down to a fixed-size 'bin', with control over the bin's starting point.\\r\\n(See also [`bin function`](./binfunction.md).)\",\n  },\n  {\n    text: 'bin_auto',\n    hint:\n      \"Rounds values down to a fixed-size 'bin', with control over the bin size and starting point provided by a query property.\",\n  },\n  { text: 'binary_and', hint: 'Returns a result of the bitwise `and` operation between two values.' },\n  { text: 'binary_not', hint: 'Returns a bitwise negation of the input value.' },\n  { text: 'binary_or', hint: 'Returns a result of the bitwise `or` operation of the two values.' },\n  { text: 'binary_shift_left', hint: 'Returns binary shift left operation on a pair of numbers.' },\n  { text: 'binary_shift_right', hint: 'Returns binary shift right operation on a pair of numbers.' },\n  { text: 'binary_xor', hint: 'Returns a result of the bitwise `xor` operation of the two values.' },\n  { text: 'buildschema', hint: 'Returns the minimal schema that admits all values of *DynamicExpr*.' },\n  {\n    text: 'case',\n    hint: 'Evaluates a list of predicates and returns the first result expression whose predicate is satisfied.',\n  },\n  {\n    text: 'ceiling',\n    hint: 'Calculates the smallest integer greater than, or equal to, the specified numeric expression.',\n  },\n  { text: 'cluster', hint: 'Changes the reference of the query to a remote cluster.' },\n  {\n    text: 'coalesce',\n    hint: 'Evaluates a list of expressions and returns the first non-null (or non-empty for string) expression.',\n  },\n  { text: 'cos', hint: 'Returns the cosine function.' },\n  { text: 'cot', hint: 'Calculates the trigonometric cotangent of the specified angle, in radians.' },\n  {\n    text: 'count',\n    hint:\n      'Returns a count of the records per summarization group (or in total if summarization is done without grouping).',\n  },\n  { text: 'countif', hint: 'Returns a count of rows for which *Predicate* evaluates to `true`.' },\n  {\n    text: 'countof',\n    hint: 'Counts occurrences of a substring in a string. Plain string matches may overlap; regex matches do not.',\n  },\n  { text: 'current_principal', hint: 'Returns the current principal running this query.' },\n  {\n    text: 'cursor_after',\n    hint: 'A predicate over the records of a table to compare their ingestion time\\r\\nagainst a database cursor.',\n  },\n  {\n    text: 'cursor_before_or_at',\n    hint: 'A predicate over the records of a table to compare their ingestion time\\r\\nagainst a database cursor.',\n  },\n  { text: 'database', hint: 'Changes the reference of the query to a specific database within the cluster scope.' },\n  {\n    text: 'datetime_add',\n    hint:\n      'Calculates a new [datetime](./scalar-data-types/datetime.md) from a specified datepart multiplied by a specified amount, added to a specified [datetime](./scalar-data-types/datetime.md).',\n  },\n  {\n    text: 'datetime_diff',\n    hint: 'Calculates calendarian difference between two [datetime](./scalar-data-types/datetime.md) values.',\n  },\n  { text: 'datetime_part', hint: 'Extracts the requested date part as an integer value.' },\n  { text: 'dayofmonth', hint: 'Returns the integer number representing the day number of the given month' },\n  { text: 'dayofweek', hint: 'Returns the integer number of days since the preceding Sunday, as a `timespan`.' },\n  { text: 'dayofyear', hint: 'Returns the integer number represents the day number of the given year.' },\n  { text: 'dcount', hint: 'Returns an estimate of the number of distinct values of *Expr* in the group.' },\n  {\n    text: 'dcount_hll',\n    hint:\n      'Calculates the dcount from hll results (which was generated by [hll](hll-aggfunction.md) or [hll_merge](hll-merge-aggfunction.md)).',\n  },\n  {\n    text: 'dcountif',\n    hint:\n      'Returns an estimate of the number of distinct values of *Expr* of rows for which *Predicate* evaluates to `true`.',\n  },\n  {\n    text: 'degrees',\n    hint:\n      'Converts angle value in radians into value in degrees, using formula `degrees = (180 / PI ) * angle_in_radians`',\n  },\n  { text: 'distance', hint: 'Returns the distance between two points in meters.' },\n  { text: 'endofday', hint: 'Returns the end of the day containing the date, shifted by an offset, if provided.' },\n  { text: 'endofmonth', hint: 'Returns the end of the month containing the date, shifted by an offset, if provided.' },\n  { text: 'endofweek', hint: 'Returns the end of the week containing the date, shifted by an offset, if provided.' },\n  { text: 'endofyear', hint: 'Returns the end of the year containing the date, shifted by an offset, if provided.' },\n  {\n    text: 'estimate_data_size',\n    hint: 'Returns an estimated data size of the selected columns of the tabular expression.',\n  },\n  { text: 'exp', hint: 'The base-e exponential function of x, which is e raised to the power x: e^x.' },\n  {\n    text: 'exp10',\n    hint: 'The base-10 exponential function of x, which is 10 raised to the power x: 10^x.  \\r\\n**Syntax**',\n  },\n  { text: 'exp2', hint: 'The base-2 exponential function of x, which is 2 raised to the power x: 2^x.' },\n  {\n    text: 'extent_id',\n    hint: 'Returns a unique identifier that identifies the data shard (\"extent\") that the current record resides in.',\n  },\n  {\n    text: 'extent_tags',\n    hint:\n      'Returns a dynamic array with the [tags](../management/extents-overview.md#extent-tagging) of the data shard (\"extent\") that the current record resides in.',\n  },\n  { text: 'extract', hint: 'Get a match for a [regular expression](./re2.md) from a text string.' },\n  { text: 'extract_all', hint: 'Get all matches for a [regular expression](./re2.md) from a text string.' },\n  { text: 'extractjson', hint: 'Get a specified element out of a JSON text using a path expression.' },\n  { text: 'floor', hint: 'An alias for [`bin()`](binfunction.md).' },\n  { text: 'format_datetime', hint: 'Formats a datetime parameter based on the format pattern parameter.' },\n  { text: 'format_timespan', hint: 'Formats a timespan parameter based on the format pattern parameter.' },\n  { text: 'gamma', hint: 'Computes [gamma function](https://en.wikipedia.org/wiki/Gamma_function)' },\n  { text: 'getmonth', hint: 'Get the month number (1-12) from a datetime.' },\n  { text: 'gettype', hint: 'Returns the runtime type of its single argument.' },\n  { text: 'getyear', hint: 'Returns the year part of the `datetime` argument.' },\n  { text: 'hash', hint: 'Returns a hash value for the input value.' },\n  { text: 'hash_sha256', hint: 'Returns a sha256 hash value for the input value.' },\n  { text: 'hll', hint: 'Calculates the Intermediate results of [dcount](dcount-aggfunction.md) across the group.' },\n  {\n    text: 'hll_merge',\n    hint: 'Merges hll results (scalar version of the aggregate version [`hll_merge()`](hll-merge-aggfunction.md)).',\n  },\n  { text: 'hourofday', hint: 'Returns the integer number representing the hour number of the given date' },\n  {\n    text: 'iff',\n    hint:\n      'Evaluates the first argument (the predicate), and returns the value of either the second or third arguments, depending on whether the predicate evaluated to `true` (second) or `false` (third).',\n  },\n  {\n    text: 'iif',\n    hint:\n      'Evaluates the first argument (the predicate), and returns the value of either the second or third arguments, depending on whether the predicate evaluated to `true` (second) or `false` (third).',\n  },\n  {\n    text: 'indexof',\n    hint: 'Function reports the zero-based index of the first occurrence of a specified string within input string.',\n  },\n  { text: 'ingestion_time', hint: \"Retrieves the record's `$IngestionTime` hidden `datetime` column, or null.\" },\n  {\n    text: 'iscolumnexists',\n    hint:\n      'Returns a boolean value indicating if the given string argument exists in the schema produced by the preceding tabular operator.',\n  },\n  { text: 'isempty', hint: 'Returns `true` if the argument is an empty string or is null.' },\n  { text: 'isfinite', hint: 'Returns whether input is a finite value (is neither infinite nor NaN).' },\n  { text: 'isinf', hint: 'Returns whether input is an infinite (positive or negative) value.' },\n  { text: 'isnan', hint: 'Returns whether input is Not-a-Number (NaN) value.' },\n  { text: 'isnotempty', hint: 'Returns `true` if the argument is not an empty string nor it is a null.' },\n  { text: 'isnotnull', hint: 'Returns `true` if the argument is not null.' },\n  {\n    text: 'isnull',\n    hint:\n      'Evaluates its sole argument and returns a `bool` value indicating if the argument evaluates to a null value.',\n  },\n  { text: 'log', hint: 'Returns the natural logarithm function.' },\n  { text: 'log10', hint: 'Returns the common (base-10) logarithm function.' },\n  { text: 'log2', hint: 'Returns the base-2 logarithm function.' },\n  {\n    text: 'loggamma',\n    hint: 'Computes log of absolute value of the [gamma function](https://en.wikipedia.org/wiki/Gamma_function)',\n  },\n  {\n    text: 'make_datetime',\n    hint: 'Creates a [datetime](./scalar-data-types/datetime.md) scalar value from the specified date and time.',\n  },\n  {\n    text: 'make_dictionary',\n    hint: 'Returns a `dynamic` (JSON) property-bag (dictionary) of all the values of *Expr* in the group.',\n  },\n  { text: 'make_string', hint: 'Returns the string generated by the Unicode characters.' },\n  {\n    text: 'make_timespan',\n    hint: 'Creates a [timespan](./scalar-data-types/timespan.md) scalar value from the specified time period.',\n  },\n  { text: 'makelist', hint: 'Returns a `dynamic` (JSON) array of all the values of *Expr* in the group.' },\n  {\n    text: 'makeset',\n    hint: 'Returns a `dynamic` (JSON) array of the set of distinct values that *Expr* takes in the group.',\n  },\n  {\n    text: 'materialize',\n    hint:\n      'Allows caching a sub-query result during the time of query execution in a way that other subqueries can reference the partial result.',\n  },\n  { text: 'max', hint: 'Returns the maximum value across the group.' },\n  { text: 'max_of', hint: 'Returns the maximum value of several evaluated numeric expressions.' },\n  {\n    text: 'merge_tdigests',\n    hint:\n      'Merges tdigest results (scalar version of the aggregate version [`merge_tdigests()`](merge-tdigests-aggfunction.md)).',\n  },\n  { text: 'min', hint: 'Returns the minimum value agross the group.' },\n  { text: 'min_of', hint: 'Returns the minimum value of several evaluated numeric expressions.' },\n  { text: 'monthofyear', hint: 'Returns the integer number represents the month number of the given year.' },\n  {\n    text: 'next',\n    hint:\n      'Returns the value of a column in a row that it at some offset following the\\r\\ncurrent row in a [serialized row set](./windowsfunctions.md#serialized-row-set).',\n  },\n  { text: 'not', hint: 'Reverses the value of its `bool` argument.' },\n  {\n    text: 'now',\n    hint:\n      'Returns the current UTC clock time, optionally offset by a given timespan.\\r\\nThis function can be used multiple times in a statement and the clock time being referenced will be the same for all instances.',\n  },\n  { text: 'pack', hint: 'Creates a `dynamic` object (property bag) from a list of names and values.' },\n  {\n    text: 'pack_all',\n    hint: 'Creates a `dynamic` object (property bag) from all the columns of the tabular expression.',\n  },\n  { text: 'pack_array', hint: 'Packs all input values into a dynamic array.' },\n  { text: 'parse_ipv4', hint: 'Converts input to integer (signed 64-bit) number representation.' },\n  {\n    text: 'parse_json',\n    hint:\n      'Interprets a `string` as a [JSON value](https://json.org/)) and returns the value as [`dynamic`](./scalar-data-types/dynamic.md). \\r\\nIt is superior to using [extractjson() function](./extractjsonfunction.md)\\r\\nwhen you need to extract more than one element of a JSON compound object.',\n  },\n  {\n    text: 'parse_path',\n    hint:\n      'Parses a file path `string` and returns a [`dynamic`](./scalar-data-types/dynamic.md) object that contains the following parts of the path: \\r\\nScheme, RootPath, DirectoryPath, DirectoryName, FileName, Extension, AlternateDataStreamName.\\r\\nIn addition to the simple paths with both types of slashes, supports paths with schemas (e.g. \"file://...\"), shared paths (e.g. \"\\\\\\\\shareddrive\\\\users...\"), long paths (e.g \"\\\\\\\\?\\\\C:...\"\"), alternate data streams (e.g. \"file1.exe:file2.exe\")',\n  },\n  {\n    text: 'parse_url',\n    hint:\n      'Parses an absolute URL `string` and returns a [`dynamic`](./scalar-data-types/dynamic.md) object contains all parts of the URL (Scheme, Host, Port, Path, Username, Password, Query Parameters, Fragment).',\n  },\n  {\n    text: 'parse_urlquery',\n    hint:\n      'Parses a url query `string` and returns a [`dynamic`](./scalar-data-types/dynamic.md) object contains the Query parameters.',\n  },\n  {\n    text: 'parse_user_agent',\n    hint:\n      \"Interprets a user-agent string, which identifies the user's browser and provides certain system details to servers hosting the websites the user visits. The result is returned as [`dynamic`](./scalar-data-types/dynamic.md).\",\n  },\n  { text: 'parse_version', hint: 'Converts input string representation of version to a comparable decimal number.' },\n  {\n    text: 'parse_xml',\n    hint:\n      'Interprets a `string` as a XML value, converts the value to a [JSON value](https://json.org/) and returns the value as  [`dynamic`](./scalar-data-types/dynamic.md).',\n  },\n  {\n    text: 'percentile',\n    hint:\n      'Returns an estimate for the specified [nearest-rank percentile](#nearest-rank-percentile) of the population defined by *Expr*. \\r\\nThe accuracy depends on the density of population in the region of the percentile.',\n  },\n  {\n    text: 'percentile_tdigest',\n    hint:\n      'Calculates the percentile result from tdigest results (which was generated by [tdigest](tdigest-aggfunction.md) or [merge-tdigests](merge-tdigests-aggfunction.md))',\n  },\n  {\n    text: 'percentrank_tdigest',\n    hint:\n      \"Calculates the approximate rank of the value in a set where rank is expressed as percentage of set's size. \\r\\nThis function can be viewed as the inverse of the percentile.\",\n  },\n  { text: 'pi', hint: 'Returns the constant value of Pi (π).' },\n  { text: 'point', hint: 'Returns a dynamic array representation of a point.' },\n  { text: 'pow', hint: 'Returns a result of raising to power' },\n  {\n    text: 'prev',\n    hint:\n      'Returns the value of a column in a row that it at some offset prior to the\\r\\ncurrent row in a [serialized row set](./windowsfunctions.md#serialized-row-set).',\n  },\n  {\n    text: 'radians',\n    hint:\n      'Converts angle value in degrees into value in radians, using formula `radians = (PI / 180 ) * angle_in_degrees`',\n  },\n  { text: 'rand', hint: 'Returns a random number.' },\n  { text: 'range', hint: 'Generates a dynamic array holding a series of equally-spaced values.' },\n  { text: 'repeat', hint: 'Generates a dynamic array holding a series of equal values.' },\n  { text: 'replace', hint: 'Replace all regex matches with another string.' },\n  { text: 'reverse', hint: 'Function makes reverse of input string.' },\n  { text: 'round', hint: 'Returns the rounded source to the specified precision.' },\n  {\n    text: 'row_cumsum',\n    hint:\n      'Calculates the cumulative sum of a column in a [serialized row set](./windowsfunctions.md#serialized-row-set).',\n  },\n  {\n    text: 'row_number',\n    hint:\n      \"Returns the current row's index in a [serialized row set](./windowsfunctions.md#serialized-row-set).\\r\\nThe row index starts by default at `1` for the first row, and is incremented by `1` for each additional row.\\r\\nOptionally, the row index can start at a different value than `1`.\\r\\nAdditionally, the row index may be reset according to some provided predicate.\",\n  },\n  { text: 'series_add', hint: 'Calculates the element-wise addition of two numeric series inputs.' },\n  { text: 'series_decompose', hint: 'Applies a decomposition transformation on a series.' },\n  {\n    text: 'series_decompose_anomalies',\n    hint:\n      'Anomaly Detection based on series decomposition (refer to [series_decompose()](series-decomposefunction.md))',\n  },\n  { text: 'series_decompose_forecast', hint: 'Forecast based on series decomposition.' },\n  { text: 'series_divide', hint: 'Calculates the element-wise division of two numeric series inputs.' },\n  {\n    text: 'series_equals',\n    hint: 'Calculates the element-wise equals (`==`) logic operation of two numeric series inputs.',\n  },\n  { text: 'series_fill_backward', hint: 'Performs backward fill interpolation of missing values in a series.' },\n  { text: 'series_fill_const', hint: 'Replaces missing values in a series with a specified constant value.' },\n  { text: 'series_fill_forward', hint: 'Performs forward fill interpolation of missing values in a series.' },\n  { text: 'series_fill_linear', hint: 'Performs linear interpolation of missing values in a series.' },\n  { text: 'series_fir', hint: 'Applies a Finite Impulse Response filter on a series.' },\n  {\n    text: 'series_fit_2lines',\n    hint: 'Applies two segments linear regression on a series, returning multiple columns.',\n  },\n  {\n    text: 'series_fit_2lines_dynamic',\n    hint: 'Applies two segments linear regression on a series, returning dynamic object.',\n  },\n  { text: 'series_fit_line', hint: 'Applies linear regression on a series, returning multiple columns.' },\n  { text: 'series_fit_line_dynamic', hint: 'Applies linear regression on a series, returning dynamic object.' },\n  {\n    text: 'series_greater',\n    hint: 'Calculates the element-wise greater (`>`) logic operation of two numeric series inputs.',\n  },\n  {\n    text: 'series_greater_equals',\n    hint: 'Calculates the element-wise greater or equals (`>=`) logic operation of two numeric series inputs.',\n  },\n  { text: 'series_iir', hint: 'Applies a Infinite Impulse Response filter on a series.' },\n  { text: 'series_less', hint: 'Calculates the element-wise less (`<`) logic operation of two numeric series inputs.' },\n  {\n    text: 'series_less_equals',\n    hint: 'Calculates the element-wise less or equal (`<=`) logic operation of two numeric series inputs.',\n  },\n  { text: 'series_multiply', hint: 'Calculates the element-wise multiplication of two numeric series inputs.' },\n  {\n    text: 'series_not_equals',\n    hint: 'Calculates the element-wise not equals (`!=`) logic operation of two numeric series inputs.',\n  },\n  { text: 'series_outliers', hint: 'Scores anomaly points in a series.' },\n  { text: 'series_periods_detect', hint: 'Finds the most significant periods that exist in a time series.' },\n  {\n    text: 'series_periods_validate',\n    hint: 'Checks whether a time series contains periodic patterns of given lengths.',\n  },\n  {\n    text: 'series_seasonal',\n    hint: 'Calculates the seasonal component of a series according to the detected or given seasonal period.',\n  },\n  { text: 'series_stats', hint: 'Returns statistics for a series in multiple columns.' },\n  { text: 'series_stats_dynamic', hint: 'Returns statistics for a series in dynamic object.' },\n  { text: 'series_subtract', hint: 'Calculates the element-wise subtraction of two numeric series inputs.' },\n  { text: 'sign', hint: 'Sign of a numeric expression' },\n  { text: 'sin', hint: 'Returns the sine function.' },\n  {\n    text: 'split',\n    hint:\n      'Splits a given string according to a given delimiter and returns a string array with the contained substrings.',\n  },\n  { text: 'sqrt', hint: 'Returns the square root function.' },\n  { text: 'startofday', hint: 'Returns the start of the day containing the date, shifted by an offset, if provided.' },\n  {\n    text: 'startofmonth',\n    hint: 'Returns the start of the month containing the date, shifted by an offset, if provided.',\n  },\n  {\n    text: 'startofweek',\n    hint: 'Returns the start of the week containing the date, shifted by an offset, if provided.',\n  },\n  {\n    text: 'startofyear',\n    hint: 'Returns the start of the year containing the date, shifted by an offset, if provided.',\n  },\n  {\n    text: 'stdev',\n    hint:\n      'Calculates the standard deviation of *Expr* across the group, considering the group as a [sample](https://en.wikipedia.org/wiki/Sample_%28statistics%29).',\n  },\n  {\n    text: 'stdevif',\n    hint:\n      'Calculates the [stdev](stdev-aggfunction.md) of *Expr* across the group for which *Predicate* evaluates to `true`.',\n  },\n  {\n    text: 'stdevp',\n    hint:\n      'Calculates the standard deviation of *Expr* across the group, considering the group as a [population](https://en.wikipedia.org/wiki/Statistical_population).',\n  },\n  { text: 'strcat', hint: 'Concatenates between 1 and 64 arguments.' },\n  { text: 'strcat_array', hint: 'Creates a concatenated string of array values using specified delimiter.' },\n  {\n    text: 'strcat_delim',\n    hint: 'Concatenates between 2 and 64 arguments, with delimiter, provided as first argument.',\n  },\n  { text: 'strcmp', hint: 'Compares two strings.' },\n  { text: 'string_size', hint: 'Returns the size, in bytes, of the input string.' },\n  { text: 'strlen', hint: 'Returns the length, in characters, of the input string.' },\n  { text: 'strrep', hint: 'Repeats given [string](./scalar-data-types/string.md) provided amount of times.' },\n  {\n    text: 'substring',\n    hint: 'Extracts a substring from a source string starting from some index to the end of the string.',\n  },\n  { text: 'sum', hint: 'Calculates the sum of *Expr* across the group.' },\n  { text: 'sumif', hint: 'Returns a sum of *Expr* for which *Predicate* evaluates to `true`.' },\n  { text: 'table', hint: 'References specific table using an query-time evaluated string-expression.' },\n  { text: 'tan', hint: 'Returns the tangent function.' },\n  {\n    text: 'tdigest',\n    hint: 'Calculates the Intermediate results of [`percentiles()`](percentiles-aggfunction.md) across the group.',\n  },\n  {\n    text: 'tdigest_merge',\n    hint:\n      'Merges tdigest results (scalar version of the aggregate version [`tdigest_merge()`](tdigest-merge-aggfunction.md)).',\n  },\n  { text: 'tobool', hint: 'Converts input to boolean (signed 8-bit) representation.' },\n  { text: 'todatetime', hint: 'Converts input to [datetime](./scalar-data-types/datetime.md) scalar.' },\n  { text: 'todecimal', hint: 'Converts input to decimal number representation.' },\n  {\n    text: 'todouble',\n    hint: 'Converts the input to a value of type `real`. (`todouble()` and `toreal()` are synonyms.)',\n  },\n  {\n    text: 'todynamic',\n    hint:\n      'Interprets a `string` as a [JSON value](https://json.org/) and returns the value as [`dynamic`](./scalar-data-types/dynamic.md).',\n  },\n  { text: 'toguid', hint: 'Converts input to [`guid`](./scalar-data-types/guid.md) representation.' },\n  { text: 'tohex', hint: 'Converts input to a hexadecimal string.' },\n  { text: 'toint', hint: 'Converts input to integer (signed 32-bit) number representation.' },\n  { text: 'tolong', hint: 'Converts input to long (signed 64-bit) number representation.' },\n  { text: 'tolower', hint: 'Converts input string to lower case.' },\n  { text: 'toscalar', hint: 'Returns a scalar constant value of the evaluated expression.' },\n  { text: 'tostring', hint: 'Converts input to a string representation.' },\n  { text: 'totimespan', hint: 'Converts input  to [timespan](./scalar-data-types/timespan.md) scalar.' },\n  { text: 'toupper', hint: 'Converts a string to upper case.' },\n  {\n    text: 'translate',\n    hint:\n      \"Replaces a set of characters ('searchList') with another set of characters ('replacementList') in a given a string.\\r\\nThe function searches for characters in the 'searchList' and replaces them with the corresponding characters in 'replacementList'\",\n  },\n  { text: 'treepath', hint: 'Enumerates all the path expressions that identify leaves in a dynamic object.' },\n  { text: 'trim', hint: 'Removes all leading and trailing matches of the specified regular expression.' },\n  { text: 'trim_end', hint: 'Removes trailing match of the specified regular expression.' },\n  { text: 'trim_start', hint: 'Removes leading match of the specified regular expression.' },\n  { text: 'url_decode', hint: 'The function converts encoded URL into a to regular URL representation.' },\n  {\n    text: 'url_encode',\n    hint: 'The function converts characters of the input URL into a format that can be transmitted over the Internet.',\n  },\n  {\n    text: 'variance',\n    hint:\n      'Calculates the variance of *Expr* across the group, considering the group as a [sample](https://en.wikipedia.org/wiki/Sample_%28statistics%29).',\n  },\n  {\n    text: 'varianceif',\n    hint:\n      'Calculates the [variance](variance-aggfunction.md) of *Expr* across the group for which *Predicate* evaluates to `true`.',\n  },\n  {\n    text: 'variancep',\n    hint:\n      'Calculates the variance of *Expr* across the group, considering the group as a [population](https://en.wikipedia.org/wiki/Statistical_population).',\n  },\n  { text: 'weekofyear', hint: 'Returns the integer number represents the week number.' },\n  {\n    text: 'welch_test',\n    hint: 'Computes the p_value of the [Welch-test function](https://en.wikipedia.org/wiki/Welch%27s_t-test)',\n  },\n  {\n    text: 'zip',\n    hint:\n      'The `zip` function accepts any number of `dynamic` arrays, and returns an\\r\\narray whose elements are each an array holding the elements of the input\\r\\narrays of the same index.',\n  },\n];\n\nexport const KEYWORDS = [\n  'by',\n  'on',\n  'contains',\n  'notcontains',\n  'containscs',\n  'notcontainscs',\n  'startswith',\n  'has',\n  'matches',\n  'regex',\n  'true',\n  'false',\n  'and',\n  'or',\n  'typeof',\n  'int',\n  'string',\n  'date',\n  'datetime',\n  'time',\n  'long',\n  'real',\n  '​boolean',\n  'bool',\n];\n\nexport const grafanaMacros = [\n  {\n    text: '$__timeFilter',\n    display: '$__timeFilter()',\n    hint: 'Macro that uses the selected timerange in Grafana to filter the query.',\n  },\n  {\n    text: '$__timeTo',\n    display: '$__timeTo()',\n    hint: 'Returns the From datetime from the Grafana picker. Example: datetime(2018-06-05T20:09:58.907Z).',\n  },\n  {\n    text: '$__timeFrom',\n    display: '$__timeFrom()',\n    hint: 'Returns the From datetime from the Grafana picker. Example: datetime(2018-06-05T18:09:58.907Z).',\n  },\n  {\n    text: '$__escapeMulti',\n    display: '$__escapeMulti()',\n    hint: 'Macro to escape multi-value template variables that contain illegal characters.',\n  },\n  { text: '$__contains', display: '$__contains()', hint: 'Macro for multi-value template variables.' },\n];\n\n// Kusto operators\n// export const OPERATORS = ['+', '-', '*', '/', '>', '<', '==', '<>', '<=', '>=', '~', '!~'];\n\nexport const DURATION = ['SECONDS', 'MINUTES', 'HOURS', 'DAYS', 'WEEKS', 'MONTHS', 'YEARS'];\n\nconst tokenizer = {\n  comment: {\n    pattern: /(^|[^\\\\:])\\/\\/.*/,\n    lookbehind: true,\n    greedy: true,\n  },\n  'function-context': {\n    pattern: /[a-z0-9_]+\\([^)]*\\)?/i,\n    inside: {},\n  },\n  duration: {\n    pattern: new RegExp(`${DURATION.join('?|')}?`, 'i'),\n    alias: 'number',\n  },\n  builtin: new RegExp(`\\\\b(?:${functionTokens.map((f) => f.text).join('|')})(?=\\\\s*\\\\()`, 'i'),\n  string: {\n    pattern: /([\"'])(?:\\\\(?:\\r\\n|[\\s\\S])|(?!\\1)[^\\\\\\r\\n])*\\1/,\n    greedy: true,\n  },\n  keyword: new RegExp(`\\\\b(?:${KEYWORDS.join('|')}|${operatorTokens.map((f) => f.text).join('|')}|\\\\*)\\\\b`, 'i'),\n  boolean: /\\b(?:true|false)\\b/,\n  number: /\\b0x[\\da-f]+\\b|(?:\\b\\d+\\.?\\d*|\\B\\.\\d+)(?:e[+-]?\\d+)?/i,\n  operator: /-|\\+|\\*|\\/|>|<|==|<=?|>=?|<>|!~|~|=|\\|/,\n  punctuation: /[{};(),.:]/,\n  variable: /(\\[\\[(.+?)\\]\\])|(\\$(.+?))\\b/,\n};\n\ntokenizer['function-context'].inside = {\n  argument: {\n    pattern: /[a-z0-9_]+(?=:)/i,\n    alias: 'symbol',\n  },\n  duration: tokenizer.duration,\n  number: tokenizer.number,\n  builtin: tokenizer.builtin,\n  string: tokenizer.string,\n  variable: tokenizer.variable,\n};\n\n// console.log(tokenizer.builtin);\n\nexport default tokenizer;\n\n// function escapeRegExp(str: string): string {\n//   return str.replace(/[.*+?^${}()|[\\]\\\\]/g, '\\\\$&'); // $& means the whole matched string\n// }\n","import { debounce, map } from 'lodash';\nimport Plain from 'slate-plain-serializer';\n\nimport QueryField from './query_field';\nimport { DOMUtil } from '@grafana/ui';\nimport { Editor as CoreEditor } from 'slate';\n\nimport { KEYWORDS, functionTokens, operatorTokens, grafanaMacros } from './kusto/kusto';\n// import '../sass/editor.base.scss';\n\nconst TYPEAHEAD_DELAY = 100;\n\ninterface Suggestion {\n  text: string;\n  deleteBackwards?: number;\n  type?: string;\n}\n\ninterface SuggestionGroup {\n  label: string;\n  items: Suggestion[];\n  prefixMatch?: boolean;\n  skipFilter?: boolean;\n}\n\ninterface KustoSchema {\n  Databases: {\n    Default: KustoDBSchema;\n  };\n  Plugins?: any[];\n}\n\ninterface KustoDBSchema {\n  Name?: string;\n  Functions?: any;\n  Tables?: any;\n}\n\nconst defaultSchema: any = () => ({\n  Databases: {\n    Default: {},\n  },\n});\n\nconst cleanText = (s: string) => s.replace(/[{}[\\]=\"(),!~+\\-*/^%]/g, '').trim();\nconst wrapText = (text: string) => ({ text });\n\nexport default class KustoQueryField extends QueryField {\n  fields: any;\n  events: any;\n  schema: KustoSchema;\n\n  constructor(props: any, context: any) {\n    super(props, context);\n    this.schema = defaultSchema();\n\n    this.onTypeahead = debounce(this.onTypeahead, TYPEAHEAD_DELAY);\n  }\n\n  componentDidMount() {\n    super.componentDidMount();\n    this.fetchSchema();\n  }\n\n  onTypeahead = (force = false) => {\n    const selection = window.getSelection();\n\n    if (selection && selection.anchorNode) {\n      const wrapperNode = selection.anchorNode.parentElement;\n      if (wrapperNode === null) {\n        return;\n      }\n      const editorNode = wrapperNode.closest('.slate-query-field');\n      if (!editorNode || this.state.value.isBlurred) {\n        // Not inside this editor\n        return;\n      }\n\n      // DOM ranges\n      const range = selection.getRangeAt(0);\n      const text = selection.anchorNode.textContent;\n      if (text === null) {\n        return;\n      }\n      const offset = range.startOffset;\n      let prefix = cleanText(text.substr(0, offset));\n\n      // Model ranges\n      const modelOffset = this.state.value.anchorOffset;\n      const modelPrefix = this.state.value.anchorText.text.slice(0, modelOffset);\n\n      // Determine candidates by context\n      let suggestionGroups: SuggestionGroup[] = [];\n      const wrapperClasses = wrapperNode.classList;\n      let typeaheadContext: string | null = null;\n\n      // Built-in functions\n      if (wrapperClasses.contains('function-context')) {\n        typeaheadContext = 'context-function';\n        suggestionGroups = this.getColumnSuggestions();\n\n        // where\n      } else if (modelPrefix.match(/(where\\s(\\w+\\b)?$)/i)) {\n        typeaheadContext = 'context-where';\n        suggestionGroups = this.getColumnSuggestions();\n\n        // summarize by\n      } else if (modelPrefix.match(/(summarize\\s(\\w+\\b)?$)/i)) {\n        typeaheadContext = 'context-summarize';\n        suggestionGroups = this.getFunctionSuggestions();\n      } else if (modelPrefix.match(/(summarize\\s(.+\\s)?by\\s+([^,\\s]+,\\s*)*([^,\\s]+\\b)?$)/i)) {\n        typeaheadContext = 'context-summarize-by';\n        suggestionGroups = this.getColumnSuggestions();\n\n        // order by, top X by, ... by ...\n      } else if (modelPrefix.match(/(by\\s+([^,\\s]+,\\s*)*([^,\\s]+\\b)?$)/i)) {\n        typeaheadContext = 'context-by';\n        suggestionGroups = this.getColumnSuggestions();\n\n        // join\n      } else if (modelPrefix.match(/(on\\s(.+\\b)?$)/i)) {\n        typeaheadContext = 'context-join-on';\n        suggestionGroups = this.getColumnSuggestions();\n      } else if (modelPrefix.match(/(join\\s+(\\(\\s+)?(\\w+\\b)?$)/i)) {\n        typeaheadContext = 'context-join';\n        suggestionGroups = this.getTableSuggestions();\n\n        // distinct\n      } else if (modelPrefix.match(/(distinct\\s(.+\\b)?$)/i)) {\n        typeaheadContext = 'context-distinct';\n        suggestionGroups = this.getColumnSuggestions();\n\n        // database()\n      } else if (modelPrefix.match(/(database\\(\\\"(\\w+)\\\"\\)\\.(.+\\b)?$)/i)) {\n        typeaheadContext = 'context-database-table';\n        const db = this.getDBFromDatabaseFunction(modelPrefix);\n        suggestionGroups = this.getTableSuggestions(db);\n        prefix = prefix.replace('.', '');\n\n        // new\n      } else if (normalizeQuery(Plain.serialize(this.state.value)).match(/^\\s*\\w*$/i)) {\n        typeaheadContext = 'context-new';\n        if (this.schema) {\n          suggestionGroups = this.getInitialSuggestions();\n        } else {\n          this.fetchSchema();\n          setTimeout(this.onTypeahead, 0);\n          return;\n        }\n\n        // built-in\n      } else if (prefix && !wrapperClasses.contains('argument') && !force) {\n        // Use only last typed word as a prefix for searching\n        if (modelPrefix.match(/\\s$/i)) {\n          prefix = '';\n          return;\n        }\n        prefix = getLastWord(prefix);\n        typeaheadContext = 'context-builtin';\n        suggestionGroups = this.getKeywordSuggestions();\n      } else if (force === true) {\n        typeaheadContext = 'context-builtin-forced';\n        if (modelPrefix.match(/\\s$/i)) {\n          prefix = '';\n        }\n        suggestionGroups = this.getKeywordSuggestions();\n      }\n\n      let results = 0;\n      prefix = prefix.toLowerCase();\n      const filteredSuggestions = suggestionGroups\n        .map((group) => {\n          if (group.items && prefix && !group.skipFilter) {\n            group.items = group.items.filter((c) => c.text.length >= prefix.length);\n            if (group.prefixMatch) {\n              group.items = group.items.filter((c) => c.text.toLowerCase().indexOf(prefix) === 0);\n            } else {\n              group.items = group.items.filter((c) => c.text.toLowerCase().indexOf(prefix) > -1);\n            }\n          }\n          results += group.items.length;\n          return group;\n        })\n        .filter((group) => group.items.length > 0);\n\n      // console.log('onTypeahead', selection.anchorNode, wrapperClasses, text, offset, prefix, typeaheadContext);\n      // console.log('onTypeahead', prefix, typeaheadContext, force);\n\n      this.setState({\n        typeaheadPrefix: prefix,\n        typeaheadContext,\n        typeaheadText: text,\n        suggestions: results > 0 ? filteredSuggestions : [],\n      });\n    }\n  };\n\n  applyTypeahead = (editor: CoreEditor, suggestion: { text: any; type: string; deleteBackwards: any }): CoreEditor => {\n    const { typeaheadPrefix, typeaheadContext, typeaheadText } = this.state;\n    let suggestionText = suggestion.text || suggestion;\n    const move = 0;\n\n    // Modify suggestion based on context\n\n    const nextChar = DOMUtil.getNextCharacter();\n    if (suggestion.type === 'function') {\n      if (!nextChar || nextChar !== '(') {\n        suggestionText += '(';\n      }\n    } else if (typeaheadContext === 'context-function') {\n      if (!nextChar || nextChar !== ')') {\n        suggestionText += ')';\n      }\n    } else {\n      if (!nextChar || nextChar !== ' ') {\n        suggestionText += ' ';\n      }\n    }\n\n    // Remove the current, incomplete text and replace it with the selected suggestion\n    const backward = suggestion.deleteBackwards || typeaheadPrefix.length;\n    const text = cleanText(typeaheadText);\n    const suffixLength = text.length - typeaheadPrefix.length;\n    const offset = typeaheadText.indexOf(typeaheadPrefix);\n    const midWord = typeaheadPrefix && ((suffixLength > 0 && offset > -1) || suggestionText === typeaheadText);\n    const forward = midWord ? suffixLength + offset : 0;\n\n    this.resetTypeahead(() =>\n      editor.deleteBackward(backward).deleteForward(forward).insertText(suggestionText).moveForward(move).focus()\n    );\n\n    return editor;\n  };\n\n  // private _getFieldsSuggestions(): SuggestionGroup[] {\n  //   return [\n  //     {\n  //       prefixMatch: true,\n  //       label: 'Fields',\n  //       items: this.fields.map(wrapText)\n  //     },\n  //     {\n  //       prefixMatch: true,\n  //       label: 'Variables',\n  //       items: this.props.templateVariables.map(wrapText)\n  //     }\n  //   ];\n  // }\n\n  // private _getAfterFromSuggestions(): SuggestionGroup[] {\n  //   return [\n  //     {\n  //       skipFilter: true,\n  //       label: 'Events',\n  //       items: this.events.map(wrapText)\n  //     },\n  //     {\n  //       prefixMatch: true,\n  //       label: 'Variables',\n  //       items: this.props.templateVariables\n  //         .map(wrapText)\n  //         .map(suggestion => {\n  //           suggestion.deleteBackwards = 0;\n  //           return suggestion;\n  //         })\n  //     }\n  //   ];\n  // }\n\n  // private _getAfterSelectSuggestions(): SuggestionGroup[] {\n  //   return [\n  //     {\n  //       prefixMatch: true,\n  //       label: 'Fields',\n  //       items: this.fields.map(wrapText)\n  //     },\n  //     {\n  //       prefixMatch: true,\n  //       label: 'Functions',\n  //       items: FUNCTIONS.map((s: any) => { s.type = 'function'; return s; })\n  //     },\n  //     {\n  //       prefixMatch: true,\n  //       label: 'Variables',\n  //       items: this.props.templateVariables.map(wrapText)\n  //     }\n  //   ];\n  // }\n\n  private getInitialSuggestions(): SuggestionGroup[] {\n    return this.getTableSuggestions();\n  }\n\n  private getKeywordSuggestions(): SuggestionGroup[] {\n    return [\n      {\n        prefixMatch: true,\n        label: 'Keywords',\n        items: KEYWORDS.map(wrapText),\n      },\n      {\n        prefixMatch: true,\n        label: 'Operators',\n        items: operatorTokens,\n      },\n      {\n        prefixMatch: true,\n        label: 'Functions',\n        items: functionTokens.map((s: any) => {\n          s.type = 'function';\n          return s;\n        }),\n      },\n      {\n        prefixMatch: true,\n        label: 'Macros',\n        items: grafanaMacros.map((s: any) => {\n          s.type = 'function';\n          return s;\n        }),\n      },\n      {\n        prefixMatch: true,\n        label: 'Tables',\n        items: map(this.schema.Databases.Default.Tables, (t: any) => ({ text: t.Name })),\n      },\n    ];\n  }\n\n  private getFunctionSuggestions(): SuggestionGroup[] {\n    return [\n      {\n        prefixMatch: true,\n        label: 'Functions',\n        items: functionTokens.map((s: any) => {\n          s.type = 'function';\n          return s;\n        }),\n      },\n      {\n        prefixMatch: true,\n        label: 'Macros',\n        items: grafanaMacros.map((s: any) => {\n          s.type = 'function';\n          return s;\n        }),\n      },\n    ];\n  }\n\n  getTableSuggestions(db = 'Default'): SuggestionGroup[] {\n    // @ts-ignore\n    if (this.schema.Databases[db]) {\n      return [\n        {\n          prefixMatch: true,\n          label: 'Tables',\n          // @ts-ignore\n          items: map(this.schema.Databases[db].Tables, (t: any) => ({ text: t.Name })),\n        },\n      ];\n    } else {\n      return [];\n    }\n  }\n\n  private getColumnSuggestions(): SuggestionGroup[] {\n    const table = this.getTableFromContext();\n    if (table) {\n      const tableSchema = this.schema.Databases.Default.Tables[table];\n      if (tableSchema) {\n        return [\n          {\n            prefixMatch: true,\n            label: 'Fields',\n            items: map(tableSchema.OrderedColumns, (f: any) => ({\n              text: f.Name,\n              hint: f.Type,\n            })),\n          },\n        ];\n      }\n    }\n    return [];\n  }\n\n  private getTableFromContext() {\n    const query = Plain.serialize(this.state.value);\n    const tablePattern = /^\\s*(\\w+)\\s*|/g;\n    const normalizedQuery = normalizeQuery(query);\n    const match = tablePattern.exec(normalizedQuery);\n    if (match && match.length > 1 && match[0] && match[1]) {\n      return match[1];\n    } else {\n      return null;\n    }\n  }\n\n  private getDBFromDatabaseFunction(prefix: string) {\n    const databasePattern = /database\\(\\\"(\\w+)\\\"\\)/gi;\n    const match = databasePattern.exec(prefix);\n    if (match && match.length > 1 && match[0] && match[1]) {\n      return match[1];\n    } else {\n      return undefined;\n    }\n  }\n\n  private async fetchSchema() {\n    let schema = await this.props.getSchema();\n    if (schema) {\n      if (schema.Type === 'AppInsights') {\n        schema = castSchema(schema);\n      }\n      this.schema = schema;\n    } else {\n      this.schema = defaultSchema();\n    }\n  }\n}\n\n/**\n * Cast schema from App Insights to default Kusto schema\n */\nfunction castSchema(schema: any) {\n  const defaultSchemaTemplate = defaultSchema();\n  defaultSchemaTemplate.Databases.Default = schema;\n  return defaultSchemaTemplate;\n}\n\nfunction normalizeQuery(query: string): string {\n  const commentPattern = /\\/\\/.*$/gm;\n  let normalizedQuery = query.replace(commentPattern, '');\n  normalizedQuery = normalizedQuery.replace('\\n', ' ');\n  return normalizedQuery;\n}\n\nfunction getLastWord(str: string): string {\n  const lastWordPattern = /(?:.*\\s)?([^\\s]+\\s*)$/gi;\n  const match = lastWordPattern.exec(str);\n  if (match && match.length > 1) {\n    return match[1];\n  }\n  return '';\n}\n","import KustoQueryField from './KustoQueryField';\nimport Kusto from './kusto/kusto';\n\nimport React, { Component } from 'react';\nimport coreModule from 'app/core/core_module';\n\ninterface EditorProps {\n  index: number;\n  placeholder?: string;\n  change: (value: string, index: number) => void;\n  variables: () => string[] | string[];\n  getSchema?: () => Promise<any>;\n  execute?: () => void;\n  query?: string;\n}\n\nclass Editor extends Component<EditorProps, any> {\n  static defaultProps = {\n    placeholder: 'Enter a query',\n  };\n\n  constructor(props: EditorProps) {\n    super(props);\n    this.state = {\n      edited: false,\n      query: props.query || '',\n    };\n  }\n\n  onChangeQuery = (value: any) => {\n    const { index, change } = this.props;\n    const { query } = this.state;\n    const edited = query !== value;\n    this.setState({ edited, query: value });\n    if (change) {\n      change(value, index);\n    }\n  };\n\n  onPressEnter = () => {\n    const { execute } = this.props;\n    if (execute) {\n      execute();\n    }\n  };\n\n  render() {\n    const { variables, getSchema, placeholder } = this.props;\n    const { edited, query } = this.state;\n\n    return (\n      <div className=\"gf-form-input\" style={{ height: 'auto' }}>\n        <KustoQueryField\n          initialQuery={edited ? null : query}\n          onPressEnter={this.onPressEnter}\n          onQueryChange={this.onChangeQuery}\n          prismLanguage=\"kusto\"\n          prismDefinition={Kusto}\n          placeholder={placeholder}\n          templateVariables={variables}\n          getSchema={getSchema}\n        />\n      </div>\n    );\n  }\n}\n\ncoreModule.directive('kustoEditor', [\n  'reactDirective',\n  (reactDirective) => {\n    return reactDirective(Editor, [\n      'change',\n      'database',\n      'execute',\n      'query',\n      'variables',\n      'placeholder',\n      ['getSchema', { watchDepth: 'reference' }],\n    ]);\n  },\n]);\n","export default class UrlBuilder {\n  static buildAzureMonitorGetMetricNamespacesUrl(\n    baseUrl: string,\n    subscriptionId: string,\n    resourceGroup: string,\n    metricDefinition: string,\n    resourceName: string,\n    apiVersion: string\n  ) {\n    const metricDefinitionArray = metricDefinition.split('/');\n    const resourceNameArray = resourceName.split('/');\n    const provider = metricDefinitionArray.shift();\n    const urlArray = [baseUrl, subscriptionId, 'resourceGroups', resourceGroup, 'providers', provider];\n    for (const i in metricDefinitionArray) {\n      urlArray.push(metricDefinitionArray[i]);\n      urlArray.push(resourceNameArray[i]);\n    }\n    const urlPrefix = urlArray.join('/');\n    return `${urlPrefix}/providers/microsoft.insights/metricNamespaces?api-version=${apiVersion}`;\n  }\n\n  static buildAzureMonitorGetMetricNamesUrl(\n    baseUrl: string,\n    subscriptionId: string,\n    resourceGroup: string,\n    metricDefinition: string,\n    resourceName: string,\n    metricNamespace: string,\n    apiVersion: string\n  ) {\n    const metricDefinitionArray = metricDefinition.split('/');\n    const resourceNameArray = resourceName.split('/');\n    const provider = metricDefinitionArray.shift();\n    const urlArray = [baseUrl, subscriptionId, 'resourceGroups', resourceGroup, 'providers', provider];\n    for (const i in metricDefinitionArray) {\n      urlArray.push(metricDefinitionArray[i]);\n      urlArray.push(resourceNameArray[i]);\n    }\n    const urlPrefix = urlArray.join('/');\n    return (\n      `${urlPrefix}/providers/microsoft.insights/metricdefinitions?api-version=${apiVersion}` +\n      `&metricnamespace=${encodeURIComponent(metricNamespace)}`\n    );\n  }\n}\n","import { find, get } from 'lodash';\nimport TimeGrainConverter from '../time_grain_converter';\nimport {\n  AzureMonitorLocalizedValue,\n  AzureMonitorMetricAvailabilityMetadata,\n  AzureMonitorMetricsMetadataResponse,\n  AzureMonitorOption,\n} from '../types';\nexport default class ResponseParser {\n  static parseResponseValues(\n    result: any,\n    textFieldName: string,\n    valueFieldName: string\n  ): Array<{ text: string; value: string }> {\n    const list: Array<{ text: string; value: string }> = [];\n\n    if (!result) {\n      return list;\n    }\n\n    for (let i = 0; i < result.value.length; i++) {\n      if (!find(list, ['value', get(result.value[i], valueFieldName)])) {\n        const value = get(result.value[i], valueFieldName);\n        const text = get(result.value[i], textFieldName, value);\n\n        list.push({\n          text: text,\n          value: value,\n        });\n      }\n    }\n    return list;\n  }\n\n  static parseResourceNames(result: any, metricDefinition: string): Array<{ text: string; value: string }> {\n    const list: Array<{ text: string; value: string }> = [];\n\n    if (!result) {\n      return list;\n    }\n\n    for (let i = 0; i < result.value.length; i++) {\n      if (result.value[i].type === metricDefinition) {\n        list.push({\n          text: result.value[i].name,\n          value: result.value[i].name,\n        });\n      }\n    }\n\n    return list;\n  }\n\n  static parseMetadata(result: AzureMonitorMetricsMetadataResponse, metricName: string) {\n    const defaultAggTypes = ['None', 'Average', 'Minimum', 'Maximum', 'Total', 'Count'];\n    const metricData = result?.value.find((v) => v.name.value === metricName);\n\n    if (!metricData) {\n      return {\n        primaryAggType: '',\n        supportedAggTypes: defaultAggTypes,\n        supportedTimeGrains: [],\n        dimensions: [],\n      };\n    }\n\n    return {\n      primaryAggType: metricData.primaryAggregationType,\n      supportedAggTypes: metricData.supportedAggregationTypes || defaultAggTypes,\n\n      supportedTimeGrains: [\n        { label: 'Auto', value: 'auto' },\n        ...ResponseParser.parseTimeGrains(metricData.metricAvailabilities ?? []),\n      ],\n      dimensions: ResponseParser.parseDimensions(metricData.dimensions ?? []),\n    };\n  }\n\n  static parseTimeGrains(metricAvailabilities: AzureMonitorMetricAvailabilityMetadata[]): AzureMonitorOption[] {\n    const timeGrains: AzureMonitorOption[] = [];\n\n    if (!metricAvailabilities) {\n      return timeGrains;\n    }\n\n    metricAvailabilities.forEach((avail) => {\n      if (avail.timeGrain) {\n        timeGrains.push({\n          label: TimeGrainConverter.createTimeGrainFromISO8601Duration(avail.timeGrain),\n          value: avail.timeGrain,\n        });\n      }\n    });\n\n    return timeGrains;\n  }\n\n  static parseDimensions(metadataDimensions: AzureMonitorLocalizedValue[]) {\n    return metadataDimensions.map((dimension) => {\n      return {\n        label: dimension.localizedValue || dimension.value,\n        value: dimension.value,\n      };\n    });\n  }\n\n  static parseSubscriptions(result: any): Array<{ text: string; value: string }> {\n    const list: Array<{ text: string; value: string }> = [];\n\n    if (!result) {\n      return list;\n    }\n\n    const valueFieldName = 'subscriptionId';\n    const textFieldName = 'displayName';\n    for (let i = 0; i < result.value.length; i++) {\n      if (!find(list, ['value', get(result.value[i], valueFieldName)])) {\n        list.push({\n          text: `${get(result.value[i], textFieldName)}`,\n          value: get(result.value[i], valueFieldName),\n        });\n      }\n    }\n\n    return list;\n  }\n\n  static parseSubscriptionsForSelect(result: any): Array<{ label: string; value: string }> {\n    const list: Array<{ label: string; value: string }> = [];\n\n    if (!result) {\n      return list;\n    }\n\n    const valueFieldName = 'subscriptionId';\n    const textFieldName = 'displayName';\n    for (let i = 0; i < result.data.value.length; i++) {\n      if (!find(list, ['value', get(result.data.value[i], valueFieldName)])) {\n        list.push({\n          label: `${get(result.data.value[i], textFieldName)} - ${get(result.data.value[i], valueFieldName)}`,\n          value: get(result.data.value[i], valueFieldName),\n        });\n      }\n    }\n\n    return list;\n  }\n\n  static parseWorkspacesForSelect(result: any): Array<{ label: string; value: string }> {\n    const list: Array<{ label: string; value: string }> = [];\n\n    if (!result) {\n      return list;\n    }\n\n    const valueFieldName = 'customerId';\n    const textFieldName = 'name';\n    for (let i = 0; i < result.data.value.length; i++) {\n      if (!find(list, ['value', get(result.data.value[i].properties, valueFieldName)])) {\n        list.push({\n          label: get(result.data.value[i], textFieldName),\n          value: get(result.data.value[i].properties, valueFieldName),\n        });\n      }\n    }\n\n    return list;\n  }\n}\n","export default class SupportedNamespaces {\n  supportedMetricNamespaces: any = {\n    azuremonitor: [\n      'Microsoft.AnalysisServices/servers',\n      'Microsoft.ApiManagement/service',\n      'Microsoft.AppConfiguration/configurationStores',\n      'Microsoft.Automation/automationAccounts',\n      'Microsoft.Batch/batchAccounts',\n      'Microsoft.Cache/redis',\n      'Microsoft.ClassicCompute/virtualMachines',\n      'Microsoft.ClassicCompute/domainNames/slots/roles',\n      'Microsoft.CognitiveServices/accounts',\n      'Microsoft.Compute/virtualMachines',\n      'Microsoft.Compute/virtualMachineScaleSets',\n      'Microsoft.ContainerInstance/containerGroups',\n      'Microsoft.ContainerRegistry/registries',\n      'Microsoft.ContainerService/managedClusters',\n      'Microsoft.CustomerInsights/hubs',\n      'Microsoft.DataBoxEdge/dataBoxEdgeDevices',\n      'Microsoft.DataFactory/datafactories',\n      'Microsoft.DataFactory/factories',\n      'Microsoft.DataLakeAnalytics/accounts',\n      'Microsoft.DataLakeStore/accounts',\n      'Microsoft.DBforMariaDB/servers',\n      'Microsoft.DBforMySQL/servers',\n      'Microsoft.DBforMySQL/flexibleServers',\n      'Microsoft.DBforPostgreSQL/servers',\n      'Microsoft.DBforPostgreSQL/flexibleServers',\n      'Microsoft.Devices/IotHubs',\n      'Microsoft.Devices/provisioningServices',\n      'Microsoft.DocumentDB/databaseAccounts',\n      'Microsoft.EventGrid/topics',\n      'Microsoft.EventGrid/eventSubscriptions',\n      'Microsoft.EventGrid/extensionTopics',\n      'Microsoft.EventHub/namespaces',\n      'Microsoft.EventHub/clusters',\n      'Microsoft.HDInsight/clusters',\n      'Microsoft.Insights/AutoscaleSettings',\n      'Microsoft.Insights/components',\n      'Microsoft.KeyVault/vaults',\n      'Microsoft.Kusto/clusters',\n      'Microsoft.LocationBasedServices/accounts',\n      'Microsoft.Logic/workflows',\n      'Microsoft.Logic/integrationServiceEnvironments',\n      'Microsoft.NetApp/netAppAccounts/capacityPools',\n      'Microsoft.NetApp/netAppAccounts/capacityPools/volumes',\n      'Microsoft.Network/networkInterfaces',\n      'Microsoft.Network/loadBalancers',\n      'Microsoft.Network/dnsZones',\n      'Microsoft.Network/publicIPAddresses',\n      'Microsoft.Network/azureFirewalls',\n      'Microsoft.Network/applicationGateways',\n      'Microsoft.Network/virtualNetworkGateways',\n      'Microsoft.Network/expressRouteCircuits',\n      'Microsoft.Network/expressRouteCircuits/Peerings',\n      'Microsoft.Network/connections',\n      'Microsoft.Network/trafficManagerProfiles',\n      'Microsoft.Network/networkWatchers/connectionMonitors',\n      'Microsoft.Network/frontdoors',\n      'Microsoft.Network/natGateways',\n      'Microsoft.Network/vpngateways',\n      'Microsoft.Network/virtualNetworkGateways',\n      'Microsoft.NotificationHubs/namespaces/notificationHubs',\n      'Microsoft.OperationalInsights/workspaces',\n      'Microsoft.PowerBIDedicated/capacities',\n      'Microsoft.Relay/namespaces',\n      'Microsoft.Search/searchServices',\n      'Microsoft.ServiceBus/namespaces',\n      'Microsoft.SignalRService/SignalR',\n      'Microsoft.Sql/servers/databases',\n      'Microsoft.Sql/servers/elasticPools',\n      'Microsoft.Sql/managedInstances',\n      'Microsoft.Storage/storageAccounts',\n      'Microsoft.Storage/storageAccounts/blobServices',\n      'Microsoft.Storage/storageAccounts/fileServices',\n      'Microsoft.Storage/storageAccounts/queueServices',\n      'Microsoft.Storage/storageAccounts/tableServices',\n      'Microsoft.StorageSync/storageSyncServices',\n      'Microsoft.StorageSync/storageSyncServices/syncGroups',\n      'Microsoft.StorageSync/storageSyncServices/syncGroups/serverEndpoints',\n      'Microsoft.StorageSync/storageSyncServices/registeredServers',\n      'Microsoft.StreamAnalytics/streamingJobs',\n      'Microsoft.Web/serverfarms',\n      'Microsoft.Web/sites',\n      'Microsoft.Web/sites/slots',\n      'Microsoft.Web/hostingEnvironments/multiRolePools',\n      'Microsoft.Web/hostingEnvironments/workerPools',\n    ],\n    govazuremonitor: [\n      'Microsoft.AnalysisServices/servers',\n      'Microsoft.ApiManagement/service',\n      'Microsoft.Batch/batchAccounts',\n      'Microsoft.Cache/redis',\n      'Microsoft.ClassicCompute/virtualMachines',\n      'Microsoft.ClassicCompute/domainNames/slots/roles',\n      'Microsoft.CognitiveServices/accounts',\n      'Microsoft.Compute/virtualMachines',\n      'Microsoft.Compute/virtualMachineScaleSets',\n      'Microsoft.ContainerRegistry/registries',\n      'Microsoft.DBforMySQL/servers',\n      'Microsoft.DBforPostgreSQL/servers',\n      'Microsoft.Devices/IotHubs',\n      'Microsoft.Devices/provisioningServices',\n      'Microsoft.EventGrid/topics',\n      'Microsoft.EventGrid/eventSubscriptions',\n      'Microsoft.EventGrid/extensionTopics',\n      'Microsoft.EventHub/namespaces',\n      'Microsoft.EventHub/clusters',\n      'Microsoft.Insights/AutoscaleSettings',\n      'Microsoft.KeyVault/vaults',\n      'Microsoft.Logic/workflows',\n      'Microsoft.Network/networkInterfaces',\n      'Microsoft.Network/loadBalancers',\n      'Microsoft.Network/dnsZones',\n      'Microsoft.Network/publicIPAddresses',\n      'Microsoft.Network/azureFirewalls',\n      'Microsoft.Network/applicationGateways',\n      'Microsoft.Network/virtualNetworkGateways',\n      'Microsoft.Network/expressRouteCircuits',\n      'Microsoft.Network/expressRouteCircuits/Peerings',\n      'Microsoft.Network/connections',\n      'Microsoft.Network/trafficManagerProfiles',\n      'Microsoft.Network/networkWatchers/connectionMonitors',\n      'Microsoft.Network/frontdoors',\n      'Microsoft.NotificationHubs/namespaces/notificationHubs',\n      'Microsoft.OperationalInsights/workspaces',\n      'Microsoft.PowerBIDedicated/capacities',\n      'Microsoft.Relay/namespaces',\n      'Microsoft.ServiceBus/namespaces',\n      'Microsoft.Sql/servers/databases',\n      'Microsoft.Sql/servers/elasticPools',\n      'Microsoft.Sql/managedInstances',\n      'Microsoft.Storage/storageAccounts',\n      'Microsoft.Storage/storageAccounts/blobServices',\n      'Microsoft.Storage/storageAccounts/fileServices',\n      'Microsoft.Storage/storageAccounts/queueServices',\n      'Microsoft.Storage/storageAccounts/tableServices',\n      'Microsoft.Web/serverfarms',\n      'Microsoft.Web/sites',\n      'Microsoft.Web/sites/slots',\n      'Microsoft.Web/hostingEnvironments/multiRolePools',\n      'Microsoft.Web/hostingEnvironments/workerPools',\n    ],\n    germanyazuremonitor: [\n      'Microsoft.AnalysisServices/servers',\n      'Microsoft.Batch/batchAccounts',\n      'Microsoft.Cache/redis',\n      'Microsoft.ClassicCompute/virtualMachines',\n      'Microsoft.ClassicCompute/domainNames/slots/roles',\n      'Microsoft.Compute/virtualMachines',\n      'Microsoft.Compute/virtualMachineScaleSets',\n      'Microsoft.DBforMySQL/servers',\n      'Microsoft.DBforPostgreSQL/servers',\n      'Microsoft.Devices/IotHubs',\n      'Microsoft.Devices/provisioningServices',\n      'Microsoft.EventHub/namespaces',\n      'Microsoft.EventHub/clusters',\n      'Microsoft.Insights/AutoscaleSettings',\n      'Microsoft.KeyVault/vaults',\n      'Microsoft.Network/networkInterfaces',\n      'Microsoft.Network/loadBalancers',\n      'Microsoft.Network/dnsZones',\n      'Microsoft.Network/publicIPAddresses',\n      'Microsoft.Network/azureFirewalls',\n      'Microsoft.Network/applicationGateways',\n      'Microsoft.Network/virtualNetworkGateways',\n      'Microsoft.Network/expressRouteCircuits',\n      'Microsoft.Network/expressRouteCircuits/Peerings',\n      'Microsoft.Network/connections',\n      'Microsoft.Network/trafficManagerProfiles',\n      'Microsoft.Network/networkWatchers/connectionMonitors',\n      'Microsoft.Network/frontdoors',\n      'Microsoft.NotificationHubs/namespaces/notificationHubs',\n      'Microsoft.OperationalInsights/workspaces',\n      'Microsoft.PowerBIDedicated/capacities',\n      'Microsoft.Relay/namespaces',\n      'Microsoft.ServiceBus/namespaces',\n      'Microsoft.Sql/servers/databases',\n      'Microsoft.Sql/servers/elasticPools',\n      'Microsoft.Sql/managedInstances',\n      'Microsoft.Storage/storageAccounts',\n      'Microsoft.Storage/storageAccounts/blobServices',\n      'Microsoft.Storage/storageAccounts/fileServices',\n      'Microsoft.Storage/storageAccounts/queueServices',\n      'Microsoft.Storage/storageAccounts/tableServices',\n      'Microsoft.StreamAnalytics/streamingJobs',\n      'Microsoft.Web/serverfarms',\n      'Microsoft.Web/sites',\n      'Microsoft.Web/sites/slots',\n      'Microsoft.Web/hostingEnvironments/multiRolePools',\n      'Microsoft.Web/hostingEnvironments/workerPools',\n    ],\n    chinaazuremonitor: [\n      'Microsoft.AnalysisServices/servers',\n      'Microsoft.Batch/batchAccounts',\n      'Microsoft.Cache/redis',\n      'Microsoft.ClassicCompute/virtualMachines',\n      'Microsoft.ClassicCompute/domainNames/slots/roles',\n      'Microsoft.CognitiveServices/accounts',\n      'Microsoft.Compute/virtualMachines',\n      'Microsoft.Compute/virtualMachineScaleSets',\n      'Microsoft.ContainerRegistry/registries',\n      'Microsoft.DBforMySQL/servers',\n      'Microsoft.DBforPostgreSQL/servers',\n      'Microsoft.Devices/IotHubs',\n      'Microsoft.Devices/provisioningServices',\n      'Microsoft.EventHub/namespaces',\n      'Microsoft.Insights/AutoscaleSettings',\n      'Microsoft.KeyVault/vaults',\n      'Microsoft.Logic/workflows',\n      'Microsoft.Network/networkInterfaces',\n      'Microsoft.Network/loadBalancers',\n      'Microsoft.Network/dnsZones',\n      'Microsoft.Network/publicIPAddresses',\n      'Microsoft.Network/azureFirewalls',\n      'Microsoft.Network/applicationGateways',\n      'Microsoft.Network/virtualNetworkGateways',\n      'Microsoft.Network/expressRouteCircuits',\n      'Microsoft.Network/expressRouteCircuits/Peerings',\n      'Microsoft.Network/connections',\n      'Microsoft.Network/trafficManagerProfiles',\n      'Microsoft.Network/networkWatchers/connectionMonitors',\n      'Microsoft.Network/frontdoors',\n      'Microsoft.NotificationHubs/namespaces/notificationHubs',\n      'Microsoft.PowerBIDedicated/capacities',\n      'Microsoft.Relay/namespaces',\n      'Microsoft.ServiceBus/namespaces',\n      'Microsoft.Sql/servers/databases',\n      'Microsoft.Sql/servers/elasticPools',\n      'Microsoft.Sql/managedInstances',\n      'Microsoft.Storage/storageAccounts',\n      'Microsoft.Storage/storageAccounts/blobServices',\n      'Microsoft.Storage/storageAccounts/fileServices',\n      'Microsoft.Storage/storageAccounts/queueServices',\n      'Microsoft.Storage/storageAccounts/tableServices',\n      'Microsoft.StreamAnalytics/streamingJobs',\n      'Microsoft.Web/serverfarms',\n      'Microsoft.Web/sites',\n      'Microsoft.Web/sites/slots',\n      'Microsoft.Web/hostingEnvironments/multiRolePools',\n      'Microsoft.Web/hostingEnvironments/workerPools',\n    ],\n  };\n\n  constructor(private cloudName: string) {}\n\n  get(): string[] {\n    return this.supportedMetricNamespaces[this.cloudName];\n  }\n}\n","import { config } from '@grafana/runtime';\nimport {\n  AzureAuthType,\n  AzureCloud,\n  AzureCredentials,\n  AzureDataSourceInstanceSettings,\n  AzureDataSourceSettings,\n  ConcealedSecret,\n} from './types';\n\nconst concealed: ConcealedSecret = Symbol('Concealed client secret');\n\nexport function getAuthType(options: AzureDataSourceSettings | AzureDataSourceInstanceSettings): AzureAuthType {\n  if (!options.jsonData.azureAuthType) {\n    // If authentication type isn't explicitly specified and datasource has client credentials,\n    // then this is existing datasource which is configured for app registration (client secret)\n    if (options.jsonData.tenantId && options.jsonData.clientId) {\n      return 'clientsecret';\n    }\n\n    // For newly created datasource with no configuration, managed identity is the default authentication type\n    // if they are enabled in Grafana config\n    return config.azure.managedIdentityEnabled ? 'msi' : 'clientsecret';\n  }\n\n  return options.jsonData.azureAuthType;\n}\n\nfunction getDefaultAzureCloud(): string {\n  switch (config.azure.cloud) {\n    case AzureCloud.Public:\n    case AzureCloud.None:\n    case undefined:\n      return 'azuremonitor';\n    case AzureCloud.China:\n      return 'chinaazuremonitor';\n    case AzureCloud.USGovernment:\n      return 'govazuremonitor';\n    case AzureCloud.Germany:\n      return 'germanyazuremonitor';\n    default:\n      throw new Error(`The cloud '${config.azure.cloud}' not supported.`);\n  }\n}\n\nexport function getAzurePortalUrl(azureCloud: string): string {\n  switch (azureCloud) {\n    case 'azuremonitor':\n      return 'https://portal.azure.com';\n    case 'chinaazuremonitor':\n      return 'https://portal.azure.cn';\n    case 'govazuremonitor':\n      return 'https://portal.azure.us';\n    case 'germanyazuremonitor':\n      return 'https://portal.microsoftazure.de';\n    default:\n      throw new Error('The cloud not supported.');\n  }\n}\n\nexport function getAzureCloud(options: AzureDataSourceSettings | AzureDataSourceInstanceSettings): string {\n  const authType = getAuthType(options);\n  switch (authType) {\n    case 'msi':\n      // In case of managed identity, the cloud is always same as where Grafana is hosted\n      return getDefaultAzureCloud();\n    case 'clientsecret':\n      return options.jsonData.cloudName || getDefaultAzureCloud();\n  }\n}\n\nfunction getSecret(options: AzureDataSourceSettings): undefined | string | ConcealedSecret {\n  if (options.secureJsonFields.clientSecret) {\n    // The secret is concealed on server\n    return concealed;\n  } else {\n    const secret = options.secureJsonData?.clientSecret;\n    return typeof secret === 'string' && secret.length > 0 ? secret : undefined;\n  }\n}\n\nexport function isCredentialsComplete(credentials: AzureCredentials): boolean {\n  switch (credentials.authType) {\n    case 'msi':\n      return true;\n    case 'clientsecret':\n      return !!(credentials.azureCloud && credentials.tenantId && credentials.clientId && credentials.clientSecret);\n  }\n}\n\nexport function getCredentials(options: AzureDataSourceSettings): AzureCredentials {\n  const authType = getAuthType(options);\n  switch (authType) {\n    case 'msi':\n      if (config.azure.managedIdentityEnabled) {\n        return {\n          authType: 'msi',\n          defaultSubscriptionId: options.jsonData.subscriptionId,\n        };\n      } else {\n        // If authentication type is managed identity but managed identities were disabled in Grafana config,\n        // then we should fallback to an empty app registration (client secret) configuration\n        return {\n          authType: 'clientsecret',\n          azureCloud: getDefaultAzureCloud(),\n        };\n      }\n    case 'clientsecret':\n      return {\n        authType: 'clientsecret',\n        azureCloud: options.jsonData.cloudName || getDefaultAzureCloud(),\n        tenantId: options.jsonData.tenantId,\n        clientId: options.jsonData.clientId,\n        clientSecret: getSecret(options),\n        defaultSubscriptionId: options.jsonData.subscriptionId,\n      };\n  }\n}\n\nexport function updateCredentials(\n  options: AzureDataSourceSettings,\n  credentials: AzureCredentials\n): AzureDataSourceSettings {\n  switch (credentials.authType) {\n    case 'msi':\n      if (!config.azure.managedIdentityEnabled) {\n        throw new Error('Managed Identity authentication is not enabled in Grafana config.');\n      }\n\n      options = {\n        ...options,\n        jsonData: {\n          ...options.jsonData,\n          azureAuthType: 'msi',\n          subscriptionId: credentials.defaultSubscriptionId,\n        },\n      };\n\n      return options;\n\n    case 'clientsecret':\n      options = {\n        ...options,\n        jsonData: {\n          ...options.jsonData,\n          azureAuthType: 'clientsecret',\n          cloudName: credentials.azureCloud || getDefaultAzureCloud(),\n          tenantId: credentials.tenantId,\n          clientId: credentials.clientId,\n          subscriptionId: credentials.defaultSubscriptionId,\n        },\n        secureJsonData: {\n          ...options.secureJsonData,\n          clientSecret:\n            typeof credentials.clientSecret === 'string' && credentials.clientSecret.length > 0\n              ? credentials.clientSecret\n              : undefined,\n        },\n        secureJsonFields: {\n          ...options.secureJsonFields,\n          clientSecret: typeof credentials.clientSecret === 'symbol',\n        },\n      };\n\n      return options;\n  }\n}\n\nexport function isAppInsightsConfigured(options: AzureDataSourceSettings) {\n  return !!(options.jsonData.appInsightsAppId && options.secureJsonFields.appInsightsApiKey);\n}\n","import { filter, startsWith } from 'lodash';\nimport UrlBuilder from './url_builder';\nimport ResponseParser from './response_parser';\nimport SupportedNamespaces from './supported_namespaces';\nimport TimegrainConverter from '../time_grain_converter';\nimport {\n  AzureMonitorQuery,\n  AzureDataSourceJsonData,\n  AzureMonitorMetricDefinitionsResponse,\n  AzureMonitorResourceGroupsResponse,\n  AzureQueryType,\n  AzureMetricQuery,\n  DatasourceValidationResult,\n} from '../types';\nimport {\n  DataSourceInstanceSettings,\n  ScopedVars,\n  MetricFindValue,\n  DataQueryResponse,\n  DataQueryRequest,\n  TimeRange,\n} from '@grafana/data';\nimport { DataSourceWithBackend, getTemplateSrv } from '@grafana/runtime';\nimport { from, Observable } from 'rxjs';\nimport { mergeMap } from 'rxjs/operators';\n\nimport { getTimeSrv, TimeSrv } from 'app/features/dashboard/services/TimeSrv';\nimport { getAuthType, getAzureCloud, getAzurePortalUrl } from '../credentials';\nimport { resourceTypeDisplayNames } from '../azureMetadata';\nimport { routeNames } from '../utils/common';\n\nconst defaultDropdownValue = 'select';\n\n// Used to convert our aggregation value to the Azure enum for deep linking\nconst aggregationTypeMap: Record<string, number> = {\n  None: 0,\n  Total: 1,\n  Minimum: 2,\n  Maximum: 3,\n  Average: 4,\n  Count: 7,\n};\n\nexport default class AzureMonitorDatasource extends DataSourceWithBackend<AzureMonitorQuery, AzureDataSourceJsonData> {\n  apiVersion = '2018-01-01';\n  apiPreviewVersion = '2017-12-01-preview';\n  defaultSubscriptionId?: string;\n  resourcePath: string;\n  azurePortalUrl: string;\n  declare resourceGroup: string;\n  declare resourceName: string;\n  supportedMetricNamespaces: string[] = [];\n  timeSrv: TimeSrv;\n\n  constructor(private instanceSettings: DataSourceInstanceSettings<AzureDataSourceJsonData>) {\n    super(instanceSettings);\n\n    this.timeSrv = getTimeSrv();\n    this.defaultSubscriptionId = instanceSettings.jsonData.subscriptionId;\n\n    const cloud = getAzureCloud(instanceSettings);\n    this.resourcePath = `${routeNames.azureMonitor}/subscriptions`;\n    this.supportedMetricNamespaces = new SupportedNamespaces(cloud).get();\n    this.azurePortalUrl = getAzurePortalUrl(cloud);\n  }\n\n  isConfigured(): boolean {\n    // If validation didn't return any error then the data source is properly configured\n    return !this.validateDatasource();\n  }\n\n  filterQuery(item: AzureMonitorQuery): boolean {\n    return !!(\n      item.hide !== true &&\n      item.azureMonitor &&\n      item.azureMonitor.resourceGroup &&\n      item.azureMonitor.resourceGroup !== defaultDropdownValue &&\n      item.azureMonitor.resourceName &&\n      item.azureMonitor.resourceName !== defaultDropdownValue &&\n      item.azureMonitor.metricDefinition &&\n      item.azureMonitor.metricDefinition !== defaultDropdownValue &&\n      item.azureMonitor.metricName &&\n      item.azureMonitor.metricName !== defaultDropdownValue &&\n      item.azureMonitor.aggregation &&\n      item.azureMonitor.aggregation !== defaultDropdownValue\n    );\n  }\n\n  query(request: DataQueryRequest<AzureMonitorQuery>): Observable<DataQueryResponse> {\n    const metricQueries = request.targets.reduce((prev: Record<string, AzureMonitorQuery>, cur) => {\n      prev[cur.refId] = cur;\n      return prev;\n    }, {});\n\n    return super.query(request).pipe(\n      mergeMap((res: DataQueryResponse) => {\n        return from(this.processResponse(res, metricQueries));\n      })\n    );\n  }\n\n  async processResponse(\n    res: DataQueryResponse,\n    metricQueries: Record<string, AzureMonitorQuery>\n  ): Promise<DataQueryResponse> {\n    if (res.data) {\n      for (const df of res.data) {\n        const metricQuery = metricQueries[df.refId];\n        if (!metricQuery.azureMonitor || !metricQuery.subscription) {\n          continue;\n        }\n\n        const url = this.buildAzurePortalUrl(\n          metricQuery.azureMonitor,\n          metricQuery.subscription,\n          this.timeSrv.timeRange()\n        );\n\n        for (const field of df.fields) {\n          field.config.links = [\n            {\n              url: url,\n              title: 'View in Azure Portal',\n              targetBlank: true,\n            },\n          ];\n        }\n      }\n    }\n    return res;\n  }\n\n  stringifyAzurePortalUrlParam(value: string | object): string {\n    const stringValue = typeof value === 'string' ? value : JSON.stringify(value);\n    return encodeURIComponent(stringValue);\n  }\n\n  buildAzurePortalUrl(metricQuery: AzureMetricQuery, subscriptionId: string, timeRange: TimeRange) {\n    const aggregationType =\n      (metricQuery.aggregation && aggregationTypeMap[metricQuery.aggregation]) ?? aggregationTypeMap.Average;\n\n    const chartDef = this.stringifyAzurePortalUrlParam({\n      v2charts: [\n        {\n          metrics: [\n            {\n              resourceMetadata: {\n                id: `/subscriptions/${subscriptionId}/resourceGroups/${metricQuery.resourceGroup}/providers/${metricQuery.metricDefinition}/${metricQuery.resourceName}`,\n              },\n              name: metricQuery.metricName,\n              aggregationType: aggregationType,\n              namespace: metricQuery.metricNamespace,\n              metricVisualization: {\n                displayName: metricQuery.metricName,\n                resourceDisplayName: metricQuery.resourceName,\n              },\n            },\n          ],\n        },\n      ],\n    });\n\n    const timeContext = this.stringifyAzurePortalUrlParam({\n      absolute: {\n        startTime: timeRange.from,\n        endTime: timeRange.to,\n      },\n    });\n\n    return `${this.azurePortalUrl}/#blade/Microsoft_Azure_MonitoringMetrics/Metrics.ReactView/Referer/MetricsExplorer/TimeContext/${timeContext}/ChartDefinition/${chartDef}`;\n  }\n\n  applyTemplateVariables(target: AzureMonitorQuery, scopedVars: ScopedVars): AzureMonitorQuery {\n    const item = target.azureMonitor;\n\n    if (!item) {\n      // return target;\n      throw new Error('Query is not a valid Azure Monitor Metrics query');\n    }\n\n    // fix for timeGrainUnit which is a deprecated/removed field name\n    if (item.timeGrain && item.timeGrainUnit && item.timeGrain !== 'auto') {\n      item.timeGrain = TimegrainConverter.createISO8601Duration(item.timeGrain, item.timeGrainUnit);\n    }\n\n    const templateSrv = getTemplateSrv();\n\n    const subscriptionId = templateSrv.replace(target.subscription || this.defaultSubscriptionId, scopedVars);\n    const resourceGroup = templateSrv.replace(item.resourceGroup, scopedVars);\n    const resourceName = templateSrv.replace(item.resourceName, scopedVars);\n    const metricNamespace = templateSrv.replace(item.metricNamespace, scopedVars);\n    const metricDefinition = templateSrv.replace(item.metricDefinition, scopedVars);\n    const timeGrain = templateSrv.replace((item.timeGrain || '').toString(), scopedVars);\n    const aggregation = templateSrv.replace(item.aggregation, scopedVars);\n    const top = templateSrv.replace(item.top || '', scopedVars);\n\n    const dimensionFilters = (item.dimensionFilters ?? [])\n      .filter((f) => f.dimension && f.dimension !== 'None')\n      .map((f) => {\n        const filter = templateSrv.replace(f.filter ?? '', scopedVars);\n        return {\n          dimension: templateSrv.replace(f.dimension, scopedVars),\n          operator: f.operator || 'eq',\n          filter: filter || '*', // send * when empty\n        };\n      });\n\n    return {\n      refId: target.refId,\n      subscription: subscriptionId,\n      queryType: AzureQueryType.AzureMonitor,\n      azureMonitor: {\n        resourceGroup,\n        resourceName,\n        metricDefinition,\n        timeGrain,\n        allowedTimeGrainsMs: item.allowedTimeGrainsMs,\n        metricName: templateSrv.replace(item.metricName, scopedVars),\n        metricNamespace:\n          metricNamespace && metricNamespace !== defaultDropdownValue ? metricNamespace : metricDefinition,\n        aggregation: aggregation,\n        dimensionFilters,\n        top: top || '10',\n        alias: item.alias,\n      },\n    };\n  }\n\n  /**\n   * This is named differently than DataSourceApi.metricFindQuery\n   * because it's not exposed to Grafana like the main AzureMonitorDataSource.\n   * And some of the azure internal data sources return null in this function, which the\n   * external interface does not support\n   */\n  metricFindQueryInternal(query: string): Promise<MetricFindValue[]> | null {\n    const subscriptionsQuery = query.match(/^Subscriptions\\(\\)/i);\n    if (subscriptionsQuery) {\n      return this.getSubscriptions();\n    }\n\n    const resourceGroupsQuery = query.match(/^ResourceGroups\\(\\)/i);\n    if (resourceGroupsQuery && this.defaultSubscriptionId) {\n      return this.getResourceGroups(this.defaultSubscriptionId);\n    }\n\n    const resourceGroupsQueryWithSub = query.match(/^ResourceGroups\\(([^\\)]+?)(,\\s?([^,]+?))?\\)/i);\n    if (resourceGroupsQueryWithSub) {\n      return this.getResourceGroups(this.toVariable(resourceGroupsQueryWithSub[1]));\n    }\n\n    const metricDefinitionsQuery = query.match(/^Namespaces\\(([^\\)]+?)(,\\s?([^,]+?))?\\)/i);\n    if (metricDefinitionsQuery && this.defaultSubscriptionId) {\n      if (!metricDefinitionsQuery[3]) {\n        return this.getMetricDefinitions(this.defaultSubscriptionId, this.toVariable(metricDefinitionsQuery[1]));\n      }\n    }\n\n    const metricDefinitionsQueryWithSub = query.match(/^Namespaces\\(([^,]+?),\\s?([^,]+?)\\)/i);\n    if (metricDefinitionsQueryWithSub) {\n      return this.getMetricDefinitions(\n        this.toVariable(metricDefinitionsQueryWithSub[1]),\n        this.toVariable(metricDefinitionsQueryWithSub[2])\n      );\n    }\n\n    const resourceNamesQuery = query.match(/^ResourceNames\\(([^,]+?),\\s?([^,]+?)\\)/i);\n    if (resourceNamesQuery && this.defaultSubscriptionId) {\n      const resourceGroup = this.toVariable(resourceNamesQuery[1]);\n      const metricDefinition = this.toVariable(resourceNamesQuery[2]);\n      return this.getResourceNames(this.defaultSubscriptionId, resourceGroup, metricDefinition);\n    }\n\n    const resourceNamesQueryWithSub = query.match(/^ResourceNames\\(([^,]+?),\\s?([^,]+?),\\s?(.+?)\\)/i);\n    if (resourceNamesQueryWithSub) {\n      const subscription = this.toVariable(resourceNamesQueryWithSub[1]);\n      const resourceGroup = this.toVariable(resourceNamesQueryWithSub[2]);\n      const metricDefinition = this.toVariable(resourceNamesQueryWithSub[3]);\n      return this.getResourceNames(subscription, resourceGroup, metricDefinition);\n    }\n\n    const metricNamespaceQuery = query.match(/^MetricNamespace\\(([^,]+?),\\s?([^,]+?),\\s?([^,]+?)\\)/i);\n    if (metricNamespaceQuery && this.defaultSubscriptionId) {\n      const resourceGroup = this.toVariable(metricNamespaceQuery[1]);\n      const metricDefinition = this.toVariable(metricNamespaceQuery[2]);\n      const resourceName = this.toVariable(metricNamespaceQuery[3]);\n      return this.getMetricNamespaces(this.defaultSubscriptionId, resourceGroup, metricDefinition, resourceName);\n    }\n\n    const metricNamespaceQueryWithSub = query.match(\n      /^metricnamespace\\(([^,]+?),\\s?([^,]+?),\\s?([^,]+?),\\s?([^,]+?)\\)/i\n    );\n    if (metricNamespaceQueryWithSub) {\n      const subscription = this.toVariable(metricNamespaceQueryWithSub[1]);\n      const resourceGroup = this.toVariable(metricNamespaceQueryWithSub[2]);\n      const metricDefinition = this.toVariable(metricNamespaceQueryWithSub[3]);\n      const resourceName = this.toVariable(metricNamespaceQueryWithSub[4]);\n      return this.getMetricNamespaces(subscription, resourceGroup, metricDefinition, resourceName);\n    }\n\n    const metricNamesQuery = query.match(/^MetricNames\\(([^,]+?),\\s?([^,]+?),\\s?([^,]+?),\\s?([^,]+?)\\)/i);\n    if (metricNamesQuery && this.defaultSubscriptionId) {\n      if (metricNamesQuery[3].indexOf(',') === -1) {\n        const resourceGroup = this.toVariable(metricNamesQuery[1]);\n        const metricDefinition = this.toVariable(metricNamesQuery[2]);\n        const resourceName = this.toVariable(metricNamesQuery[3]);\n        const metricNamespace = this.toVariable(metricNamesQuery[4]);\n        return this.getMetricNames(\n          this.defaultSubscriptionId,\n          resourceGroup,\n          metricDefinition,\n          resourceName,\n          metricNamespace\n        );\n      }\n    }\n\n    const metricNamesQueryWithSub = query.match(\n      /^MetricNames\\(([^,]+?),\\s?([^,]+?),\\s?([^,]+?),\\s?([^,]+?),\\s?(.+?)\\)/i\n    );\n\n    if (metricNamesQueryWithSub) {\n      const subscription = this.toVariable(metricNamesQueryWithSub[1]);\n      const resourceGroup = this.toVariable(metricNamesQueryWithSub[2]);\n      const metricDefinition = this.toVariable(metricNamesQueryWithSub[3]);\n      const resourceName = this.toVariable(metricNamesQueryWithSub[4]);\n      const metricNamespace = this.toVariable(metricNamesQueryWithSub[5]);\n      return this.getMetricNames(subscription, resourceGroup, metricDefinition, resourceName, metricNamespace);\n    }\n\n    return null;\n  }\n\n  toVariable(metric: string) {\n    return getTemplateSrv().replace((metric || '').trim());\n  }\n\n  async getSubscriptions(): Promise<Array<{ text: string; value: string }>> {\n    if (!this.isConfigured()) {\n      return [];\n    }\n\n    return this.getResource(`${this.resourcePath}?api-version=2019-03-01`).then((result: any) => {\n      return ResponseParser.parseSubscriptions(result);\n    });\n  }\n\n  getResourceGroups(subscriptionId: string) {\n    return this.getResource(\n      `${this.resourcePath}/${subscriptionId}/resourceGroups?api-version=${this.apiVersion}`\n    ).then((result: AzureMonitorResourceGroupsResponse) => {\n      return ResponseParser.parseResponseValues(result, 'name', 'name');\n    });\n  }\n\n  getMetricDefinitions(subscriptionId: string, resourceGroup: string) {\n    return this.getResource(\n      `${this.resourcePath}/${subscriptionId}/resourceGroups/${resourceGroup}/resources?api-version=${this.apiVersion}`\n    )\n      .then((result: AzureMonitorMetricDefinitionsResponse) => {\n        return ResponseParser.parseResponseValues(result, 'type', 'type');\n      })\n      .then((result) => {\n        return filter(result, (t) => {\n          for (let i = 0; i < this.supportedMetricNamespaces.length; i++) {\n            if (t.value.toLowerCase() === this.supportedMetricNamespaces[i].toLowerCase()) {\n              return true;\n            }\n          }\n\n          return false;\n        });\n      })\n      .then((result) => {\n        let shouldHardcodeBlobStorage = false;\n        for (let i = 0; i < result.length; i++) {\n          if (result[i].value === 'Microsoft.Storage/storageAccounts') {\n            shouldHardcodeBlobStorage = true;\n            break;\n          }\n        }\n\n        if (shouldHardcodeBlobStorage) {\n          result.push({\n            text: 'Microsoft.Storage/storageAccounts/blobServices',\n            value: 'Microsoft.Storage/storageAccounts/blobServices',\n          });\n          result.push({\n            text: 'Microsoft.Storage/storageAccounts/fileServices',\n            value: 'Microsoft.Storage/storageAccounts/fileServices',\n          });\n          result.push({\n            text: 'Microsoft.Storage/storageAccounts/tableServices',\n            value: 'Microsoft.Storage/storageAccounts/tableServices',\n          });\n          result.push({\n            text: 'Microsoft.Storage/storageAccounts/queueServices',\n            value: 'Microsoft.Storage/storageAccounts/queueServices',\n          });\n        }\n\n        return result.map((v) => ({\n          value: v.value,\n          text: resourceTypeDisplayNames[v.value.toLowerCase()] || v.value,\n        }));\n      });\n  }\n\n  getResourceNames(subscriptionId: string, resourceGroup: string, metricDefinition: string) {\n    return this.getResource(\n      `${this.resourcePath}/${subscriptionId}/resourceGroups/${resourceGroup}/resources?api-version=${this.apiVersion}`\n    ).then((result: any) => {\n      if (!startsWith(metricDefinition, 'Microsoft.Storage/storageAccounts/')) {\n        return ResponseParser.parseResourceNames(result, metricDefinition);\n      }\n\n      const list = ResponseParser.parseResourceNames(result, 'Microsoft.Storage/storageAccounts');\n      for (let i = 0; i < list.length; i++) {\n        list[i].text += '/default';\n        list[i].value += '/default';\n      }\n\n      return list;\n    });\n  }\n\n  getMetricNamespaces(subscriptionId: string, resourceGroup: string, metricDefinition: string, resourceName: string) {\n    const url = UrlBuilder.buildAzureMonitorGetMetricNamespacesUrl(\n      this.resourcePath,\n      subscriptionId,\n      resourceGroup,\n      metricDefinition,\n      resourceName,\n      this.apiPreviewVersion\n    );\n\n    return this.getResource(url).then((result: any) => {\n      return ResponseParser.parseResponseValues(result, 'name', 'properties.metricNamespaceName');\n    });\n  }\n\n  getMetricNames(\n    subscriptionId: string,\n    resourceGroup: string,\n    metricDefinition: string,\n    resourceName: string,\n    metricNamespace: string\n  ) {\n    const url = UrlBuilder.buildAzureMonitorGetMetricNamesUrl(\n      this.resourcePath,\n      subscriptionId,\n      resourceGroup,\n      metricDefinition,\n      resourceName,\n      metricNamespace,\n      this.apiVersion\n    );\n\n    return this.getResource(url).then((result: any) => {\n      return ResponseParser.parseResponseValues(result, 'name.localizedValue', 'name.value');\n    });\n  }\n\n  getMetricMetadata(\n    subscriptionId: string,\n    resourceGroup: string,\n    metricDefinition: string,\n    resourceName: string,\n    metricNamespace: string,\n    metricName: string\n  ) {\n    const url = UrlBuilder.buildAzureMonitorGetMetricNamesUrl(\n      this.resourcePath,\n      subscriptionId,\n      resourceGroup,\n      metricDefinition,\n      resourceName,\n      metricNamespace,\n      this.apiVersion\n    );\n\n    return this.getResource(url).then((result: any) => {\n      return ResponseParser.parseMetadata(result, metricName);\n    });\n  }\n\n  async testDatasource(): Promise<DatasourceValidationResult> {\n    const validationError = this.validateDatasource();\n    if (validationError) {\n      return Promise.resolve(validationError);\n    }\n\n    try {\n      const url = `${this.resourcePath}?api-version=2019-03-01`;\n\n      return await this.getResource(url).then<DatasourceValidationResult>((response: any) => {\n        return {\n          status: 'success',\n          message: 'Successfully queried the Azure Monitor service.',\n          title: 'Success',\n        };\n      });\n    } catch (e) {\n      let message = 'Azure Monitor: ';\n      message += e.statusText ? e.statusText + ': ' : '';\n\n      if (e.data && e.data.error && e.data.error.code) {\n        message += e.data.error.code + '. ' + e.data.error.message;\n      } else if (e.data && e.data.error) {\n        message += e.data.error;\n      } else if (e.data) {\n        message += e.data;\n      } else {\n        message += 'Cannot connect to Azure Monitor REST API.';\n      }\n      return {\n        status: 'error',\n        message: message,\n      };\n    }\n  }\n\n  private validateDatasource(): DatasourceValidationResult | undefined {\n    const authType = getAuthType(this.instanceSettings);\n\n    if (authType === 'clientsecret') {\n      if (!this.isValidConfigField(this.instanceSettings.jsonData.tenantId)) {\n        return {\n          status: 'error',\n          message: 'The Tenant Id field is required.',\n        };\n      }\n\n      if (!this.isValidConfigField(this.instanceSettings.jsonData.clientId)) {\n        return {\n          status: 'error',\n          message: 'The Client Id field is required.',\n        };\n      }\n    }\n\n    return undefined;\n  }\n\n  private isValidConfigField(field?: string): boolean {\n    return typeof field === 'string' && field.length > 0;\n  }\n}\n","import { concat, filter, find, forEach, indexOf, intersection, isObject, map, without, keys as _keys } from 'lodash';\nimport { dateTime } from '@grafana/data';\n\nexport default class ResponseParser {\n  constructor(private results: any) {}\n\n  parseQueryResult() {\n    let data: any = [];\n    let columns: any = [];\n    for (let i = 0; i < this.results.length; i++) {\n      if (this.results[i].query.raw) {\n        const xaxis = this.results[i].query.xaxis;\n        const yaxises = this.results[i].query.yaxis;\n        const spliton = this.results[i].query.spliton;\n        columns = this.results[i].result.Tables[0].Columns;\n        const rows = this.results[i].result.Tables[0].Rows;\n        data = concat(data, this.parseRawQueryResultRow(this.results[i].query, columns, rows, xaxis, yaxises, spliton));\n      } else {\n        const value = this.results[i].result.value;\n        const alias = this.results[i].query.alias;\n        data = concat(data, this.parseQueryResultRow(this.results[i].query, value, alias));\n      }\n    }\n    return data;\n  }\n\n  parseRawQueryResultRow(query: any, columns: any, rows: any, xaxis: string, yaxises: string, spliton: string) {\n    const data: any[] = [];\n    const columnsForDropdown = map(columns, (column) => ({ text: column.ColumnName, value: column.ColumnName }));\n\n    const xaxisColumn = columns.findIndex((column: any) => column.ColumnName === xaxis);\n    const yaxisesSplit = yaxises.split(',');\n    const yaxisColumns: any = {};\n    forEach(yaxisesSplit, (yaxis) => {\n      yaxisColumns[yaxis] = columns.findIndex((column: any) => column.ColumnName === yaxis);\n    });\n    const splitonColumn = columns.findIndex((column: any) => column.ColumnName === spliton);\n    const convertTimestamp = xaxis === 'timestamp';\n\n    forEach(rows, (row) => {\n      forEach(yaxisColumns, (yaxisColumn, yaxisName) => {\n        const bucket =\n          splitonColumn === -1\n            ? ResponseParser.findOrCreateBucket(data, yaxisName)\n            : ResponseParser.findOrCreateBucket(data, row[splitonColumn]);\n        const epoch = convertTimestamp ? ResponseParser.dateTimeToEpoch(row[xaxisColumn]) : row[xaxisColumn];\n        bucket.datapoints.push([row[yaxisColumn], epoch]);\n        bucket.refId = query.refId;\n        bucket.query = query.query;\n        bucket.columnsForDropdown = columnsForDropdown;\n      });\n    });\n\n    return data;\n  }\n\n  parseQueryResultRow(query: any, value: any, alias: string) {\n    const data: any[] = [];\n\n    if (ResponseParser.isSingleValue(value)) {\n      const metricName = ResponseParser.getMetricFieldKey(value);\n      const aggField = ResponseParser.getKeyForAggregationField(value[metricName]);\n      const epoch = ResponseParser.dateTimeToEpoch(value.end);\n      data.push({\n        target: metricName,\n        datapoints: [[value[metricName][aggField], epoch]],\n        refId: query.refId,\n        query: query.query,\n      });\n      return data;\n    }\n\n    const groupedBy = ResponseParser.hasSegmentsField(value.segments[0]);\n    if (!groupedBy) {\n      const metricName = ResponseParser.getMetricFieldKey(value.segments[0]);\n      const dataTarget = ResponseParser.findOrCreateBucket(data, metricName);\n\n      for (let i = 0; i < value.segments.length; i++) {\n        const epoch = ResponseParser.dateTimeToEpoch(value.segments[i].end);\n        const aggField: string = ResponseParser.getKeyForAggregationField(value.segments[i][metricName]);\n\n        dataTarget.datapoints.push([value.segments[i][metricName][aggField], epoch]);\n      }\n      dataTarget.refId = query.refId;\n      dataTarget.query = query.query;\n    } else {\n      for (let i = 0; i < value.segments.length; i++) {\n        const epoch = ResponseParser.dateTimeToEpoch(value.segments[i].end);\n\n        for (let j = 0; j < value.segments[i].segments.length; j++) {\n          const metricName = ResponseParser.getMetricFieldKey(value.segments[i].segments[j]);\n          const aggField = ResponseParser.getKeyForAggregationField(value.segments[i].segments[j][metricName]);\n          const target = this.getTargetName(value.segments[i].segments[j], alias);\n\n          const bucket = ResponseParser.findOrCreateBucket(data, target);\n          bucket.datapoints.push([value.segments[i].segments[j][metricName][aggField], epoch]);\n          bucket.refId = query.refId;\n          bucket.meta = {\n            query: query.query,\n          };\n        }\n      }\n    }\n\n    return data;\n  }\n\n  getTargetName(segment: { [x: string]: string }, alias: string) {\n    let metric = '';\n    let segmentName = '';\n    let segmentValue = '';\n    for (const prop in segment) {\n      if (isObject(segment[prop])) {\n        metric = prop;\n      } else {\n        segmentName = prop;\n        segmentValue = segment[prop];\n      }\n    }\n\n    if (alias) {\n      const regex = /\\{\\{([\\s\\S]+?)\\}\\}/g;\n      return alias.replace(regex, (match, g1, g2) => {\n        const group = g1 || g2;\n\n        if (group === 'metric') {\n          return metric;\n        } else if (group === 'groupbyname') {\n          return segmentName;\n        } else if (group === 'groupbyvalue') {\n          return segmentValue;\n        }\n\n        return match;\n      });\n    }\n\n    return metric + `{${segmentName}=\"${segmentValue}\"}`;\n  }\n\n  static isSingleValue(value: any) {\n    return !ResponseParser.hasSegmentsField(value);\n  }\n\n  static findOrCreateBucket(data: any[], target: string) {\n    let dataTarget: any = find(data, ['target', target]);\n    if (!dataTarget) {\n      dataTarget = { target: target, datapoints: [] };\n      data.push(dataTarget);\n    }\n\n    return dataTarget;\n  }\n\n  static hasSegmentsField(obj: any) {\n    const keys = _keys(obj);\n    return indexOf(keys, 'segments') > -1;\n  }\n\n  static getMetricFieldKey(segment: { [x: string]: any }) {\n    const keys = _keys(segment);\n\n    return filter(without(keys, 'start', 'end'), (key) => {\n      return isObject(segment[key]);\n    })[0];\n  }\n\n  static getKeyForAggregationField(dataObj: any): string {\n    const keys = _keys(dataObj);\n    return intersection(keys, ['sum', 'avg', 'min', 'max', 'count', 'unique'])[0];\n  }\n\n  static dateTimeToEpoch(dateTimeValue: any) {\n    return dateTime(dateTimeValue).valueOf();\n  }\n\n  static parseMetricNames(result: { metrics: any }) {\n    const keys = _keys(result.metrics);\n\n    return ResponseParser.toTextValueList(keys);\n  }\n\n  parseMetadata(metricName: string) {\n    const metric = this.results.metrics[metricName];\n\n    if (!metric) {\n      throw Error('No data found for metric: ' + metricName);\n    }\n\n    return {\n      primaryAggType: metric.defaultAggregation,\n      supportedAggTypes: metric.supportedAggregations,\n      supportedGroupBy: metric.supportedGroupBy.all,\n    };\n  }\n\n  parseGroupBys() {\n    return ResponseParser.toTextValueList(this.results.supportedGroupBy);\n  }\n\n  parseQuerySchema() {\n    const result: any = {\n      Type: 'AppInsights',\n      Tables: {},\n    };\n    if (this.results && this.results && this.results.Tables) {\n      for (let i = 0; i < this.results.Tables[0].Rows.length; i++) {\n        const column = this.results.Tables[0].Rows[i];\n        const columnTable = column[0];\n        const columnName = column[1];\n        const columnType = column[2];\n        if (result.Tables[columnTable]) {\n          result.Tables[columnTable].OrderedColumns.push({ Name: columnName, Type: columnType });\n        } else {\n          result.Tables[columnTable] = {\n            Name: columnTable,\n            OrderedColumns: [{ Name: columnName, Type: columnType }],\n          };\n        }\n      }\n    }\n    return result;\n  }\n\n  static toTextValueList(values: any) {\n    const list: any[] = [];\n    for (let i = 0; i < values.length; i++) {\n      list.push({\n        text: values[i],\n        value: values[i],\n      });\n    }\n    return list;\n  }\n}\n","import { DataQueryRequest, DataSourceInstanceSettings, ScopedVars, MetricFindValue } from '@grafana/data';\nimport { getTemplateSrv, DataSourceWithBackend } from '@grafana/runtime';\nimport { isString } from 'lodash';\n\nimport TimegrainConverter from '../time_grain_converter';\nimport { AzureDataSourceJsonData, AzureMonitorQuery, AzureQueryType, DatasourceValidationResult } from '../types';\nimport { routeNames } from '../utils/common';\nimport ResponseParser from './response_parser';\n\nexport interface LogAnalyticsColumn {\n  text: string;\n  value: string;\n}\n\nexport default class AppInsightsDatasource extends DataSourceWithBackend<AzureMonitorQuery, AzureDataSourceJsonData> {\n  resourcePath: string;\n  version = 'beta';\n  applicationId: string;\n  logAnalyticsColumns: { [key: string]: LogAnalyticsColumn[] } = {};\n\n  constructor(instanceSettings: DataSourceInstanceSettings<AzureDataSourceJsonData>) {\n    super(instanceSettings);\n    this.applicationId = instanceSettings.jsonData.appInsightsAppId || '';\n\n    this.resourcePath = `${routeNames.appInsights}/${this.version}/apps/${this.applicationId}`;\n  }\n\n  isConfigured(): boolean {\n    return !!this.applicationId && this.applicationId.length > 0;\n  }\n\n  createRawQueryRequest(item: any, options: DataQueryRequest<AzureMonitorQuery>, target: AzureMonitorQuery) {\n    if (item.xaxis && !item.timeColumn) {\n      item.timeColumn = item.xaxis;\n    }\n\n    if (item.yaxis && !item.valueColumn) {\n      item.valueColumn = item.yaxis;\n    }\n\n    if (item.spliton && !item.segmentColumn) {\n      item.segmentColumn = item.spliton;\n    }\n\n    return {\n      type: 'timeSeriesQuery',\n      raw: false,\n      appInsights: {\n        rawQuery: true,\n        rawQueryString: getTemplateSrv().replace(item.rawQueryString, options.scopedVars),\n        timeColumn: item.timeColumn,\n        valueColumn: item.valueColumn,\n        segmentColumn: item.segmentColumn,\n      },\n    };\n  }\n\n  applyTemplateVariables(target: AzureMonitorQuery, scopedVars: ScopedVars): AzureMonitorQuery {\n    const item = target.appInsights;\n\n    if (!item) {\n      return target;\n    }\n\n    const old: any = item;\n    // fix for timeGrainUnit which is a deprecated/removed field name\n    if (old.timeGrainCount) {\n      item.timeGrain = TimegrainConverter.createISO8601Duration(old.timeGrainCount, item.timeGrainUnit);\n    } else if (item.timeGrain && item.timeGrainUnit && item.timeGrain !== 'auto') {\n      item.timeGrain = TimegrainConverter.createISO8601Duration(item.timeGrain, item.timeGrainUnit);\n    }\n\n    // migration for non-standard names\n    if (old.groupBy && !item.dimension) {\n      item.dimension = [old.groupBy];\n    }\n    if (old.filter && !item.dimensionFilter) {\n      item.dimensionFilter = old.filter;\n    }\n\n    // Migrate single dimension string to array\n    if (isString(item.dimension)) {\n      if (item.dimension === 'None') {\n        item.dimension = [];\n      } else {\n        item.dimension = [item.dimension as string];\n      }\n    }\n    if (!item.dimension) {\n      item.dimension = [];\n    }\n\n    const templateSrv = getTemplateSrv();\n\n    return {\n      refId: target.refId,\n      queryType: AzureQueryType.ApplicationInsights,\n      appInsights: {\n        timeGrain: templateSrv.replace((item.timeGrain || '').toString(), scopedVars),\n        metricName: templateSrv.replace(item.metricName, scopedVars),\n        aggregation: templateSrv.replace(item.aggregation, scopedVars),\n        dimension: item.dimension.map((d) => templateSrv.replace(d, scopedVars)),\n        dimensionFilter: templateSrv.replace(item.dimensionFilter, scopedVars),\n        alias: item.alias,\n      },\n    };\n  }\n\n  /**\n   * This is named differently than DataSourceApi.metricFindQuery\n   * because it's not exposed to Grafana like the main AzureMonitorDataSource.\n   * And some of the azure internal data sources return null in this function, which the\n   * external interface does not support\n   */\n  metricFindQueryInternal(query: string): Promise<MetricFindValue[]> | null {\n    const appInsightsMetricNameQuery = query.match(/^AppInsightsMetricNames\\(\\)/i);\n    if (appInsightsMetricNameQuery) {\n      return this.getMetricNames();\n    }\n\n    const appInsightsGroupByQuery = query.match(/^AppInsightsGroupBys\\(([^\\)]+?)(,\\s?([^,]+?))?\\)/i);\n    if (appInsightsGroupByQuery) {\n      const metricName = appInsightsGroupByQuery[1];\n      return this.getGroupBys(getTemplateSrv().replace(metricName));\n    }\n\n    return null;\n  }\n\n  testDatasource(): Promise<DatasourceValidationResult> {\n    const path = `${this.resourcePath}/metrics/metadata`;\n    return this.getResource(path)\n      .then<DatasourceValidationResult>((response: any) => {\n        return {\n          status: 'success',\n          message: 'Successfully queried the Application Insights service.',\n          title: 'Success',\n        };\n      })\n      .catch((error: any) => {\n        let message = 'Application Insights: ';\n        message += error.statusText ? error.statusText + ': ' : '';\n\n        if (error.data && error.data.error && error.data.error.code === 'PathNotFoundError') {\n          message += 'Invalid Application Id for Application Insights service.';\n        } else if (error.data && error.data.error) {\n          message += error.data.error.code + '. ' + error.data.error.message;\n        } else {\n          message += 'Cannot connect to Application Insights REST API.';\n        }\n\n        return {\n          status: 'error',\n          message: message,\n        };\n      });\n  }\n\n  getMetricNames() {\n    const path = `${this.resourcePath}/metrics/metadata`;\n    return this.getResource(path).then(ResponseParser.parseMetricNames);\n  }\n\n  getMetricMetadata(metricName: string) {\n    const path = `${this.resourcePath}/metrics/metadata`;\n    return this.getResource(path).then((result: any) => {\n      return new ResponseParser(result).parseMetadata(metricName);\n    });\n  }\n\n  getGroupBys(metricName: string) {\n    return this.getMetricMetadata(metricName).then((result: any) => {\n      return new ResponseParser(result).parseGroupBys();\n    });\n  }\n\n  getQuerySchema() {\n    const path = `${this.resourcePath}/query/schema`;\n    return this.getResource(path).then((result: any) => {\n      const schema = new ResponseParser(result).parseQuerySchema();\n      // console.log(schema);\n      return schema;\n    });\n  }\n}\n","import { dateTime } from '@grafana/data';\n\nexport default class LogAnalyticsQuerystringBuilder {\n  constructor(public rawQueryString: string, public options: any, public defaultTimeField: any) {}\n\n  generate() {\n    let queryString = this.rawQueryString;\n    const macroRegexp = /\\$__([_a-zA-Z0-9]+)\\(([^\\)]*)\\)/gi;\n    queryString = queryString.replace(macroRegexp, (match, p1, p2) => {\n      if (p1 === 'contains') {\n        return this.getMultiContains(p2);\n      }\n\n      return match;\n    });\n\n    queryString = queryString.replace(/\\$__escapeMulti\\(('[^]*')\\)/gi, (match, p1) => this.escape(p1));\n\n    if (this.options) {\n      queryString = queryString.replace(macroRegexp, (match, p1, p2) => {\n        if (p1 === 'timeFilter') {\n          return this.getTimeFilter(p2, this.options);\n        }\n        if (p1 === 'timeFrom') {\n          return this.getFrom(this.options);\n        }\n        if (p1 === 'timeTo') {\n          return this.getUntil(this.options);\n        }\n\n        return match;\n      });\n      queryString = queryString.replace(/\\$__interval/gi, this.options.interval);\n    }\n    const rawQuery = queryString;\n    queryString = encodeURIComponent(queryString);\n    const uriString = `query=${queryString}`;\n\n    return { uriString, rawQuery };\n  }\n\n  getFrom(options: any) {\n    const from = options.range.from;\n    return `datetime(${dateTime(from).startOf('minute').toISOString()})`;\n  }\n\n  getUntil(options: any) {\n    if (options.rangeRaw?.to === 'now') {\n      const now = Date.now();\n      return `datetime(${dateTime(now).startOf('minute').toISOString()})`;\n    } else {\n      const until = options.range.to;\n      return `datetime(${dateTime(until).startOf('minute').toISOString()})`;\n    }\n  }\n\n  getTimeFilter(timeFieldArg: any, options: any) {\n    const timeField = timeFieldArg || this.defaultTimeField;\n    if (options.rangeRaw?.to === 'now') {\n      return `${timeField} >= ${this.getFrom(options)}`;\n    } else {\n      return `${timeField}  >= ${this.getFrom(options)} and ${timeField} <= ${this.getUntil(options)}`;\n    }\n  }\n\n  getMultiContains(inputs: string) {\n    const firstCommaIndex = inputs.indexOf(',');\n    const field = inputs.substring(0, firstCommaIndex);\n    const templateVar = inputs.substring(inputs.indexOf(',') + 1);\n\n    if (templateVar && templateVar.toLowerCase().trim() === 'all') {\n      return '1 == 1';\n    }\n\n    return `${field.trim()} in (${templateVar.trim()})`;\n  }\n\n  escape(inputs: string) {\n    return inputs\n      .substring(1, inputs.length - 1)\n      .split(`','`)\n      .map((v) => `@'${v}'`)\n      .join(', ');\n  }\n}\n","import { concat, find, flattenDeep, forEach, get, map } from 'lodash';\nimport { AnnotationEvent, dateTime, TimeSeries } from '@grafana/data';\nimport { AzureLogsTableData, AzureLogsVariable } from '../types';\nimport { AzureLogAnalyticsMetadata } from '../types/logAnalyticsMetadata';\n\nexport default class ResponseParser {\n  declare columns: string[];\n  constructor(private results: any) {}\n\n  parseQueryResult(): any {\n    let data: any[] = [];\n    let columns: any[] = [];\n    for (let i = 0; i < this.results.length; i++) {\n      if (this.results[i].result.tables.length === 0) {\n        continue;\n      }\n      columns = this.results[i].result.tables[0].columns;\n      const rows = this.results[i].result.tables[0].rows;\n\n      if (this.results[i].query.resultFormat === 'time_series') {\n        data = concat(data, this.parseTimeSeriesResult(this.results[i].query, columns, rows));\n      } else {\n        data = concat(data, this.parseTableResult(this.results[i].query, columns, rows));\n      }\n    }\n\n    return data;\n  }\n\n  parseTimeSeriesResult(query: { refId: string; query: any }, columns: any[], rows: any): TimeSeries[] {\n    const data: TimeSeries[] = [];\n    let timeIndex = -1;\n    let metricIndex = -1;\n    let valueIndex = -1;\n\n    for (let i = 0; i < columns.length; i++) {\n      if (timeIndex === -1 && columns[i].type === 'datetime') {\n        timeIndex = i;\n      }\n\n      if (metricIndex === -1 && columns[i].type === 'string') {\n        metricIndex = i;\n      }\n\n      if (valueIndex === -1 && ['int', 'long', 'real', 'double'].indexOf(columns[i].type) > -1) {\n        valueIndex = i;\n      }\n    }\n\n    if (timeIndex === -1) {\n      throw new Error('No datetime column found in the result. The Time Series format requires a time column.');\n    }\n\n    forEach(rows, (row) => {\n      const epoch = ResponseParser.dateTimeToEpoch(row[timeIndex]);\n      const metricName = metricIndex > -1 ? row[metricIndex] : columns[valueIndex].name;\n      const bucket = ResponseParser.findOrCreateBucket(data, metricName);\n      bucket.datapoints.push([row[valueIndex], epoch]);\n      bucket.refId = query.refId;\n      bucket.meta = {\n        executedQueryString: query.query,\n      };\n    });\n\n    return data;\n  }\n\n  parseTableResult(query: { refId: string; query: string }, columns: any[], rows: any[]): AzureLogsTableData {\n    const tableResult: AzureLogsTableData = {\n      type: 'table',\n      columns: map(columns, (col) => {\n        return { text: col.name, type: col.type };\n      }),\n      rows: rows,\n      refId: query.refId,\n      meta: {\n        executedQueryString: query.query,\n      },\n    };\n\n    return tableResult;\n  }\n\n  parseToVariables(): AzureLogsVariable[] {\n    const queryResult = this.parseQueryResult();\n\n    const variables: AzureLogsVariable[] = [];\n    forEach(queryResult, (result) => {\n      forEach(flattenDeep(result.rows), (row) => {\n        variables.push({\n          text: row,\n          value: row,\n        } as AzureLogsVariable);\n      });\n    });\n\n    return variables;\n  }\n\n  transformToAnnotations(options: any) {\n    const queryResult = this.parseQueryResult();\n\n    const list: AnnotationEvent[] = [];\n\n    forEach(queryResult, (result) => {\n      let timeIndex = -1;\n      let textIndex = -1;\n      let tagsIndex = -1;\n\n      for (let i = 0; i < result.columns.length; i++) {\n        if (timeIndex === -1 && result.columns[i].type === 'datetime') {\n          timeIndex = i;\n        }\n\n        if (textIndex === -1 && result.columns[i].text.toLowerCase() === 'text') {\n          textIndex = i;\n        }\n\n        if (tagsIndex === -1 && result.columns[i].text.toLowerCase() === 'tags') {\n          tagsIndex = i;\n        }\n      }\n\n      forEach(result.rows, (row) => {\n        list.push({\n          annotation: options.annotation,\n          time: Math.floor(ResponseParser.dateTimeToEpoch(row[timeIndex])),\n          text: row[textIndex] ? row[textIndex].toString() : '',\n          tags: row[tagsIndex] ? row[tagsIndex].trim().split(/\\s*,\\s*/) : [],\n        });\n      });\n    });\n\n    return list;\n  }\n\n  static findOrCreateBucket(data: TimeSeries[], target: any): TimeSeries {\n    let dataTarget: any = find(data, ['target', target]);\n    if (!dataTarget) {\n      dataTarget = { target: target, datapoints: [], refId: '', query: '' };\n      data.push(dataTarget);\n    }\n\n    return dataTarget;\n  }\n\n  static dateTimeToEpoch(dateTimeValue: any) {\n    return dateTime(dateTimeValue).valueOf();\n  }\n\n  static parseSubscriptions(result: any): Array<{ text: string; value: string }> {\n    const list: Array<{ text: string; value: string }> = [];\n\n    if (!result) {\n      return list;\n    }\n\n    const valueFieldName = 'subscriptionId';\n    const textFieldName = 'displayName';\n    for (let i = 0; i < result.value.length; i++) {\n      if (!find(list, ['value', get(result.value[i], valueFieldName)])) {\n        list.push({\n          text: `${get(result.value[i], textFieldName)}`,\n          value: get(result.value[i], valueFieldName),\n        });\n      }\n    }\n\n    return list;\n  }\n}\n\n// matches (name):(type) = (defaultValue)\n// e.g. fromRangeStart:datetime = datetime(null)\n//  - name: fromRangeStart\n//  - type: datetime\n//  - defaultValue: datetime(null)\nconst METADATA_FUNCTION_PARAMS = /([\\w\\W]+):([\\w]+)(?:\\s?=\\s?([\\w\\W]+))?/;\n\nfunction transformMetadataFunction(sourceSchema: AzureLogAnalyticsMetadata) {\n  if (!sourceSchema.functions) {\n    return [];\n  }\n\n  return sourceSchema.functions.map((fn) => {\n    const params =\n      fn.parameters &&\n      fn.parameters\n        .split(', ')\n        .map((arg) => {\n          const match = arg.match(METADATA_FUNCTION_PARAMS);\n          if (!match) {\n            return;\n          }\n\n          const [, name, type, defaultValue] = match;\n\n          return {\n            name,\n            type,\n            defaultValue,\n            cslDefaultValue: defaultValue,\n          };\n        })\n        .filter(<T>(v: T): v is Exclude<T, undefined> => !!v);\n\n    return {\n      name: fn.name,\n      body: fn.body,\n      inputParameters: params || [],\n    };\n  });\n}\n\nexport function transformMetadataToKustoSchema(sourceSchema: AzureLogAnalyticsMetadata, nameOrIdOrSomething: string) {\n  const database = {\n    name: nameOrIdOrSomething,\n    tables: sourceSchema.tables,\n    functions: transformMetadataFunction(sourceSchema),\n    majorVersion: 0,\n    minorVersion: 0,\n  };\n\n  return {\n    clusterType: 'Engine',\n    cluster: {\n      connectionString: nameOrIdOrSomething,\n      databases: [database],\n    },\n    database: database,\n  };\n}\n","import { map } from 'lodash';\nimport LogAnalyticsQuerystringBuilder from '../log_analytics/querystring_builder';\nimport ResponseParser, { transformMetadataToKustoSchema } from './response_parser';\nimport {\n  AzureMonitorQuery,\n  AzureDataSourceJsonData,\n  AzureLogsVariable,\n  AzureQueryType,\n  DatasourceValidationResult,\n} from '../types';\nimport {\n  DataQueryRequest,\n  DataQueryResponse,\n  ScopedVars,\n  DataSourceInstanceSettings,\n  MetricFindValue,\n} from '@grafana/data';\nimport { getTemplateSrv, DataSourceWithBackend } from '@grafana/runtime';\nimport { Observable, from } from 'rxjs';\nimport { mergeMap } from 'rxjs/operators';\nimport { getAuthType, getAzureCloud, getAzurePortalUrl } from '../credentials';\nimport { isGUIDish } from '../components/ResourcePicker/utils';\nimport { interpolateVariable, routeNames } from '../utils/common';\n\ninterface AdhocQuery {\n  datasourceId: number;\n  path: string;\n  resultFormat: string;\n}\n\nexport default class AzureLogAnalyticsDatasource extends DataSourceWithBackend<\n  AzureMonitorQuery,\n  AzureDataSourceJsonData\n> {\n  resourcePath: string;\n  azurePortalUrl: string;\n  declare applicationId: string;\n\n  defaultSubscriptionId?: string;\n\n  azureMonitorPath: string;\n  firstWorkspace?: string;\n  cache: Map<string, any>;\n\n  constructor(private instanceSettings: DataSourceInstanceSettings<AzureDataSourceJsonData>) {\n    super(instanceSettings);\n    this.cache = new Map();\n\n    this.resourcePath = `${routeNames.logAnalytics}`;\n    this.azureMonitorPath = `${routeNames.azureMonitor}/subscriptions`;\n    const cloud = getAzureCloud(instanceSettings);\n    this.azurePortalUrl = getAzurePortalUrl(cloud);\n\n    this.defaultSubscriptionId = this.instanceSettings.jsonData.subscriptionId || '';\n  }\n\n  isConfigured(): boolean {\n    // If validation didn't return any error then the data source is properly configured\n    return !this.validateDatasource();\n  }\n\n  async getSubscriptions(): Promise<Array<{ text: string; value: string }>> {\n    if (!this.isConfigured()) {\n      return [];\n    }\n\n    const path = `${this.azureMonitorPath}?api-version=2019-03-01`;\n    return await this.getResource(path).then((result: any) => {\n      return ResponseParser.parseSubscriptions(result);\n    });\n  }\n\n  async getWorkspaces(subscription: string): Promise<AzureLogsVariable[]> {\n    const response = await this.getWorkspaceList(subscription);\n\n    return (\n      map(response.value, (val: any) => {\n        return {\n          text: val.name,\n          value: val.id,\n        };\n      }) || []\n    );\n  }\n\n  private getWorkspaceList(subscription: string): Promise<any> {\n    const subscriptionId = getTemplateSrv().replace(subscription || this.defaultSubscriptionId);\n\n    const workspaceListUrl =\n      this.azureMonitorPath +\n      `/${subscriptionId}/providers/Microsoft.OperationalInsights/workspaces?api-version=2017-04-26-preview`;\n    return this.getResource(workspaceListUrl);\n  }\n\n  async getMetadata(resourceUri: string) {\n    const path = `${this.resourcePath}/v1${resourceUri}/metadata`;\n\n    const resp = await this.getResource(path);\n    return resp;\n  }\n\n  async getKustoSchema(resourceUri: string) {\n    const metadata = await this.getMetadata(resourceUri);\n    return transformMetadataToKustoSchema(metadata, resourceUri);\n  }\n\n  applyTemplateVariables(target: AzureMonitorQuery, scopedVars: ScopedVars): AzureMonitorQuery {\n    const item = target.azureLogAnalytics;\n    if (!item) {\n      return target;\n    }\n\n    const templateSrv = getTemplateSrv();\n    const resource = templateSrv.replace(item.resource, scopedVars);\n    let workspace = templateSrv.replace(item.workspace, scopedVars);\n\n    if (!workspace && !resource && this.firstWorkspace) {\n      workspace = this.firstWorkspace;\n    }\n\n    const query = templateSrv.replace(item.query, scopedVars, interpolateVariable);\n\n    return {\n      refId: target.refId,\n      queryType: AzureQueryType.LogAnalytics,\n\n      azureLogAnalytics: {\n        resultFormat: item.resultFormat,\n        query,\n        resource,\n\n        // Workspace was removed in Grafana 8, but remains for backwards compat\n        workspace,\n      },\n    };\n  }\n\n  /**\n   * Augment the results with links back to the azure console\n   */\n  query(request: DataQueryRequest<AzureMonitorQuery>): Observable<DataQueryResponse> {\n    return super.query(request).pipe(\n      mergeMap((res: DataQueryResponse) => {\n        return from(this.processResponse(res));\n      })\n    );\n  }\n\n  async processResponse(res: DataQueryResponse): Promise<DataQueryResponse> {\n    if (res.data) {\n      for (const df of res.data) {\n        const encodedQuery = df.meta?.custom?.encodedQuery;\n        if (encodedQuery && encodedQuery.length > 0) {\n          const url = await this.buildDeepLink(df.meta.custom);\n          if (url?.length) {\n            for (const field of df.fields) {\n              field.config.links = [\n                {\n                  url: url,\n                  title: 'View in Azure Portal',\n                  targetBlank: true,\n                },\n              ];\n            }\n          }\n        }\n      }\n    }\n    return res;\n  }\n\n  private async buildDeepLink(customMeta: Record<string, any>) {\n    const base64Enc = encodeURIComponent(customMeta.encodedQuery);\n    const workspaceId = customMeta.workspace;\n    const subscription = customMeta.subscription;\n\n    const details = await this.getWorkspaceDetails(workspaceId);\n    if (!details.workspace || !details.resourceGroup) {\n      return '';\n    }\n\n    const url =\n      `${this.azurePortalUrl}/#blade/Microsoft_OperationsManagementSuite_Workspace/` +\n      `AnalyticsBlade/initiator/AnalyticsShareLinkToQuery/isQueryEditorVisible/true/scope/` +\n      `%7B%22resources%22%3A%5B%7B%22resourceId%22%3A%22%2Fsubscriptions%2F${subscription}` +\n      `%2Fresourcegroups%2F${details.resourceGroup}%2Fproviders%2Fmicrosoft.operationalinsights%2Fworkspaces%2F${details.workspace}` +\n      `%22%7D%5D%7D/query/${base64Enc}/isQueryBase64Compressed/true/timespanInIsoFormat/P1D`;\n    return url;\n  }\n\n  async getWorkspaceDetails(workspaceId: string) {\n    if (!this.defaultSubscriptionId) {\n      return {};\n    }\n    const response = await this.getWorkspaceList(this.defaultSubscriptionId);\n\n    const details = response.value.find((o: any) => {\n      return o.properties.customerId === workspaceId;\n    });\n\n    if (!details) {\n      return {};\n    }\n\n    const regex = /.*resourcegroups\\/(.*)\\/providers.*/;\n    const results = regex.exec(details.id);\n    if (!results || results.length < 2) {\n      return {};\n    }\n\n    return {\n      workspace: details.name,\n      resourceGroup: results[1],\n    };\n  }\n\n  /**\n   * This is named differently than DataSourceApi.metricFindQuery\n   * because it's not exposed to Grafana like the main AzureMonitorDataSource.\n   * And some of the azure internal data sources return null in this function, which the\n   * external interface does not support\n   */\n  metricFindQueryInternal(query: string, optionalOptions?: unknown): Promise<MetricFindValue[]> {\n    // workspaces() - Get workspaces in the default subscription\n    const workspacesQuery = query.match(/^workspaces\\(\\)/i);\n    if (workspacesQuery) {\n      if (this.defaultSubscriptionId) {\n        return this.getWorkspaces(this.defaultSubscriptionId);\n      } else {\n        throw new Error(\n          'No subscription ID. Specify a default subscription ID in the data source config to use workspaces() without a subscription ID'\n        );\n      }\n    }\n\n    // workspaces(\"abc-def-etc\") - Get workspaces a specified subscription\n    const workspacesQueryWithSub = query.match(/^workspaces\\([\"']?([^\\)]+?)[\"']?\\)/i);\n    if (workspacesQueryWithSub) {\n      return this.getWorkspaces((workspacesQueryWithSub[1] || '').trim());\n    }\n\n    // Execute the query as KQL to the default or first workspace\n    return this.getFirstWorkspace().then((resourceURI) => {\n      if (!resourceURI) {\n        return [];\n      }\n\n      const queries = this.buildQuery(query, optionalOptions, resourceURI);\n      const promises = this.doQueries(queries);\n\n      return Promise.all(promises)\n        .then((results) => {\n          return new ResponseParser(results).parseToVariables();\n        })\n        .catch((err) => {\n          if (\n            err.error &&\n            err.error.data &&\n            err.error.data.error &&\n            err.error.data.error.innererror &&\n            err.error.data.error.innererror.innererror\n          ) {\n            throw { message: err.error.data.error.innererror.innererror.message };\n          } else if (err.error && err.error.data && err.error.data.error) {\n            throw { message: err.error.data.error.message };\n          }\n\n          throw err;\n        });\n    }) as Promise<MetricFindValue[]>;\n  }\n\n  private buildQuery(query: string, options: any, workspace: string): AdhocQuery[] {\n    const querystringBuilder = new LogAnalyticsQuerystringBuilder(\n      getTemplateSrv().replace(query, {}, interpolateVariable),\n      options,\n      'TimeGenerated'\n    );\n\n    const querystring = querystringBuilder.generate().uriString;\n    const path = isGUIDish(workspace)\n      ? `${this.resourcePath}/v1/workspaces/${workspace}/query?${querystring}`\n      : `${this.resourcePath}/v1${workspace}/query?${querystring}`;\n\n    const queries = [\n      {\n        datasourceId: this.id,\n        path: path,\n        resultFormat: 'table',\n      },\n    ];\n\n    return queries;\n  }\n\n  async getDefaultOrFirstSubscription(): Promise<string | undefined> {\n    if (this.defaultSubscriptionId) {\n      return this.defaultSubscriptionId;\n    }\n    const subscriptions = await this.getSubscriptions();\n    return subscriptions[0]?.value;\n  }\n\n  async getFirstWorkspace(): Promise<string | undefined> {\n    if (this.firstWorkspace) {\n      return this.firstWorkspace;\n    }\n\n    const subscriptionId = await this.getDefaultOrFirstSubscription();\n    if (!subscriptionId) {\n      return undefined;\n    }\n\n    const workspaces = await this.getWorkspaces(subscriptionId);\n    const workspace = workspaces[0]?.value;\n\n    if (workspace) {\n      this.firstWorkspace = workspace;\n    }\n\n    return workspace;\n  }\n\n  annotationQuery(options: any) {\n    if (!options.annotation.rawQuery) {\n      return Promise.reject({\n        message: 'Query missing in annotation definition',\n      });\n    }\n\n    const queries = this.buildQuery(options.annotation.rawQuery, options, options.annotation.workspace);\n    const promises = this.doQueries(queries);\n\n    return Promise.all(promises).then((results) => {\n      const annotations = new ResponseParser(results).transformToAnnotations(options);\n      return annotations;\n    });\n  }\n\n  doQueries(queries: AdhocQuery[]) {\n    return map(queries, (query) => {\n      return this.getResource(query.path)\n        .then((result: any) => {\n          return {\n            result: result,\n            query: query,\n          };\n        })\n        .catch((err: any) => {\n          throw {\n            error: err,\n            query: query,\n          };\n        });\n    });\n  }\n\n  async testDatasource(): Promise<DatasourceValidationResult> {\n    const validationError = this.validateDatasource();\n    if (validationError) {\n      return validationError;\n    }\n\n    let resourceOrWorkspace: string;\n    try {\n      const result = await this.getFirstWorkspace();\n      if (!result) {\n        return {\n          status: 'error',\n          message: 'Workspace not found.',\n        };\n      }\n      resourceOrWorkspace = result;\n    } catch (e) {\n      let message = 'Azure Log Analytics requires access to Azure Monitor but had the following error: ';\n      return {\n        status: 'error',\n        message: this.getErrorMessage(message, e),\n      };\n    }\n\n    try {\n      const path = isGUIDish(resourceOrWorkspace)\n        ? `${this.resourcePath}/v1/workspaces/${resourceOrWorkspace}/metadata`\n        : `${this.resourcePath}/v1${resourceOrWorkspace}/metadata`;\n\n      return await this.getResource(path).then<DatasourceValidationResult>((response: any) => {\n        return {\n          status: 'success',\n          message: 'Successfully queried the Azure Log Analytics service.',\n          title: 'Success',\n        };\n      });\n    } catch (e) {\n      let message = 'Azure Log Analytics: ';\n      return {\n        status: 'error',\n        message: this.getErrorMessage(message, e),\n      };\n    }\n  }\n\n  private getErrorMessage(message: string, error: any) {\n    message += error.statusText ? error.statusText + ': ' : '';\n    if (error.data && error.data.error && error.data.error.code) {\n      message += error.data.error.code + '. ' + error.data.error.message;\n    } else if (error.data && error.data.error) {\n      message += error.data.error;\n    } else if (error.data) {\n      message += error.data;\n    } else {\n      message += 'Cannot connect to Azure Log Analytics REST API.';\n    }\n    return message;\n  }\n\n  private validateDatasource(): DatasourceValidationResult | undefined {\n    const authType = getAuthType(this.instanceSettings);\n\n    if (authType === 'clientsecret') {\n      if (!this.isValidConfigField(this.instanceSettings.jsonData.tenantId)) {\n        return {\n          status: 'error',\n          message: 'The Tenant Id field is required.',\n        };\n      }\n\n      if (!this.isValidConfigField(this.instanceSettings.jsonData.clientId)) {\n        return {\n          status: 'error',\n          message: 'The Client Id field is required.',\n        };\n      }\n    }\n\n    return undefined;\n  }\n\n  private isValidConfigField(field: string | undefined): boolean {\n    return typeof field === 'string' && field.length > 0;\n  }\n}\n","import { ScopedVars, DataSourceInstanceSettings } from '@grafana/data';\nimport { getTemplateSrv } from '@grafana/runtime';\n\nimport { AzureDataSourceJsonData, AzureMonitorQuery, AzureQueryType } from '../types';\nimport AppInsightsDatasource from '../app_insights/app_insights_datasource';\n\nexport default class InsightsAnalyticsDatasource extends AppInsightsDatasource {\n  constructor(instanceSettings: DataSourceInstanceSettings<AzureDataSourceJsonData>) {\n    super(instanceSettings);\n  }\n\n  applyTemplateVariables(target: AzureMonitorQuery, scopedVars: ScopedVars): AzureMonitorQuery {\n    const item = target.insightsAnalytics;\n    if (!item) {\n      return target;\n    }\n\n    const query = item.rawQueryString && !item.query ? item.rawQueryString : item.query;\n\n    return {\n      refId: target.refId,\n      queryType: AzureQueryType.InsightsAnalytics,\n      insightsAnalytics: {\n        query: getTemplateSrv().replace(query, scopedVars),\n        resultFormat: item.resultFormat,\n      },\n    };\n  }\n}\n","// eslint-disable-next-line lodash/import-scope\nimport _ from 'lodash';\nimport { AzureMonitorQuery, AzureDataSourceJsonData, AzureQueryType } from '../types';\nimport { ScopedVars } from '@grafana/data';\nimport { getTemplateSrv, DataSourceWithBackend } from '@grafana/runtime';\nimport { interpolateVariable } from '../utils/common';\n\nexport default class AzureResourceGraphDatasource extends DataSourceWithBackend<\n  AzureMonitorQuery,\n  AzureDataSourceJsonData\n> {\n  filterQuery(item: AzureMonitorQuery): boolean {\n    return !!item.azureResourceGraph?.query;\n  }\n\n  applyTemplateVariables(target: AzureMonitorQuery, scopedVars: ScopedVars): AzureMonitorQuery {\n    const item = target.azureResourceGraph;\n    if (!item) {\n      return target;\n    }\n\n    const templateSrv = getTemplateSrv();\n    const variableNames = templateSrv.getVariables().map((v) => `$${v.name}`);\n    const subscriptionVar = _.find(target.subscriptions, (sub) => _.includes(variableNames, sub));\n    const interpolatedSubscriptions = templateSrv\n      .replace(subscriptionVar, scopedVars, (v: any) => v)\n      .split(',')\n      .filter((v) => v.length > 0);\n    const subscriptions = [\n      ...interpolatedSubscriptions,\n      ..._.filter(target.subscriptions, (sub) => !_.includes(variableNames, sub)),\n    ];\n    const query = templateSrv.replace(item.query, scopedVars, interpolateVariable);\n\n    return {\n      refId: target.refId,\n      queryType: AzureQueryType.AzureResourceGraph,\n      subscriptions,\n      azureResourceGraph: {\n        resultFormat: 'table',\n        query,\n      },\n    };\n  }\n}\n","import { cloneDeep, upperFirst } from 'lodash';\nimport AzureMonitorDatasource from './azure_monitor/azure_monitor_datasource';\nimport AppInsightsDatasource from './app_insights/app_insights_datasource';\nimport AzureLogAnalyticsDatasource from './azure_log_analytics/azure_log_analytics_datasource';\nimport ResourcePickerData from './resourcePicker/resourcePickerData';\nimport {\n  AzureDataSourceJsonData,\n  AzureMonitorQuery,\n  AzureQueryType,\n  DatasourceValidationResult,\n  InsightsAnalyticsQuery,\n} from './types';\nimport {\n  DataFrame,\n  DataQueryRequest,\n  DataQueryResponse,\n  DataSourceApi,\n  DataSourceInstanceSettings,\n  LoadingState,\n  ScopedVars,\n} from '@grafana/data';\nimport { forkJoin, Observable, of } from 'rxjs';\nimport { getTemplateSrv, TemplateSrv } from '@grafana/runtime';\nimport InsightsAnalyticsDatasource from './insights_analytics/insights_analytics_datasource';\nimport { migrateMetricsDimensionFilters } from './query_ctrl';\nimport { map } from 'rxjs/operators';\nimport AzureResourceGraphDatasource from './azure_resource_graph/azure_resource_graph_datasource';\nimport { getAzureCloud } from './credentials';\n\nexport default class Datasource extends DataSourceApi<AzureMonitorQuery, AzureDataSourceJsonData> {\n  azureMonitorDatasource: AzureMonitorDatasource;\n  azureLogAnalyticsDatasource: AzureLogAnalyticsDatasource;\n  resourcePickerData: ResourcePickerData;\n  azureResourceGraphDatasource: AzureResourceGraphDatasource;\n  /** @deprecated */\n  appInsightsDatasource?: AppInsightsDatasource;\n  /** @deprecated */\n  insightsAnalyticsDatasource?: InsightsAnalyticsDatasource;\n\n  pseudoDatasource: {\n    [key in AzureQueryType]?:\n      | AzureMonitorDatasource\n      | AzureLogAnalyticsDatasource\n      | AzureResourceGraphDatasource\n      | AppInsightsDatasource\n      | InsightsAnalyticsDatasource;\n  } = {};\n\n  declare optionsKey: Record<AzureQueryType, string>;\n\n  constructor(\n    instanceSettings: DataSourceInstanceSettings<AzureDataSourceJsonData>,\n    private readonly templateSrv: TemplateSrv = getTemplateSrv()\n  ) {\n    super(instanceSettings);\n    this.azureMonitorDatasource = new AzureMonitorDatasource(instanceSettings);\n    this.azureLogAnalyticsDatasource = new AzureLogAnalyticsDatasource(instanceSettings);\n    this.azureResourceGraphDatasource = new AzureResourceGraphDatasource(instanceSettings);\n    this.resourcePickerData = new ResourcePickerData(instanceSettings);\n\n    this.pseudoDatasource = {\n      [AzureQueryType.AzureMonitor]: this.azureMonitorDatasource,\n      [AzureQueryType.LogAnalytics]: this.azureLogAnalyticsDatasource,\n      [AzureQueryType.AzureResourceGraph]: this.azureResourceGraphDatasource,\n    };\n\n    const cloud = getAzureCloud(instanceSettings);\n    if (cloud === 'azuremonitor' || cloud === 'chinaazuremonitor') {\n      // AppInsights and InsightAnalytics are only supported for Public and Azure China clouds\n      this.appInsightsDatasource = new AppInsightsDatasource(instanceSettings);\n      this.insightsAnalyticsDatasource = new InsightsAnalyticsDatasource(instanceSettings);\n      this.pseudoDatasource[AzureQueryType.ApplicationInsights] = this.appInsightsDatasource;\n      this.pseudoDatasource[AzureQueryType.InsightsAnalytics] = this.insightsAnalyticsDatasource;\n    }\n  }\n\n  query(options: DataQueryRequest<AzureMonitorQuery>): Observable<DataQueryResponse> {\n    console.log('query options.targets', options.targets);\n\n    const byType = new Map<AzureQueryType, DataQueryRequest<AzureMonitorQuery>>();\n\n    for (const target of options.targets) {\n      // Migrate old query structure\n      migrateQuery(target);\n\n      // Skip hidden or invalid queries or ones without properties\n      if (!target.queryType || target.hide || !hasQueryForType(target)) {\n        continue;\n      }\n\n      // Initialize the list of queries\n      if (!byType.has(target.queryType)) {\n        const queryForType = cloneDeep(options);\n        queryForType.requestId = `${queryForType.requestId}-${target.refId}`;\n        queryForType.targets = [];\n        byType.set(target.queryType, queryForType);\n      }\n\n      const queryForType = byType.get(target.queryType);\n      queryForType?.targets.push(target);\n    }\n\n    const observables: Array<Observable<DataQueryResponse>> = Array.from(byType.entries()).map(([queryType, req]) => {\n      const ds = this.pseudoDatasource[queryType];\n      if (!ds) {\n        throw new Error('Data source not created for query type ' + queryType);\n      }\n\n      return ds.query(req);\n    });\n\n    // Single query can skip merge\n    if (observables.length === 1) {\n      return observables[0];\n    }\n\n    if (observables.length > 1) {\n      return forkJoin(observables).pipe(\n        map((results: DataQueryResponse[]) => {\n          const data: DataFrame[] = [];\n          for (const result of results) {\n            for (const frame of result.data) {\n              data.push(frame);\n            }\n          }\n\n          return { state: LoadingState.Done, data };\n        })\n      );\n    }\n\n    return of({ state: LoadingState.Done, data: [] });\n  }\n\n  async annotationQuery(options: any) {\n    return this.azureLogAnalyticsDatasource.annotationQuery(options);\n  }\n\n  async metricFindQuery(query: string, optionalOptions?: unknown) {\n    if (!query) {\n      return Promise.resolve([]);\n    }\n\n    const aiResult = this.appInsightsDatasource?.metricFindQueryInternal(query);\n    if (aiResult) {\n      return aiResult;\n    }\n\n    const amResult = this.azureMonitorDatasource.metricFindQueryInternal(query);\n    if (amResult) {\n      return amResult;\n    }\n\n    const alaResult = this.azureLogAnalyticsDatasource.metricFindQueryInternal(query, optionalOptions);\n    if (alaResult) {\n      return alaResult;\n    }\n\n    return Promise.resolve([]);\n  }\n\n  async testDatasource(): Promise<DatasourceValidationResult> {\n    const promises: Array<Promise<DatasourceValidationResult>> = [];\n\n    promises.push(this.azureMonitorDatasource.testDatasource());\n    promises.push(this.azureLogAnalyticsDatasource.testDatasource());\n\n    if (this.appInsightsDatasource?.isConfigured()) {\n      promises.push(this.appInsightsDatasource.testDatasource());\n    }\n\n    return await Promise.all(promises).then((results) => {\n      let status: 'success' | 'error' = 'success';\n      let message = '';\n\n      for (let i = 0; i < results.length; i++) {\n        if (results[i].status !== 'success') {\n          status = results[i].status;\n        }\n        message += `${i + 1}. ${results[i].message} `;\n      }\n\n      return {\n        status: status,\n        message: message,\n        title: upperFirst(status),\n      };\n    });\n  }\n\n  /* Azure Monitor REST API methods */\n  getResourceGroups(subscriptionId: string) {\n    return this.azureMonitorDatasource.getResourceGroups(this.replaceTemplateVariable(subscriptionId));\n  }\n\n  getMetricDefinitions(subscriptionId: string, resourceGroup: string) {\n    return this.azureMonitorDatasource.getMetricDefinitions(\n      this.replaceTemplateVariable(subscriptionId),\n      this.replaceTemplateVariable(resourceGroup)\n    );\n  }\n\n  getResourceNames(subscriptionId: string, resourceGroup: string, metricDefinition: string) {\n    return this.azureMonitorDatasource.getResourceNames(\n      this.replaceTemplateVariable(subscriptionId),\n      this.replaceTemplateVariable(resourceGroup),\n      this.replaceTemplateVariable(metricDefinition)\n    );\n  }\n\n  getMetricNames(\n    subscriptionId: string,\n    resourceGroup: string,\n    metricDefinition: string,\n    resourceName: string,\n    metricNamespace: string\n  ) {\n    return this.azureMonitorDatasource.getMetricNames(\n      this.replaceTemplateVariable(subscriptionId),\n      this.replaceTemplateVariable(resourceGroup),\n      this.replaceTemplateVariable(metricDefinition),\n      this.replaceTemplateVariable(resourceName),\n      this.replaceTemplateVariable(metricNamespace)\n    );\n  }\n\n  getMetricNamespaces(subscriptionId: string, resourceGroup: string, metricDefinition: string, resourceName: string) {\n    return this.azureMonitorDatasource.getMetricNamespaces(\n      this.replaceTemplateVariable(subscriptionId),\n      this.replaceTemplateVariable(resourceGroup),\n      this.replaceTemplateVariable(metricDefinition),\n      this.replaceTemplateVariable(resourceName)\n    );\n  }\n\n  getMetricMetadata(\n    subscriptionId: string,\n    resourceGroup: string,\n    metricDefinition: string,\n    resourceName: string,\n    metricNamespace: string,\n    metricName: string\n  ) {\n    return this.azureMonitorDatasource.getMetricMetadata(\n      this.replaceTemplateVariable(subscriptionId),\n      this.replaceTemplateVariable(resourceGroup),\n      this.replaceTemplateVariable(metricDefinition),\n      this.replaceTemplateVariable(resourceName),\n      this.replaceTemplateVariable(metricNamespace),\n      this.replaceTemplateVariable(metricName)\n    );\n  }\n\n  /* Application Insights API method */\n  getAppInsightsMetricNames() {\n    return this.appInsightsDatasource?.getMetricNames();\n  }\n\n  getAppInsightsMetricMetadata(metricName: string) {\n    return this.appInsightsDatasource?.getMetricMetadata(metricName);\n  }\n\n  getAppInsightsColumns(refId: string | number) {\n    return this.appInsightsDatasource?.logAnalyticsColumns[refId];\n  }\n\n  /*Azure Log Analytics */\n  getAzureLogAnalyticsWorkspaces(subscriptionId: string) {\n    return this.azureLogAnalyticsDatasource.getWorkspaces(subscriptionId);\n  }\n\n  getSubscriptions() {\n    return this.azureMonitorDatasource.getSubscriptions();\n  }\n\n  interpolateVariablesInQueries(queries: AzureMonitorQuery[], scopedVars: ScopedVars): AzureMonitorQuery[] {\n    const mapped = queries.map((query) => {\n      if (!query.queryType) {\n        return query;\n      }\n\n      const ds = this.pseudoDatasource[query.queryType];\n      return ds?.applyTemplateVariables(query, scopedVars) ?? query;\n    });\n\n    return mapped;\n  }\n\n  replaceTemplateVariable(variable: string) {\n    return this.templateSrv.replace(variable);\n  }\n\n  getVariables() {\n    return this.templateSrv.getVariables().map((v) => `$${v.name}`);\n  }\n}\n\nfunction migrateQuery(target: AzureMonitorQuery) {\n  if (target.queryType === AzureQueryType.ApplicationInsights) {\n    if ((target.appInsights as any).rawQuery) {\n      target.queryType = AzureQueryType.InsightsAnalytics;\n      target.insightsAnalytics = (target.appInsights as unknown) as InsightsAnalyticsQuery;\n      delete target.appInsights;\n    }\n  }\n  if (!target.queryType) {\n    target.queryType = AzureQueryType.AzureMonitor;\n  }\n\n  if (target.queryType === AzureQueryType.AzureMonitor && target.azureMonitor) {\n    migrateMetricsDimensionFilters(target.azureMonitor);\n  }\n}\n\nfunction hasQueryForType(query: AzureMonitorQuery): boolean {\n  switch (query.queryType) {\n    case AzureQueryType.AzureMonitor:\n      return !!query.azureMonitor;\n\n    case AzureQueryType.LogAnalytics:\n      return !!query.azureLogAnalytics;\n\n    case AzureQueryType.AzureResourceGraph:\n      return !!query.azureResourceGraph;\n\n    case AzureQueryType.ApplicationInsights:\n      return !!query.appInsights;\n\n    case AzureQueryType.InsightsAnalytics:\n      return !!query.insightsAnalytics;\n\n    default:\n      return false;\n  }\n}\n","import { defaultsDeep, find, map, isString } from 'lodash';\nimport { QueryCtrl } from 'app/plugins/sdk';\nimport TimegrainConverter from './time_grain_converter';\nimport './editor/editor_component';\n\nimport { TemplateSrv } from '@grafana/runtime';\nimport { auto } from 'angular';\nimport { DataFrame, PanelEvents } from '@grafana/data';\nimport { AzureQueryType, AzureMetricQuery, AzureMonitorQuery } from './types';\nimport { convertTimeGrainsToMs } from './utils/common';\nimport Datasource from './datasource';\n\nexport interface ResultFormat {\n  text: string;\n  value: string;\n}\n\nexport class AzureMonitorQueryCtrl extends QueryCtrl {\n  static templateUrl = 'partials/query.editor.html';\n\n  defaultDropdownValue = 'select';\n\n  dummyDiminsionString = '+';\n\n  queryQueryTypeOptions = [\n    { id: AzureQueryType.AzureMonitor, label: 'Metrics' },\n    { id: AzureQueryType.LogAnalytics, label: 'Logs' },\n    { id: AzureQueryType.ApplicationInsights, label: 'Application Insights' },\n    { id: AzureQueryType.InsightsAnalytics, label: 'Insights Analytics' },\n    { id: AzureQueryType.AzureResourceGraph, label: 'Azure Resource Graph' },\n  ];\n\n  // Query types that have been migrated to React\n  reactQueryEditors = [\n    AzureQueryType.AzureMonitor,\n    AzureQueryType.LogAnalytics,\n    AzureQueryType.ApplicationInsights,\n    AzureQueryType.InsightsAnalytics,\n    AzureQueryType.AzureResourceGraph,\n  ];\n\n  // target: AzureMonitorQuery;\n\n  declare target: {\n    // should be: AzureMonitorQuery\n    refId: string;\n    queryType: AzureQueryType;\n    subscription: string;\n    subscriptions: string[];\n    azureMonitor: AzureMetricQuery;\n    azureLogAnalytics: {\n      query: string;\n      resultFormat: string;\n      workspace: string;\n    };\n    azureResourceGraph: {\n      query: string;\n      resultFormat: string;\n    };\n    appInsights: {\n      // metric style query when rawQuery == false\n      metricName: string;\n      dimension: any;\n      dimensionFilter: string;\n      dimensions: string[];\n\n      aggOptions: string[];\n      aggregation: string;\n\n      timeGrainType: string;\n      timeGrainCount: string;\n      timeGrainUnit: string;\n      timeGrain: string;\n      timeGrains: Array<{ text: string; value: string }>;\n      allowedTimeGrainsMs: number[];\n    };\n    insightsAnalytics: {\n      query: any;\n      resultFormat: string;\n    };\n  };\n\n  defaults = {\n    queryType: 'Azure Monitor',\n    azureMonitor: {\n      resourceGroup: undefined,\n      metricDefinition: undefined,\n      resourceName: undefined,\n      metricNamespace: undefined,\n      metricName: undefined,\n      dimensionFilter: '*',\n      timeGrain: 'auto',\n      top: '10',\n      aggOptions: [] as string[],\n      timeGrains: [] as string[],\n    },\n    azureLogAnalytics: {\n      query: [\n        '//change this example to create your own time series query',\n        '<table name>                                                              ' +\n          '//the table to query (e.g. Usage, Heartbeat, Perf)',\n        '| where $__timeFilter(TimeGenerated)                                      ' +\n          '//this is a macro used to show the full chart’s time range, choose the datetime column here',\n        '| summarize count() by <group by column>, bin(TimeGenerated, $__interval) ' +\n          '//change “group by column” to a column in your table, such as “Computer”. ' +\n          'The $__interval macro is used to auto-select the time grain. Can also use 1h, 5m etc.',\n        '| order by TimeGenerated asc',\n      ].join('\\n'),\n      resultFormat: 'time_series',\n      workspace:\n        this.datasource && this.datasource.azureLogAnalyticsDatasource\n          ? this.datasource.azureLogAnalyticsDatasource.defaultOrFirstWorkspace\n          : '',\n    },\n    azureResourceGraph: {\n      resultFormat: 'table',\n    },\n    appInsights: {\n      metricName: this.defaultDropdownValue,\n      // dimension: [],\n      timeGrain: 'auto',\n    },\n    insightsAnalytics: {\n      query: '',\n      resultFormat: 'time_series',\n    },\n  };\n\n  resultFormats: ResultFormat[];\n  workspaces: any[] = [];\n  showHelp = false;\n  showLastQuery = false;\n  lastQuery = '';\n  lastQueryError?: string;\n  subscriptions: Array<{ text: string; value: string }> = [];\n\n  /** @ngInject */\n  constructor($scope: any, $injector: auto.IInjectorService, private templateSrv: TemplateSrv) {\n    super($scope, $injector);\n\n    defaultsDeep(this.target, this.defaults);\n\n    this.migrateTimeGrains();\n\n    this.migrateToFromTimes();\n\n    this.migrateToDefaultNamespace();\n\n    this.migrateApplicationInsightsKeys();\n\n    this.migrateApplicationInsightsDimensions();\n\n    migrateMetricsDimensionFilters(this.target.azureMonitor);\n\n    this.panelCtrl.events.on(PanelEvents.dataReceived, this.onDataReceived.bind(this), $scope);\n    this.panelCtrl.events.on(PanelEvents.dataError, this.onDataError.bind(this), $scope);\n    this.resultFormats = [\n      { text: 'Time series', value: 'time_series' },\n      { text: 'Table', value: 'table' },\n    ];\n    this.getSubscriptions();\n    if (this.target.queryType === 'Azure Log Analytics') {\n      this.getWorkspaces();\n    }\n  }\n\n  onDataReceived(dataList: DataFrame[]) {\n    this.lastQueryError = undefined;\n    this.lastQuery = '';\n\n    const anySeriesFromQuery: any = find(dataList, { refId: this.target.refId });\n    if (anySeriesFromQuery && anySeriesFromQuery.meta) {\n      this.lastQuery = anySeriesFromQuery.meta.query;\n    }\n  }\n\n  onDataError(err: any) {\n    this.handleQueryCtrlError(err);\n  }\n\n  handleQueryCtrlError(err: any) {\n    if (err.query && err.query.refId && err.query.refId !== this.target.refId) {\n      return;\n    }\n\n    if (err.error && err.error.data && err.error.data.error && err.error.data.error.innererror) {\n      if (err.error.data.error.innererror.innererror) {\n        this.lastQueryError = err.error.data.error.innererror.innererror.message;\n      } else {\n        this.lastQueryError = err.error.data.error.innererror.message;\n      }\n    } else if (err.error && err.error.data && err.error.data.error) {\n      this.lastQueryError = err.error.data.error.message;\n    } else if (err.error && err.error.data) {\n      this.lastQueryError = err.error.data.message;\n    } else if (err.data && err.data.error) {\n      this.lastQueryError = err.data.error.message;\n    } else if (err.data && err.data.message) {\n      this.lastQueryError = err.data.message;\n    } else {\n      this.lastQueryError = err;\n    }\n  }\n\n  migrateTimeGrains() {\n    if (this.target.azureMonitor.timeGrainUnit) {\n      if (this.target.azureMonitor.timeGrain !== 'auto') {\n        this.target.azureMonitor.timeGrain = TimegrainConverter.createISO8601Duration(\n          this.target.azureMonitor.timeGrain ?? 'auto',\n          this.target.azureMonitor.timeGrainUnit\n        );\n      }\n\n      delete this.target.azureMonitor.timeGrainUnit;\n    }\n\n    if (this.target.appInsights.timeGrainUnit) {\n      if (this.target.appInsights.timeGrain !== 'auto') {\n        if (this.target.appInsights.timeGrainCount) {\n          this.target.appInsights.timeGrain = TimegrainConverter.createISO8601Duration(\n            this.target.appInsights.timeGrainCount,\n            this.target.appInsights.timeGrainUnit\n          );\n        } else {\n          this.target.appInsights.timeGrainCount = this.target.appInsights.timeGrain;\n          this.target.appInsights.timeGrain = TimegrainConverter.createISO8601Duration(\n            this.target.appInsights.timeGrain,\n            this.target.appInsights.timeGrainUnit\n          );\n        }\n      }\n    }\n\n    const oldAzureTimeGrains = (this.target.azureMonitor as any).timeGrains;\n    if (\n      oldAzureTimeGrains &&\n      oldAzureTimeGrains.length > 0 &&\n      (!this.target.azureMonitor.allowedTimeGrainsMs || this.target.azureMonitor.allowedTimeGrainsMs.length === 0)\n    ) {\n      this.target.azureMonitor.allowedTimeGrainsMs = convertTimeGrainsToMs(oldAzureTimeGrains);\n    }\n\n    if (\n      this.target.appInsights.timeGrains &&\n      this.target.appInsights.timeGrains.length > 0 &&\n      (!this.target.appInsights.allowedTimeGrainsMs || this.target.appInsights.allowedTimeGrainsMs.length === 0)\n    ) {\n      this.target.appInsights.allowedTimeGrainsMs = convertTimeGrainsToMs(this.target.appInsights.timeGrains);\n    }\n  }\n\n  migrateToFromTimes() {\n    this.target.azureLogAnalytics.query = this.target.azureLogAnalytics.query.replace(/\\$__from\\s/gi, '$__timeFrom() ');\n    this.target.azureLogAnalytics.query = this.target.azureLogAnalytics.query.replace(/\\$__to\\s/gi, '$__timeTo() ');\n  }\n\n  async migrateToDefaultNamespace() {\n    if (\n      this.target.azureMonitor.metricNamespace &&\n      this.target.azureMonitor.metricNamespace !== this.defaultDropdownValue &&\n      this.target.azureMonitor.metricDefinition\n    ) {\n      return;\n    }\n\n    this.target.azureMonitor.metricNamespace = this.target.azureMonitor.metricDefinition;\n  }\n\n  migrateApplicationInsightsKeys(): void {\n    const appInsights = this.target.appInsights as any;\n\n    // Migrate old app insights data keys to match other datasources\n    const mappings = {\n      xaxis: 'timeColumn',\n      yaxis: 'valueColumn',\n      spliton: 'segmentColumn',\n      groupBy: 'dimension',\n      groupByOptions: 'dimensions',\n      filter: 'dimensionFilter',\n    } as { [old: string]: string };\n\n    for (const old in mappings) {\n      if (appInsights[old]) {\n        appInsights[mappings[old]] = appInsights[old];\n        delete appInsights[old];\n      }\n    }\n  }\n\n  migrateApplicationInsightsDimensions() {\n    const { appInsights } = this.target;\n\n    if (!appInsights.dimension) {\n      appInsights.dimension = [];\n    }\n\n    if (isString(appInsights.dimension)) {\n      appInsights.dimension = [appInsights.dimension as string];\n    }\n  }\n\n  replace = (variable: string) => {\n    return this.templateSrv.replace(variable, this.panelCtrl.panel.scopedVars);\n  };\n\n  onQueryTypeChange() {\n    if (this.target.queryType === 'Azure Log Analytics') {\n      return this.getWorkspaces();\n    }\n  }\n\n  getSubscriptions() {\n    if (!this.datasource.azureMonitorDatasource.isConfigured()) {\n      return;\n    }\n\n    // assert the type\n    if (!(this.datasource instanceof Datasource)) {\n      return;\n    }\n\n    return this.datasource.azureMonitorDatasource.getSubscriptions().then((subscriptions) => {\n      // We changed the format in the datasource for the new react stuff, so here we change it back\n      const subs = subscriptions.map((v) => ({\n        text: `${v.text} - ${v.value}`,\n        value: v.value,\n      }));\n\n      this.subscriptions = subs;\n      if (!this.target.subscription && this.target.queryType === 'Azure Monitor') {\n        this.target.subscription = this.datasource.azureMonitorDatasource.subscriptionId;\n      } else if (!this.target.subscription && this.target.queryType === 'Azure Log Analytics') {\n        this.target.subscription = this.datasource.azureLogAnalyticsDatasource.subscriptionId;\n      }\n\n      if (!this.target.subscription && this.subscriptions.length > 0) {\n        this.target.subscription = this.subscriptions[0].value;\n      }\n\n      if (!this.target.subscriptions) {\n        this.target.subscriptions = subscriptions.map((sub) => sub.value);\n      }\n\n      return this.subscriptions;\n    });\n  }\n\n  onSubscriptionChange() {\n    if (this.target.queryType === 'Azure Log Analytics') {\n      return this.getWorkspaces();\n    }\n  }\n\n  generateAutoUnits(timeGrain: string, timeGrains: Array<{ value: string }>) {\n    if (timeGrain === 'auto') {\n      return TimegrainConverter.findClosestTimeGrain(\n        '1m',\n        map(timeGrains, (o) => TimegrainConverter.createKbnUnitFromISO8601Duration(o.value)) || [\n          '1m',\n          '5m',\n          '15m',\n          '30m',\n          '1h',\n          '6h',\n          '12h',\n          '1d',\n        ]\n      );\n    }\n\n    return '';\n  }\n\n  getAzureMonitorAutoInterval() {\n    return this.generateAutoUnits(\n      this.target.azureMonitor.timeGrain ?? 'auto',\n      (this.target.azureMonitor as any).timeGrains\n    );\n  }\n\n  getApplicationInsightAutoInterval() {\n    return this.generateAutoUnits(this.target.appInsights.timeGrain, this.target.appInsights.timeGrains);\n  }\n\n  azureMonitorAddDimensionFilter() {\n    this.target.azureMonitor = this.target.azureMonitor ?? {};\n    this.target.azureMonitor.dimensionFilters = this.target.azureMonitor.dimensionFilters ?? [];\n\n    this.target.azureMonitor.dimensionFilters.push({\n      dimension: '',\n      operator: 'eq',\n      filter: '',\n    });\n  }\n\n  azureMonitorRemoveDimensionFilter(index: number) {\n    this.target.azureMonitor = this.target.azureMonitor ?? {};\n    this.target.azureMonitor.dimensionFilters = this.target.azureMonitor.dimensionFilters ?? [];\n\n    this.target.azureMonitor.dimensionFilters.splice(index, 1);\n    this.refresh();\n  }\n\n  /* Azure Log Analytics */\n\n  getWorkspaces = () => {\n    return this.datasource.azureLogAnalyticsDatasource\n      .getWorkspaces(this.target.subscription)\n      .then((list: any[]) => {\n        this.workspaces = list;\n\n        if (list.length > 0 && !this.target.azureLogAnalytics.workspace) {\n          if (this.datasource.azureLogAnalyticsDatasource.defaultOrFirstWorkspace) {\n            this.target.azureLogAnalytics.workspace = this.datasource.azureLogAnalyticsDatasource.defaultOrFirstWorkspace;\n          }\n\n          if (!this.target.azureLogAnalytics.workspace) {\n            this.target.azureLogAnalytics.workspace = list[0].value;\n          }\n        }\n\n        return this.workspaces;\n      })\n      .catch(this.handleQueryCtrlError.bind(this));\n  };\n\n  getAzureLogAnalyticsSchema = () => {\n    return this.getWorkspaces()\n      .then(() => {\n        return this.datasource.azureLogAnalyticsDatasource.getSchema(this.target.azureLogAnalytics.workspace);\n      })\n      .catch(this.handleQueryCtrlError.bind(this));\n  };\n\n  onLogAnalyticsQueryChange = (nextQuery: string) => {\n    this.target.azureLogAnalytics.query = nextQuery;\n  };\n\n  onLogAnalyticsQueryExecute = () => {\n    this.panelCtrl.refresh();\n  };\n\n  get templateVariables() {\n    return this.templateSrv.getVariables().map((t) => '$' + t.name);\n  }\n\n  getAppInsightsMetricNames() {\n    if (!this.datasource.appInsightsDatasource.isConfigured()) {\n      return;\n    }\n\n    return this.datasource.getAppInsightsMetricNames().catch(this.handleQueryCtrlError.bind(this));\n  }\n\n  getAppInsightsColumns() {\n    return this.datasource.getAppInsightsColumns(this.target.refId);\n  }\n\n  onAppInsightsColumnChange() {\n    return this.refresh();\n  }\n\n  onAppInsightsMetricNameChange() {\n    if (!this.target.appInsights.metricName || this.target.appInsights.metricName === this.defaultDropdownValue) {\n      return;\n    }\n\n    return this.datasource\n      .getAppInsightsMetricMetadata(this.replace(this.target.appInsights.metricName))\n      .then((aggData: { supportedAggTypes: string[]; supportedGroupBy: string[]; primaryAggType: string }) => {\n        this.target.appInsights.aggOptions = aggData.supportedAggTypes;\n        this.target.appInsights.dimensions = aggData.supportedGroupBy;\n        this.target.appInsights.aggregation = aggData.primaryAggType;\n        return this.refresh();\n      })\n      .catch(this.handleQueryCtrlError.bind(this));\n  }\n\n  onInsightsAnalyticsQueryChange = (nextQuery: string) => {\n    this.target.insightsAnalytics.query = nextQuery;\n  };\n\n  onQueryExecute = () => {\n    return this.refresh();\n  };\n\n  getAppInsightsQuerySchema = () => {\n    return this.datasource.appInsightsDatasource.getQuerySchema().catch(this.handleQueryCtrlError.bind(this));\n  };\n\n  removeGroupBy = (index: number) => {\n    const { appInsights } = this.target;\n    appInsights.dimension.splice(index, 1);\n    this.refresh();\n  };\n\n  getAppInsightsGroupBySegments(query: any) {\n    const { appInsights } = this.target;\n\n    // HACK alert... there must be a better way!\n    if (this.dummyDiminsionString && this.dummyDiminsionString.length && '+' !== this.dummyDiminsionString) {\n      if (!appInsights.dimension) {\n        appInsights.dimension = [];\n      }\n      appInsights.dimension.push(this.dummyDiminsionString);\n      this.dummyDiminsionString = '+';\n      this.refresh();\n    }\n\n    // Return the list of dimensions stored on the query object from the last request :(\n    return map(appInsights.dimensions, (option: string) => {\n      return { text: option, value: option };\n    });\n  }\n\n  resetAppInsightsGroupBy() {\n    this.target.appInsights.dimension = 'none';\n    this.refresh();\n  }\n\n  updateTimeGrainType() {\n    if (this.target.appInsights.timeGrainType === 'specific') {\n      this.target.appInsights.timeGrainCount = '1';\n      this.target.appInsights.timeGrainUnit = 'minute';\n      this.target.appInsights.timeGrain = TimegrainConverter.createISO8601Duration(\n        this.target.appInsights.timeGrainCount,\n        this.target.appInsights.timeGrainUnit\n      );\n    } else {\n      this.target.appInsights.timeGrainCount = '';\n      this.target.appInsights.timeGrainUnit = '';\n    }\n  }\n\n  updateAppInsightsTimeGrain() {\n    if (this.target.appInsights.timeGrainUnit && this.target.appInsights.timeGrainCount) {\n      this.target.appInsights.timeGrain = TimegrainConverter.createISO8601Duration(\n        this.target.appInsights.timeGrainCount,\n        this.target.appInsights.timeGrainUnit\n      );\n    }\n    this.refresh();\n  }\n\n  /**\n   * Receives a full new query object from React and updates it into the Angular controller\n   */\n  handleNewQuery = (newQuery: AzureMonitorQuery) => {\n    Object.assign(this.target, newQuery);\n    this.refresh();\n  };\n}\n\n// Modifies the actual query object\nexport function migrateMetricsDimensionFilters(item: AzureMetricQuery) {\n  if (!item.dimensionFilters) {\n    item.dimensionFilters = [];\n  }\n  const oldDimension = (item as any).dimension;\n  if (oldDimension && oldDimension !== 'None') {\n    item.dimensionFilters.push({\n      dimension: oldDimension,\n      operator: 'eq',\n      filter: (item as any).dimensionFilter,\n    });\n    delete (item as any).dimension;\n    delete (item as any).dimensionFilter;\n  }\n}\n","import React, { ChangeEvent, FunctionComponent, useEffect, useReducer, useState } from 'react';\nimport { SelectableValue } from '@grafana/data';\nimport { InlineFormLabel, LegacyForms, Button } from '@grafana/ui';\nimport { AzureAuthType, AzureCredentials } from '../types';\nimport { isCredentialsComplete } from '../credentials';\nconst { Select, Input } = LegacyForms;\n\nexport interface Props {\n  managedIdentityEnabled: boolean;\n  credentials: AzureCredentials;\n  azureCloudOptions?: SelectableValue[];\n  onCredentialsChange?: (updatedCredentials: AzureCredentials) => void;\n  getSubscriptions?: () => Promise<SelectableValue[]>;\n  disabled?: boolean;\n  children?: JSX.Element;\n}\n\nconst authTypeOptions: Array<SelectableValue<AzureAuthType>> = [\n  {\n    value: 'msi',\n    label: 'Managed Identity',\n  },\n  {\n    value: 'clientsecret',\n    label: 'App Registration',\n  },\n];\n\nexport const AzureCredentialsForm: FunctionComponent<Props> = (props: Props) => {\n  const { credentials, azureCloudOptions, onCredentialsChange, getSubscriptions, disabled } = props;\n  const hasRequiredFields = isCredentialsComplete(credentials);\n\n  const [subscriptions, setSubscriptions] = useState<Array<SelectableValue<string>>>([]);\n  const [loadSubscriptionsClicked, onLoadSubscriptions] = useReducer((val) => val + 1, 0);\n  useEffect(() => {\n    if (!getSubscriptions || !hasRequiredFields) {\n      updateSubscriptions([]);\n      return;\n    }\n    let canceled = false;\n    getSubscriptions().then((result) => {\n      if (!canceled) {\n        updateSubscriptions(result, loadSubscriptionsClicked);\n      }\n    });\n    return () => {\n      canceled = true;\n    };\n    // This effect is intended to be called only once initially and on Load Subscriptions click\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [loadSubscriptionsClicked]);\n\n  const updateSubscriptions = (received: Array<SelectableValue<string>>, autoSelect = false) => {\n    setSubscriptions(received);\n    if (getSubscriptions) {\n      if (autoSelect && !credentials.defaultSubscriptionId && received.length > 0) {\n        // Selecting the default subscription if subscriptions received but no default subscription selected\n        onSubscriptionChange(received[0]);\n      } else if (credentials.defaultSubscriptionId) {\n        const found = received.find((opt) => opt.value === credentials.defaultSubscriptionId);\n        if (!found) {\n          // Unselecting the default subscription if it isn't found among the received subscriptions\n          onSubscriptionChange(undefined);\n        }\n      }\n    }\n  };\n\n  const onAuthTypeChange = (selected: SelectableValue<AzureAuthType>) => {\n    if (onCredentialsChange) {\n      setSubscriptions([]);\n      const updated: AzureCredentials = {\n        ...credentials,\n        authType: selected.value || 'msi',\n        defaultSubscriptionId: undefined,\n      };\n      onCredentialsChange(updated);\n    }\n  };\n\n  const onAzureCloudChange = (selected: SelectableValue<string>) => {\n    if (onCredentialsChange && credentials.authType === 'clientsecret') {\n      setSubscriptions([]);\n      const updated: AzureCredentials = {\n        ...credentials,\n        azureCloud: selected.value,\n        defaultSubscriptionId: undefined,\n      };\n      onCredentialsChange(updated);\n    }\n  };\n\n  const onTenantIdChange = (event: ChangeEvent<HTMLInputElement>) => {\n    if (onCredentialsChange && credentials.authType === 'clientsecret') {\n      setSubscriptions([]);\n      const updated: AzureCredentials = {\n        ...credentials,\n        tenantId: event.target.value,\n        defaultSubscriptionId: undefined,\n      };\n      onCredentialsChange(updated);\n    }\n  };\n\n  const onClientIdChange = (event: ChangeEvent<HTMLInputElement>) => {\n    if (onCredentialsChange && credentials.authType === 'clientsecret') {\n      setSubscriptions([]);\n      const updated: AzureCredentials = {\n        ...credentials,\n        clientId: event.target.value,\n        defaultSubscriptionId: undefined,\n      };\n      onCredentialsChange(updated);\n    }\n  };\n\n  const onClientSecretChange = (event: ChangeEvent<HTMLInputElement>) => {\n    if (onCredentialsChange && credentials.authType === 'clientsecret') {\n      setSubscriptions([]);\n      const updated: AzureCredentials = {\n        ...credentials,\n        clientSecret: event.target.value,\n        defaultSubscriptionId: undefined,\n      };\n      onCredentialsChange(updated);\n    }\n  };\n\n  const onClientSecretReset = () => {\n    if (onCredentialsChange && credentials.authType === 'clientsecret') {\n      setSubscriptions([]);\n      const updated: AzureCredentials = {\n        ...credentials,\n        clientSecret: '',\n        defaultSubscriptionId: undefined,\n      };\n      onCredentialsChange(updated);\n    }\n  };\n\n  const onSubscriptionChange = (selected: SelectableValue<string> | undefined) => {\n    if (onCredentialsChange) {\n      const updated: AzureCredentials = {\n        ...credentials,\n        defaultSubscriptionId: selected?.value,\n      };\n      onCredentialsChange(updated);\n    }\n  };\n\n  return (\n    <div className=\"gf-form-group\">\n      {props.managedIdentityEnabled && (\n        <div className=\"gf-form-inline\">\n          <div className=\"gf-form\">\n            <InlineFormLabel className=\"width-12\" tooltip=\"Choose the type of authentication to Azure services\">\n              Authentication\n            </InlineFormLabel>\n            <Select\n              menuShouldPortal\n              className=\"width-15\"\n              value={authTypeOptions.find((opt) => opt.value === credentials.authType)}\n              options={authTypeOptions}\n              onChange={onAuthTypeChange}\n              isDisabled={disabled}\n            />\n          </div>\n        </div>\n      )}\n      {credentials.authType === 'clientsecret' && (\n        <>\n          {azureCloudOptions && (\n            <div className=\"gf-form-inline\">\n              <div className=\"gf-form\">\n                <InlineFormLabel className=\"width-12\" tooltip=\"Choose an Azure Cloud\">\n                  Azure Cloud\n                </InlineFormLabel>\n                <Select\n                  menuShouldPortal\n                  className=\"width-15\"\n                  value={azureCloudOptions.find((opt) => opt.value === credentials.azureCloud)}\n                  options={azureCloudOptions}\n                  onChange={onAzureCloudChange}\n                  isDisabled={disabled}\n                />\n              </div>\n            </div>\n          )}\n          <div className=\"gf-form-inline\">\n            <div className=\"gf-form\">\n              <InlineFormLabel className=\"width-12\">Directory (tenant) ID</InlineFormLabel>\n              <div className=\"width-15\">\n                <Input\n                  className=\"width-30\"\n                  placeholder=\"XXXXXXXX-XXXX-XXXX-XXXX-XXXXXXXXXXXX\"\n                  value={credentials.tenantId || ''}\n                  onChange={onTenantIdChange}\n                  disabled={disabled}\n                />\n              </div>\n            </div>\n          </div>\n          <div className=\"gf-form-inline\">\n            <div className=\"gf-form\">\n              <InlineFormLabel className=\"width-12\">Application (client) ID</InlineFormLabel>\n              <div className=\"width-15\">\n                <Input\n                  className=\"width-30\"\n                  placeholder=\"XXXXXXXX-XXXX-XXXX-XXXX-XXXXXXXXXXXX\"\n                  value={credentials.clientId || ''}\n                  onChange={onClientIdChange}\n                  disabled={disabled}\n                />\n              </div>\n            </div>\n          </div>\n          {!disabled &&\n            (typeof credentials.clientSecret === 'symbol' ? (\n              <div className=\"gf-form-inline\">\n                <div className=\"gf-form\">\n                  <InlineFormLabel className=\"width-12\">Client Secret</InlineFormLabel>\n                  <Input className=\"width-25\" placeholder=\"configured\" disabled={true} />\n                </div>\n                <div className=\"gf-form\">\n                  <div className=\"max-width-30 gf-form-inline\">\n                    <Button variant=\"secondary\" type=\"button\" onClick={onClientSecretReset} disabled={disabled}>\n                      reset\n                    </Button>\n                  </div>\n                </div>\n              </div>\n            ) : (\n              <div className=\"gf-form-inline\">\n                <div className=\"gf-form\">\n                  <InlineFormLabel className=\"width-12\">Client Secret</InlineFormLabel>\n                  <div className=\"width-15\">\n                    <Input\n                      className=\"width-30\"\n                      placeholder=\"XXXXXXXX-XXXX-XXXX-XXXX-XXXXXXXXXXXX\"\n                      value={credentials.clientSecret || ''}\n                      onChange={onClientSecretChange}\n                      disabled={disabled}\n                    />\n                  </div>\n                </div>\n              </div>\n            ))}\n        </>\n      )}\n      {getSubscriptions && (\n        <>\n          <div className=\"gf-form-inline\">\n            <div className=\"gf-form\">\n              <InlineFormLabel className=\"width-12\">Default Subscription</InlineFormLabel>\n              <div className=\"width-25\">\n                <Select\n                  menuShouldPortal\n                  value={\n                    credentials.defaultSubscriptionId\n                      ? subscriptions.find((opt) => opt.value === credentials.defaultSubscriptionId)\n                      : undefined\n                  }\n                  options={subscriptions}\n                  onChange={onSubscriptionChange}\n                  isDisabled={disabled}\n                />\n              </div>\n            </div>\n          </div>\n          {!disabled && (\n            <div className=\"gf-form-inline\">\n              <div className=\"gf-form\">\n                <div className=\"max-width-30 gf-form-inline\">\n                  <Button\n                    variant=\"secondary\"\n                    size=\"sm\"\n                    type=\"button\"\n                    onClick={onLoadSubscriptions}\n                    disabled={!hasRequiredFields}\n                  >\n                    Load Subscriptions\n                  </Button>\n                </div>\n              </div>\n            </div>\n          )}\n        </>\n      )}\n      {props.children}\n    </div>\n  );\n};\n\nexport default AzureCredentialsForm;\n","import React, { FunctionComponent, useMemo } from 'react';\nimport { SelectableValue } from '@grafana/data';\nimport { config } from '@grafana/runtime';\nimport { AzureCredentialsForm } from './AzureCredentialsForm';\nimport { AzureDataSourceSettings, AzureCredentials } from '../types';\nimport { getCredentials, updateCredentials } from '../credentials';\n\nconst azureClouds = [\n  { value: 'azuremonitor', label: 'Azure' },\n  { value: 'govazuremonitor', label: 'Azure US Government' },\n  { value: 'germanyazuremonitor', label: 'Azure Germany' },\n  { value: 'chinaazuremonitor', label: 'Azure China' },\n] as SelectableValue[];\n\nexport interface Props {\n  options: AzureDataSourceSettings;\n  updateOptions: (optionsFunc: (options: AzureDataSourceSettings) => AzureDataSourceSettings) => void;\n  getSubscriptions: () => Promise<Array<SelectableValue<string>>>;\n}\n\nexport const MonitorConfig: FunctionComponent<Props> = (props: Props) => {\n  const { updateOptions, getSubscriptions } = props;\n  const credentials = useMemo(() => getCredentials(props.options), [props.options]);\n\n  const onCredentialsChange = (credentials: AzureCredentials): void => {\n    updateOptions((options) => updateCredentials(options, credentials));\n  };\n\n  return (\n    <>\n      <h3 className=\"page-heading\">Authentication</h3>\n      <AzureCredentialsForm\n        managedIdentityEnabled={config.azure.managedIdentityEnabled}\n        credentials={credentials}\n        azureCloudOptions={azureClouds}\n        onCredentialsChange={onCredentialsChange}\n        getSubscriptions={getSubscriptions}\n        disabled={props.options.readOnly}\n      />\n    </>\n  );\n};\n\nexport default MonitorConfig;\n","import React, { FunctionComponent, useMemo } from 'react';\nimport { AzureCredentialsForm } from './AzureCredentialsForm';\nimport { Button, Alert } from '@grafana/ui';\nimport { AzureDataSourceSettings } from '../types';\nimport { getCredentials } from '../credentials';\n\nexport interface Props {\n  options: AzureDataSourceSettings;\n  updateOptions: (optionsFunc: (options: AzureDataSourceSettings) => AzureDataSourceSettings) => void;\n}\n\nexport const AnalyticsConfig: FunctionComponent<Props> = (props: Props) => {\n  const { updateOptions } = props;\n  const primaryCredentials = useMemo(() => getCredentials(props.options), [props.options]);\n\n  // Only show a section for setting LogAnalytics credentials if\n  // they were set from before with different values and the\n  // authType is supported\n  const logCredentialsEnabled =\n    primaryCredentials.authType === 'clientsecret' && props.options.jsonData.azureLogAnalyticsSameAs === false;\n\n  const onClearAzLogsCreds = () => {\n    updateOptions((options) => {\n      return {\n        ...options,\n        jsonData: {\n          ...options.jsonData,\n          azureLogAnalyticsSameAs: true,\n        },\n      };\n    });\n  };\n\n  return logCredentialsEnabled ? (\n    <>\n      <h3 className=\"page-heading\">Azure Monitor Logs</h3>\n      <>\n        <Alert severity=\"error\" title=\"Deprecated\">\n          Using different credentials for Azure Monitor Logs is no longer supported. Authentication information above\n          will be used instead. Please create a new data source with the credentials below.\n        </Alert>\n\n        <AzureCredentialsForm\n          managedIdentityEnabled={false}\n          credentials={{\n            ...primaryCredentials,\n            authType: 'clientsecret',\n            // Use deprecated Log Analytics credentials read-only\n            // to help with a possible migration\n            tenantId: props.options.jsonData.logAnalyticsTenantId,\n            clientId: props.options.jsonData.logAnalyticsClientId,\n          }}\n          disabled={true}\n        >\n          <Button onClick={onClearAzLogsCreds}>Clear Azure Monitor Logs Credentials</Button>\n        </AzureCredentialsForm>\n      </>\n    </>\n  ) : null;\n};\n\nexport default AnalyticsConfig;\n","import React, { PureComponent } from 'react';\nimport { InlineFormLabel, Button, LegacyForms, Alert } from '@grafana/ui';\nconst { Input } = LegacyForms;\nimport { AzureDataSourceSettings, AzureDataSourceJsonData, AzureDataSourceSecureJsonData } from '../types';\n\nexport interface Props {\n  options: AzureDataSourceSettings;\n  onUpdateJsonDataOption: (\n    key: keyof AzureDataSourceJsonData\n  ) => (event: React.SyntheticEvent<HTMLInputElement | HTMLSelectElement>) => void;\n  onUpdateSecureJsonDataOption: (\n    key: keyof AzureDataSourceSecureJsonData\n  ) => (event: React.SyntheticEvent<HTMLInputElement | HTMLSelectElement>) => void;\n  onResetOptionKey: (key: string) => void;\n}\nexport class InsightsConfig extends PureComponent<Props> {\n  onAppInsightsResetApiKey = () => {\n    this.props.onResetOptionKey('appInsightsApiKey');\n  };\n\n  render() {\n    const { options, onUpdateJsonDataOption, onUpdateSecureJsonDataOption } = this.props;\n    return (\n      <>\n        <h3 className=\"page-heading\">Azure Application Insights</h3>\n        <Alert severity=\"info\" title=\"Application Insights credentials are deprecated\">\n          Configure using Azure AD App Registration above and update existing queries to use Metrics or Logs.\n        </Alert>\n        <div className=\"gf-form-group\">\n          {options.secureJsonFields.appInsightsApiKey ? (\n            <div className=\"gf-form-inline\">\n              <div className=\"gf-form\">\n                <InlineFormLabel className=\"width-12\">API Key</InlineFormLabel>\n                <Input className=\"width-25\" placeholder=\"configured\" disabled={true} />\n              </div>\n              <div className=\"gf-form\">\n                <div className=\"max-width-30 gf-form-inline\">\n                  <Button\n                    variant=\"secondary\"\n                    type=\"button\"\n                    onClick={this.onAppInsightsResetApiKey}\n                    disabled={this.props.options.readOnly}\n                  >\n                    reset\n                  </Button>\n                </div>\n              </div>\n            </div>\n          ) : (\n            <div className=\"gf-form-inline\">\n              <div className=\"gf-form\">\n                <InlineFormLabel className=\"width-12\">API Key</InlineFormLabel>\n                <div className=\"width-15\">\n                  <Input\n                    className=\"width-30\"\n                    placeholder=\"XXXXXXXX-XXXX-XXXX-XXXX-XXXXXXXXXXXX\"\n                    value={options.secureJsonData!.appInsightsApiKey || ''}\n                    onChange={onUpdateSecureJsonDataOption('appInsightsApiKey')}\n                    disabled={this.props.options.readOnly}\n                  />\n                </div>\n              </div>\n            </div>\n          )}\n          <div className=\"gf-form-inline\">\n            <div className=\"gf-form\">\n              <InlineFormLabel className=\"width-12\">Application ID</InlineFormLabel>\n              <div className=\"width-15\">\n                <Input\n                  className=\"width-30\"\n                  value={options.jsonData.appInsightsAppId || ''}\n                  onChange={onUpdateJsonDataOption('appInsightsAppId')}\n                  disabled={this.props.options.readOnly}\n                />\n              </div>\n            </div>\n          </div>\n        </div>\n      </>\n    );\n  }\n}\n\nexport default InsightsConfig;\n","import React, { PureComponent } from 'react';\nimport {\n  DataSourcePluginOptionsEditorProps,\n  SelectableValue,\n  updateDatasourcePluginJsonDataOption,\n  updateDatasourcePluginOption,\n  updateDatasourcePluginResetOption,\n  updateDatasourcePluginSecureJsonDataOption,\n} from '@grafana/data';\nimport { MonitorConfig } from './MonitorConfig';\nimport { AnalyticsConfig } from './AnalyticsConfig';\nimport { getBackendSrv, getTemplateSrv, TemplateSrv } from '@grafana/runtime';\nimport { InsightsConfig } from './InsightsConfig';\nimport ResponseParser from '../azure_monitor/response_parser';\nimport { AzureDataSourceJsonData, AzureDataSourceSecureJsonData, AzureDataSourceSettings } from '../types';\nimport { isAppInsightsConfigured } from '../credentials';\nimport { routeNames } from '../utils/common';\n\nexport type Props = DataSourcePluginOptionsEditorProps<AzureDataSourceJsonData, AzureDataSourceSecureJsonData>;\n\nexport interface State {\n  unsaved: boolean;\n  appInsightsInitiallyConfigured: boolean;\n}\n\nexport class ConfigEditor extends PureComponent<Props, State> {\n  templateSrv: TemplateSrv = getTemplateSrv();\n  baseURL: string;\n\n  constructor(props: Props) {\n    super(props);\n\n    this.state = {\n      unsaved: false,\n      appInsightsInitiallyConfigured: isAppInsightsConfigured(props.options),\n    };\n    this.baseURL = `/api/datasources/${this.props.options.id}/resources/${routeNames.azureMonitor}/subscriptions`;\n  }\n\n  private updateOptions = (optionsFunc: (options: AzureDataSourceSettings) => AzureDataSourceSettings): void => {\n    const updated = optionsFunc(this.props.options);\n    this.props.onOptionsChange(updated);\n\n    this.setState({ unsaved: true });\n  };\n\n  private saveOptions = async (): Promise<void> => {\n    if (this.state.unsaved) {\n      await getBackendSrv()\n        .put(`/api/datasources/${this.props.options.id}`, this.props.options)\n        .then((result: { datasource: AzureDataSourceSettings }) => {\n          updateDatasourcePluginOption(this.props, 'version', result.datasource.version);\n        });\n\n      this.setState({ unsaved: false });\n    }\n  };\n\n  private getSubscriptions = async (): Promise<Array<SelectableValue<string>>> => {\n    await this.saveOptions();\n\n    const query = `?api-version=2019-03-01`;\n    const result = await getBackendSrv().datasourceRequest({\n      url: this.baseURL + query,\n      method: 'GET',\n    });\n\n    return ResponseParser.parseSubscriptionsForSelect(result);\n  };\n\n  // TODO: Used only by InsightsConfig\n  private onUpdateJsonDataOption = (key: keyof AzureDataSourceJsonData) => (\n    event: React.SyntheticEvent<HTMLInputElement | HTMLSelectElement>\n  ) => {\n    updateDatasourcePluginJsonDataOption(this.props, key, event.currentTarget.value);\n  };\n\n  // TODO: Used only by InsightsConfig\n  private onUpdateSecureJsonDataOption = (key: keyof AzureDataSourceSecureJsonData) => (\n    event: React.SyntheticEvent<HTMLInputElement | HTMLSelectElement>\n  ) => {\n    updateDatasourcePluginSecureJsonDataOption(this.props, key, event.currentTarget.value);\n  };\n\n  // TODO: Used only by InsightsConfig\n  private resetSecureKey = (key: keyof AzureDataSourceSecureJsonData) => {\n    updateDatasourcePluginResetOption(this.props, key);\n  };\n\n  render() {\n    const { options } = this.props;\n\n    return (\n      <>\n        <MonitorConfig options={options} updateOptions={this.updateOptions} getSubscriptions={this.getSubscriptions} />\n        <AnalyticsConfig options={options} updateOptions={this.updateOptions} />\n        {this.state.appInsightsInitiallyConfigured && (\n          <InsightsConfig\n            options={options}\n            onUpdateJsonDataOption={this.onUpdateJsonDataOption}\n            onUpdateSecureJsonDataOption={this.onUpdateSecureJsonDataOption}\n            onResetOptionKey={this.resetSecureKey}\n          />\n        )}\n      </>\n    );\n  }\n}\n\nexport default ConfigEditor;\n","import { getTemplateSrv, TemplateSrv } from '@grafana/runtime';\n\nexport class AzureMonitorAnnotationsQueryCtrl {\n  static templateUrl = 'partials/annotations.editor.html';\n  declare datasource: any;\n  declare annotation: any;\n  declare workspaces: any[];\n  declare subscriptions: Array<{ text: string; value: string }>;\n  private templateSrv: TemplateSrv = getTemplateSrv();\n\n  defaultQuery =\n    '<your table>\\n| where $__timeFilter() \\n| project TimeGenerated, Text=YourTitleColumn, Tags=\"tag1,tag2\"';\n\n  /** @ngInject */\n  constructor($scope: any) {\n    this.annotation = $scope.ctrl.annotation;\n    this.datasource = $scope.ctrl.datasource;\n\n    this.annotation.queryType = this.annotation.queryType || 'Azure Log Analytics';\n    this.annotation.rawQuery = this.annotation.rawQuery || this.defaultQuery;\n    this.initDropdowns();\n  }\n\n  async initDropdowns() {\n    await this.getSubscriptions();\n    await this.getWorkspaces();\n  }\n\n  async getSubscriptions() {\n    if (!this.datasource.azureMonitorDatasource.isConfigured()) {\n      return;\n    }\n\n    return this.datasource.azureMonitorDatasource.getSubscriptions().then((subs: any[]) => {\n      this.subscriptions = subs;\n\n      if (!this.annotation.subscription && this.annotation.queryType === 'Azure Log Analytics') {\n        this.annotation.subscription = this.datasource.azureLogAnalyticsDatasource.subscriptionId;\n      }\n\n      if (!this.annotation.subscription && this.subscriptions.length > 0) {\n        this.annotation.subscription = this.subscriptions[0].value;\n      }\n    });\n  }\n\n  async getWorkspaces(bustCache?: boolean) {\n    if (!bustCache && this.workspaces && this.workspaces.length > 0) {\n      return this.workspaces;\n    }\n\n    return this.datasource\n      .getAzureLogAnalyticsWorkspaces(this.annotation.subscription)\n      .then((list: any[]) => {\n        this.workspaces = list;\n        if (list.length > 0 && !this.annotation.workspace) {\n          this.annotation.workspace = list[0].value;\n        }\n        return this.workspaces;\n      })\n      .catch(() => {});\n  }\n\n  getAzureLogAnalyticsSchema = () => {\n    return this.getWorkspaces()\n      .then(() => {\n        return this.datasource.azureLogAnalyticsDatasource.getSchema(this.annotation.workspace);\n      })\n      .catch(() => {});\n  };\n\n  onSubscriptionChange = () => {\n    this.getWorkspaces(true);\n  };\n\n  onLogAnalyticsQueryChange = (nextQuery: string) => {\n    this.annotation.rawQuery = nextQuery;\n  };\n\n  get templateVariables() {\n    return this.templateSrv.getVariables().map((t: any) => '$' + t.name);\n  }\n}\n","import { DataSourcePlugin } from '@grafana/data';\nimport { AzureMonitorQueryCtrl } from './query_ctrl';\nimport Datasource from './datasource';\nimport { ConfigEditor } from './components/ConfigEditor';\nimport { AzureMonitorAnnotationsQueryCtrl } from './annotations_query_ctrl';\nimport { AzureMonitorQuery, AzureDataSourceJsonData } from './types';\n\nexport const plugin = new DataSourcePlugin<Datasource, AzureMonitorQuery, AzureDataSourceJsonData>(Datasource)\n  .setConfigEditor(ConfigEditor)\n  .setQueryCtrl(AzureMonitorQueryCtrl)\n  .setAnnotationQueryCtrl(AzureMonitorAnnotationsQueryCtrl);\n"],"sourceRoot":""}
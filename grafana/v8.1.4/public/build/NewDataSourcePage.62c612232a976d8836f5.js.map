{"version":3,"sources":["webpack:///./public/app/features/datasources/NewDataSourcePage.tsx","webpack:///./public/app/core/components/Card/Card.tsx","webpack:///./public/app/features/plugins/PluginsErrorsInfo.tsx","webpack:///./public/app/features/plugins/state/selectors.ts"],"names":["NewDataSourcePage","PureComponent","plugin","this","props","addDataSource","value","setDataSourceTypeSearchQuery","evt","stopPropagation","componentDidMount","loadDataSourcePlugins","renderPlugins","plugins","length","items","getItemKey","item","id","toString","renderItem","DataSourceTypeCard","onClick","onDataSourceTypeClicked","onLearnMoreClick","renderCategories","categories","map","category","className","title","variant","href","target","rel","render","navModel","isLoading","searchQuery","Contents","onChange","onSearchQueryChange","placeholder","fill","icon","isPhantom","module","unlicensed","learnMoreLink","info","links","name","description","ariaLabel","selectors","pages","AddDataSource","dataSourcePlugins","logoUrl","logos","small","actions","url","disabled","labels","status","signature","aria-label","getNavModel","main","text","subTitle","node","mapDispatchToProps","hot","connect","state","getDataSourcePlugins","dataSources","dataSourceTypeSearchQuery","isLoadingDataSources","Card","mainClassName","cx","src","mapStateToProps","errors","getAllPluginsErrors","loadPluginsErrors","PluginsErrorsInfo","children","theme","useTheme","loading","useAsync","async","loadPlugins","PluginsList","signatureErrorNotice","severity","urlTitle","css","e","spacing","sm","justify","align","pluginId","mapPluginErrorCodeToSignatureStatus","errorCode","code","PluginErrorCode","invalidSignature","PluginSignatureStatus","invalid","missingSignature","missing","modifiedSignature","modified","getPlugins","regex","RegExp","filter","test","author","type","getPluginsSearchQuery"],"mappings":"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","file":"NewDataSourcePage.62c612232a976d8836f5.js","sourcesContent":["import React, { FC, PureComponent } from 'react';\nimport { connect } from 'react-redux';\nimport { hot } from 'react-hot-loader';\nimport { DataSourcePluginMeta, NavModel } from '@grafana/data';\nimport { Button, LinkButton, List, PluginSignatureBadge } from '@grafana/ui';\nimport { selectors } from '@grafana/e2e-selectors';\n\nimport Page from 'app/core/components/Page/Page';\nimport { DataSourcePluginCategory, StoreState } from 'app/types';\nimport { addDataSource, loadDataSourcePlugins } from './state/actions';\nimport { getDataSourcePlugins } from './state/selectors';\nimport { FilterInput } from 'app/core/components/FilterInput/FilterInput';\nimport { setDataSourceTypeSearchQuery } from './state/reducers';\nimport { Card } from 'app/core/components/Card/Card';\nimport { PluginsErrorsInfo } from '../plugins/PluginsErrorsInfo';\n\nexport interface Props {\n  navModel: NavModel;\n  plugins: DataSourcePluginMeta[];\n  categories: DataSourcePluginCategory[];\n  isLoading: boolean;\n  addDataSource: typeof addDataSource;\n  loadDataSourcePlugins: typeof loadDataSourcePlugins;\n  searchQuery: string;\n  setDataSourceTypeSearchQuery: typeof setDataSourceTypeSearchQuery;\n}\n\nclass NewDataSourcePage extends PureComponent<Props> {\n  componentDidMount() {\n    this.props.loadDataSourcePlugins();\n  }\n\n  onDataSourceTypeClicked = (plugin: DataSourcePluginMeta) => {\n    this.props.addDataSource(plugin);\n  };\n\n  onSearchQueryChange = (value: string) => {\n    this.props.setDataSourceTypeSearchQuery(value);\n  };\n\n  renderPlugins(plugins: DataSourcePluginMeta[]) {\n    if (!plugins || !plugins.length) {\n      return null;\n    }\n\n    return (\n      <List\n        items={plugins}\n        getItemKey={(item) => item.id.toString()}\n        renderItem={(item) => (\n          <DataSourceTypeCard\n            plugin={item}\n            onClick={() => this.onDataSourceTypeClicked(item)}\n            onLearnMoreClick={this.onLearnMoreClick}\n          />\n        )}\n      />\n    );\n  }\n\n  onLearnMoreClick = (evt: React.SyntheticEvent<HTMLElement>) => {\n    evt.stopPropagation();\n  };\n\n  renderCategories() {\n    const { categories } = this.props;\n\n    return (\n      <>\n        {categories.map((category) => (\n          <div className=\"add-data-source-category\" key={category.id}>\n            <div className=\"add-data-source-category__header\">{category.title}</div>\n            {this.renderPlugins(category.plugins)}\n          </div>\n        ))}\n        <div className=\"add-data-source-more\">\n          <LinkButton\n            variant=\"secondary\"\n            href=\"https://grafana.com/plugins?type=datasource&utm_source=grafana_add_ds\"\n            target=\"_blank\"\n            rel=\"noopener\"\n          >\n            Find more data source plugins on grafana.com\n          </LinkButton>\n        </div>\n      </>\n    );\n  }\n\n  render() {\n    const { navModel, isLoading, searchQuery, plugins } = this.props;\n\n    return (\n      <Page navModel={navModel}>\n        <Page.Contents isLoading={isLoading}>\n          <div className=\"page-action-bar\">\n            <FilterInput value={searchQuery} onChange={this.onSearchQueryChange} placeholder=\"Filter by name or type\" />\n            <div className=\"page-action-bar__spacer\" />\n            <LinkButton href=\"datasources\" fill=\"outline\" variant=\"secondary\" icon=\"arrow-left\">\n              Cancel\n            </LinkButton>\n          </div>\n          {!searchQuery && <PluginsErrorsInfo />}\n          <div>\n            {searchQuery && this.renderPlugins(plugins)}\n            {!searchQuery && this.renderCategories()}\n          </div>\n        </Page.Contents>\n      </Page>\n    );\n  }\n}\n\ninterface DataSourceTypeCardProps {\n  plugin: DataSourcePluginMeta;\n  onClick: () => void;\n  onLearnMoreClick: (evt: React.SyntheticEvent<HTMLElement>) => void;\n}\n\nconst DataSourceTypeCard: FC<DataSourceTypeCardProps> = (props) => {\n  const { plugin, onLearnMoreClick } = props;\n  const isPhantom = plugin.module === 'phantom';\n  const onClick = !isPhantom && !plugin.unlicensed ? props.onClick : () => {};\n  // find first plugin info link\n  const learnMoreLink = plugin.info?.links?.length > 0 ? plugin.info.links[0] : null;\n\n  return (\n    <Card\n      title={plugin.name}\n      description={plugin.info.description}\n      ariaLabel={selectors.pages.AddDataSource.dataSourcePlugins(plugin.name)}\n      logoUrl={plugin.info.logos.small}\n      actions={\n        <>\n          {learnMoreLink && (\n            <LinkButton\n              variant=\"secondary\"\n              href={`${learnMoreLink.url}?utm_source=grafana_add_ds`}\n              target=\"_blank\"\n              rel=\"noopener\"\n              onClick={onLearnMoreClick}\n              icon=\"external-link-alt\"\n            >\n              {learnMoreLink.name}\n            </LinkButton>\n          )}\n          {!isPhantom && <Button disabled={plugin.unlicensed}>Select</Button>}\n        </>\n      }\n      labels={!isPhantom && <PluginSignatureBadge status={plugin.signature} />}\n      className={isPhantom ? 'add-data-source-item--phantom' : ''}\n      onClick={onClick}\n      aria-label={selectors.pages.AddDataSource.dataSourcePlugins(plugin.name)}\n    />\n  );\n};\n\nexport function getNavModel(): NavModel {\n  const main = {\n    icon: 'database',\n    id: 'datasource-new',\n    text: 'Add data source',\n    href: 'datasources/new',\n    subTitle: 'Choose a data source type',\n  };\n\n  return {\n    main: main,\n    node: main,\n  };\n}\n\nfunction mapStateToProps(state: StoreState) {\n  return {\n    navModel: getNavModel(),\n    plugins: getDataSourcePlugins(state.dataSources),\n    searchQuery: state.dataSources.dataSourceTypeSearchQuery,\n    categories: state.dataSources.categories,\n    isLoading: state.dataSources.isLoadingDataSources,\n  };\n}\n\nconst mapDispatchToProps = {\n  addDataSource,\n  loadDataSourcePlugins,\n  setDataSourceTypeSearchQuery,\n};\n\nexport default hot(module)(connect(mapStateToProps, mapDispatchToProps)(NewDataSourcePage));\n","import React from 'react';\nimport { cx } from '@emotion/css';\n\nexport interface CardProps {\n  logoUrl?: string;\n  title: string;\n  description?: string;\n  labels?: React.ReactNode;\n  actions?: React.ReactNode;\n  onClick?: () => void;\n  ariaLabel?: string;\n  className?: string;\n}\n\nexport const Card: React.FC<CardProps> = ({\n  logoUrl,\n  title,\n  description,\n  labels,\n  actions,\n  onClick,\n  ariaLabel,\n  className,\n}) => {\n  const mainClassName = cx('add-data-source-item', className);\n\n  return (\n    <div className={mainClassName} onClick={onClick} aria-label={ariaLabel}>\n      {logoUrl && <img className=\"add-data-source-item-logo\" src={logoUrl} />}\n      <div className=\"add-data-source-item-text-wrapper\">\n        <span className=\"add-data-source-item-text\">{title}</span>\n        {description && <span className=\"add-data-source-item-desc\">{description}</span>}\n        {labels && <div className=\"add-data-source-item-badge\">{labels}</div>}\n      </div>\n      {actions && <div className=\"add-data-source-item-actions\">{actions}</div>}\n    </div>\n  );\n};\n","import React from 'react';\nimport { selectors } from '@grafana/e2e-selectors';\nimport { HorizontalGroup, InfoBox, List, PluginSignatureBadge, useTheme } from '@grafana/ui';\nimport { StoreState } from '../../types';\nimport { getAllPluginsErrors } from './state/selectors';\nimport { loadPlugins, loadPluginsErrors } from './state/actions';\nimport useAsync from 'react-use/lib/useAsync';\nimport { connect, ConnectedProps } from 'react-redux';\nimport { hot } from 'react-hot-loader';\nimport { PluginErrorCode, PluginSignatureStatus } from '@grafana/data';\nimport { css } from '@emotion/css';\n\nconst mapStateToProps = (state: StoreState) => ({\n  errors: getAllPluginsErrors(state.plugins),\n});\n\nconst mapDispatchToProps = {\n  loadPluginsErrors,\n};\n\ninterface OwnProps {\n  children?: React.ReactNode;\n}\nconst connector = connect(mapStateToProps, mapDispatchToProps);\ntype PluginsErrorsInfoProps = ConnectedProps<typeof connector> & OwnProps;\n\nexport const PluginsErrorsInfoUnconnected: React.FC<PluginsErrorsInfoProps> = ({\n  loadPluginsErrors,\n  errors,\n  children,\n}) => {\n  const theme = useTheme();\n\n  const { loading } = useAsync(async () => {\n    await loadPluginsErrors();\n  }, [loadPlugins]);\n\n  if (loading || errors.length === 0) {\n    return null;\n  }\n  return (\n    <InfoBox\n      aria-label={selectors.pages.PluginsList.signatureErrorNotice}\n      severity=\"warning\"\n      urlTitle=\"Read more about plugin signing\"\n      url=\"https://grafana.com/docs/grafana/latest/plugins/plugin-signatures/\"\n    >\n      <div>\n        <p>\n          Unsigned plugins were found during plugin initialization. Grafana Labs cannot guarantee the integrity of these\n          plugins. We recommend only using signed plugins.\n        </p>\n        The following plugins are disabled and not shown in the list below:\n        <List\n          items={errors}\n          className={css`\n            list-style-type: circle;\n          `}\n          renderItem={(e) => (\n            <div\n              className={css`\n                margin-top: ${theme.spacing.sm};\n              `}\n            >\n              <HorizontalGroup spacing=\"sm\" justify=\"flex-start\" align=\"center\">\n                <strong>{e.pluginId}</strong>\n                <PluginSignatureBadge\n                  status={mapPluginErrorCodeToSignatureStatus(e.errorCode)}\n                  className={css`\n                    margin-top: 0;\n                  `}\n                />\n              </HorizontalGroup>\n            </div>\n          )}\n        />\n        {children}\n      </div>\n    </InfoBox>\n  );\n};\n\nexport const PluginsErrorsInfo = hot(module)(\n  connect(mapStateToProps, mapDispatchToProps)(PluginsErrorsInfoUnconnected)\n);\n\nfunction mapPluginErrorCodeToSignatureStatus(code: PluginErrorCode) {\n  switch (code) {\n    case PluginErrorCode.invalidSignature:\n      return PluginSignatureStatus.invalid;\n    case PluginErrorCode.missingSignature:\n      return PluginSignatureStatus.missing;\n    case PluginErrorCode.modifiedSignature:\n      return PluginSignatureStatus.modified;\n    default:\n      return PluginSignatureStatus.missing;\n  }\n}\n","import { PluginsState } from 'app/types/plugins';\n\nexport const getPlugins = (state: PluginsState) => {\n  const regex = new RegExp(state.searchQuery, 'i');\n\n  return state.plugins.filter((item) => {\n    return (\n      regex.test(item.name) ||\n      regex.test(item.info.author.name) ||\n      regex.test(item.type) ||\n      regex.test(item.info.description)\n    );\n  });\n};\nexport const getAllPluginsErrors = (state: PluginsState) => {\n  return state.errors;\n};\n\nexport const getPluginsSearchQuery = (state: PluginsState) => state.searchQuery;\n"],"sourceRoot":""}
{"version":3,"sources":["webpack:///./public/app/features/plugins/PluginStateInfo.tsx","webpack:///./public/app/features/datasources/settings/PluginSettings.tsx","webpack:///./public/app/features/datasources/settings/BasicSettings.tsx","webpack:///./public/app/features/datasources/settings/ButtonRow.tsx","webpack:///./public/app/features/datasources/settings/CloudInfoBox.tsx","webpack:///./public/app/features/datasources/settings/DataSourceSettingsPage.tsx"],"names":["PluginStateInfo","props","display","state","PluginState","deprecated","text","color","tooltip","alpha","beta","getFeatureStateInfo","title","icon","PluginSettings","PureComponent","constructor","super","dataSource","this","onModelChange","scopeProps","ctrl","datasourceMeta","dataSourceMeta","current","cloneDeep","onModelChanged","bind","componentDidMount","plugin","element","components","ConfigEditor","loader","getAngularLoader","template","component","load","componentDidUpdate","prevProps","digest","componentWillUnmount","destroy","render","ref","React","createElement","options","onOptionsChange","Input","Switch","LegacyForms","BasicSettings","dataSourceName","isDefault","onDefaultChange","onNameChange","className","aria-label","style","marginRight","type","value","placeholder","onChange","event","target","required","selectors","pages","DataSource","name","label","checked","ButtonRow","isReadOnly","onDelete","onSubmit","onTest","variant","fill","href","config","appSubUrl","disabled","onClick","delete","saveAndTest","CloudInfoBox","mainDS","extraDS","readOnly","version","buildInfo","edition","GrafanaEdition","OpenSource","LocalStorageValueProvider","storageKey","defaultValue","isDismissed","onDismiss","severity","bottomSpacing","onRemove","rel","mapDispatchToProps","deleteDataSource","loadDataSource","setDataSourceName","updateDataSource","setIsDefault","dataSourceLoaded","initDataSourceSettings","testDataSource","cleanUpAction","connector","connect","dataSourceId","match","params","uid","URLSearchParams","location","search","getDataSource","dataSources","loadError","testingStatus","dataSourceSettings","page","get","nav","getDataSourceNav","buildNavModel","getDataSourceLoadingNav","navModel","getNavModel","navIndex","getDataSourceMeta","DataSourceSettingsPage","async","evt","preventDefault","appEvents","publish","ShowConfirmModalEvent","yesText","onConfirm","confirmDelete","stateSelector","renderIsReadOnlyMessage","id","renderLoadError","showDelete","msg","toString","data","message","isString","node","subTitle","main","Page","Contents","renderConfigPageBody","configPages","p","body","query","renderAlertDetails","details","verboseMessage","whiteSpace","renderSettings","status","alert","isLoading","hasDataSource"],"mappings":"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","file":"DataSourceSettingsPage.62c612232a976d8836f5.js","sourcesContent":["import React, { FC } from 'react';\nimport { Badge, BadgeProps } from '@grafana/ui';\nimport { PluginState } from '@grafana/data';\n\ninterface Props {\n  state?: PluginState;\n}\n\nexport const PluginStateInfo: FC<Props> = (props) => {\n  const display = getFeatureStateInfo(props.state);\n\n  if (!display) {\n    return null;\n  }\n\n  return <Badge color={display.color} title={display.tooltip} text={display.text} icon={display.icon} />;\n};\n\nfunction getFeatureStateInfo(state?: PluginState): BadgeProps | null {\n  switch (state) {\n    case PluginState.deprecated:\n      return {\n        text: 'Deprecated',\n        color: 'red',\n        tooltip: `This feature is deprecated and will be removed in a future release`,\n      };\n    case PluginState.alpha:\n      return {\n        text: 'Alpha',\n        color: 'blue',\n        tooltip: `This feature is experimental and future updates might not be backward compatible`,\n      };\n    case PluginState.beta:\n      return {\n        text: 'Beta',\n        color: 'blue',\n        tooltip: `This feature is close to complete but not fully tested`,\n      };\n    default:\n      return null;\n  }\n}\n","import React, { PureComponent } from 'react';\nimport { cloneDeep } from 'lodash';\nimport {\n  DataQuery,\n  DataSourceApi,\n  DataSourceJsonData,\n  DataSourcePlugin,\n  DataSourcePluginMeta,\n  DataSourceSettings,\n} from '@grafana/data';\nimport { AngularComponent, getAngularLoader } from '@grafana/runtime';\n\nexport type GenericDataSourcePlugin = DataSourcePlugin<DataSourceApi<DataQuery, DataSourceJsonData>>;\n\nexport interface Props {\n  plugin: GenericDataSourcePlugin;\n  dataSource: DataSourceSettings;\n  dataSourceMeta: DataSourcePluginMeta;\n  onModelChange: (dataSource: DataSourceSettings) => void;\n}\n\nexport class PluginSettings extends PureComponent<Props> {\n  element: HTMLDivElement | null = null;\n  component?: AngularComponent;\n  scopeProps: {\n    ctrl: { datasourceMeta: DataSourcePluginMeta; current: DataSourceSettings };\n    onModelChanged: (dataSource: DataSourceSettings) => void;\n  };\n\n  constructor(props: Props) {\n    super(props);\n\n    this.scopeProps = {\n      ctrl: { datasourceMeta: props.dataSourceMeta, current: cloneDeep(props.dataSource) },\n      onModelChanged: this.onModelChanged,\n    };\n    this.onModelChanged = this.onModelChanged.bind(this);\n  }\n\n  componentDidMount() {\n    const { plugin } = this.props;\n\n    if (!this.element) {\n      return;\n    }\n\n    if (!plugin.components.ConfigEditor) {\n      // React editor is not specified, let's render angular editor\n      // How to approach this better? Introduce ReactDataSourcePlugin interface and typeguard it here?\n      const loader = getAngularLoader();\n      const template = '<plugin-component type=\"datasource-config-ctrl\" />';\n\n      this.component = loader.load(this.element, this.scopeProps, template);\n    }\n  }\n\n  componentDidUpdate(prevProps: Props) {\n    const { plugin } = this.props;\n    if (!plugin.components.ConfigEditor && this.props.dataSource !== prevProps.dataSource) {\n      this.scopeProps.ctrl.current = cloneDeep(this.props.dataSource);\n\n      this.component?.digest();\n    }\n  }\n\n  componentWillUnmount() {\n    if (this.component) {\n      this.component.destroy();\n    }\n  }\n\n  onModelChanged = (dataSource: DataSourceSettings) => {\n    this.props.onModelChange(dataSource);\n  };\n\n  render() {\n    const { plugin, dataSource } = this.props;\n\n    if (!plugin) {\n      return null;\n    }\n\n    return (\n      <div ref={(element) => (this.element = element)}>\n        {plugin.components.ConfigEditor &&\n          React.createElement(plugin.components.ConfigEditor, {\n            options: dataSource,\n            onOptionsChange: this.onModelChanged,\n          })}\n      </div>\n    );\n  }\n}\n\nexport default PluginSettings;\n","import React, { FC } from 'react';\nimport { InlineFormLabel, LegacyForms } from '@grafana/ui';\nimport { selectors } from '@grafana/e2e-selectors';\n\nconst { Input, Switch } = LegacyForms;\n\nexport interface Props {\n  dataSourceName: string;\n  isDefault: boolean;\n  onNameChange: (name: string) => void;\n  onDefaultChange: (value: boolean) => void;\n}\n\nconst BasicSettings: FC<Props> = ({ dataSourceName, isDefault, onDefaultChange, onNameChange }) => {\n  return (\n    <div className=\"gf-form-group\" aria-label=\"Datasource settings page basic settings\">\n      <div className=\"gf-form-inline\">\n        <div className=\"gf-form max-width-30\" style={{ marginRight: '3px' }}>\n          <InlineFormLabel\n            tooltip={\n              'The name is used when you select the data source in panels. The default data source is ' +\n              'preselected in new panels.'\n            }\n          >\n            Name\n          </InlineFormLabel>\n          <Input\n            className=\"gf-form-input max-width-23\"\n            type=\"text\"\n            value={dataSourceName}\n            placeholder=\"Name\"\n            onChange={(event) => onNameChange(event.target.value)}\n            required\n            aria-label={selectors.pages.DataSource.name}\n          />\n        </div>\n        <Switch\n          label=\"Default\"\n          checked={isDefault}\n          onChange={(event) => {\n            // @ts-ignore\n            onDefaultChange(event.target.checked);\n          }}\n        />\n      </div>\n    </div>\n  );\n};\n\nexport default BasicSettings;\n","import React, { FC } from 'react';\nimport { selectors } from '@grafana/e2e-selectors';\n\nimport config from 'app/core/config';\nimport { Button, LinkButton } from '@grafana/ui';\n\nexport interface Props {\n  isReadOnly: boolean;\n  onDelete: () => void;\n  onSubmit: (event: any) => void;\n  onTest: (event: any) => void;\n}\n\nconst ButtonRow: FC<Props> = ({ isReadOnly, onDelete, onSubmit, onTest }) => {\n  return (\n    <div className=\"gf-form-button-row\">\n      <LinkButton variant=\"secondary\" fill=\"outline\" href={`${config.appSubUrl}/datasources`}>\n        Back\n      </LinkButton>\n      <Button\n        type=\"button\"\n        variant=\"destructive\"\n        disabled={isReadOnly}\n        onClick={onDelete}\n        aria-label={selectors.pages.DataSource.delete}\n      >\n        Delete\n      </Button>\n      {!isReadOnly && (\n        <Button\n          type=\"submit\"\n          variant=\"primary\"\n          disabled={isReadOnly}\n          onClick={(event) => onSubmit(event)}\n          aria-label={selectors.pages.DataSource.saveAndTest}\n        >\n          Save &amp; test\n        </Button>\n      )}\n      {isReadOnly && (\n        <Button type=\"submit\" variant=\"primary\" onClick={onTest}>\n          Test\n        </Button>\n      )}\n    </div>\n  );\n};\n\nexport default ButtonRow;\n","import { DataSourceSettings } from '@grafana/data';\nimport { Alert } from '@grafana/ui';\nimport React, { FC } from 'react';\nimport { config } from 'app/core/config';\nimport { GrafanaEdition } from '@grafana/data/src/types/config';\nimport { LocalStorageValueProvider } from 'app/core/components/LocalStorageValueProvider';\n\nconst LOCAL_STORAGE_KEY = 'datasources.settings.cloudInfoBox.isDismissed';\n\nexport interface Props {\n  dataSource: DataSourceSettings;\n}\n\nexport const CloudInfoBox: FC<Props> = ({ dataSource }) => {\n  let mainDS = '';\n  let extraDS = '';\n\n  // don't show for already configured data sources or provisioned data sources\n  if (dataSource.readOnly || (dataSource.version ?? 0) > 2) {\n    return null;\n  }\n\n  // Skip showing this info box in some editions\n  if (config.buildInfo.edition !== GrafanaEdition.OpenSource) {\n    return null;\n  }\n\n  switch (dataSource.type) {\n    case 'prometheus':\n      mainDS = 'Prometheus';\n      extraDS = 'Loki';\n      break;\n    case 'loki':\n      mainDS = 'Loki';\n      extraDS = 'Prometheus';\n      break;\n    default:\n      return null;\n  }\n\n  return (\n    <LocalStorageValueProvider<boolean> storageKey={LOCAL_STORAGE_KEY} defaultValue={false}>\n      {(isDismissed, onDismiss) => {\n        if (isDismissed) {\n          return null;\n        }\n        return (\n          <Alert\n            title={`Configure your ${mainDS} data source below`}\n            severity=\"info\"\n            bottomSpacing={4}\n            onRemove={() => {\n              onDismiss(true);\n            }}\n          >\n            Or skip the effort and get {mainDS} (and {extraDS}) as fully-managed, scalable, and hosted data sources from\n            Grafana Labs with the{' '}\n            <a\n              className=\"external-link\"\n              href={`https://grafana.com/signup/cloud/connect-account?src=grafana-oss&cnt=${dataSource.type}-settings`}\n              target=\"_blank\"\n              rel=\"noreferrer\"\n              title=\"The free plan includes 10k active metrics and 50gb storage.\"\n            >\n              free-forever Grafana Cloud plan\n            </a>\n            .\n          </Alert>\n        );\n      }}\n    </LocalStorageValueProvider>\n  );\n};\n","import React, { PureComponent } from 'react';\nimport { isString } from 'lodash';\n// Components\nimport Page from 'app/core/components/Page/Page';\nimport { PluginSettings } from './PluginSettings';\nimport BasicSettings from './BasicSettings';\nimport ButtonRow from './ButtonRow';\n// Services & Utils\nimport appEvents from 'app/core/app_events';\n// Actions & selectors\nimport { getDataSource, getDataSourceMeta } from '../state/selectors';\nimport {\n  deleteDataSource,\n  initDataSourceSettings,\n  loadDataSource,\n  testDataSource,\n  updateDataSource,\n} from '../state/actions';\nimport { getNavModel } from 'app/core/selectors/navModel';\n\n// Types\nimport { StoreState } from 'app/types/';\nimport { DataSourceSettings } from '@grafana/data';\nimport { Alert, Button, LinkButton } from '@grafana/ui';\nimport { getDataSourceLoadingNav, buildNavModel, getDataSourceNav } from '../state/navModel';\nimport { PluginStateInfo } from 'app/features/plugins/PluginStateInfo';\nimport { dataSourceLoaded, setDataSourceName, setIsDefault } from '../state/reducers';\nimport { selectors } from '@grafana/e2e-selectors';\nimport { CloudInfoBox } from './CloudInfoBox';\nimport { GrafanaRouteComponentProps } from 'app/core/navigation/types';\nimport { connect, ConnectedProps } from 'react-redux';\nimport { cleanUpAction } from 'app/core/actions/cleanUp';\nimport { ShowConfirmModalEvent } from '../../../types/events';\n\nexport interface OwnProps extends GrafanaRouteComponentProps<{ uid: string }> {}\n\nfunction mapStateToProps(state: StoreState, props: OwnProps) {\n  const dataSourceId = props.match.params.uid;\n  const params = new URLSearchParams(props.location.search);\n  const dataSource = getDataSource(state.dataSources, dataSourceId);\n  const { plugin, loadError, testingStatus } = state.dataSourceSettings;\n  const page = params.get('page');\n\n  const nav = plugin\n    ? getDataSourceNav(buildNavModel(dataSource, plugin), page || 'settings')\n    : getDataSourceLoadingNav('settings');\n\n  const navModel = getNavModel(\n    state.navIndex,\n    page ? `datasource-page-${page}` : `datasource-settings-${dataSourceId}`,\n    nav\n  );\n\n  return {\n    dataSource: getDataSource(state.dataSources, dataSourceId),\n    dataSourceMeta: getDataSourceMeta(state.dataSources, dataSource.type),\n    dataSourceId: dataSourceId,\n    page,\n    plugin,\n    loadError,\n    testingStatus,\n    navModel,\n  };\n}\n\nconst mapDispatchToProps = {\n  deleteDataSource,\n  loadDataSource,\n  setDataSourceName,\n  updateDataSource,\n  setIsDefault,\n  dataSourceLoaded,\n  initDataSourceSettings,\n  testDataSource,\n  cleanUpAction,\n};\n\nconst connector = connect(mapStateToProps, mapDispatchToProps);\n\nexport type Props = OwnProps & ConnectedProps<typeof connector>;\n\nexport class DataSourceSettingsPage extends PureComponent<Props> {\n  componentDidMount() {\n    const { initDataSourceSettings, dataSourceId } = this.props;\n    initDataSourceSettings(dataSourceId);\n  }\n\n  componentWillUnmount() {\n    this.props.cleanUpAction({\n      stateSelector: (state) => state.dataSourceSettings,\n    });\n  }\n\n  onSubmit = async (evt: React.FormEvent<HTMLFormElement>) => {\n    evt.preventDefault();\n\n    await this.props.updateDataSource({ ...this.props.dataSource });\n\n    this.testDataSource();\n  };\n\n  onTest = async (evt: React.FormEvent<HTMLFormElement>) => {\n    evt.preventDefault();\n\n    this.testDataSource();\n  };\n\n  onDelete = () => {\n    appEvents.publish(\n      new ShowConfirmModalEvent({\n        title: 'Delete',\n        text: 'Are you sure you want to delete this data source?',\n        yesText: 'Delete',\n        icon: 'trash-alt',\n        onConfirm: () => {\n          this.confirmDelete();\n        },\n      })\n    );\n  };\n\n  confirmDelete = () => {\n    this.props.deleteDataSource();\n  };\n\n  onModelChange = (dataSource: DataSourceSettings) => {\n    this.props.dataSourceLoaded(dataSource);\n  };\n\n  isReadOnly() {\n    return this.props.dataSource.readOnly === true;\n  }\n\n  renderIsReadOnlyMessage() {\n    return (\n      <Alert aria-label={selectors.pages.DataSource.readOnly} severity=\"info\" title=\"Provisioned data source\">\n        This data source was added by config and cannot be modified using the UI. Please contact your server admin to\n        update this data source.\n      </Alert>\n    );\n  }\n\n  testDataSource() {\n    const { dataSource, testDataSource } = this.props;\n    testDataSource(dataSource.name);\n  }\n\n  get hasDataSource() {\n    return this.props.dataSource.id > 0;\n  }\n\n  renderLoadError(loadError: any) {\n    let showDelete = false;\n    let msg = loadError.toString();\n    if (loadError.data) {\n      if (loadError.data.message) {\n        msg = loadError.data.message;\n      }\n    } else if (isString(loadError)) {\n      showDelete = true;\n    }\n\n    const node = {\n      text: msg,\n      subTitle: 'Data Source Error',\n      icon: 'exclamation-triangle',\n    };\n    const nav = {\n      node: node,\n      main: node,\n    };\n\n    return (\n      <Page navModel={nav}>\n        <Page.Contents>\n          <div>\n            <div className=\"gf-form-button-row\">\n              {showDelete && (\n                <Button type=\"submit\" variant=\"destructive\" onClick={this.onDelete}>\n                  Delete\n                </Button>\n              )}\n              <LinkButton variant=\"secondary\" href=\"datasources\" fill=\"outline\">\n                Back\n              </LinkButton>\n            </div>\n          </div>\n        </Page.Contents>\n      </Page>\n    );\n  }\n\n  renderConfigPageBody(page: string) {\n    const { plugin } = this.props;\n    if (!plugin || !plugin.configPages) {\n      return null; // still loading\n    }\n\n    for (const p of plugin.configPages) {\n      if (p.id === page) {\n        // Investigate is any plugins using this? We should change this interface\n        return <p.body plugin={plugin} query={{}} />;\n      }\n    }\n\n    return <div>Page not found: {page}</div>;\n  }\n\n  renderAlertDetails() {\n    const { testingStatus } = this.props;\n\n    return (\n      <>\n        {testingStatus?.details?.message}\n        {testingStatus?.details?.verboseMessage ? (\n          <details style={{ whiteSpace: 'pre-wrap' }}>{testingStatus?.details?.verboseMessage}</details>\n        ) : null}\n      </>\n    );\n  }\n\n  renderSettings() {\n    const { dataSourceMeta, setDataSourceName, setIsDefault, dataSource, plugin, testingStatus } = this.props;\n\n    return (\n      <form onSubmit={this.onSubmit}>\n        {this.isReadOnly() && this.renderIsReadOnlyMessage()}\n        {dataSourceMeta.state && (\n          <div className=\"gf-form\">\n            <label className=\"gf-form-label width-10\">Plugin state</label>\n            <label className=\"gf-form-label gf-form-label--transparent\">\n              <PluginStateInfo state={dataSourceMeta.state} />\n            </label>\n          </div>\n        )}\n\n        <CloudInfoBox dataSource={dataSource} />\n\n        <BasicSettings\n          dataSourceName={dataSource.name}\n          isDefault={dataSource.isDefault}\n          onDefaultChange={(state) => setIsDefault(state)}\n          onNameChange={(name) => setDataSourceName(name)}\n        />\n\n        {plugin && (\n          <PluginSettings\n            plugin={plugin}\n            dataSource={dataSource}\n            dataSourceMeta={dataSourceMeta}\n            onModelChange={this.onModelChange}\n          />\n        )}\n\n        {testingStatus?.message && (\n          <div className=\"gf-form-group p-t-2\">\n            <Alert\n              severity={testingStatus.status === 'error' ? 'error' : 'success'}\n              title={testingStatus.message}\n              aria-label={selectors.pages.DataSource.alert}\n            >\n              {testingStatus.details && this.renderAlertDetails()}\n            </Alert>\n          </div>\n        )}\n\n        <ButtonRow\n          onSubmit={(event) => this.onSubmit(event)}\n          isReadOnly={this.isReadOnly()}\n          onDelete={this.onDelete}\n          onTest={(event) => this.onTest(event)}\n        />\n      </form>\n    );\n  }\n\n  render() {\n    const { navModel, page, loadError } = this.props;\n\n    if (loadError) {\n      return this.renderLoadError(loadError);\n    }\n\n    return (\n      <Page navModel={navModel}>\n        <Page.Contents isLoading={!this.hasDataSource}>\n          {this.hasDataSource ? <div>{page ? this.renderConfigPageBody(page) : this.renderSettings()}</div> : null}\n        </Page.Contents>\n      </Page>\n    );\n  }\n}\n\nexport default connector(DataSourceSettingsPage);\n"],"sourceRoot":""}
{"version":3,"sources":["webpack:///./node_modules/react-use/esm/useIsomorphicLayoutEffect.js","webpack:///./node_modules/react-use/esm/useObservable.js","webpack:///./public/app/features/alerting/unified/utils/query.ts","webpack:///./public/app/features/alerting/unified/components/rule-viewer/RuleViewerVisualization.tsx","webpack:///./public/app/features/alerting/unified/RuleViewer.tsx","webpack:///./public/app/features/alerting/unified/utils/timeRange.ts","webpack:///./public/app/features/alerting/unified/state/AlertingQueryRunner.ts","webpack:///./public/app/features/alerting/unified/hooks/useCombinedRule.ts","webpack:///./public/app/features/alerting/unified/components/PanelPluginsButtonGroup.tsx","webpack:///./public/app/features/expressions/guards.ts","webpack:///./public/app/features/alerting/unified/components/rule-viewer/RuleViewerLayout.tsx"],"names":["window","observable$","initialValue","_a","value","update","s","subscribe","unsubscribe","alertRuleToQueries","combinedRule","namespace","rulerRule","rulesSource","isGrafanaRulesSource","isGrafanaRulerRule","grafana_alert","data","isCloudRulesSource","model","dsSettings","rule","type","refId","expr","query","Error","cloudAlertRuleToModel","datasourceUid","uid","queryType","relativeTimeRange","from","to","RuleViewerVisualization","props","theme","useTheme2","styles","useStyles2","getStyles","defaultPanel","isExpressionQuery","TABLE","TIMESERIES","panel","setPanel","useState","getDataSourceSrv","getInstanceSettings","options","setOptions","frameIndex","showHeader","className","content","width","height","style","header","dataSource","name","actions","PanelPluginsButtonGroup","onChange","size","spacing","variant","icon","target","href","createExploreLink","gridSize","pluginId","title","onOptionsChange","language","showLineNumbers","showMiniMap","JSON","stringify","readOnly","settings","queryParams","datasource","urlUtil","renderUrl","left","css","typography","fontWeightMedium","colors","text","link","secondary","errorMessage","pageTitle","RuleViewer","match","id","sourceName","params","identifier","ruleId","loading","error","result","useCombinedRule","runner","useMemo","AlertingQueryRunner","useObservable","get","queries","onRunQueries","useCallback","length","run","useEffect","destroy","RuleViewerLayout","getRulesSourceByName","message","stack","annotations","Object","entries","filter","_","trim","wrapInContent","RuleState","isCreating","isDeleting","RuleDetailsActionButtons","details","leftSide","promRule","DetailsField","label","horizontal","RuleHealth","labels","keys","AlertLabels","RuleDetailsExpression","RuleDetailsAnnotations","rightSide","RuleDetailsDataSources","group","RuleDetailsMatchingInstances","queriesTitle","isLoading","onCancel","cancel","padding","map","values","find","d","state","LoadingState","Loading","h5","fontSize","fontWeightBold","fontFamily","border","medium","withErrorBoundary","FALL_BACK_TIME_RANGE","getReferencedIds","ExpressionQueryType","classic","getReferencedIdsForClassicCondition","math","getReferencedIdsForMath","resample","reduce","getReferencedIdsForReduce","conditions","condition","getTimeRanges","referencedRefIds","referencedRefIdsKey","push","q","expression","includes","undefined","constructor","backendSrv","getBackendSrv","this","subject","ReplaySubject","lastResult","asObservable","empty","initialState","Done","next","subscription","runRequest","dataPerQuery","nextResult","applyChange","previous","preProcessed","preProcessPanelData","setStructureRevision","mapErrorToPanelData","requestIsRunning","complete","initial","request","url","method","requestId","uuidv4","withLoadingIndicator","whileLoading","source","fetch","pipe","mapToPanelData","catchError","of","cancelNetworkRequestsOnUnsubscribe","share","dataByQuery","series","timeRange","getTimeRange","relative","Math","max","min","getTimeRangeForExpression","rangeUtil","relativeToTimeRange","console","warn","getDefaultTimeRange","response","results","frames","dataFrameFromJSON","queryError","toDataQueryError","change","ruleSourceName","requestState","useCombinedRulesLoader","combinedRules","useCombinedRuleNamespaces","groups","rules","useCombinedRulesMatching","ruleName","dispatch","useDispatch","promRuleRequests","useUnifiedAlertingSelector","promRules","promRuleRequest","getRequestState","rulerRuleRequests","rulerRules","rulerRuleRequest","fetchPromRulesAction","fetchRulerRulesAction","isRulerNotSupportedResponse","dispatched","slice","initialAsyncRequestState","panels","config","STAT","isSupportedPanelPlugin","imgUrl","info","logos","small","dataQuery","ExpressionDatasourceID","children","getPageStyles","pageIcon","onGoBack","locationService","RuleViewerLayoutContent","getContentStyles","wrapper","breakpoints","xxl","background","primary","weak","shape","borderRadius"],"mappings":"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","file":"AlertingRule.62c612232a976d8836f5.js","sourcesContent":["import { useEffect, useLayoutEffect } from 'react';\nvar useIsomorphicLayoutEffect = typeof window !== 'undefined' ? useLayoutEffect : useEffect;\nexport default useIsomorphicLayoutEffect;\n","import { useState } from 'react';\nimport useIsomorphicLayoutEffect from './useIsomorphicLayoutEffect';\nfunction useObservable(observable$, initialValue) {\n    var _a = useState(initialValue), value = _a[0], update = _a[1];\n    useIsomorphicLayoutEffect(function () {\n        var s = observable$.subscribe(update);\n        return function () { return s.unsubscribe(); };\n    }, [observable$]);\n    return value;\n}\nexport default useObservable;\n","import { DataQuery, DataSourceInstanceSettings } from '@grafana/data';\nimport { LokiQuery } from 'app/plugins/datasource/loki/types';\nimport { PromQuery } from 'app/plugins/datasource/prometheus/types';\nimport { CombinedRule } from 'app/types/unified-alerting';\nimport { AlertQuery } from 'app/types/unified-alerting-dto';\nimport { isCloudRulesSource, isGrafanaRulesSource } from './datasource';\nimport { isGrafanaRulerRule } from './rules';\n\nexport function alertRuleToQueries(combinedRule: CombinedRule | undefined | null): AlertQuery[] {\n  if (!combinedRule) {\n    return [];\n  }\n  const { namespace, rulerRule } = combinedRule;\n  const { rulesSource } = namespace;\n\n  if (isGrafanaRulesSource(rulesSource)) {\n    if (isGrafanaRulerRule(rulerRule)) {\n      return rulerRule.grafana_alert.data;\n    }\n  }\n\n  if (isCloudRulesSource(rulesSource)) {\n    const model = cloudAlertRuleToModel(rulesSource, combinedRule);\n\n    return [\n      {\n        refId: model.refId,\n        datasourceUid: rulesSource.uid,\n        queryType: '',\n        model,\n        relativeTimeRange: {\n          from: 360,\n          to: 0,\n        },\n      },\n    ];\n  }\n\n  return [];\n}\n\nfunction cloudAlertRuleToModel(dsSettings: DataSourceInstanceSettings, rule: CombinedRule): DataQuery {\n  const refId = 'A';\n\n  switch (dsSettings.type) {\n    case 'prometheus': {\n      const query: PromQuery = {\n        refId,\n        expr: rule.query,\n      };\n\n      return query;\n    }\n\n    case 'loki': {\n      const query: LokiQuery = {\n        refId,\n        expr: rule.query,\n      };\n\n      return query;\n    }\n\n    default:\n      throw new Error(`Query for datasource type ${dsSettings.type} is currently not supported by cloud alert rules.`);\n  }\n}\n","import React, { useState } from 'react';\nimport { css } from '@emotion/css';\nimport { DataSourceInstanceSettings, GrafanaTheme2, PanelData, urlUtil } from '@grafana/data';\nimport { getDataSourceSrv, PanelRenderer } from '@grafana/runtime';\nimport { Alert, CodeEditor, LinkButton, useStyles2, useTheme2 } from '@grafana/ui';\nimport { isExpressionQuery } from 'app/features/expressions/guards';\nimport { PanelOptions } from 'app/plugins/panel/table/models.gen';\nimport { AlertQuery } from 'app/types/unified-alerting-dto';\nimport AutoSizer from 'react-virtualized-auto-sizer';\nimport { PanelPluginsButtonGroup, SupportedPanelPlugins } from '../PanelPluginsButtonGroup';\nimport { TABLE, TIMESERIES } from '../../utils/constants';\n\ntype RuleViewerVisualizationProps = {\n  data?: PanelData;\n  query: AlertQuery;\n};\n\nconst headerHeight = 4;\n\nexport function RuleViewerVisualization(props: RuleViewerVisualizationProps): JSX.Element | null {\n  const theme = useTheme2();\n  const styles = useStyles2(getStyles);\n  const { data, query } = props;\n  const defaultPanel = isExpressionQuery(query.model) ? TABLE : TIMESERIES;\n  const [panel, setPanel] = useState<SupportedPanelPlugins>(defaultPanel);\n  const dsSettings = getDataSourceSrv().getInstanceSettings(query.datasourceUid);\n  const [options, setOptions] = useState<PanelOptions>({\n    frameIndex: 0,\n    showHeader: true,\n  });\n\n  if (!data) {\n    return null;\n  }\n\n  if (!dsSettings) {\n    return (\n      <div className={styles.content}>\n        <Alert title=\"Could not find datasource for query\" />\n        <CodeEditor\n          width=\"100%\"\n          height=\"250px\"\n          language=\"json\"\n          showLineNumbers={false}\n          showMiniMap={false}\n          value={JSON.stringify(query, null, '\\t')}\n          readOnly={true}\n        />\n      </div>\n    );\n  }\n\n  return (\n    <div className={styles.content}>\n      <AutoSizer>\n        {({ width, height }) => {\n          return (\n            <div style={{ width, height }}>\n              <div className={styles.header}>\n                <div>\n                  {`Query ${query.refId}`}\n                  <span className={styles.dataSource}>({dsSettings.name})</span>\n                </div>\n                <div className={styles.actions}>\n                  <PanelPluginsButtonGroup onChange={setPanel} value={panel} size=\"sm\" />\n                  {!isExpressionQuery(query.model) && (\n                    <>\n                      <div className={styles.spacing} />\n                      <LinkButton\n                        size=\"sm\"\n                        variant=\"secondary\"\n                        icon=\"compass\"\n                        target=\"_blank\"\n                        href={createExploreLink(dsSettings, query)}\n                      >\n                        View in Explore\n                      </LinkButton>\n                    </>\n                  )}\n                </div>\n              </div>\n              <PanelRenderer\n                height={height - theme.spacing.gridSize * headerHeight}\n                width={width}\n                data={data}\n                pluginId={panel}\n                title=\"\"\n                onOptionsChange={setOptions}\n                options={options}\n              />\n            </div>\n          );\n        }}\n      </AutoSizer>\n    </div>\n  );\n}\n\nfunction createExploreLink(settings: DataSourceInstanceSettings, query: AlertQuery): string {\n  const { name } = settings;\n  const { refId, ...rest } = query.model;\n  const queryParams = { ...rest, datasource: name };\n\n  return urlUtil.renderUrl('/explore', {\n    left: JSON.stringify(['now-1h', 'now', name, queryParams]),\n  });\n}\n\nconst getStyles = (theme: GrafanaTheme2) => {\n  return {\n    content: css`\n      width: 100%;\n      height: 250px;\n    `,\n    header: css`\n      height: ${theme.spacing(headerHeight)};\n      display: flex;\n      align-items: center;\n      justify-content: space-between;\n      white-space: nowrap;\n    `,\n    refId: css`\n      font-weight: ${theme.typography.fontWeightMedium};\n      color: ${theme.colors.text.link};\n      overflow: hidden;\n    `,\n    dataSource: css`\n      margin-left: ${theme.spacing(1)};\n      font-style: italic;\n      color: ${theme.colors.text.secondary};\n    `,\n    actions: css`\n      display: flex;\n      align-items: center;\n    `,\n    spacing: css`\n      padding: ${theme.spacing(0, 1, 0, 0)};\n    `,\n    errorMessage: css`\n      white-space: pre-wrap;\n    `,\n  };\n};\n","import React, { useCallback, useEffect, useMemo } from 'react';\nimport { useObservable } from 'react-use';\nimport { css } from '@emotion/css';\nimport { GrafanaTheme2, LoadingState, PanelData } from '@grafana/data';\nimport {\n  withErrorBoundary,\n  useStyles2,\n  Alert,\n  LoadingPlaceholder,\n  PanelChromeLoadingIndicator,\n  Icon,\n} from '@grafana/ui';\nimport { GrafanaRouteComponentProps } from 'app/core/navigation/types';\nimport { AlertingQueryRunner } from './state/AlertingQueryRunner';\nimport { useCombinedRule } from './hooks/useCombinedRule';\nimport { alertRuleToQueries } from './utils/query';\nimport { RuleState } from './components/rules/RuleState';\nimport { getRulesSourceByName } from './utils/datasource';\nimport { DetailsField } from './components/DetailsField';\nimport { RuleHealth } from './components/rules/RuleHealth';\nimport { RuleViewerVisualization } from './components/rule-viewer/RuleViewerVisualization';\nimport { RuleDetailsActionButtons } from './components/rules/RuleDetailsActionButtons';\nimport { RuleDetailsMatchingInstances } from './components/rules/RuleDetailsMatchingInstances';\nimport { RuleDetailsDataSources } from './components/rules/RuleDetailsDataSources';\nimport { RuleViewerLayout, RuleViewerLayoutContent } from './components/rule-viewer/RuleViewerLayout';\nimport { AlertLabels } from './components/AlertLabels';\nimport { RuleDetailsExpression } from './components/rules/RuleDetailsExpression';\nimport { RuleDetailsAnnotations } from './components/rules/RuleDetailsAnnotations';\nimport * as ruleId from './utils/rule-id';\n\ntype RuleViewerProps = GrafanaRouteComponentProps<{ id?: string; sourceName?: string }>;\n\nconst errorMessage = 'Could not find data source for rule';\nconst errorTitle = 'Could not view rule';\nconst pageTitle = 'Alerting / View rule';\n\nexport function RuleViewer({ match }: RuleViewerProps) {\n  const styles = useStyles2(getStyles);\n  const { id, sourceName } = match.params;\n  const identifier = ruleId.tryParse(id, true);\n  const { loading, error, result: rule } = useCombinedRule(identifier, sourceName);\n  const runner = useMemo(() => new AlertingQueryRunner(), []);\n  const data = useObservable(runner.get());\n  const queries = useMemo(() => alertRuleToQueries(rule), [rule]);\n\n  const onRunQueries = useCallback(() => {\n    if (queries.length > 0) {\n      runner.run(queries);\n    }\n  }, [queries, runner]);\n\n  useEffect(() => {\n    onRunQueries();\n  }, [onRunQueries]);\n\n  useEffect(() => {\n    return () => runner.destroy();\n  }, [runner]);\n\n  if (!sourceName) {\n    return (\n      <RuleViewerLayout title={pageTitle}>\n        <Alert title={errorTitle}>\n          <details className={styles.errorMessage}>{errorMessage}</details>\n        </Alert>\n      </RuleViewerLayout>\n    );\n  }\n\n  const rulesSource = getRulesSourceByName(sourceName);\n\n  if (loading) {\n    return (\n      <RuleViewerLayout title={pageTitle}>\n        <LoadingPlaceholder text=\"Loading rule...\" />\n      </RuleViewerLayout>\n    );\n  }\n\n  if (error || !rulesSource) {\n    return (\n      <RuleViewerLayout title={pageTitle}>\n        <Alert title={errorTitle}>\n          <details className={styles.errorMessage}>\n            {error?.message ?? errorMessage}\n            <br />\n            {!!error?.stack && error.stack}\n          </details>\n        </Alert>\n      </RuleViewerLayout>\n    );\n  }\n\n  if (!rule) {\n    return (\n      <RuleViewerLayout title={pageTitle}>\n        <span>Rule could not be found.</span>\n      </RuleViewerLayout>\n    );\n  }\n  const annotations = Object.entries(rule.annotations).filter(([_, value]) => !!value.trim());\n  return (\n    <RuleViewerLayout wrapInContent={false} title={pageTitle}>\n      <RuleViewerLayoutContent>\n        <div>\n          <h4>\n            <Icon name=\"bell\" size=\"lg\" /> {rule.name}\n          </h4>\n          <RuleState rule={rule} isCreating={false} isDeleting={false} />\n          <RuleDetailsActionButtons rule={rule} rulesSource={rulesSource} />\n        </div>\n        <div className={styles.details}>\n          <div className={styles.leftSide}>\n            {rule.promRule && (\n              <DetailsField label=\"Health\" horizontal={true}>\n                <RuleHealth rule={rule.promRule} />\n              </DetailsField>\n            )}\n            {!!rule.labels && !!Object.keys(rule.labels).length && (\n              <DetailsField label=\"Labels\" horizontal={true}>\n                <AlertLabels labels={rule.labels} />\n              </DetailsField>\n            )}\n            <RuleDetailsExpression rulesSource={rulesSource} rule={rule} annotations={annotations} />\n            <RuleDetailsAnnotations annotations={annotations} />\n          </div>\n          <div className={styles.rightSide}>\n            <RuleDetailsDataSources rule={rule} rulesSource={rulesSource} />\n            <DetailsField label=\"Namespace / Group\">{`${rule.namespace.name} / ${rule.group.name}`}</DetailsField>\n          </div>\n        </div>\n        <div>\n          <RuleDetailsMatchingInstances promRule={rule.promRule} />\n        </div>\n      </RuleViewerLayoutContent>\n      {data && Object.keys(data).length > 0 && (\n        <>\n          <div className={styles.queriesTitle}>\n            Query results <PanelChromeLoadingIndicator loading={isLoading(data)} onCancel={() => runner.cancel()} />\n          </div>\n          <RuleViewerLayoutContent padding={0}>\n            <div className={styles.queries}>\n              {queries.map((query) => {\n                return (\n                  <div key={query.refId} className={styles.query}>\n                    <RuleViewerVisualization query={query} data={data && data[query.refId]} />\n                  </div>\n                );\n              })}\n            </div>\n          </RuleViewerLayoutContent>\n        </>\n      )}\n    </RuleViewerLayout>\n  );\n}\n\nfunction isLoading(data: Record<string, PanelData>): boolean {\n  return !!Object.values(data).find((d) => d.state === LoadingState.Loading);\n}\n\nconst getStyles = (theme: GrafanaTheme2) => {\n  return {\n    errorMessage: css`\n      white-space: pre-wrap;\n    `,\n    queries: css`\n      height: 100%;\n      width: 100%;\n    `,\n    queriesTitle: css`\n      padding: ${theme.spacing(2, 0.5)};\n      font-size: ${theme.typography.h5.fontSize};\n      font-weight: ${theme.typography.fontWeightBold};\n      font-family: ${theme.typography.h5.fontFamily};\n    `,\n    query: css`\n      border-bottom: 1px solid ${theme.colors.border.medium};\n      padding: ${theme.spacing(2)};\n    `,\n    details: css`\n      display: flex;\n      flex-direction: row;\n    `,\n    leftSide: css`\n      flex: 1;\n    `,\n    rightSide: css`\n      padding-left: 90px;\n      width: 300px;\n    `,\n  };\n};\n\nexport default withErrorBoundary(RuleViewer, { style: 'page' });\n","import { RelativeTimeRange } from '@grafana/data';\nimport { AlertQuery } from 'app/types/unified-alerting-dto';\nimport { ExpressionQuery, ExpressionQueryType } from '../../../expressions/types';\n\nconst FALL_BACK_TIME_RANGE = { from: 21600, to: 0 };\n\nexport const getTimeRangeForExpression = (query: ExpressionQuery, queries: AlertQuery[]): RelativeTimeRange => {\n  const referencedRefIds: string[] | undefined = getReferencedIds(query, queries);\n\n  if (!referencedRefIds) {\n    return FALL_BACK_TIME_RANGE;\n  }\n\n  const { from, to } = getTimeRanges(referencedRefIds, queries);\n\n  if (!from.length && !to.length) {\n    return FALL_BACK_TIME_RANGE;\n  }\n\n  return {\n    from: Math.max(...from),\n    to: Math.min(...to),\n  };\n};\n\nconst getReferencedIds = (model: ExpressionQuery, queries: AlertQuery[]): string[] | undefined => {\n  switch (model.type) {\n    case ExpressionQueryType.classic:\n      return getReferencedIdsForClassicCondition(model);\n    case ExpressionQueryType.math:\n      return getReferencedIdsForMath(model, queries);\n    case ExpressionQueryType.resample:\n    case ExpressionQueryType.reduce:\n      return getReferencedIdsForReduce(model);\n  }\n};\n\nconst getReferencedIdsForClassicCondition = (model: ExpressionQuery) => {\n  return model.conditions?.map((condition) => {\n    return condition.query.params[0];\n  });\n};\n\nconst getTimeRanges = (referencedRefIds: string[], queries: AlertQuery[]) => {\n  let from: number[] = [];\n  let to = [FALL_BACK_TIME_RANGE.to];\n  for (const referencedRefIdsKey of referencedRefIds) {\n    const query = queries.find((query) => query.refId === referencedRefIdsKey);\n\n    if (!query || !query.relativeTimeRange) {\n      continue;\n    }\n    from.push(query.relativeTimeRange.from);\n    to.push(query.relativeTimeRange.to);\n  }\n\n  return {\n    from,\n    to,\n  };\n};\n\nconst getReferencedIdsForMath = (model: ExpressionQuery, queries: AlertQuery[]) => {\n  return (\n    queries\n      // filter queries of type query and filter expression on if it includes any refIds\n      .filter((q) => q.queryType === 'query' && model.expression?.includes(q.refId))\n      .map((q) => {\n        return q.refId;\n      })\n  );\n};\n\nconst getReferencedIdsForReduce = (model: ExpressionQuery) => {\n  return model.expression ? [model.expression] : undefined;\n};\n","import { Observable, of, OperatorFunction, ReplaySubject, Unsubscribable } from 'rxjs';\nimport { catchError, map, share } from 'rxjs/operators';\nimport { v4 as uuidv4 } from 'uuid';\nimport {\n  dataFrameFromJSON,\n  DataFrameJSON,\n  getDefaultTimeRange,\n  LoadingState,\n  PanelData,\n  rangeUtil,\n  TimeRange,\n  withLoadingIndicator,\n} from '@grafana/data';\nimport { FetchResponse, toDataQueryError } from '@grafana/runtime';\nimport { BackendSrv, getBackendSrv } from 'app/core/services/backend_srv';\nimport { preProcessPanelData } from 'app/features/query/state/runRequest';\nimport { AlertQuery } from 'app/types/unified-alerting-dto';\nimport { getTimeRangeForExpression } from '../utils/timeRange';\nimport { isExpressionQuery } from 'app/features/expressions/guards';\nimport { setStructureRevision } from 'app/features/query/state/processing/revision';\nimport { cancelNetworkRequestsOnUnsubscribe } from 'app/features/query/state/processing/canceler';\n\nexport interface AlertingQueryResult {\n  frames: DataFrameJSON[];\n}\n\nexport interface AlertingQueryResponse {\n  results: Record<string, AlertingQueryResult>;\n}\nexport class AlertingQueryRunner {\n  private subject: ReplaySubject<Record<string, PanelData>>;\n  private subscription?: Unsubscribable;\n  private lastResult: Record<string, PanelData>;\n\n  constructor(private backendSrv = getBackendSrv()) {\n    this.subject = new ReplaySubject(1);\n    this.lastResult = {};\n  }\n\n  get(): Observable<Record<string, PanelData>> {\n    return this.subject.asObservable();\n  }\n\n  run(queries: AlertQuery[]) {\n    if (queries.length === 0) {\n      const empty = initialState(queries, LoadingState.Done);\n      return this.subject.next(empty);\n    }\n\n    this.subscription = runRequest(this.backendSrv, queries).subscribe({\n      next: (dataPerQuery) => {\n        const nextResult = applyChange(dataPerQuery, (refId, data) => {\n          const previous = this.lastResult[refId];\n          const preProcessed = preProcessPanelData(data, previous);\n          return setStructureRevision(preProcessed, previous);\n        });\n\n        this.lastResult = nextResult;\n        this.subject.next(this.lastResult);\n      },\n\n      error: (error: Error) => {\n        this.lastResult = mapErrorToPanelData(this.lastResult, error);\n        this.subject.next(this.lastResult);\n      },\n    });\n  }\n\n  cancel() {\n    if (!this.subscription) {\n      return;\n    }\n    this.subscription.unsubscribe();\n\n    let requestIsRunning = false;\n\n    const nextResult = applyChange(this.lastResult, (refId, data) => {\n      if (data.state === LoadingState.Loading) {\n        requestIsRunning = true;\n      }\n\n      return {\n        ...data,\n        state: LoadingState.Done,\n      };\n    });\n\n    if (requestIsRunning) {\n      this.subject.next(nextResult);\n    }\n  }\n\n  destroy() {\n    if (this.subject) {\n      this.subject.complete();\n    }\n\n    this.cancel();\n  }\n}\n\nconst runRequest = (backendSrv: BackendSrv, queries: AlertQuery[]): Observable<Record<string, PanelData>> => {\n  const initial = initialState(queries, LoadingState.Loading);\n  const request = {\n    data: { data: queries },\n    url: '/api/v1/eval',\n    method: 'POST',\n    requestId: uuidv4(),\n  };\n\n  return withLoadingIndicator({\n    whileLoading: initial,\n    source: backendSrv.fetch<AlertingQueryResponse>(request).pipe(\n      mapToPanelData(initial),\n      catchError((error) => of(mapErrorToPanelData(initial, error))),\n      cancelNetworkRequestsOnUnsubscribe(backendSrv, request.requestId),\n      share()\n    ),\n  });\n};\n\nconst initialState = (queries: AlertQuery[], state: LoadingState): Record<string, PanelData> => {\n  return queries.reduce((dataByQuery: Record<string, PanelData>, query) => {\n    dataByQuery[query.refId] = {\n      state,\n      series: [],\n      timeRange: getTimeRange(query, queries),\n    };\n\n    return dataByQuery;\n  }, {});\n};\n\nconst getTimeRange = (query: AlertQuery, queries: AlertQuery[]): TimeRange => {\n  if (isExpressionQuery(query.model)) {\n    const relative = getTimeRangeForExpression(query.model, queries);\n    return rangeUtil.relativeToTimeRange(relative);\n  }\n\n  if (!query.relativeTimeRange) {\n    console.warn(`Query with refId: ${query.refId} did not have any relative time range, using default.`);\n    return getDefaultTimeRange();\n  }\n\n  return rangeUtil.relativeToTimeRange(query.relativeTimeRange);\n};\n\nconst mapToPanelData = (\n  dataByQuery: Record<string, PanelData>\n): OperatorFunction<FetchResponse<AlertingQueryResponse>, Record<string, PanelData>> => {\n  return map((response) => {\n    const { data } = response;\n    const results: Record<string, PanelData> = {};\n\n    for (const [refId, result] of Object.entries(data.results)) {\n      results[refId] = {\n        timeRange: dataByQuery[refId].timeRange,\n        state: LoadingState.Done,\n        series: result.frames.map(dataFrameFromJSON),\n      };\n    }\n\n    return results;\n  });\n};\n\nconst mapErrorToPanelData = (lastResult: Record<string, PanelData>, error: Error): Record<string, PanelData> => {\n  const queryError = toDataQueryError(error);\n\n  return applyChange(lastResult, (refId, data) => {\n    return {\n      ...data,\n      state: LoadingState.Error,\n      error: queryError,\n    };\n  });\n};\n\nconst applyChange = (\n  initial: Record<string, PanelData>,\n  change: (refId: string, data: PanelData) => PanelData\n): Record<string, PanelData> => {\n  const nextResult: Record<string, PanelData> = {};\n\n  for (const [refId, data] of Object.entries(initial)) {\n    nextResult[refId] = change(refId, data);\n  }\n\n  return nextResult;\n};\n","import { useEffect, useMemo } from 'react';\nimport { useDispatch } from 'react-redux';\nimport { CombinedRule, RuleIdentifier, RuleNamespace } from 'app/types/unified-alerting';\nimport { AsyncRequestMapSlice, AsyncRequestState, initialAsyncRequestState } from '../utils/redux';\nimport { useCombinedRuleNamespaces } from './useCombinedRuleNamespaces';\nimport { useUnifiedAlertingSelector } from './useUnifiedAlertingSelector';\nimport { fetchPromRulesAction, fetchRulerRulesAction } from '../state/actions';\nimport { RulerRulesConfigDTO } from 'app/types/unified-alerting-dto';\nimport * as ruleId from '../utils/rule-id';\nimport { isRulerNotSupportedResponse } from '../utils/rules';\n\nexport function useCombinedRule(\n  identifier: RuleIdentifier | undefined,\n  ruleSourceName: string | undefined\n): AsyncRequestState<CombinedRule> {\n  const requestState = useCombinedRulesLoader(ruleSourceName);\n  const combinedRules = useCombinedRuleNamespaces(ruleSourceName);\n\n  const rule = useMemo(() => {\n    if (!identifier || !ruleSourceName || combinedRules.length === 0) {\n      return;\n    }\n\n    for (const namespace of combinedRules) {\n      for (const group of namespace.groups) {\n        for (const rule of group.rules) {\n          const id = ruleId.fromCombinedRule(ruleSourceName, rule);\n\n          if (ruleId.equal(id, identifier)) {\n            return rule;\n          }\n        }\n      }\n    }\n\n    return;\n  }, [identifier, ruleSourceName, combinedRules]);\n\n  return {\n    ...requestState,\n    result: rule,\n  };\n}\n\nexport function useCombinedRulesMatching(\n  ruleName: string | undefined,\n  ruleSourceName: string | undefined\n): AsyncRequestState<CombinedRule[]> {\n  const requestState = useCombinedRulesLoader(ruleSourceName);\n  const combinedRules = useCombinedRuleNamespaces(ruleSourceName);\n\n  const rules = useMemo(() => {\n    if (!ruleName || !ruleSourceName || combinedRules.length === 0) {\n      return [];\n    }\n\n    const rules: CombinedRule[] = [];\n\n    for (const namespace of combinedRules) {\n      for (const group of namespace.groups) {\n        for (const rule of group.rules) {\n          if (rule.name === ruleName) {\n            rules.push(rule);\n          }\n        }\n      }\n    }\n\n    return rules;\n  }, [ruleName, ruleSourceName, combinedRules]);\n\n  return {\n    ...requestState,\n    result: rules,\n  };\n}\n\nfunction useCombinedRulesLoader(ruleSourceName: string | undefined): AsyncRequestState<void> {\n  const dispatch = useDispatch();\n  const promRuleRequests = useUnifiedAlertingSelector((state) => state.promRules);\n  const promRuleRequest = getRequestState(ruleSourceName, promRuleRequests);\n  const rulerRuleRequests = useUnifiedAlertingSelector((state) => state.rulerRules);\n  const rulerRuleRequest = getRequestState(ruleSourceName, rulerRuleRequests);\n\n  useEffect(() => {\n    if (!ruleSourceName) {\n      return;\n    }\n\n    dispatch(fetchPromRulesAction(ruleSourceName));\n    dispatch(fetchRulerRulesAction(ruleSourceName));\n  }, [dispatch, ruleSourceName]);\n\n  return {\n    loading: promRuleRequest.loading || rulerRuleRequest.loading,\n    error: promRuleRequest.error ?? isRulerNotSupportedResponse(rulerRuleRequest) ? undefined : rulerRuleRequest.error,\n    dispatched: promRuleRequest.dispatched && rulerRuleRequest.dispatched,\n  };\n}\n\nfunction getRequestState(\n  ruleSourceName: string | undefined,\n  slice: AsyncRequestMapSlice<RulerRulesConfigDTO | RuleNamespace[] | null>\n): AsyncRequestState<RulerRulesConfigDTO | RuleNamespace[] | null> {\n  if (!ruleSourceName) {\n    return initialAsyncRequestState;\n  }\n\n  const state = slice[ruleSourceName];\n\n  if (!state) {\n    return initialAsyncRequestState;\n  }\n\n  return state;\n}\n","import { SelectableValue } from '@grafana/data';\nimport { config } from '@grafana/runtime';\nimport { RadioButtonGroup } from '@grafana/ui';\nimport React, { useMemo } from 'react';\nimport { STAT, TABLE, TIMESERIES } from '../utils/constants';\n\nexport type SupportedPanelPlugins = 'timeseries' | 'table' | 'stat';\n\ntype Props = {\n  value: SupportedPanelPlugins;\n  onChange: (value: SupportedPanelPlugins) => void;\n  size?: 'sm' | 'md';\n};\n\nexport function PanelPluginsButtonGroup(props: Props): JSX.Element | null {\n  const { value, onChange, size = 'md' } = props;\n  const panels = useMemo(() => getSupportedPanels(), []);\n\n  return <RadioButtonGroup options={panels} value={value} onChange={onChange} size={size} />;\n}\n\nfunction getSupportedPanels(): Array<SelectableValue<SupportedPanelPlugins>> {\n  return Object.values(config.panels).reduce((panels: Array<SelectableValue<SupportedPanelPlugins>>, panel) => {\n    if (isSupportedPanelPlugin(panel.id)) {\n      panels.push({\n        value: panel.id,\n        label: panel.name,\n        imgUrl: panel.info.logos.small,\n      });\n    }\n    return panels;\n  }, []);\n}\n\nfunction isSupportedPanelPlugin(id: string): id is SupportedPanelPlugins {\n  switch (id) {\n    case TIMESERIES:\n    case TABLE:\n    case STAT:\n      return true;\n    default:\n      return false;\n  }\n}\n","import { DataQuery } from '@grafana/data';\nimport { ExpressionDatasourceID } from './ExpressionDatasource';\nimport { ExpressionQuery, ExpressionQueryType } from './types';\n\nexport const isExpressionQuery = (dataQuery?: DataQuery): dataQuery is ExpressionQuery => {\n  if (!dataQuery) {\n    return false;\n  }\n\n  if (dataQuery.datasource === ExpressionDatasourceID) {\n    return true;\n  }\n\n  const expression = dataQuery as ExpressionQuery;\n\n  if (typeof expression.type !== 'string') {\n    return false;\n  }\n  return Object.values(ExpressionQueryType).includes(expression.type);\n};\n","import React from 'react';\nimport { css } from '@emotion/css';\nimport { GrafanaTheme2 } from '@grafana/data';\nimport { locationService } from '@grafana/runtime';\nimport { PageToolbar, useStyles2 } from '@grafana/ui';\nimport { Page } from 'app/core/components/Page/Page';\n\ntype Props = {\n  children: React.ReactNode | React.ReactNode[];\n  title: string;\n  wrapInContent?: boolean;\n};\n\nexport function RuleViewerLayout(props: Props): JSX.Element | null {\n  const { wrapInContent = true, children, title } = props;\n  const styles = useStyles2(getPageStyles);\n\n  return (\n    <Page>\n      <PageToolbar title={title} pageIcon=\"bell\" onGoBack={() => locationService.push('/alerting/list')} />\n      <div className={styles.content}>{wrapInContent ? <RuleViewerLayoutContent {...props} /> : children}</div>\n    </Page>\n  );\n}\n\ntype ContentProps = {\n  children: React.ReactNode | React.ReactNode[];\n  padding?: number;\n};\n\nexport function RuleViewerLayoutContent({ children, padding = 2 }: ContentProps): JSX.Element | null {\n  const styles = useStyles2(getContentStyles(padding));\n  return <div className={styles.wrapper}>{children}</div>;\n}\n\nconst getPageStyles = (theme: GrafanaTheme2) => {\n  return {\n    content: css`\n      margin: ${theme.spacing(0, 2, 2)};\n      max-width: ${theme.breakpoints.values.xxl}px;\n    `,\n  };\n};\n\nconst getContentStyles = (padding: number) => (theme: GrafanaTheme2) => {\n  return {\n    wrapper: css`\n      background: ${theme.colors.background.primary};\n      border: 1px solid ${theme.colors.border.weak};\n      border-radius: ${theme.shape.borderRadius()};\n      padding: ${theme.spacing(padding)};\n    `,\n  };\n};\n"],"sourceRoot":""}
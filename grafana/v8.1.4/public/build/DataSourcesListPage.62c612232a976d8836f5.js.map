{"version":3,"sources":["webpack:///./public/app/core/components/PageActionBar/PageActionBar.tsx","webpack:///./public/app/features/datasources/DataSourcesList.tsx","webpack:///./public/app/features/datasources/DataSourcesListPage.tsx"],"names":["PageActionBar","PureComponent","render","searchQuery","linkButton","setSearchQuery","target","placeholder","this","props","linkProps","href","className","value","onChange","title","DataSourcesList","dataSources","layoutMode","styles","useStyles","getStyles","list","map","dataSource","index","heading","name","uid","Figure","src","typeLogoUrl","alt","Meta","typeName","url","isDefault","colorIndex","id","css","emptyListModel","buttonIcon","buttonLink","buttonTitle","proTip","proTipLink","proTipLinkTitle","proTipTarget","DataSourcesListPage","componentDidMount","loadDataSources","dataSourcesCount","navModel","setDataSourcesSearchQuery","hasFetched","Contents","isLoading","query","mapDispatchToProps","setDataSourcesLayoutMode","hot","module","connect","state","getNavModel","navIndex","getDataSources","getDataSourcesLayoutMode","getDataSourcesCount","getDataSourcesSearchQuery"],"mappings":"mYAYe,MAAMA,UAAsBC,gBACzCC,SACE,MAAM,YAAEC,EAAF,WAAeC,EAAf,eAA2BC,EAA3B,OAA2CC,EAA3C,YAAmDC,EAAc,0BAA6BC,KAAKC,MACnGC,EAAY,CAAEC,KAAMP,aAAF,EAAEA,EAAYO,MAMtC,OAJIL,IACDI,EAAkBJ,OAASA,GAI5B,sBAAKM,UAAU,kBAAf,UACE,qBAAKA,UAAU,wBAAf,SACE,cAAC,IAAD,CAAaC,MAAOV,EAAaW,SAAUT,EAAgBE,YAAaA,MAEzEH,GAAc,cAAC,aAAD,KAAgBM,EAAhB,UAA4BN,EAAWW,e,wFCc/CC,IA3B2B,EAAGC,cAAaC,iBACxD,MAAMC,EAASC,oBAAUC,GAEzB,OACE,oBAAIT,UAAWO,EAAOG,KAAtB,SACGL,EAAYM,IAAI,CAACC,EAAYC,IAE1B,6BACE,eAAC,OAAD,CAAMC,QAASF,EAAWG,KAAMhB,KAAO,oBAAmBa,EAAWI,IAArE,UACE,cAAC,OAAKC,OAAN,UACE,qBAAKC,IAAKN,EAAWO,YAAaC,IAAKR,EAAWG,SAEpD,cAAC,OAAKM,KAAN,UACG,CACCT,EAAWU,SACXV,EAAWW,IACXX,EAAWY,YAAX,MAAwB,cAAC,MAAD,CAAuBT,KAAM,UAAWU,WAAY,GAA3C,wBAThCb,EAAWc,QAsB9B,MAAMjB,EAAY,KACT,CACLC,KAAMiB,KAAI;;qdCPd,MAAMC,EAAiB,CACrBzB,MAAO,0BACP0B,WAAY,WACZC,WAAY,kBACZC,YAAa,kBACbC,OAAQ,gEACRC,WAAY,8FACZC,gBAAiB,aACjBC,aAAc,UAGT,MAAMC,UAA4B/C,gBACvCgD,oBACEzC,KAAKC,MAAMyC,kBAGbhD,SACE,MAAM,YACJe,EADI,iBAEJkC,EAFI,SAGJC,EAHI,WAIJlC,EAJI,YAKJf,EALI,0BAMJkD,EANI,WAOJC,GACE9C,KAAKC,MAOT,OACE,cAAC,IAAD,CAAM2C,SAAUA,EAAhB,SACE,cAAC,IAAKG,SAAN,CAAeC,WAAYF,EAA3B,SACE,qCACGA,GAAmC,IAArBH,GAA0B,cAAC,IAAD,KAAkBX,IAC1Dc,GACCH,EAAmB,GAAK,CACtB,cAAC,IAAD,CACEhD,YAAaA,EACbE,eAAiBoD,GAAUJ,EAA0BI,GACrDrD,WAfK,CACjBO,KAAM,kBACNI,MAAO,oBAcS,cAEN,cAAC,IAAD,CAAiBE,YAAaA,EAAaC,WAAYA,GAAgB,iBAoBvF,MAAMwC,EAAqB,CACzBR,oBACAG,8BACAM,8BAGaC,wBAAIC,EAAJD,CAAYE,mBAjB3B,SAAyBC,GACvB,MAAO,CACLX,SAAUY,YAAYD,EAAME,SAAU,eACtChD,YAAaiD,YAAeH,EAAM9C,aAClCC,WAAYiD,YAAyBJ,EAAM9C,aAC3CkC,iBAAkBiB,YAAoBL,EAAM9C,aAC5Cd,YAAakE,YAA0BN,EAAM9C,aAC7CqC,WAAYS,EAAM9C,YAAYqC,cAUkBI,EAAzBI,CAA6Cd,K","file":"DataSourcesListPage.62c612232a976d8836f5.js","sourcesContent":["import React, { PureComponent } from 'react';\nimport { FilterInput } from '../FilterInput/FilterInput';\nimport { LinkButton } from '@grafana/ui';\n\nexport interface Props {\n  searchQuery: string;\n  setSearchQuery: (value: string) => void;\n  linkButton?: { href: string; title: string };\n  target?: string;\n  placeholder?: string;\n}\n\nexport default class PageActionBar extends PureComponent<Props> {\n  render() {\n    const { searchQuery, linkButton, setSearchQuery, target, placeholder = 'Search by name or type' } = this.props;\n    const linkProps = { href: linkButton?.href };\n\n    if (target) {\n      (linkProps as any).target = target;\n    }\n\n    return (\n      <div className=\"page-action-bar\">\n        <div className=\"gf-form gf-form--grow\">\n          <FilterInput value={searchQuery} onChange={setSearchQuery} placeholder={placeholder} />\n        </div>\n        {linkButton && <LinkButton {...linkProps}>{linkButton.title}</LinkButton>}\n      </div>\n    );\n  }\n}\n","// Libraries\nimport React, { FC } from 'react';\n\n// Types\nimport { DataSourceSettings, LayoutMode } from '@grafana/data';\nimport { Card, Tag, useStyles } from '@grafana/ui';\nimport { css } from '@emotion/css';\n\nexport interface Props {\n  dataSources: DataSourceSettings[];\n  layoutMode: LayoutMode;\n}\n\nexport const DataSourcesList: FC<Props> = ({ dataSources, layoutMode }) => {\n  const styles = useStyles(getStyles);\n\n  return (\n    <ul className={styles.list}>\n      {dataSources.map((dataSource, index) => {\n        return (\n          <li key={dataSource.id}>\n            <Card heading={dataSource.name} href={`datasources/edit/${dataSource.uid}`}>\n              <Card.Figure>\n                <img src={dataSource.typeLogoUrl} alt={dataSource.name} />\n              </Card.Figure>\n              <Card.Meta>\n                {[\n                  dataSource.typeName,\n                  dataSource.url,\n                  dataSource.isDefault && <Tag key=\"default-tag\" name={'default'} colorIndex={1} />,\n                ]}\n              </Card.Meta>\n            </Card>\n          </li>\n        );\n      })}\n    </ul>\n  );\n};\n\nexport default DataSourcesList;\n\nconst getStyles = () => {\n  return {\n    list: css`\n      list-style: none;\n    `,\n  };\n};\n","// Libraries\nimport React, { PureComponent } from 'react';\nimport { connect } from 'react-redux';\nimport { hot } from 'react-hot-loader';\n// Components\nimport Page from 'app/core/components/Page/Page';\nimport PageActionBar from 'app/core/components/PageActionBar/PageActionBar';\nimport EmptyListCTA from 'app/core/components/EmptyListCTA/EmptyListCTA';\nimport DataSourcesList from './DataSourcesList';\n// Types\nimport { DataSourceSettings, NavModel, LayoutMode } from '@grafana/data';\nimport { IconName } from '@grafana/ui';\nimport { StoreState } from 'app/types';\n// Actions\nimport { loadDataSources } from './state/actions';\nimport { getNavModel } from 'app/core/selectors/navModel';\n\nimport {\n  getDataSources,\n  getDataSourcesCount,\n  getDataSourcesLayoutMode,\n  getDataSourcesSearchQuery,\n} from './state/selectors';\nimport { setDataSourcesLayoutMode, setDataSourcesSearchQuery } from './state/reducers';\n\nexport interface Props {\n  navModel: NavModel;\n  dataSources: DataSourceSettings[];\n  dataSourcesCount: number;\n  layoutMode: LayoutMode;\n  searchQuery: string;\n  hasFetched: boolean;\n  loadDataSources: typeof loadDataSources;\n  setDataSourcesLayoutMode: typeof setDataSourcesLayoutMode;\n  setDataSourcesSearchQuery: typeof setDataSourcesSearchQuery;\n}\n\nconst emptyListModel = {\n  title: 'No data sources defined',\n  buttonIcon: 'database' as IconName,\n  buttonLink: 'datasources/new',\n  buttonTitle: 'Add data source',\n  proTip: 'You can also define data sources through configuration files.',\n  proTipLink: 'http://docs.grafana.org/administration/provisioning/#datasources?utm_source=grafana_ds_list',\n  proTipLinkTitle: 'Learn more',\n  proTipTarget: '_blank',\n};\n\nexport class DataSourcesListPage extends PureComponent<Props> {\n  componentDidMount() {\n    this.props.loadDataSources();\n  }\n\n  render() {\n    const {\n      dataSources,\n      dataSourcesCount,\n      navModel,\n      layoutMode,\n      searchQuery,\n      setDataSourcesSearchQuery,\n      hasFetched,\n    } = this.props;\n\n    const linkButton = {\n      href: 'datasources/new',\n      title: 'Add data source',\n    };\n\n    return (\n      <Page navModel={navModel}>\n        <Page.Contents isLoading={!hasFetched}>\n          <>\n            {hasFetched && dataSourcesCount === 0 && <EmptyListCTA {...emptyListModel} />}\n            {hasFetched &&\n              dataSourcesCount > 0 && [\n                <PageActionBar\n                  searchQuery={searchQuery}\n                  setSearchQuery={(query) => setDataSourcesSearchQuery(query)}\n                  linkButton={linkButton}\n                  key=\"action-bar\"\n                />,\n                <DataSourcesList dataSources={dataSources} layoutMode={layoutMode} key=\"list\" />,\n              ]}\n          </>\n        </Page.Contents>\n      </Page>\n    );\n  }\n}\n\nfunction mapStateToProps(state: StoreState) {\n  return {\n    navModel: getNavModel(state.navIndex, 'datasources'),\n    dataSources: getDataSources(state.dataSources),\n    layoutMode: getDataSourcesLayoutMode(state.dataSources),\n    dataSourcesCount: getDataSourcesCount(state.dataSources),\n    searchQuery: getDataSourcesSearchQuery(state.dataSources),\n    hasFetched: state.dataSources.hasFetched,\n  };\n}\n\nconst mapDispatchToProps = {\n  loadDataSources,\n  setDataSourcesSearchQuery,\n  setDataSourcesLayoutMode,\n};\n\nexport default hot(module)(connect(mapStateToProps, mapDispatchToProps)(DataSourcesListPage));\n"],"sourceRoot":""}
{"version":3,"sources":["webpack:///./public/app/features/org/NewOrgPage.tsx"],"names":["createOrg","async","result","getBackendSrv","post","newOrg","orgId","window","location","href","getConfig","appSubUrl","NewOrgPage","navModel","Contents","className","onSubmit","register","errors","label","invalid","name","error","message","placeholder","required","validate","get","encodeURI","orgName","status","isHandled","validateOrg","type","hot","module","connect","state","getNavModel","navIndex"],"mappings":"+dAWA,MAAMA,EAAYC,UAChB,MAAMC,QAAeC,0BAAgBC,KAAK,aAAcC,SAElDF,0BAAgBC,KAAK,mBAAqBF,EAAOI,OACvDC,OAAOC,SAASC,KAAOC,cAAYC,UAAY,QAwBpCC,EAAiC,EAAGC,cAE7C,cAAC,IAAD,CAAMA,SAAUA,EAAhB,SACE,eAAC,IAAKC,SAAN,iBACE,oBAAIC,UAAU,mBAAd,+BADF,MAGE,oBAAGA,UAAU,uBAAb,wRAGwD,QAGxD,cAAC,OAAD,CAAwBC,SAAUhB,EAAlC,SACG,EAAGiB,WAAUC,YAEV,qCACE,cAAC,QAAD,CAAOC,MAAM,oBAAoBC,UAAWF,EAAOG,KAAMC,MAAOJ,EAAOG,MAAQH,EAAOG,KAAKE,QAA3F,SACE,cAAC,QAAD,GACEC,YAAY,YACRP,EAAS,OAAQ,CACnBQ,SAAU,gCACVC,SAAUzB,cA1CZA,WAClB,UACQE,0BAAgBwB,IAAK,iBAAgBC,UAAUC,IACrD,MAAOP,GACP,OAAqB,MAAjBA,EAAMQ,QACRR,EAAMS,WAAY,GACX,GAEF,uBAET,MAAO,+BAgCgDC,CAAYH,SANvD,MAUE,cAAC,SAAD,CAAQI,KAAK,SAAb,+BAcDC,wBAAIC,EAAJD,CAAYE,kBAJFC,IAChB,CAAExB,SAAUyB,YAAYD,EAAME,SAAU,iBAGtBH,CAAyBxB,K","file":"NewOrgPage.807b3f41627421e0a149.js","sourcesContent":["import React, { FC } from 'react';\nimport { getBackendSrv } from '@grafana/runtime';\nimport Page from 'app/core/components/Page/Page';\nimport { Button, Input, Field, Form } from '@grafana/ui';\nimport { getConfig } from 'app/core/config';\nimport { StoreState } from 'app/types';\nimport { hot } from 'react-hot-loader';\nimport { connect } from 'react-redux';\nimport { NavModel } from '@grafana/data';\nimport { getNavModel } from '../../core/selectors/navModel';\n\nconst createOrg = async (newOrg: { name: string }) => {\n  const result = await getBackendSrv().post('/api/orgs/', newOrg);\n\n  await getBackendSrv().post('/api/user/using/' + result.orgId);\n  window.location.href = getConfig().appSubUrl + '/org';\n};\n\nconst validateOrg = async (orgName: string) => {\n  try {\n    await getBackendSrv().get(`api/orgs/name/${encodeURI(orgName)}`);\n  } catch (error) {\n    if (error.status === 404) {\n      error.isHandled = true;\n      return true;\n    }\n    return 'Something went wrong';\n  }\n  return 'Organization already exists';\n};\n\ninterface PropsWithState {\n  navModel: NavModel;\n}\n\ninterface CreateOrgFormDTO {\n  name: string;\n}\n\nexport const NewOrgPage: FC<PropsWithState> = ({ navModel }) => {\n  return (\n    <Page navModel={navModel}>\n      <Page.Contents>\n        <h3 className=\"page-sub-heading\">New organization</h3>\n\n        <p className=\"playlist-description\">\n          Each organization contains their own dashboards, data sources, and configuration, which cannot be shared\n          shared between organizations. While users might belong to more than one organization, multiple organizations\n          are most frequently used in multi-tenant deployments.{' '}\n        </p>\n\n        <Form<CreateOrgFormDTO> onSubmit={createOrg}>\n          {({ register, errors }) => {\n            return (\n              <>\n                <Field label=\"Organization name\" invalid={!!errors.name} error={errors.name && errors.name.message}>\n                  <Input\n                    placeholder=\"Org name\"\n                    {...register('name', {\n                      required: 'Organization name is required',\n                      validate: async (orgName) => await validateOrg(orgName),\n                    })}\n                  />\n                </Field>\n                <Button type=\"submit\">Create</Button>\n              </>\n            );\n          }}\n        </Form>\n      </Page.Contents>\n    </Page>\n  );\n};\n\nconst mapStateToProps = (state: StoreState) => {\n  return { navModel: getNavModel(state.navIndex, 'global-orgs') };\n};\n\nexport default hot(module)(connect(mapStateToProps)(NewOrgPage));\n"],"sourceRoot":""}
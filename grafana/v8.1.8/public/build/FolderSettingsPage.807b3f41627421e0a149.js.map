{"version":3,"sources":["webpack:///./public/app/features/folders/state/actions.ts","webpack:///./public/app/features/folders/FolderSettingsPage.tsx","webpack:///./public/app/features/folders/state/navModel.ts"],"names":["getFolderByUid","uid","async","folder","backendSrv","dispatch","loadFolder","updateNavIndex","buildNavModel","saveFolder","res","put","title","version","appEvents","emit","AppEvents","alertSuccess","locationService","push","url","deleteFolder","delete","getFolderPermissions","permissions","get","loadFolderPermissions","toUpdateItem","item","userId","teamId","role","permission","updateFolderPermission","itemToUpdate","level","getStore","itemsToUpdate","inherited","updated","post","items","removeFolderPermission","itemToDelete","addFolderPermission","newItem","createNewFolder","folderName","newFolder","getBackendSrv","locationUtil","stripBaseFromUrl","Input","LegacyForms","mapDispatchToProps","setFolderTitle","connector","connect","state","props","match","params","navModel","getNavModel","navIndex","getLoadingNav","folderUid","FolderSettingsPage","PureComponent","constructor","super","evt","this","target","value","preventDefault","stopPropagation","setState","isLoading","publish","ShowConfirmModalEvent","text","icon","yesText","onConfirm","componentDidMount","render","Contents","className","name","onSubmit","onSave","type","onChange","onTitleChange","disabled","canSave","hasChanged","variant","onClick","onDelete","model","id","subTitle","breadcrumbs","children","active","canAdmin","tabIndex","main","canEdit","node"],"mappings":"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","file":"FolderSettingsPage.807b3f41627421e0a149.js","sourcesContent":["import { AppEvents, locationUtil } from '@grafana/data';\nimport { getBackendSrv, locationService } from '@grafana/runtime';\nimport { backendSrv } from 'app/core/services/backend_srv';\nimport { FolderState, ThunkResult } from 'app/types';\nimport { DashboardAcl, DashboardAclUpdateDTO, NewDashboardAclItem, PermissionLevel } from 'app/types/acl';\nimport { updateNavIndex } from 'app/core/actions';\nimport { buildNavModel } from './navModel';\nimport appEvents from 'app/core/app_events';\nimport { loadFolder, loadFolderPermissions } from './reducers';\n\nexport function getFolderByUid(uid: string): ThunkResult<void> {\n  return async (dispatch) => {\n    const folder = await backendSrv.getFolderByUid(uid);\n    dispatch(loadFolder(folder));\n    dispatch(updateNavIndex(buildNavModel(folder)));\n  };\n}\n\nexport function saveFolder(folder: FolderState): ThunkResult<void> {\n  return async (dispatch) => {\n    const res = await backendSrv.put(`/api/folders/${folder.uid}`, {\n      title: folder.title,\n      version: folder.version,\n    });\n\n    // this should be redux action at some point\n    appEvents.emit(AppEvents.alertSuccess, ['Folder saved']);\n    locationService.push(`${res.url}/settings`);\n  };\n}\n\nexport function deleteFolder(uid: string): ThunkResult<void> {\n  return async (dispatch) => {\n    await backendSrv.delete(`/api/folders/${uid}?forceDeleteRules=true`);\n    locationService.push('/dashboards');\n  };\n}\n\nexport function getFolderPermissions(uid: string): ThunkResult<void> {\n  return async (dispatch) => {\n    const permissions = await backendSrv.get(`/api/folders/${uid}/permissions`);\n    dispatch(loadFolderPermissions(permissions));\n  };\n}\n\nfunction toUpdateItem(item: DashboardAcl): DashboardAclUpdateDTO {\n  return {\n    userId: item.userId,\n    teamId: item.teamId,\n    role: item.role,\n    permission: item.permission,\n  };\n}\n\nexport function updateFolderPermission(itemToUpdate: DashboardAcl, level: PermissionLevel): ThunkResult<void> {\n  return async (dispatch, getStore) => {\n    const folder = getStore().folder;\n    const itemsToUpdate = [];\n\n    for (const item of folder.permissions) {\n      if (item.inherited) {\n        continue;\n      }\n\n      const updated = toUpdateItem(item);\n\n      // if this is the item we want to update, update it's permission\n      if (itemToUpdate === item) {\n        updated.permission = level;\n      }\n\n      itemsToUpdate.push(updated);\n    }\n\n    await backendSrv.post(`/api/folders/${folder.uid}/permissions`, { items: itemsToUpdate });\n    await dispatch(getFolderPermissions(folder.uid));\n  };\n}\n\nexport function removeFolderPermission(itemToDelete: DashboardAcl): ThunkResult<void> {\n  return async (dispatch, getStore) => {\n    const folder = getStore().folder;\n    const itemsToUpdate = [];\n\n    for (const item of folder.permissions) {\n      if (item.inherited || item === itemToDelete) {\n        continue;\n      }\n      itemsToUpdate.push(toUpdateItem(item));\n    }\n\n    await backendSrv.post(`/api/folders/${folder.uid}/permissions`, { items: itemsToUpdate });\n    await dispatch(getFolderPermissions(folder.uid));\n  };\n}\n\nexport function addFolderPermission(newItem: NewDashboardAclItem): ThunkResult<void> {\n  return async (dispatch, getStore) => {\n    const folder = getStore().folder;\n    const itemsToUpdate = [];\n\n    for (const item of folder.permissions) {\n      if (item.inherited) {\n        continue;\n      }\n      itemsToUpdate.push(toUpdateItem(item));\n    }\n\n    itemsToUpdate.push({\n      userId: newItem.userId,\n      teamId: newItem.teamId,\n      role: newItem.role,\n      permission: newItem.permission,\n    });\n\n    await backendSrv.post(`/api/folders/${folder.uid}/permissions`, { items: itemsToUpdate });\n    await dispatch(getFolderPermissions(folder.uid));\n  };\n}\n\nexport function createNewFolder(folderName: string): ThunkResult<void> {\n  return async () => {\n    const newFolder = await getBackendSrv().post('/api/folders', { title: folderName });\n    appEvents.emit(AppEvents.alertSuccess, ['Folder Created', 'OK']);\n    locationService.push(locationUtil.stripBaseFromUrl(newFolder.url));\n  };\n}\n","import React, { PureComponent } from 'react';\nimport { connect, ConnectedProps } from 'react-redux';\nimport { Button, LegacyForms } from '@grafana/ui';\nconst { Input } = LegacyForms;\nimport Page from 'app/core/components/Page/Page';\nimport appEvents from 'app/core/app_events';\nimport { getNavModel } from 'app/core/selectors/navModel';\nimport { StoreState } from 'app/types';\nimport { deleteFolder, getFolderByUid, saveFolder } from './state/actions';\nimport { getLoadingNav } from './state/navModel';\nimport { setFolderTitle } from './state/reducers';\nimport { ShowConfirmModalEvent } from '../../types/events';\nimport { GrafanaRouteComponentProps } from 'app/core/navigation/types';\n\nexport interface OwnProps extends GrafanaRouteComponentProps<{ uid: string }> {}\n\nconst mapStateToProps = (state: StoreState, props: OwnProps) => {\n  const uid = props.match.params.uid;\n  return {\n    navModel: getNavModel(state.navIndex, `folder-settings-${uid}`, getLoadingNav(2)),\n    folderUid: uid,\n    folder: state.folder,\n  };\n};\n\nconst mapDispatchToProps = {\n  getFolderByUid,\n  saveFolder,\n  setFolderTitle,\n  deleteFolder,\n};\n\nconst connector = connect(mapStateToProps, mapDispatchToProps);\n\nexport type Props = OwnProps & ConnectedProps<typeof connector>;\n\nexport interface State {\n  isLoading: boolean;\n}\n\nexport class FolderSettingsPage extends PureComponent<Props, State> {\n  constructor(props: Props) {\n    super(props);\n    this.state = {\n      isLoading: false,\n    };\n  }\n\n  componentDidMount() {\n    this.props.getFolderByUid(this.props.folderUid);\n  }\n\n  onTitleChange = (evt: React.ChangeEvent<HTMLInputElement>) => {\n    this.props.setFolderTitle(evt.target.value);\n  };\n\n  onSave = async (evt: React.FormEvent<HTMLFormElement>) => {\n    evt.preventDefault();\n    evt.stopPropagation();\n    this.setState({ isLoading: true });\n    await this.props.saveFolder(this.props.folder);\n    this.setState({ isLoading: false });\n  };\n\n  onDelete = (evt: React.MouseEvent<HTMLButtonElement>) => {\n    evt.stopPropagation();\n    evt.preventDefault();\n\n    const confirmationText = `Do you want to delete this folder and all its dashboards and alerts?`;\n    appEvents.publish(\n      new ShowConfirmModalEvent({\n        title: 'Delete',\n        text: confirmationText,\n        icon: 'trash-alt',\n        yesText: 'Delete',\n        onConfirm: () => {\n          this.props.deleteFolder(this.props.folder.uid);\n        },\n      })\n    );\n  };\n\n  render() {\n    const { navModel, folder } = this.props;\n\n    return (\n      <Page navModel={navModel}>\n        <Page.Contents isLoading={this.state.isLoading}>\n          <h3 className=\"page-sub-heading\">Folder settings</h3>\n\n          <div className=\"section gf-form-group\">\n            <form name=\"folderSettingsForm\" onSubmit={this.onSave}>\n              <div className=\"gf-form\">\n                <label className=\"gf-form-label width-7\">Name</label>\n                <Input\n                  type=\"text\"\n                  className=\"gf-form-input width-30\"\n                  value={folder.title}\n                  onChange={this.onTitleChange}\n                />\n              </div>\n              <div className=\"gf-form-button-row\">\n                <Button type=\"submit\" disabled={!folder.canSave || !folder.hasChanged}>\n                  Save\n                </Button>\n                <Button variant=\"destructive\" onClick={this.onDelete} disabled={!folder.canSave}>\n                  Delete\n                </Button>\n              </div>\n            </form>\n          </div>\n        </Page.Contents>\n      </Page>\n    );\n  }\n}\n\nexport default connector(FolderSettingsPage);\n","import { NavModel, NavModelItem } from '@grafana/data';\n\nimport { FolderDTO } from 'app/types';\n\nexport function buildNavModel(folder: FolderDTO): NavModelItem {\n  const model = {\n    icon: 'folder',\n    id: 'manage-folder',\n    subTitle: 'Manage folder dashboards and permissions',\n    url: '',\n    text: folder.title,\n    breadcrumbs: [{ title: 'Dashboards', url: 'dashboards' }],\n    children: [\n      {\n        active: false,\n        icon: 'apps',\n        id: `folder-dashboards-${folder.uid}`,\n        text: 'Dashboards',\n        url: folder.url,\n      },\n    ],\n  };\n\n  model.children.push({\n    active: false,\n    icon: 'library-panel',\n    id: `folder-library-panels-${folder.uid}`,\n    text: 'Panels',\n    url: `${folder.url}/library-panels`,\n  });\n\n  if (folder.canAdmin) {\n    model.children.push({\n      active: false,\n      icon: 'lock',\n      id: `folder-permissions-${folder.uid}`,\n      text: 'Permissions',\n      url: `${folder.url}/permissions`,\n    });\n  }\n\n  if (folder.canSave) {\n    model.children.push({\n      active: false,\n      icon: 'cog',\n      id: `folder-settings-${folder.uid}`,\n      text: 'Settings',\n      url: `${folder.url}/settings`,\n    });\n  }\n\n  return model;\n}\n\nexport function getLoadingNav(tabIndex: number): NavModel {\n  const main = buildNavModel({\n    id: 1,\n    uid: 'loading',\n    title: 'Loading',\n    url: 'url',\n    canSave: true,\n    canEdit: true,\n    canAdmin: true,\n    version: 0,\n  });\n\n  main.children![tabIndex].active = true;\n\n  return {\n    main: main,\n    node: main.children![tabIndex],\n  };\n}\n"],"sourceRoot":""}
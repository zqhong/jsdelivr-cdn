{"version":3,"sources":["webpack:///./public/app/features/profile/api.ts","webpack:///./public/app/features/profile/state/actions.ts","webpack:///./public/app/features/profile/UserOrganizations.tsx","webpack:///./public/app/features/profile/UserProfileEditForm.tsx","webpack:///./public/app/features/profile/UserTeams.tsx","webpack:///./public/app/core/components/SharedPreferences/SharedPreferences.tsx","webpack:///./node_modules/react-use/esm/useMount.js","webpack:///./public/app/features/profile/UserSessions.tsx","webpack:///./public/app/features/profile/UserProfileEditPage.tsx"],"names":["api","changePassword","async","payload","getBackendSrv","put","err","console","error","revokeUserSession","tokenId","post","authTokenId","loadUser","get","loadSessions","loadOrgs","loadTeams","setUserOrg","org","orgId","updateUserProfile","dispatch","setUpdating","updating","initUserProfilePage","initLoadTeams","teams","teamsLoaded","initLoadOrgs","orgs","orgsLoaded","initLoadSessions","sessions","sessionsLoaded","user","userLoaded","userSessionRevoked","changeUserOrg","window","location","href","config","appSubUrl","UserOrganizations","PureComponent","render","isLoading","this","props","text","length","className","aria-label","map","index","name","role","variant","size","disabled","onClick","disableLoginForm","UserProfileEditForm","isSavingUser","updateProfile","onSubmit","data","validateOn","register","errors","label","invalid","required","id","placeholder","defaultValue","suffix","InputSuffix","email","login","content","UserTeams","team","src","avatarUrl","memberCount","themes","value","SharedPreferences","constructor","super","homeDashboardId","theme","timezone","state","service","update","reload","setState","dashboardId","dashboard","folderTitle","title","PreferencesService","resourceUri","dashboards","prefs","load","backendSrv","search","starred","find","d","missing","dashboardIds","push","tags","type","uid","uri","url","folderId","folderUid","folderUrl","isStarred","slug","items","styles","getStyles","onSubmitForm","options","item","onChange","onThemeChanged","labelText","menuShouldPortal","getOptionValue","i","getOptionLabel","getFullDashName","onHomeDashboardChanged","selectors","components","TimeZonePicker","container","includeInternal","onTimeZoneChanged","stylesFactory","css","fn","UserSessions","session","isActive","seenAt","createdAt","clientIp","browser","os","osVersion","mapDispatchToProps","connector","connect","userState","teamsAreLoading","orgsAreLoading","sessionsAreLoading","isUpdating","navModel","getNavModel","navIndex","UserProfileEditPage","useMount","Contents","spacing","hot","module"],"mappings":"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","file":"UserProfileEditPage.807b3f41627421e0a149.js","sourcesContent":["import { getBackendSrv } from '@grafana/runtime';\n\nimport { ChangePasswordFields, ProfileUpdateFields } from './types';\nimport { Team, UserDTO, UserOrg, UserSession } from '../../types';\n\nasync function changePassword(payload: ChangePasswordFields): Promise<void> {\n  try {\n    await getBackendSrv().put('/api/user/password', payload);\n  } catch (err) {\n    console.error(err);\n  }\n}\n\nfunction loadUser(): Promise<UserDTO> {\n  return getBackendSrv().get('/api/user');\n}\n\nfunction loadTeams(): Promise<Team[]> {\n  return getBackendSrv().get('/api/user/teams');\n}\n\nfunction loadOrgs(): Promise<UserOrg[]> {\n  return getBackendSrv().get('/api/user/orgs');\n}\n\nfunction loadSessions(): Promise<UserSession[]> {\n  return getBackendSrv().get('/api/user/auth-tokens');\n}\n\nasync function revokeUserSession(tokenId: number): Promise<void> {\n  await getBackendSrv().post('/api/user/revoke-auth-token', {\n    authTokenId: tokenId,\n  });\n}\n\nasync function setUserOrg(org: UserOrg): Promise<void> {\n  await getBackendSrv().post('/api/user/using/' + org.orgId, {});\n}\n\nasync function updateUserProfile(payload: ProfileUpdateFields): Promise<void> {\n  try {\n    await getBackendSrv().put('/api/user', payload);\n  } catch (err) {\n    console.error(err);\n  }\n}\n\nexport const api = {\n  changePassword,\n  revokeUserSession,\n  loadUser,\n  loadSessions,\n  loadOrgs,\n  loadTeams,\n  setUserOrg,\n  updateUserProfile,\n};\n","import { config } from '@grafana/runtime';\n\nimport { ChangePasswordFields, ProfileUpdateFields } from '../types';\nimport { ThunkResult, UserOrg } from '../../../types';\nimport {\n  initLoadOrgs,\n  initLoadSessions,\n  initLoadTeams,\n  orgsLoaded,\n  sessionsLoaded,\n  setUpdating,\n  teamsLoaded,\n  userLoaded,\n  userSessionRevoked,\n} from './reducers';\nimport { api } from '../api';\n\nexport function changePassword(payload: ChangePasswordFields): ThunkResult<void> {\n  return async function (dispatch) {\n    dispatch(setUpdating({ updating: true }));\n    await api.changePassword(payload);\n    dispatch(setUpdating({ updating: false }));\n  };\n}\n\nexport function initUserProfilePage(): ThunkResult<void> {\n  return async function (dispatch) {\n    await dispatch(loadUser());\n    dispatch(loadTeams());\n    dispatch(loadOrgs());\n    dispatch(loadSessions());\n  };\n}\n\nexport function loadUser(): ThunkResult<void> {\n  return async function (dispatch) {\n    const user = await api.loadUser();\n    dispatch(userLoaded({ user }));\n  };\n}\n\nfunction loadTeams(): ThunkResult<void> {\n  return async function (dispatch) {\n    dispatch(initLoadTeams());\n    const teams = await api.loadTeams();\n    dispatch(teamsLoaded({ teams }));\n  };\n}\n\nfunction loadOrgs(): ThunkResult<void> {\n  return async function (dispatch) {\n    dispatch(initLoadOrgs());\n    const orgs = await api.loadOrgs();\n    dispatch(orgsLoaded({ orgs }));\n  };\n}\n\nfunction loadSessions(): ThunkResult<void> {\n  return async function (dispatch) {\n    dispatch(initLoadSessions());\n    const sessions = await api.loadSessions();\n    dispatch(sessionsLoaded({ sessions }));\n  };\n}\n\nexport function revokeUserSession(tokenId: number): ThunkResult<void> {\n  return async function (dispatch) {\n    dispatch(setUpdating({ updating: true }));\n    await api.revokeUserSession(tokenId);\n    dispatch(userSessionRevoked({ tokenId }));\n  };\n}\n\nexport function changeUserOrg(org: UserOrg): ThunkResult<void> {\n  return async function (dispatch) {\n    dispatch(setUpdating({ updating: true }));\n    await api.setUserOrg(org);\n    window.location.href = config.appSubUrl + '/profile';\n  };\n}\n\nexport function updateUserProfile(payload: ProfileUpdateFields): ThunkResult<void> {\n  return async function (dispatch) {\n    dispatch(setUpdating({ updating: true }));\n    await api.updateUserProfile(payload);\n    await dispatch(loadUser());\n    dispatch(setUpdating({ updating: false }));\n  };\n}\n","import React, { PureComponent } from 'react';\nimport { UserDTO, UserOrg } from 'app/types';\nimport { Button, LoadingPlaceholder } from '@grafana/ui';\n\nexport interface Props {\n  user: UserDTO | null;\n  orgs: UserOrg[];\n  isLoading: boolean;\n  setUserOrg: (org: UserOrg) => void;\n}\n\nexport class UserOrganizations extends PureComponent<Props> {\n  render() {\n    const { isLoading, orgs, user } = this.props;\n\n    if (isLoading) {\n      return <LoadingPlaceholder text=\"Loading organizations...\" />;\n    }\n\n    if (orgs.length === 0) {\n      return null;\n    }\n\n    return (\n      <div>\n        <h3 className=\"page-sub-heading\">Organizations</h3>\n        <div className=\"gf-form-group\">\n          <table className=\"filter-table form-inline\" aria-label=\"User organizations table\">\n            <thead>\n              <tr>\n                <th>Name</th>\n                <th>Role</th>\n                <th />\n              </tr>\n            </thead>\n            <tbody>\n              {orgs.map((org: UserOrg, index) => {\n                return (\n                  <tr key={index}>\n                    <td>{org.name}</td>\n                    <td>{org.role}</td>\n                    <td className=\"text-right\">\n                      {org.orgId === user?.orgId ? (\n                        <Button variant=\"secondary\" size=\"sm\" disabled>\n                          Current\n                        </Button>\n                      ) : (\n                        <Button\n                          variant=\"secondary\"\n                          size=\"sm\"\n                          onClick={() => {\n                            this.props.setUserOrg(org);\n                          }}\n                        >\n                          Select\n                        </Button>\n                      )}\n                    </td>\n                  </tr>\n                );\n              })}\n            </tbody>\n          </table>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default UserOrganizations;\n","import React, { FC } from 'react';\nimport { Button, Field, FieldSet, Form, Icon, Input, Tooltip } from '@grafana/ui';\nimport { UserDTO } from 'app/types';\nimport config from 'app/core/config';\nimport { ProfileUpdateFields } from './types';\n\nexport interface Props {\n  user: UserDTO | null;\n  isSavingUser: boolean;\n  updateProfile: (payload: ProfileUpdateFields) => void;\n}\n\nconst { disableLoginForm } = config;\n\nexport const UserProfileEditForm: FC<Props> = ({ user, isSavingUser, updateProfile }) => {\n  const onSubmitProfileUpdate = (data: ProfileUpdateFields) => {\n    updateProfile(data);\n  };\n\n  return (\n    <Form onSubmit={onSubmitProfileUpdate} validateOn=\"onBlur\">\n      {({ register, errors }) => {\n        return (\n          <FieldSet label=\"Edit profile\">\n            <Field label=\"Name\" invalid={!!errors.name} error=\"Name is required\" disabled={disableLoginForm}>\n              <Input\n                {...register('name', { required: true })}\n                id=\"edit-user-profile-name\"\n                placeholder=\"Name\"\n                defaultValue={user?.name ?? ''}\n                suffix={<InputSuffix />}\n              />\n            </Field>\n            <Field label=\"Email\" invalid={!!errors.email} error=\"Email is required\" disabled={disableLoginForm}>\n              <Input\n                {...register('email', { required: true })}\n                id=\"edit-user-profile-email\"\n                placeholder=\"Email\"\n                defaultValue={user?.email ?? ''}\n                suffix={<InputSuffix />}\n              />\n            </Field>\n            <Field label=\"Username\" disabled={disableLoginForm}>\n              <Input\n                {...register('login')}\n                id=\"edit-user-profile-username\"\n                defaultValue={user?.login ?? ''}\n                placeholder=\"Username\"\n                suffix={<InputSuffix />}\n              />\n            </Field>\n            <div className=\"gf-form-button-row\">\n              <Button variant=\"primary\" disabled={isSavingUser} aria-label=\"Edit user profile save button\">\n                Save\n              </Button>\n            </div>\n          </FieldSet>\n        );\n      }}\n    </Form>\n  );\n};\n\nexport default UserProfileEditForm;\n\nconst InputSuffix: FC = () => {\n  return disableLoginForm ? (\n    <Tooltip content=\"Login details locked because they are managed in another system.\">\n      <Icon name=\"lock\" />\n    </Tooltip>\n  ) : null;\n};\n","import React, { PureComponent } from 'react';\nimport { Team } from 'app/types';\nimport { LoadingPlaceholder } from '@grafana/ui';\n\nexport interface Props {\n  teams: Team[];\n  isLoading: boolean;\n}\n\nexport class UserTeams extends PureComponent<Props> {\n  render() {\n    const { isLoading, teams } = this.props;\n\n    if (isLoading) {\n      return <LoadingPlaceholder text=\"Loading teams...\" />;\n    }\n\n    if (teams.length === 0) {\n      return null;\n    }\n\n    return (\n      <div>\n        <h3 className=\"page-sub-heading\">Teams</h3>\n        <div className=\"gf-form-group\">\n          <table className=\"filter-table form-inline\" aria-label=\"User teams table\">\n            <thead>\n              <tr>\n                <th />\n                <th>Name</th>\n                <th>Email</th>\n                <th>Members</th>\n              </tr>\n            </thead>\n            <tbody>\n              {teams.map((team: Team, index) => {\n                return (\n                  <tr key={index}>\n                    <td className=\"width-4 text-center\">\n                      <img className=\"filter-table__avatar\" src={team.avatarUrl} />\n                    </td>\n                    <td>{team.name}</td>\n                    <td>{team.email}</td>\n                    <td>{team.memberCount}</td>\n                  </tr>\n                );\n              })}\n            </tbody>\n          </table>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default UserTeams;\n","import React, { PureComponent } from 'react';\nimport { css } from '@emotion/css';\n\nimport {\n  Button,\n  Field,\n  FieldSet,\n  Form,\n  Icon,\n  Label,\n  RadioButtonGroup,\n  Select,\n  stylesFactory,\n  TimeZonePicker,\n  Tooltip,\n} from '@grafana/ui';\nimport { SelectableValue } from '@grafana/data';\nimport { selectors } from '@grafana/e2e-selectors';\n\nimport { DashboardSearchHit, DashboardSearchItemType } from 'app/features/search/types';\nimport { backendSrv } from 'app/core/services/backend_srv';\nimport { PreferencesService } from 'app/core/services/PreferencesService';\n\nexport interface Props {\n  resourceUri: string;\n}\n\nexport interface State {\n  homeDashboardId: number;\n  theme: string;\n  timezone: string;\n  dashboards: DashboardSearchHit[];\n}\n\nconst themes: SelectableValue[] = [\n  { value: '', label: 'Default' },\n  { value: 'dark', label: 'Dark' },\n  { value: 'light', label: 'Light' },\n];\n\nexport class SharedPreferences extends PureComponent<Props, State> {\n  service: PreferencesService;\n\n  constructor(props: Props) {\n    super(props);\n\n    this.service = new PreferencesService(props.resourceUri);\n    this.state = {\n      homeDashboardId: 0,\n      theme: '',\n      timezone: '',\n      dashboards: [],\n    };\n  }\n\n  async componentDidMount() {\n    const prefs = await this.service.load();\n    const dashboards = await backendSrv.search({ starred: true });\n    const defaultDashboardHit: DashboardSearchHit = {\n      id: 0,\n      title: 'Default',\n      tags: [],\n      type: '' as DashboardSearchItemType,\n      uid: '',\n      uri: '',\n      url: '',\n      folderId: 0,\n      folderTitle: '',\n      folderUid: '',\n      folderUrl: '',\n      isStarred: false,\n      slug: '',\n      items: [],\n    };\n\n    if (prefs.homeDashboardId > 0 && !dashboards.find((d) => d.id === prefs.homeDashboardId)) {\n      const missing = await backendSrv.search({ dashboardIds: [prefs.homeDashboardId] });\n      if (missing && missing.length > 0) {\n        dashboards.push(missing[0]);\n      }\n    }\n\n    this.setState({\n      homeDashboardId: prefs.homeDashboardId,\n      theme: prefs.theme,\n      timezone: prefs.timezone,\n      dashboards: [defaultDashboardHit, ...dashboards],\n    });\n  }\n\n  onSubmitForm = async () => {\n    const { homeDashboardId, theme, timezone } = this.state;\n    await this.service.update({ homeDashboardId, theme, timezone });\n    window.location.reload();\n  };\n\n  onThemeChanged = (value: string) => {\n    this.setState({ theme: value });\n  };\n\n  onTimeZoneChanged = (timezone?: string) => {\n    if (!timezone) {\n      return;\n    }\n    this.setState({ timezone: timezone });\n  };\n\n  onHomeDashboardChanged = (dashboardId: number) => {\n    this.setState({ homeDashboardId: dashboardId });\n  };\n\n  getFullDashName = (dashboard: SelectableValue<DashboardSearchHit>) => {\n    if (typeof dashboard.folderTitle === 'undefined' || dashboard.folderTitle === '') {\n      return dashboard.title;\n    }\n    return dashboard.folderTitle + ' / ' + dashboard.title;\n  };\n\n  render() {\n    const { theme, timezone, homeDashboardId, dashboards } = this.state;\n    const styles = getStyles();\n\n    return (\n      <Form onSubmit={this.onSubmitForm}>\n        {() => {\n          return (\n            <FieldSet label=\"Preferences\">\n              <Field label=\"UI Theme\">\n                <RadioButtonGroup\n                  options={themes}\n                  value={themes.find((item) => item.value === theme)?.value}\n                  onChange={this.onThemeChanged}\n                />\n              </Field>\n\n              <Field\n                label={\n                  <Label>\n                    <span className={styles.labelText}>Home Dashboard</span>\n                    <Tooltip content=\"Not finding dashboard you want? Star it first, then it should appear in this select box.\">\n                      <Icon name=\"info-circle\" />\n                    </Tooltip>\n                  </Label>\n                }\n                aria-label=\"User preferences home dashboard drop down\"\n              >\n                <Select\n                  menuShouldPortal\n                  value={dashboards.find((dashboard) => dashboard.id === homeDashboardId)}\n                  getOptionValue={(i) => i.id}\n                  getOptionLabel={this.getFullDashName}\n                  onChange={(dashboard: SelectableValue<DashboardSearchHit>) =>\n                    this.onHomeDashboardChanged(dashboard.id)\n                  }\n                  options={dashboards}\n                  placeholder=\"Choose default dashboard\"\n                />\n              </Field>\n\n              <Field label=\"Timezone\" aria-label={selectors.components.TimeZonePicker.container}>\n                <TimeZonePicker includeInternal={true} value={timezone} onChange={this.onTimeZoneChanged} />\n              </Field>\n              <div className=\"gf-form-button-row\">\n                <Button variant=\"primary\" aria-label=\"User preferences save button\">\n                  Save\n                </Button>\n              </div>\n            </FieldSet>\n          );\n        }}\n      </Form>\n    );\n  }\n}\n\nexport default SharedPreferences;\n\nconst getStyles = stylesFactory(() => {\n  return {\n    labelText: css`\n      margin-right: 6px;\n    `,\n  };\n});\n","import useEffectOnce from './useEffectOnce';\nvar useMount = function (fn) {\n    useEffectOnce(function () {\n        fn();\n    });\n};\nexport default useMount;\n","import React, { PureComponent } from 'react';\nimport { UserSession } from 'app/types';\nimport { Button, Icon, LoadingPlaceholder } from '@grafana/ui';\n\nexport interface Props {\n  sessions: UserSession[];\n  isLoading: boolean;\n  revokeUserSession: (tokenId: number) => void;\n}\n\nexport class UserSessions extends PureComponent<Props> {\n  render() {\n    const { isLoading, sessions, revokeUserSession } = this.props;\n\n    if (isLoading) {\n      return <LoadingPlaceholder text=\"Loading sessions...\" />;\n    }\n\n    return (\n      <div>\n        {sessions.length > 0 && (\n          <>\n            <h3 className=\"page-sub-heading\">Sessions</h3>\n            <div className=\"gf-form-group\">\n              <table className=\"filter-table form-inline\" aria-label=\"User sessions table\">\n                <thead>\n                  <tr>\n                    <th>Last seen</th>\n                    <th>Logged on</th>\n                    <th>IP address</th>\n                    <th>Browser &amp; OS</th>\n                    <th></th>\n                  </tr>\n                </thead>\n                <tbody>\n                  {sessions.map((session: UserSession, index) => (\n                    <tr key={index}>\n                      {session.isActive ? <td>Now</td> : <td>{session.seenAt}</td>}\n                      <td>{session.createdAt}</td>\n                      <td>{session.clientIp}</td>\n                      <td>\n                        {session.browser} on {session.os} {session.osVersion}\n                      </td>\n                      <td>\n                        <Button size=\"sm\" variant=\"destructive\" onClick={() => revokeUserSession(session.id)}>\n                          <Icon name=\"power\" />\n                        </Button>\n                      </td>\n                    </tr>\n                  ))}\n                </tbody>\n              </table>\n            </div>\n          </>\n        )}\n      </div>\n    );\n  }\n}\n\nexport default UserSessions;\n","import React from 'react';\nimport { connect, ConnectedProps } from 'react-redux';\nimport { useMount } from 'react-use';\nimport { hot } from 'react-hot-loader';\nimport { NavModel } from '@grafana/data';\nimport { VerticalGroup } from '@grafana/ui';\n\nimport { getNavModel } from 'app/core/selectors/navModel';\nimport { StoreState } from 'app/types';\nimport Page from 'app/core/components/Page/Page';\nimport { changeUserOrg, initUserProfilePage, revokeUserSession, updateUserProfile } from './state/actions';\nimport UserProfileEditForm from './UserProfileEditForm';\nimport SharedPreferences from 'app/core/components/SharedPreferences/SharedPreferences';\nimport { UserTeams } from './UserTeams';\nimport UserOrganizations from './UserOrganizations';\nimport UserSessions from './UserSessions';\n\nexport interface OwnProps {\n  navModel: NavModel;\n}\n\nfunction mapStateToProps(state: StoreState) {\n  const userState = state.user;\n  const { user, teams, orgs, sessions, teamsAreLoading, orgsAreLoading, sessionsAreLoading, isUpdating } = userState;\n  return {\n    navModel: getNavModel(state.navIndex, 'profile-settings'),\n    orgsAreLoading,\n    sessionsAreLoading,\n    teamsAreLoading,\n    orgs,\n    sessions,\n    teams,\n    isUpdating,\n    user,\n  };\n}\n\nconst mapDispatchToProps = {\n  initUserProfilePage,\n  revokeUserSession,\n  changeUserOrg,\n  updateUserProfile,\n};\n\nconst connector = connect(mapStateToProps, mapDispatchToProps);\n\nexport type Props = OwnProps & ConnectedProps<typeof connector>;\n\nexport function UserProfileEditPage({\n  navModel,\n  orgsAreLoading,\n  sessionsAreLoading,\n  teamsAreLoading,\n  initUserProfilePage,\n  orgs,\n  sessions,\n  teams,\n  isUpdating,\n  user,\n  revokeUserSession,\n  changeUserOrg,\n  updateUserProfile,\n}: Props) {\n  useMount(() => initUserProfilePage());\n\n  return (\n    <Page navModel={navModel}>\n      <Page.Contents isLoading={!user}>\n        <VerticalGroup spacing=\"md\">\n          <UserProfileEditForm updateProfile={updateUserProfile} isSavingUser={isUpdating} user={user} />\n          <SharedPreferences resourceUri=\"user\" />\n          <UserTeams isLoading={teamsAreLoading} teams={teams} />\n          <UserOrganizations isLoading={orgsAreLoading} setUserOrg={changeUserOrg} orgs={orgs} user={user} />\n          <UserSessions isLoading={sessionsAreLoading} revokeUserSession={revokeUserSession} sessions={sessions} />\n        </VerticalGroup>\n      </Page.Contents>\n    </Page>\n  );\n}\n\nexport default hot(module)(connector(UserProfileEditPage));\n"],"sourceRoot":""}
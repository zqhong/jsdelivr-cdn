{"version":3,"sources":["webpack:///./public/app/features/datasources/utils/passwordHandlers.ts","webpack:///./public/app/core/components/sql_part/sql_part.ts","webpack:///./public/app/plugins/datasource/mysql/mysql_query_model.ts","webpack:///./public/app/plugins/datasource/mysql/response_parser.ts","webpack:///./public/app/plugins/datasource/mysql/datasource.ts","webpack:///./public/app/plugins/datasource/mysql/meta_query.ts","webpack:///./public/app/plugins/datasource/mysql/sql_part.ts","webpack:///./public/app/plugins/datasource/mysql/query_ctrl.ts","webpack:///./public/app/plugins/datasource/mysql/module.ts"],"names":["PasswordFieldEnum","createResetHandler","ctrl","field","event","preventDefault","current","undefined","secureJsonFields","secureJsonData","createChangeHandler","currentTarget","value","SqlPartDef","constructor","options","this","type","label","toUpperCase","substring","style","wrapOpen","wrapClose","separator","params","defaultParams","SqlPart","part","def","message","datatype","name","clone","updateParam","strValue","index","optional","splice","MySQLQueryModel","target","templateSrv","scopedVars","format","timeColumn","metricColumn","group","where","select","rawQuery","interpolateQueryStr","bind","unquoteIdentifier","length","replace","quoteIdentifier","quoteLiteral","escapeLiteral","String","hasTimeGroup","find","g","hasMetricColumn","variable","defaultFormatFn","multi","includeAll","map","join","render","interpolate","rawSql","buildQuery","hasUnixEpochTimecolumn","indexOf","timeColumnType","buildTimeColumn","alias","timeGroup","query","macro","args","buildMetricColumn","buildValueColumns","column","buildValueColumn","aggregate","buildWhereClause","conditions","tag","buildGroupClause","groupSection","i","table","ResponseParser","transformMetricFindResponse","raw","frames","toDataQueryResponse","data","frame","values","textField","fields","f","valueField","push","text","get","flatMap","toArray","v","Array","from","Set","timeField","Error","timeEndField","tagsField","list","timeEnd","Math","floor","annotation","time","tags","trim","split","MysqlDatasource","DataSourceWithBackend","instanceSettings","getTemplateSrv","timeSrv","getTimeSrv","super","queryModel","_map","id","responseParser","settingsData","jsonData","interval","timeInterval","interpolateVariablesInQueries","queries","expandedQueries","datasource","interpolateVariable","filterQuery","hide","applyTemplateVariables","refId","datasourceId","Promise","reject","getBackendSrv","fetch","url","method","range","valueOf","toString","to","requestId","pipe","async","transformAnnotationResponse","res","toPromise","metricFindQuery","optionalOptions","getSearchFilterScopedVar","wildcardChar","interpolatedQuery","timeRange","rsp","testDatasource","intervalMs","maxDataPoints","mapTo","status","catchError","err","of","toTestingStatus","targetContainsTemplate","variableExists","MysqlMetaQuery","getOperators","quoteIdentAsLiteral","findMetricTable","buildTableConstraint","includes","parts","buildTableQuery","buildColumnQuery","buildValueQuery","buildDatatypeQuery","register","dynamicLookup","quote","create","MysqlQueryCtrl","QueryCtrl","$scope","$injector","uiSegmentSrv","panel","metaBuilder","updateProjection","formats","panelCtrl","then","result","segment","newSegment","tableSegment","html","timeColumnSegment","updateRawSqlAndRefresh","fake","metricColumnSegment","buildSelectMenu","whereAdd","newPlusButton","groupAdd","events","on","PanelEvents","dataReceived","onDataReceived","dataError","onDataError","refresh","selectParts","sqlPart","filter","n","whereParts","groupParts","updatePersistedParts","selectMenu","submenu","toggleEditorMode","appEvents","publish","ShowConfirmModalEvent","title","text2","icon","yesText","onConfirm","$evalAsync","resetPlusButton","button","plusButton","getTableSegments","transformToSegments","catch","handleQueryError","tableChanged","task1","r","timeColumnChanged","task2","all","getTimeColumnSegments","partModel","getMetricColumnSegments","addNone","metricColumnChanged","dataList","lastQueryError","lastQueryMeta","meta","results","queryRes","error","config","segments","expandable","addTemplateVars","getVariables","templateQuoter","unshift","findAggregateIndex","findIndex","p","findWindowIndex","addSelectPart","item","subItem","partType","addAlias","addGroup","aggIndex","windowIndex","removeSelectPart","modelsIndex","partIndex","handleSelectPartEvent","evt","resolve","handleGroupPartEvent","removeGroup","some","s","handleWherePartEvent","param","newOperators","d","getWhereOptions","addWhereAction","getGroupOptions","addGroupAction","MysqlConfigCtrl","onPasswordReset","Password","onPasswordChange","MysqlAnnotationsQueryCtrl","plugin","DataSourcePlugin","setQueryCtrl","setConfigCtrl","setAnnotationQueryCtrl"],"mappings":"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","file":"mysqlPlugin.807b3f41627421e0a149.js","sourcesContent":["/**\n * Set of handlers for secure password field in Angular components. They handle backward compatibility with\n * passwords stored in plain text fields.\n */\n\nimport { SyntheticEvent } from 'react';\n\nexport enum PasswordFieldEnum {\n  Password = 'password',\n  BasicAuthPassword = 'basicAuthPassword',\n}\n\n/**\n * Basic shape for settings controllers in at the moment mostly angular data source plugins.\n */\nexport type Ctrl = {\n  current: {\n    secureJsonFields: {\n      [key: string]: boolean;\n    };\n    secureJsonData?: {\n      [key: string]: string;\n    };\n    password?: string;\n    basicAuthPassword?: string;\n  };\n};\n\nexport const createResetHandler = (ctrl: Ctrl, field: PasswordFieldEnum) => (\n  event: SyntheticEvent<HTMLInputElement>\n) => {\n  event.preventDefault();\n  // Reset also normal plain text password to remove it and only save it in secureJsonData.\n  ctrl.current[field] = undefined;\n  ctrl.current.secureJsonFields[field] = false;\n  ctrl.current.secureJsonData = ctrl.current.secureJsonData || {};\n  ctrl.current.secureJsonData[field] = '';\n};\n\nexport const createChangeHandler = (ctrl: any, field: PasswordFieldEnum) => (\n  event: SyntheticEvent<HTMLInputElement>\n) => {\n  ctrl.current.secureJsonData = ctrl.current.secureJsonData || {};\n  ctrl.current.secureJsonData[field] = event.currentTarget.value;\n};\n","import { clone } from 'lodash';\n\nexport class SqlPartDef {\n  type: string;\n  style: string;\n  label: string;\n  params: any[];\n  defaultParams: any[];\n  wrapOpen: string;\n  wrapClose: string;\n  separator: string;\n\n  constructor(options: any) {\n    this.type = options.type;\n    if (options.label) {\n      this.label = options.label;\n    } else {\n      this.label = this.type[0].toUpperCase() + this.type.substring(1) + ':';\n    }\n    this.style = options.style;\n    if (this.style === 'function') {\n      this.wrapOpen = '(';\n      this.wrapClose = ')';\n      this.separator = ', ';\n    } else {\n      this.wrapOpen = ' ';\n      this.wrapClose = ' ';\n      this.separator = ' ';\n    }\n    this.params = options.params;\n    this.defaultParams = options.defaultParams;\n  }\n}\n\nexport class SqlPart {\n  part: any;\n  def: SqlPartDef;\n  params: any[];\n  label: string;\n  name: string;\n  datatype: string;\n\n  constructor(part: any, def: any) {\n    this.part = part;\n    this.def = def;\n    if (!this.def) {\n      throw { message: 'Could not find sql part ' + part.type };\n    }\n\n    this.datatype = part.datatype;\n\n    if (part.name) {\n      this.name = part.name;\n      this.label = def.label + ' ' + part.name;\n    } else {\n      this.name = '';\n      this.label = def.label;\n    }\n\n    part.params = part.params || clone(this.def.defaultParams);\n    this.params = part.params;\n  }\n\n  updateParam(strValue: string, index: number) {\n    // handle optional parameters\n    if (strValue === '' && this.def.params[index].optional) {\n      this.params.splice(index, 1);\n    } else {\n      this.params[index] = strValue;\n    }\n\n    this.part.params = this.params;\n  }\n}\n","import { find, map } from 'lodash';\nimport { TemplateSrv } from '@grafana/runtime';\nimport { ScopedVars } from '@grafana/data';\n\nexport default class MySQLQueryModel {\n  target: any;\n  templateSrv: any;\n  scopedVars: any;\n\n  /** @ngInject */\n  constructor(target: any, templateSrv?: TemplateSrv, scopedVars?: ScopedVars) {\n    this.target = target;\n    this.templateSrv = templateSrv;\n    this.scopedVars = scopedVars;\n\n    target.format = target.format || 'time_series';\n    target.timeColumn = target.timeColumn || 'time';\n    target.metricColumn = target.metricColumn || 'none';\n\n    target.group = target.group || [];\n    target.where = target.where || [{ type: 'macro', name: '$__timeFilter', params: [] }];\n    target.select = target.select || [[{ type: 'column', params: ['value'] }]];\n\n    // handle pre query gui panels gracefully\n    if (!('rawQuery' in this.target)) {\n      if ('rawSql' in target) {\n        // pre query gui panel\n        target.rawQuery = true;\n      } else {\n        // new panel\n        target.rawQuery = false;\n      }\n    }\n\n    // give interpolateQueryStr access to this\n    this.interpolateQueryStr = this.interpolateQueryStr.bind(this);\n  }\n\n  // remove identifier quoting from identifier to use in metadata queries\n  unquoteIdentifier(value: string) {\n    if (value[0] === '\"' && value[value.length - 1] === '\"') {\n      return value.substring(1, value.length - 1).replace(/\"\"/g, '\"');\n    } else {\n      return value;\n    }\n  }\n\n  quoteIdentifier(value: string) {\n    return '\"' + value.replace(/\"/g, '\"\"') + '\"';\n  }\n\n  quoteLiteral(value: string) {\n    return \"'\" + value.replace(/'/g, \"''\") + \"'\";\n  }\n\n  escapeLiteral(value: any) {\n    return String(value).replace(/'/g, \"''\");\n  }\n\n  hasTimeGroup() {\n    return find(this.target.group, (g: any) => g.type === 'time');\n  }\n\n  hasMetricColumn() {\n    return this.target.metricColumn !== 'none';\n  }\n\n  interpolateQueryStr(value: string, variable: { multi: any; includeAll: any }, defaultFormatFn: any) {\n    // if no multi or include all do not regexEscape\n    if (!variable.multi && !variable.includeAll) {\n      return this.escapeLiteral(value);\n    }\n\n    if (typeof value === 'string') {\n      return this.quoteLiteral(value);\n    }\n\n    const escapedValues = map(value, this.quoteLiteral);\n    return escapedValues.join(',');\n  }\n\n  render(interpolate?: boolean) {\n    const target = this.target;\n\n    // new query with no table set yet\n    if (!this.target.rawQuery && !('table' in this.target)) {\n      return '';\n    }\n\n    if (!target.rawQuery) {\n      target.rawSql = this.buildQuery();\n    }\n\n    if (interpolate) {\n      return this.templateSrv.replace(target.rawSql, this.scopedVars, this.interpolateQueryStr);\n    } else {\n      return target.rawSql;\n    }\n  }\n\n  hasUnixEpochTimecolumn() {\n    return ['int', 'bigint', 'double'].indexOf(this.target.timeColumnType) > -1;\n  }\n\n  buildTimeColumn(alias = true) {\n    const timeGroup = this.hasTimeGroup();\n    let query;\n    let macro = '$__timeGroup';\n\n    if (timeGroup) {\n      let args;\n      if (timeGroup.params.length > 1 && timeGroup.params[1] !== 'none') {\n        args = timeGroup.params.join(',');\n      } else {\n        args = timeGroup.params[0];\n      }\n      if (this.hasUnixEpochTimecolumn()) {\n        macro = '$__unixEpochGroup';\n      }\n      if (alias) {\n        macro += 'Alias';\n      }\n      query = macro + '(' + this.target.timeColumn + ',' + args + ')';\n    } else {\n      query = this.target.timeColumn;\n      if (alias) {\n        query += ' AS \"time\"';\n      }\n    }\n\n    return query;\n  }\n\n  buildMetricColumn() {\n    if (this.hasMetricColumn()) {\n      return this.target.metricColumn + ' AS metric';\n    }\n\n    return '';\n  }\n\n  buildValueColumns() {\n    let query = '';\n    for (const column of this.target.select) {\n      query += ',\\n  ' + this.buildValueColumn(column);\n    }\n\n    return query;\n  }\n\n  buildValueColumn(column: any) {\n    let query = '';\n\n    const columnName: any = find(column, (g: any) => g.type === 'column');\n    query = columnName.params[0];\n\n    const aggregate: any = find(column, (g: any) => g.type === 'aggregate');\n\n    if (aggregate) {\n      const func = aggregate.params[0];\n      query = func + '(' + query + ')';\n    }\n\n    const alias: any = find(column, (g: any) => g.type === 'alias');\n    if (alias) {\n      query += ' AS ' + this.quoteIdentifier(alias.params[0]);\n    }\n\n    return query;\n  }\n\n  buildWhereClause() {\n    let query = '';\n    const conditions = map(this.target.where, (tag, index) => {\n      switch (tag.type) {\n        case 'macro':\n          return tag.name + '(' + this.target.timeColumn + ')';\n          break;\n        case 'expression':\n          return tag.params.join(' ');\n          break;\n      }\n    });\n\n    if (conditions.length > 0) {\n      query = '\\nWHERE\\n  ' + conditions.join(' AND\\n  ');\n    }\n\n    return query;\n  }\n\n  buildGroupClause() {\n    let query = '';\n    let groupSection = '';\n\n    for (let i = 0; i < this.target.group.length; i++) {\n      const part = this.target.group[i];\n      if (i > 0) {\n        groupSection += ', ';\n      }\n      if (part.type === 'time') {\n        groupSection += '1';\n      } else {\n        groupSection += part.params[0];\n      }\n    }\n\n    if (groupSection.length) {\n      query = '\\nGROUP BY ' + groupSection;\n      if (this.hasMetricColumn()) {\n        query += ',2';\n      }\n    }\n    return query;\n  }\n\n  buildQuery() {\n    let query = 'SELECT';\n\n    query += '\\n  ' + this.buildTimeColumn();\n    if (this.hasMetricColumn()) {\n      query += ',\\n  ' + this.buildMetricColumn();\n    }\n    query += this.buildValueColumns();\n\n    query += '\\nFROM ' + this.target.table;\n\n    query += this.buildWhereClause();\n    query += this.buildGroupClause();\n\n    query += '\\nORDER BY ' + this.buildTimeColumn(false);\n\n    return query;\n  }\n}\n","import { AnnotationEvent, DataFrame, MetricFindValue } from '@grafana/data';\nimport { BackendDataSourceResponse, FetchResponse, toDataQueryResponse } from '@grafana/runtime';\n\nexport default class ResponseParser {\n  transformMetricFindResponse(raw: FetchResponse<BackendDataSourceResponse>): MetricFindValue[] {\n    const frames = toDataQueryResponse(raw).data as DataFrame[];\n\n    if (!frames || !frames.length) {\n      return [];\n    }\n\n    const frame = frames[0];\n\n    const values: MetricFindValue[] = [];\n    const textField = frame.fields.find((f) => f.name === '__text');\n    const valueField = frame.fields.find((f) => f.name === '__value');\n\n    if (textField && valueField) {\n      for (let i = 0; i < textField.values.length; i++) {\n        values.push({ text: '' + textField.values.get(i), value: '' + valueField.values.get(i) });\n      }\n    } else {\n      values.push(\n        ...frame.fields\n          .flatMap((f) => f.values.toArray())\n          .map((v) => ({\n            text: v,\n          }))\n      );\n    }\n\n    return Array.from(new Set(values.map((v) => v.text))).map((text) => ({\n      text,\n      value: values.find((v) => v.text === text)?.value,\n    }));\n  }\n\n  async transformAnnotationResponse(options: any, data: BackendDataSourceResponse): Promise<AnnotationEvent[]> {\n    const frames = toDataQueryResponse({ data: data }).data as DataFrame[];\n    if (!frames || !frames.length) {\n      return [];\n    }\n    const frame = frames[0];\n    const timeField = frame.fields.find((f) => f.name === 'time' || f.name === 'time_sec');\n\n    if (!timeField) {\n      throw new Error('Missing mandatory time column (with time column alias) in annotation query');\n    }\n\n    if (frame.fields.find((f) => f.name === 'title')) {\n      throw new Error('The title column for annotations is deprecated, now only a column named text is returned');\n    }\n\n    const timeEndField = frame.fields.find((f) => f.name === 'timeend');\n    const textField = frame.fields.find((f) => f.name === 'text');\n    const tagsField = frame.fields.find((f) => f.name === 'tags');\n\n    const list: AnnotationEvent[] = [];\n    for (let i = 0; i < frame.length; i++) {\n      const timeEnd = timeEndField && timeEndField.values.get(i) ? Math.floor(timeEndField.values.get(i)) : undefined;\n      list.push({\n        annotation: options.annotation,\n        time: Math.floor(timeField.values.get(i)),\n        timeEnd,\n        text: textField && textField.values.get(i) ? textField.values.get(i) : '',\n        tags:\n          tagsField && tagsField.values.get(i)\n            ? tagsField.values\n                .get(i)\n                .trim()\n                .split(/\\s*,\\s*/)\n            : [],\n      });\n    }\n\n    return list;\n  }\n}\n","import { map as _map } from 'lodash';\nimport { catchError, map, mapTo } from 'rxjs/operators';\nimport { getBackendSrv, DataSourceWithBackend, FetchResponse, BackendDataSourceResponse } from '@grafana/runtime';\nimport { DataSourceInstanceSettings, ScopedVars, MetricFindValue, AnnotationEvent } from '@grafana/data';\nimport MySQLQueryModel from 'app/plugins/datasource/mysql/mysql_query_model';\nimport ResponseParser from './response_parser';\nimport { MysqlQueryForInterpolation, MySQLOptions, MySQLQuery } from './types';\nimport { getTemplateSrv, TemplateSrv } from 'app/features/templating/template_srv';\nimport { getSearchFilterScopedVar } from '../../../features/variables/utils';\nimport { getTimeSrv, TimeSrv } from 'app/features/dashboard/services/TimeSrv';\nimport { of } from 'rxjs';\nimport { toTestingStatus } from '@grafana/runtime/src/utils/queryResponse';\n\nexport class MysqlDatasource extends DataSourceWithBackend<MySQLQuery, MySQLOptions> {\n  id: any;\n  name: any;\n  responseParser: ResponseParser;\n  queryModel: MySQLQueryModel;\n  interval: string;\n\n  constructor(\n    instanceSettings: DataSourceInstanceSettings<MySQLOptions>,\n    private readonly templateSrv: TemplateSrv = getTemplateSrv(),\n    private readonly timeSrv: TimeSrv = getTimeSrv()\n  ) {\n    super(instanceSettings);\n    this.name = instanceSettings.name;\n    this.id = instanceSettings.id;\n    this.responseParser = new ResponseParser();\n    this.queryModel = new MySQLQueryModel({});\n    const settingsData = instanceSettings.jsonData || ({} as MySQLOptions);\n    this.interval = settingsData.timeInterval || '1m';\n  }\n\n  interpolateVariable = (value: string | string[] | number, variable: any) => {\n    if (typeof value === 'string') {\n      if (variable.multi || variable.includeAll) {\n        const result = this.queryModel.quoteLiteral(value);\n        return result;\n      } else {\n        return value;\n      }\n    }\n\n    if (typeof value === 'number') {\n      return value;\n    }\n\n    const quotedValues = _map(value, (v: any) => {\n      return this.queryModel.quoteLiteral(v);\n    });\n    return quotedValues.join(',');\n  };\n\n  interpolateVariablesInQueries(\n    queries: MysqlQueryForInterpolation[],\n    scopedVars: ScopedVars\n  ): MysqlQueryForInterpolation[] {\n    let expandedQueries = queries;\n    if (queries && queries.length > 0) {\n      expandedQueries = queries.map((query) => {\n        const expandedQuery = {\n          ...query,\n          datasource: this.name,\n          rawSql: this.templateSrv.replace(query.rawSql, scopedVars, this.interpolateVariable),\n          rawQuery: true,\n        };\n        return expandedQuery;\n      });\n    }\n    return expandedQueries;\n  }\n\n  filterQuery(query: MySQLQuery): boolean {\n    return !query.hide;\n  }\n\n  applyTemplateVariables(target: MySQLQuery, scopedVars: ScopedVars): Record<string, any> {\n    const queryModel = new MySQLQueryModel(target, this.templateSrv, scopedVars);\n    return {\n      refId: target.refId,\n      datasourceId: this.id,\n      rawSql: queryModel.render(this.interpolateVariable as any),\n      format: target.format,\n    };\n  }\n\n  async annotationQuery(options: any): Promise<AnnotationEvent[]> {\n    if (!options.annotation.rawQuery) {\n      return Promise.reject({\n        message: 'Query missing in annotation definition',\n      });\n    }\n\n    const query = {\n      refId: options.annotation.name,\n      datasourceId: this.id,\n      rawSql: this.templateSrv.replace(options.annotation.rawQuery, options.scopedVars, this.interpolateVariable),\n      format: 'table',\n    };\n\n    return getBackendSrv()\n      .fetch<BackendDataSourceResponse>({\n        url: '/api/ds/query',\n        method: 'POST',\n        data: {\n          from: options.range.from.valueOf().toString(),\n          to: options.range.to.valueOf().toString(),\n          queries: [query],\n        },\n        requestId: options.annotation.name,\n      })\n      .pipe(\n        map(\n          async (res: FetchResponse<BackendDataSourceResponse>) =>\n            await this.responseParser.transformAnnotationResponse(options, res.data)\n        )\n      )\n      .toPromise();\n  }\n\n  metricFindQuery(query: string, optionalOptions: any): Promise<MetricFindValue[]> {\n    let refId = 'tempvar';\n    if (optionalOptions && optionalOptions.variable && optionalOptions.variable.name) {\n      refId = optionalOptions.variable.name;\n    }\n\n    const rawSql = this.templateSrv.replace(\n      query,\n      getSearchFilterScopedVar({ query, wildcardChar: '%', options: optionalOptions }),\n      this.interpolateVariable\n    );\n\n    const interpolatedQuery = {\n      refId: refId,\n      datasourceId: this.id,\n      rawSql,\n      format: 'table',\n    };\n\n    const range = this.timeSrv.timeRange();\n\n    return getBackendSrv()\n      .fetch<BackendDataSourceResponse>({\n        url: '/api/ds/query',\n        method: 'POST',\n        data: {\n          from: range.from.valueOf().toString(),\n          to: range.to.valueOf().toString(),\n          queries: [interpolatedQuery],\n        },\n        requestId: refId,\n      })\n      .pipe(\n        map((rsp) => {\n          return this.responseParser.transformMetricFindResponse(rsp);\n        })\n      )\n      .toPromise();\n  }\n\n  testDatasource(): Promise<any> {\n    return getBackendSrv()\n      .fetch({\n        url: '/api/ds/query',\n        method: 'POST',\n        data: {\n          from: '5m',\n          to: 'now',\n          queries: [\n            {\n              refId: 'A',\n              intervalMs: 1,\n              maxDataPoints: 1,\n              datasourceId: this.id,\n              rawSql: 'SELECT 1',\n              format: 'table',\n            },\n          ],\n        },\n      })\n      .pipe(\n        mapTo({ status: 'success', message: 'Database Connection OK' }),\n        catchError((err) => {\n          return of(toTestingStatus(err));\n        })\n      )\n      .toPromise();\n  }\n\n  targetContainsTemplate(target: any) {\n    let rawSql = '';\n\n    if (target.rawQuery) {\n      rawSql = target.rawSql;\n    } else {\n      const query = new MySQLQueryModel(target);\n      rawSql = query.buildQuery();\n    }\n\n    rawSql = rawSql.replace('$__', '');\n\n    return this.templateSrv.variableExists(rawSql);\n  }\n}\n","export class MysqlMetaQuery {\n  constructor(private target: any, private queryModel: any) {}\n\n  getOperators(datatype: string) {\n    switch (datatype) {\n      case 'double':\n      case 'float': {\n        return ['=', '!=', '<', '<=', '>', '>='];\n      }\n      case 'text':\n      case 'tinytext':\n      case 'mediumtext':\n      case 'longtext':\n      case 'varchar':\n      case 'char': {\n        return ['=', '!=', '<', '<=', '>', '>=', 'IN', 'NOT IN', 'LIKE', 'NOT LIKE'];\n      }\n      default: {\n        return ['=', '!=', '<', '<=', '>', '>=', 'IN', 'NOT IN'];\n      }\n    }\n  }\n\n  // quote identifier as literal to use in metadata queries\n  quoteIdentAsLiteral(value: string) {\n    return this.queryModel.quoteLiteral(this.queryModel.unquoteIdentifier(value));\n  }\n\n  findMetricTable() {\n    // query that returns first table found that has a timestamp(tz) column and a float column\n    const query = `\n  SELECT\n    table_name as table_name,\n    ( SELECT\n        column_name as column_name\n      FROM information_schema.columns c\n      WHERE\n        c.table_schema = t.table_schema AND\n        c.table_name = t.table_name AND\n        c.data_type IN ('timestamp', 'datetime')\n      ORDER BY ordinal_position LIMIT 1\n    ) AS time_column,\n    ( SELECT\n        column_name AS column_name\n      FROM information_schema.columns c\n      WHERE\n        c.table_schema = t.table_schema AND\n        c.table_name = t.table_name AND\n        c.data_type IN('float', 'int', 'bigint')\n      ORDER BY ordinal_position LIMIT 1\n    ) AS value_column\n  FROM information_schema.tables t\n  WHERE\n    t.table_schema = database() AND\n    EXISTS\n    ( SELECT 1\n      FROM information_schema.columns c\n      WHERE\n        c.table_schema = t.table_schema AND\n        c.table_name = t.table_name AND\n        c.data_type IN ('timestamp', 'datetime')\n    ) AND\n    EXISTS\n    ( SELECT 1\n      FROM information_schema.columns c\n      WHERE\n        c.table_schema = t.table_schema AND\n        c.table_name = t.table_name AND\n        c.data_type IN('float', 'int', 'bigint')\n    )\n  LIMIT 1\n;`;\n    return query;\n  }\n\n  buildTableConstraint(table: string) {\n    let query = '';\n\n    // check for schema qualified table\n    if (table.includes('.')) {\n      const parts = table.split('.');\n      query = 'table_schema = ' + this.quoteIdentAsLiteral(parts[0]);\n      query += ' AND table_name = ' + this.quoteIdentAsLiteral(parts[1]);\n      return query;\n    } else {\n      query = 'table_schema = database() AND table_name = ' + this.quoteIdentAsLiteral(table);\n\n      return query;\n    }\n  }\n\n  buildTableQuery() {\n    return 'SELECT table_name FROM information_schema.tables WHERE table_schema = database() ORDER BY table_name';\n  }\n\n  buildColumnQuery(type?: string) {\n    let query = 'SELECT column_name FROM information_schema.columns WHERE ';\n    query += this.buildTableConstraint(this.target.table);\n\n    switch (type) {\n      case 'time': {\n        query += \" AND data_type IN ('timestamp','datetime','bigint','int','double','float')\";\n        break;\n      }\n      case 'metric': {\n        query += \" AND data_type IN ('text','tinytext','mediumtext','longtext','varchar','char')\";\n        break;\n      }\n      case 'value': {\n        query += \" AND data_type IN ('bigint','int','smallint','mediumint','tinyint','double','decimal','float')\";\n        query += ' AND column_name <> ' + this.quoteIdentAsLiteral(this.target.timeColumn);\n        break;\n      }\n      case 'group': {\n        query += \" AND data_type IN ('text','tinytext','mediumtext','longtext','varchar','char')\";\n        break;\n      }\n    }\n\n    query += ' ORDER BY column_name';\n\n    return query;\n  }\n\n  buildValueQuery(column: string) {\n    let query = 'SELECT DISTINCT QUOTE(' + column + ')';\n    query += ' FROM ' + this.target.table;\n    query += ' WHERE $__timeFilter(' + this.target.timeColumn + ')';\n    query += ' ORDER BY 1 LIMIT 100';\n    return query;\n  }\n\n  buildDatatypeQuery(column: string) {\n    let query = `\nSELECT data_type\nFROM information_schema.columns\nWHERE `;\n    query += ' table_name = ' + this.quoteIdentAsLiteral(this.target.table);\n    query += ' AND column_name = ' + this.quoteIdentAsLiteral(column);\n    return query;\n  }\n}\n","import { SqlPartDef, SqlPart } from 'app/core/components/sql_part/sql_part';\n\nconst index: any[] = [];\n\nfunction createPart(part: any): any {\n  const def = index[part.type];\n  if (!def) {\n    return null;\n  }\n\n  return new SqlPart(part, def);\n}\n\nfunction register(options: any) {\n  index[options.type] = new SqlPartDef(options);\n}\n\nregister({\n  type: 'column',\n  style: 'label',\n  params: [{ type: 'column', dynamicLookup: true }],\n  defaultParams: ['value'],\n});\n\nregister({\n  type: 'expression',\n  style: 'expression',\n  label: 'Expr:',\n  params: [\n    { name: 'left', type: 'string', dynamicLookup: true },\n    { name: 'op', type: 'string', dynamicLookup: true },\n    { name: 'right', type: 'string', dynamicLookup: true },\n  ],\n  defaultParams: ['value', '=', 'value'],\n});\n\nregister({\n  type: 'macro',\n  style: 'label',\n  label: 'Macro:',\n  params: [],\n  defaultParams: [],\n});\n\nregister({\n  type: 'aggregate',\n  style: 'label',\n  params: [\n    {\n      name: 'name',\n      type: 'string',\n      options: ['avg', 'count', 'min', 'max', 'sum', 'stddev', 'variance'],\n    },\n  ],\n  defaultParams: ['avg'],\n});\n\nregister({\n  type: 'alias',\n  style: 'label',\n  params: [{ name: 'name', type: 'string', quote: 'double' }],\n  defaultParams: ['alias'],\n});\n\nregister({\n  type: 'time',\n  style: 'function',\n  label: 'time',\n  params: [\n    {\n      name: 'interval',\n      type: 'interval',\n      options: ['$__interval', '1s', '10s', '1m', '5m', '10m', '15m', '1h'],\n    },\n    {\n      name: 'fill',\n      type: 'string',\n      options: ['none', 'NULL', 'previous', '0'],\n    },\n  ],\n  defaultParams: ['$__interval', 'none'],\n});\n\nexport default {\n  create: createPart,\n};\n","import { clone, filter, find, findIndex, indexOf, map } from 'lodash';\nimport appEvents from 'app/core/app_events';\nimport { MysqlMetaQuery } from './meta_query';\nimport { QueryCtrl } from 'app/plugins/sdk';\nimport { SqlPart } from 'app/core/components/sql_part/sql_part';\nimport MySQLQueryModel from './mysql_query_model';\nimport sqlPart from './sql_part';\nimport { auto } from 'angular';\nimport { PanelEvents, QueryResultMeta } from '@grafana/data';\nimport { VariableWithMultiSupport } from 'app/features/variables/types';\nimport { TemplateSrv } from '@grafana/runtime';\nimport { ShowConfirmModalEvent } from '../../../types/events';\n\nconst defaultQuery = `SELECT\n  UNIX_TIMESTAMP(<time_column>) as time_sec,\n  <value column> as value,\n  <series name column> as metric\nFROM <table name>\nWHERE $__timeFilter(time_column)\nORDER BY <time_column> ASC\n`;\n\nexport class MysqlQueryCtrl extends QueryCtrl {\n  static templateUrl = 'partials/query.editor.html';\n\n  formats: any[];\n  lastQueryError?: string;\n  showHelp!: boolean;\n\n  queryModel: MySQLQueryModel;\n  metaBuilder: MysqlMetaQuery;\n  lastQueryMeta?: QueryResultMeta;\n  tableSegment: any;\n  whereAdd: any;\n  timeColumnSegment: any;\n  metricColumnSegment: any;\n  selectMenu: any[] = [];\n  selectParts: SqlPart[][] = [];\n  groupParts: SqlPart[] = [];\n  whereParts: SqlPart[] = [];\n  groupAdd: any;\n\n  /** @ngInject */\n  constructor(\n    $scope: any,\n    $injector: auto.IInjectorService,\n    private templateSrv: TemplateSrv,\n    private uiSegmentSrv: any\n  ) {\n    super($scope, $injector);\n\n    this.target = this.target;\n    this.queryModel = new MySQLQueryModel(this.target, templateSrv, this.panel.scopedVars);\n    this.metaBuilder = new MysqlMetaQuery(this.target, this.queryModel);\n    this.updateProjection();\n\n    this.formats = [\n      { text: 'Time series', value: 'time_series' },\n      { text: 'Table', value: 'table' },\n    ];\n\n    if (!this.target.rawSql) {\n      // special handling when in table panel\n      if (this.panelCtrl.panel.type === 'table') {\n        this.target.format = 'table';\n        this.target.rawSql = 'SELECT 1';\n        this.target.rawQuery = true;\n      } else {\n        this.target.rawSql = defaultQuery;\n        this.datasource.metricFindQuery(this.metaBuilder.findMetricTable()).then((result: any) => {\n          if (result.length > 0) {\n            this.target.table = result[0].text;\n            let segment = this.uiSegmentSrv.newSegment(this.target.table);\n            this.tableSegment.html = segment.html;\n            this.tableSegment.value = segment.value;\n\n            this.target.timeColumn = result[1].text;\n            segment = this.uiSegmentSrv.newSegment(this.target.timeColumn);\n            this.timeColumnSegment.html = segment.html;\n            this.timeColumnSegment.value = segment.value;\n\n            this.target.timeColumnType = 'timestamp';\n            this.target.select = [[{ type: 'column', params: [result[2].text] }]];\n            this.updateProjection();\n            this.updateRawSqlAndRefresh();\n          }\n        });\n      }\n    }\n\n    if (!this.target.table) {\n      this.tableSegment = uiSegmentSrv.newSegment({ value: 'select table', fake: true });\n    } else {\n      this.tableSegment = uiSegmentSrv.newSegment(this.target.table);\n    }\n\n    this.timeColumnSegment = uiSegmentSrv.newSegment(this.target.timeColumn);\n    this.metricColumnSegment = uiSegmentSrv.newSegment(this.target.metricColumn);\n\n    this.buildSelectMenu();\n    this.whereAdd = this.uiSegmentSrv.newPlusButton();\n    this.groupAdd = this.uiSegmentSrv.newPlusButton();\n\n    this.panelCtrl.events.on(PanelEvents.dataReceived, this.onDataReceived.bind(this), $scope);\n    this.panelCtrl.events.on(PanelEvents.dataError, this.onDataError.bind(this), $scope);\n  }\n\n  updateRawSqlAndRefresh() {\n    if (!this.target.rawQuery) {\n      this.target.rawSql = this.queryModel.buildQuery();\n    }\n\n    this.panelCtrl.refresh();\n  }\n\n  updateProjection() {\n    this.selectParts = map(this.target.select, (parts: any) => {\n      return map(parts, sqlPart.create).filter((n) => n);\n    });\n    this.whereParts = map(this.target.where, sqlPart.create).filter((n) => n);\n    this.groupParts = map(this.target.group, sqlPart.create).filter((n) => n);\n  }\n\n  updatePersistedParts() {\n    this.target.select = map(this.selectParts, (selectParts) => {\n      return map(selectParts, (part: any) => {\n        return { type: part.def.type, datatype: part.datatype, params: part.params };\n      });\n    });\n    this.target.where = map(this.whereParts, (part: any) => {\n      return { type: part.def.type, datatype: part.datatype, name: part.name, params: part.params };\n    });\n    this.target.group = map(this.groupParts, (part: any) => {\n      return { type: part.def.type, datatype: part.datatype, params: part.params };\n    });\n  }\n\n  buildSelectMenu() {\n    const aggregates = {\n      text: 'Aggregate Functions',\n      value: 'aggregate',\n      submenu: [\n        { text: 'Average', value: 'avg' },\n        { text: 'Count', value: 'count' },\n        { text: 'Maximum', value: 'max' },\n        { text: 'Minimum', value: 'min' },\n        { text: 'Sum', value: 'sum' },\n        { text: 'Standard deviation', value: 'stddev' },\n        { text: 'Variance', value: 'variance' },\n      ],\n    };\n\n    this.selectMenu.push(aggregates);\n    this.selectMenu.push({ text: 'Alias', value: 'alias' });\n    this.selectMenu.push({ text: 'Column', value: 'column' });\n  }\n\n  toggleEditorMode() {\n    if (this.target.rawQuery) {\n      appEvents.publish(\n        new ShowConfirmModalEvent({\n          title: 'Warning',\n          text2: 'Switching to query builder may overwrite your raw SQL.',\n          icon: 'exclamation-triangle',\n          yesText: 'Switch',\n          onConfirm: () => {\n            // This could be called from React, so wrap in $evalAsync.\n            // Will then either run as part of the current digest cycle or trigger a new one.\n            this.$scope.$evalAsync(() => {\n              this.target.rawQuery = !this.target.rawQuery;\n            });\n          },\n        })\n      );\n    } else {\n      // This could be called from React, so wrap in $evalAsync.\n      // Will then either run as part of the current digest cycle or trigger a new one.\n      this.$scope.$evalAsync(() => {\n        this.target.rawQuery = !this.target.rawQuery;\n      });\n    }\n  }\n\n  resetPlusButton(button: { html: any; value: any }) {\n    const plusButton = this.uiSegmentSrv.newPlusButton();\n    button.html = plusButton.html;\n    button.value = plusButton.value;\n  }\n\n  getTableSegments() {\n    return this.datasource\n      .metricFindQuery(this.metaBuilder.buildTableQuery())\n      .then(this.transformToSegments({}))\n      .catch(this.handleQueryError.bind(this));\n  }\n\n  tableChanged() {\n    this.target.table = this.tableSegment.value;\n    this.target.where = [];\n    this.target.group = [];\n    this.updateProjection();\n\n    const segment = this.uiSegmentSrv.newSegment('none');\n    this.metricColumnSegment.html = segment.html;\n    this.metricColumnSegment.value = segment.value;\n    this.target.metricColumn = 'none';\n\n    const task1 = this.datasource.metricFindQuery(this.metaBuilder.buildColumnQuery('time')).then((result: any) => {\n      // check if time column is still valid\n      if (result.length > 0 && !find(result, (r: any) => r.text === this.target.timeColumn)) {\n        const segment = this.uiSegmentSrv.newSegment(result[0].text);\n        this.timeColumnSegment.html = segment.html;\n        this.timeColumnSegment.value = segment.value;\n      }\n      return this.timeColumnChanged(false);\n    });\n    const task2 = this.datasource.metricFindQuery(this.metaBuilder.buildColumnQuery('value')).then((result: any) => {\n      if (result.length > 0) {\n        this.target.select = [[{ type: 'column', params: [result[0].text] }]];\n        this.updateProjection();\n      }\n    });\n\n    Promise.all([task1, task2]).then(() => {\n      this.updateRawSqlAndRefresh();\n    });\n  }\n\n  getTimeColumnSegments() {\n    return this.datasource\n      .metricFindQuery(this.metaBuilder.buildColumnQuery('time'))\n      .then(this.transformToSegments({}))\n      .catch(this.handleQueryError.bind(this));\n  }\n\n  timeColumnChanged(refresh?: boolean) {\n    this.target.timeColumn = this.timeColumnSegment.value;\n    return this.datasource\n      .metricFindQuery(this.metaBuilder.buildDatatypeQuery(this.target.timeColumn))\n      .then((result: any) => {\n        if (result.length === 1) {\n          if (this.target.timeColumnType !== result[0].text) {\n            this.target.timeColumnType = result[0].text;\n          }\n          let partModel;\n          if (this.queryModel.hasUnixEpochTimecolumn()) {\n            partModel = sqlPart.create({ type: 'macro', name: '$__unixEpochFilter', params: [] });\n          } else {\n            partModel = sqlPart.create({ type: 'macro', name: '$__timeFilter', params: [] });\n          }\n\n          if (this.whereParts.length >= 1 && this.whereParts[0].def.type === 'macro') {\n            // replace current macro\n            this.whereParts[0] = partModel;\n          } else {\n            this.whereParts.splice(0, 0, partModel);\n          }\n        }\n\n        this.updatePersistedParts();\n        if (refresh !== false) {\n          this.updateRawSqlAndRefresh();\n        }\n      });\n  }\n\n  getMetricColumnSegments() {\n    return this.datasource\n      .metricFindQuery(this.metaBuilder.buildColumnQuery('metric'))\n      .then(this.transformToSegments({ addNone: true }))\n      .catch(this.handleQueryError.bind(this));\n  }\n\n  metricColumnChanged() {\n    this.target.metricColumn = this.metricColumnSegment.value;\n    this.updateRawSqlAndRefresh();\n  }\n\n  onDataReceived(dataList: any) {\n    this.lastQueryError = undefined;\n    this.lastQueryMeta = dataList[0]?.meta;\n  }\n\n  onDataError(err: any) {\n    if (err.data && err.data.results) {\n      const queryRes = err.data.results[this.target.refId];\n      if (queryRes) {\n        this.lastQueryError = queryRes.error;\n      }\n    }\n  }\n\n  transformToSegments(config: any) {\n    return (results: any) => {\n      const segments = map(results, (segment) => {\n        return this.uiSegmentSrv.newSegment({\n          value: segment.text,\n          expandable: segment.expandable,\n        });\n      });\n\n      if (config.addTemplateVars) {\n        for (const variable of this.templateSrv.getVariables()) {\n          let value;\n          value = '$' + variable.name;\n          if (config.templateQuoter && ((variable as unknown) as VariableWithMultiSupport).multi === false) {\n            value = config.templateQuoter(value);\n          }\n\n          segments.unshift(\n            this.uiSegmentSrv.newSegment({\n              type: 'template',\n              value: value,\n              expandable: true,\n            })\n          );\n        }\n      }\n\n      if (config.addNone) {\n        segments.unshift(this.uiSegmentSrv.newSegment({ type: 'template', value: 'none', expandable: true }));\n      }\n\n      return segments;\n    };\n  }\n\n  findAggregateIndex(selectParts: any) {\n    return findIndex(selectParts, (p: any) => p.def.type === 'aggregate' || p.def.type === 'percentile');\n  }\n\n  findWindowIndex(selectParts: any) {\n    return findIndex(selectParts, (p: any) => p.def.type === 'window' || p.def.type === 'moving_window');\n  }\n\n  addSelectPart(selectParts: any[], item: { value: any }, subItem: { type: any; value: any }) {\n    let partType = item.value;\n    if (subItem && subItem.type) {\n      partType = subItem.type;\n    }\n    let partModel = sqlPart.create({ type: partType });\n    if (subItem) {\n      partModel.params[0] = subItem.value;\n    }\n    let addAlias = false;\n\n    switch (partType) {\n      case 'column':\n        const parts = map(selectParts, (part: any) => {\n          return sqlPart.create({ type: part.def.type, params: clone(part.params) });\n        });\n        this.selectParts.push(parts);\n        break;\n      case 'percentile':\n      case 'aggregate':\n        // add group by if no group by yet\n        if (this.target.group.length === 0) {\n          this.addGroup('time', '$__interval');\n        }\n        const aggIndex = this.findAggregateIndex(selectParts);\n        if (aggIndex !== -1) {\n          // replace current aggregation\n          selectParts[aggIndex] = partModel;\n        } else {\n          selectParts.splice(1, 0, partModel);\n        }\n        if (!find(selectParts, (p: any) => p.def.type === 'alias')) {\n          addAlias = true;\n        }\n        break;\n      case 'moving_window':\n      case 'window':\n        const windowIndex = this.findWindowIndex(selectParts);\n        if (windowIndex !== -1) {\n          // replace current window function\n          selectParts[windowIndex] = partModel;\n        } else {\n          const aggIndex = this.findAggregateIndex(selectParts);\n          if (aggIndex !== -1) {\n            selectParts.splice(aggIndex + 1, 0, partModel);\n          } else {\n            selectParts.splice(1, 0, partModel);\n          }\n        }\n        if (!find(selectParts, (p: any) => p.def.type === 'alias')) {\n          addAlias = true;\n        }\n        break;\n      case 'alias':\n        addAlias = true;\n        break;\n    }\n\n    if (addAlias) {\n      // set initial alias name to column name\n      partModel = sqlPart.create({ type: 'alias', params: [selectParts[0].params[0].replace(/\"/g, '')] });\n      if (selectParts[selectParts.length - 1].def.type === 'alias') {\n        selectParts[selectParts.length - 1] = partModel;\n      } else {\n        selectParts.push(partModel);\n      }\n    }\n\n    this.updatePersistedParts();\n    this.updateRawSqlAndRefresh();\n  }\n\n  removeSelectPart(selectParts: any, part: { def: { type: string } }) {\n    if (part.def.type === 'column') {\n      // remove all parts of column unless its last column\n      if (this.selectParts.length > 1) {\n        const modelsIndex = indexOf(this.selectParts, selectParts);\n        this.selectParts.splice(modelsIndex, 1);\n      }\n    } else {\n      const partIndex = indexOf(selectParts, part);\n      selectParts.splice(partIndex, 1);\n    }\n\n    this.updatePersistedParts();\n  }\n\n  handleSelectPartEvent(selectParts: any, part: { def: any }, evt: { name: any }) {\n    switch (evt.name) {\n      case 'get-param-options': {\n        switch (part.def.type) {\n          // case 'aggregate':\n          //   return this.datasource\n          //     .metricFindQuery(this.metaBuilder.buildAggregateQuery())\n          //     .then(this.transformToSegments({}))\n          //     .catch(this.handleQueryError.bind(this));\n          case 'column':\n            return this.datasource\n              .metricFindQuery(this.metaBuilder.buildColumnQuery('value'))\n              .then(this.transformToSegments({}))\n              .catch(this.handleQueryError.bind(this));\n        }\n      }\n      case 'part-param-changed': {\n        this.updatePersistedParts();\n        this.updateRawSqlAndRefresh();\n        break;\n      }\n      case 'action': {\n        this.removeSelectPart(selectParts, part);\n        this.updateRawSqlAndRefresh();\n        break;\n      }\n      case 'get-part-actions': {\n        return Promise.resolve([{ text: 'Remove', value: 'remove-part' }]);\n      }\n    }\n  }\n\n  handleGroupPartEvent(part: any, index: any, evt: { name: any }) {\n    switch (evt.name) {\n      case 'get-param-options': {\n        return this.datasource\n          .metricFindQuery(this.metaBuilder.buildColumnQuery())\n          .then(this.transformToSegments({}))\n          .catch(this.handleQueryError.bind(this));\n      }\n      case 'part-param-changed': {\n        this.updatePersistedParts();\n        this.updateRawSqlAndRefresh();\n        break;\n      }\n      case 'action': {\n        this.removeGroup(part, index);\n        this.updateRawSqlAndRefresh();\n        break;\n      }\n      case 'get-part-actions': {\n        return Promise.resolve([{ text: 'Remove', value: 'remove-part' }]);\n      }\n    }\n  }\n\n  addGroup(partType: string, value: string) {\n    let params = [value];\n    if (partType === 'time') {\n      params = ['$__interval', 'none'];\n    }\n    const partModel = sqlPart.create({ type: partType, params: params });\n\n    if (partType === 'time') {\n      // put timeGroup at start\n      this.groupParts.splice(0, 0, partModel);\n    } else {\n      this.groupParts.push(partModel);\n    }\n\n    // add aggregates when adding group by\n    for (const selectParts of this.selectParts) {\n      if (!selectParts.some((part) => part.def.type === 'aggregate')) {\n        const aggregate = sqlPart.create({ type: 'aggregate', params: ['avg'] });\n        selectParts.splice(1, 0, aggregate);\n        if (!selectParts.some((part) => part.def.type === 'alias')) {\n          const alias = sqlPart.create({ type: 'alias', params: [selectParts[0].part.params[0]] });\n          selectParts.push(alias);\n        }\n      }\n    }\n\n    this.updatePersistedParts();\n  }\n\n  removeGroup(part: { def: { type: string } }, index: number) {\n    if (part.def.type === 'time') {\n      // remove aggregations\n      this.selectParts = map(this.selectParts, (s: any) => {\n        return filter(s, (part: any) => {\n          if (part.def.type === 'aggregate' || part.def.type === 'percentile') {\n            return false;\n          }\n          return true;\n        });\n      });\n    }\n\n    this.groupParts.splice(index, 1);\n    this.updatePersistedParts();\n  }\n\n  handleWherePartEvent(whereParts: any, part: any, evt: any, index: any) {\n    switch (evt.name) {\n      case 'get-param-options': {\n        switch (evt.param.name) {\n          case 'left':\n            return this.datasource\n              .metricFindQuery(this.metaBuilder.buildColumnQuery())\n              .then(this.transformToSegments({}))\n              .catch(this.handleQueryError.bind(this));\n          case 'right':\n            if (['int', 'bigint', 'double', 'datetime'].indexOf(part.datatype) > -1) {\n              // don't do value lookups for numerical fields\n              return Promise.resolve([]);\n            } else {\n              return this.datasource\n                .metricFindQuery(this.metaBuilder.buildValueQuery(part.params[0]))\n                .then(\n                  this.transformToSegments({\n                    addTemplateVars: true,\n                    templateQuoter: (v: string) => {\n                      return this.queryModel.quoteLiteral(v);\n                    },\n                  })\n                )\n                .catch(this.handleQueryError.bind(this));\n            }\n          case 'op':\n            return Promise.resolve(this.uiSegmentSrv.newOperators(this.metaBuilder.getOperators(part.datatype)));\n          default:\n            return Promise.resolve([]);\n        }\n      }\n      case 'part-param-changed': {\n        this.updatePersistedParts();\n        this.datasource.metricFindQuery(this.metaBuilder.buildDatatypeQuery(part.params[0])).then((d: any) => {\n          if (d.length === 1) {\n            part.datatype = d[0].text;\n          }\n        });\n        this.updateRawSqlAndRefresh();\n        break;\n      }\n      case 'action': {\n        // remove element\n        whereParts.splice(index, 1);\n        this.updatePersistedParts();\n        this.updateRawSqlAndRefresh();\n        break;\n      }\n      case 'get-part-actions': {\n        return Promise.resolve([{ text: 'Remove', value: 'remove-part' }]);\n      }\n    }\n  }\n\n  getWhereOptions() {\n    const options = [];\n    if (this.queryModel.hasUnixEpochTimecolumn()) {\n      options.push(this.uiSegmentSrv.newSegment({ type: 'macro', value: '$__unixEpochFilter' }));\n    } else {\n      options.push(this.uiSegmentSrv.newSegment({ type: 'macro', value: '$__timeFilter' }));\n    }\n    options.push(this.uiSegmentSrv.newSegment({ type: 'expression', value: 'Expression' }));\n    return Promise.resolve(options);\n  }\n\n  addWhereAction(part: any, index: number) {\n    switch (this.whereAdd.type) {\n      case 'macro': {\n        const partModel = sqlPart.create({ type: 'macro', name: this.whereAdd.value, params: [] });\n        if (this.whereParts.length >= 1 && this.whereParts[0].def.type === 'macro') {\n          // replace current macro\n          this.whereParts[0] = partModel;\n        } else {\n          this.whereParts.splice(0, 0, partModel);\n        }\n        break;\n      }\n      default: {\n        this.whereParts.push(sqlPart.create({ type: 'expression', params: ['value', '=', 'value'] }));\n      }\n    }\n\n    this.updatePersistedParts();\n    this.resetPlusButton(this.whereAdd);\n    this.updateRawSqlAndRefresh();\n  }\n\n  getGroupOptions() {\n    return this.datasource\n      .metricFindQuery(this.metaBuilder.buildColumnQuery('group'))\n      .then((tags: any) => {\n        const options = [];\n        if (!this.queryModel.hasTimeGroup()) {\n          options.push(this.uiSegmentSrv.newSegment({ type: 'time', value: 'time($__interval,none)' }));\n        }\n        for (const tag of tags) {\n          options.push(this.uiSegmentSrv.newSegment({ type: 'column', value: tag.text }));\n        }\n        return options;\n      })\n      .catch(this.handleQueryError.bind(this));\n  }\n\n  addGroupAction() {\n    switch (this.groupAdd.value) {\n      default: {\n        this.addGroup(this.groupAdd.type, this.groupAdd.value);\n      }\n    }\n\n    this.resetPlusButton(this.groupAdd);\n    this.updateRawSqlAndRefresh();\n  }\n\n  handleQueryError(err: any): any[] {\n    this.error = err.message || 'Failed to issue metric query';\n    return [];\n  }\n}\n","import { MysqlDatasource } from './datasource';\nimport { MysqlQueryCtrl } from './query_ctrl';\nimport {\n  createChangeHandler,\n  createResetHandler,\n  PasswordFieldEnum,\n} from '../../../features/datasources/utils/passwordHandlers';\nimport { MySQLQuery } from './types';\nimport { DataSourcePlugin } from '@grafana/data';\n\nclass MysqlConfigCtrl {\n  static templateUrl = 'partials/config.html';\n  current: any;\n  onPasswordReset: ReturnType<typeof createResetHandler>;\n  onPasswordChange: ReturnType<typeof createChangeHandler>;\n\n  constructor() {\n    this.onPasswordReset = createResetHandler(this, PasswordFieldEnum.Password);\n    this.onPasswordChange = createChangeHandler(this, PasswordFieldEnum.Password);\n  }\n}\n\nconst defaultQuery = `SELECT\n    UNIX_TIMESTAMP(<time_column>) as time_sec,\n    <text_column> as text,\n    <tags_column> as tags\n  FROM <table name>\n  WHERE $__timeFilter(time_column)\n  ORDER BY <time_column> ASC\n  LIMIT 100\n  `;\n\nclass MysqlAnnotationsQueryCtrl {\n  static templateUrl = 'partials/annotations.editor.html';\n\n  declare annotation: any;\n\n  /** @ngInject */\n  constructor($scope: any) {\n    this.annotation = $scope.ctrl.annotation;\n    this.annotation.rawQuery = this.annotation.rawQuery || defaultQuery;\n  }\n}\n\nexport {\n  MysqlDatasource,\n  MysqlDatasource as Datasource,\n  MysqlQueryCtrl as QueryCtrl,\n  MysqlConfigCtrl as ConfigCtrl,\n  MysqlAnnotationsQueryCtrl as AnnotationsQueryCtrl,\n};\n\nexport const plugin = new DataSourcePlugin<MysqlDatasource, MySQLQuery>(MysqlDatasource)\n  .setQueryCtrl(MysqlQueryCtrl)\n  .setConfigCtrl(MysqlConfigCtrl)\n  .setAnnotationQueryCtrl(MysqlAnnotationsQueryCtrl);\n"],"sourceRoot":""}
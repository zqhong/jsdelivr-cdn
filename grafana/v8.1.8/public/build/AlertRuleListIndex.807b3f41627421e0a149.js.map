{"version":3,"sources":["webpack:///./public/app/features/alerting/state/actions.ts","webpack:///./public/app/core/hooks/useQueryParams.ts","webpack:///./public/app/features/alerting/AlertRuleList.tsx","webpack:///./public/app/features/alerting/unified/components/rules/ActionIcon.tsx","webpack:///./public/app/features/alerting/unified/components/rules/NoRulesCTA.tsx","webpack:///./public/app/features/alerting/unified/hooks/useFilteredRules.ts","webpack:///./public/app/features/alerting/unified/components/rules/RulesFilter.tsx","webpack:///./public/app/features/alerting/unified/components/StateColoredText.tsx","webpack:///./public/app/features/alerting/unified/components/rules/RuleStats.tsx","webpack:///./public/app/features/alerting/unified/components/rules/RulesGroup.tsx","webpack:///./public/app/features/alerting/unified/components/rules/CloudRules.tsx","webpack:///./public/app/features/alerting/unified/components/rules/GrafanaRules.tsx","webpack:///./public/app/features/alerting/unified/components/rules/RuleListGroupView.tsx","webpack:///./public/app/features/alerting/unified/components/rules/RuleListStateSection.tsx","webpack:///./public/app/features/alerting/unified/RuleList.tsx","webpack:///./public/app/features/alerting/unified/components/rules/RuleListStateView.tsx","webpack:///./public/app/features/alerting/AlertRuleListIndex.tsx","webpack:///./public/app/features/alerting/unified/components/DynamicTableWithGuidelines.tsx","webpack:///./public/app/features/alerting/unified/components/rules/RuleDetails.tsx","webpack:///./public/app/features/alerting/unified/components/rules/RulesTable.tsx","webpack:///./node_modules/timers-browserify/main.js","webpack:///./public/app/features/alerting/AlertRuleItem.tsx","webpack:///./node_modules/setimmediate/setImmediate.js","webpack:///./public/app/features/alerting/state/selectors.ts","webpack:///./public/app/features/alerting/AlertHowToModal.tsx","webpack:///./public/app/features/alerting/unified/components/AlertingPageWrapper.tsx","webpack:///./public/app/features/alerting/unified/components/CollapseToggle.tsx","webpack:///./public/app/features/alerting/unified/hooks/useHasRuler.ts"],"names":["getAlertRulesAsync","options","async","dispatch","loadAlertRules","rules","getBackendSrv","get","loadedAlertRules","togglePauseAlertRule","id","post","state","locationService","getSearchObject","toString","createNotificationChannel","data","appEvents","emit","AppEvents","alertSuccess","push","error","alertError","updateNotificationChannel","put","testNotificationChannel","getState","channel","notificationChannel","loadNotificationTypes","notificationTypes","sort","o1","o2","name","setNotificationChannels","loadNotificationChannel","notificationChannelLoaded","useQueryParams","search","useLocation","useMemo","locationSearchToObject","useCallback","values","replace","setImmediate","partial","mapDispatchToProps","setSearchQuery","connector","connect","navModel","getNavModel","navIndex","alertRules","getAlertRuleItems","getSearchQuery","isLoading","AlertRuleListUnconnected","PureComponent","label","value","option","publish","ShowModalReactEvent","component","AlertHowToModal","this","props","rule","paused","text","componentDidMount","fetchRules","componentDidUpdate","prevProps","queryParams","getStateFilter","render","Contents","className","placeholder","onChange","onSearchQueryChange","menuShouldPortal","stateFilters","onStateFilterChanged","config","featureToggles","ngalert","variant","href","onClick","onOpenHowTo","spacing","map","onTogglePause","hot","module","ActionIcon","tooltip","icon","to","target","tooltipPlacement","rest","iconEl","cx","useStyles","getStyle","content","placement","css","NoRulesSplash","contextSrv","hasEditPermissionInFolders","isEditor","EmptyListCTA","title","buttonIcon","buttonLink","buttonTitle","proTip","proTipLink","proTipLinkTitle","proTipTarget","message","callToActionElement","reduceNamespaces","filters","namespaceAcc","namespace","groups","reduce","reduceGroups","length","groupAcc","group","filter","dataSource","isGrafanaRulerRule","rulerRule","isQueryingDataSource","queryString","normalizedQueryString","toLocaleLowerCase","doesNameContainsQueryString","includes","matchers","parseMatchers","doRuleLabelsMatchQuery","labelsMatchMatchers","labels","doAlertsContainMatchingLabels","promRule","type","PromRuleType","Alerting","alerts","some","alert","alertState","isAlertingRule","grafana_alert","find","query","datasourceUid","ds","getDataSourceSrv","getInstanceSettings","ViewOptions","getStyles","theme","container","colors","border1","sm","inputWidth","flexRow","spaceBetween","rowChild","xs","clearButton","RulesFilter","setQueryParams","filterKey","setFilterKey","useState","Math","floor","random","dataSourceKey","queryStringKey","getFiltersFromUrlParams","styles","stateOptions","Object","entries","PromAlertingRuleState","key","alertStateToReadable","handleQueryStringChange","debounce","e","searchIcon","alerting","noDefault","current","dataSourceValue","prefix","defaultValue","data-testid","String","view","fullWidth","StateColoredText","children","status","useStyles2","Inactive","success","Pending","warning","Firing","neutral","secondary","emptyStats","total","recording","RuleStats","showInactive","showRecording","namespaces","calculated","stats","calcRule","health","isRecordingRule","isRecordingRulerRule","forEach","statsComponents","pluralize","prev","curr","idx","RulesGroup","React","memo","rulesSource","isCollapsed","setIsCollapsed","hasRuler","useHasRuler","folderUID","namespace_uid","undefined","folder","useFolder","actionIcons","GRAFANA_RULES_SOURCE_NAME","baseUrl","kbn","slugifyForUrl","canSave","canAdmin","groupName","isCloudRulesSource","wrapper","header","CollapseToggle","collapseToggle","onToggle","dataSourceIcon","src","meta","info","logos","small","heading","spacer","headerStats","actionsSeparator","RulesTable","showSummaryColumn","rulesTable","showGuidelines","displayName","background","breakpoints","down","dataSourceOrigin","disabled","CloudRules","useUnifiedAlertingSelector","promRules","rulesDataSources","getRulesDataSources","dataSourcesLoading","loading","sectionHeader","loader","getRulesSourceName","xl","GrafanaRules","initialAsyncRequestState","RuleListStateSection","defaultCollapsed","collapsed","setCollapsed","size","showGroupColumn","VIEWS","grafanaNamespaces","cloudNamespaces","sorted","a","b","localeCompare","ns","isGrafanaRulesSource","groupedRules","result","RuleList","withErrorBoundary","useDispatch","rulesDataSourceNames","getAllRulesSourceNames","location","ViewComponent","useEffect","fetchAllPromAndRulerRulesAction","interval","setInterval","RULE_LIST_POLL_INTERVAL_MS","clearInterval","promRuleRequests","rulerRuleRequests","rulerRules","dispatched","haveResults","keys","promReqeustErrors","rulerRequestErrors","requests","isRulerNotSupportedResponse","grafanaPromError","grafanaRulerError","showNewAlertSplash","filteredNamespaces","useFilteredRules","useCombinedRuleNamespaces","AlertingPageWrapper","pageId","severity","uid","break","buttonsContainer","urlUtil","renderUrl","returnTo","pathname","style","md","border2","iconError","palette","red","AlertRuleList","DynamicTableWithGuidelines","renderExpandedContent","item","index","items","contentGuideline","guideline","renderPrefixHeader","relative","headerGuideline","renderPrefixCell","_","topGuideline","bottomGuideline","border","medium","RuleDetails","annotations","trim","RuleDetailsActionButtons","leftSide","DetailsField","horizontal","AlertLabels","RuleDetailsExpression","RuleDetailsAnnotations","rightSide","RuleDetailsDataSources","RuleDetailsMatchingInstances","up","emptyMessage","wrapperClass","wrapperMargin","seenKeys","ruleIdx","JSON","stringify","columns","renderCell","isDeleting","isCreating","RuleState","RuleHealth","Annotation","summary","useColumns","TableComponent","DynamicTable","cols","isExpandable","shape","borderRadius","table","weak","evenRow","primary","self","window","apply","Function","prototype","Timeout","clearFn","_id","_clearFn","exports","setTimeout","call","scope","arguments","clearTimeout","timeout","close","unref","ref","enroll","msecs","_idleTimeoutId","_idleTimeout","unenroll","_unrefActive","active","_onTimeout","global","clearImmediate","AlertRuleItem","ruleUrl","url","panelId","renderText","highlightClassName","textToHighlight","searchWords","Figure","stateIcon","stateClass","Meta","stateText","stateAge","Actions","registerImmediate","html","messagePrefix","onGlobalMessage","nextHandle","tasksByHandle","currentlyRunningATask","doc","document","attachTo","getPrototypeOf","process","handle","nextTick","runIfPresent","postMessage","importScripts","postMessageIsAsynchronous","oldOnMessage","onmessage","canUsePostMessage","MessageChannel","port1","event","port2","createElement","documentElement","script","onreadystatechange","removeChild","appendChild","source","indexOf","slice","addEventListener","attachEvent","callback","args","Array","i","task","run","searchQuery","regex","RegExp","test","onDismiss","isOpen","onClickBackdrop","alt","useSelector","restOfProps","expandButton","rulesSourceName"],"mappings":"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","file":"AlertRuleListIndex.807b3f41627421e0a149.js","sourcesContent":["import { AppEvents } from '@grafana/data';\nimport { getBackendSrv, locationService } from '@grafana/runtime';\nimport { appEvents } from 'app/core/core';\nimport { loadAlertRules, loadedAlertRules, notificationChannelLoaded, setNotificationChannels } from './reducers';\nimport { AlertRuleDTO, NotifierDTO, ThunkResult } from 'app/types';\n\nexport function getAlertRulesAsync(options: { state: string }): ThunkResult<void> {\n  return async (dispatch) => {\n    dispatch(loadAlertRules());\n    const rules: AlertRuleDTO[] = await getBackendSrv().get('/api/alerts', options);\n    dispatch(loadedAlertRules(rules));\n  };\n}\n\nexport function togglePauseAlertRule(id: number, options: { paused: boolean }): ThunkResult<void> {\n  return async (dispatch) => {\n    await getBackendSrv().post(`/api/alerts/${id}/pause`, options);\n    const stateFilter = locationService.getSearchObject().state || 'all';\n    dispatch(getAlertRulesAsync({ state: stateFilter.toString() }));\n  };\n}\n\nexport function createNotificationChannel(data: any): ThunkResult<void> {\n  return async (dispatch) => {\n    try {\n      await getBackendSrv().post(`/api/alert-notifications`, data);\n      appEvents.emit(AppEvents.alertSuccess, ['Notification created']);\n      locationService.push('/alerting/notifications');\n    } catch (error) {\n      appEvents.emit(AppEvents.alertError, [error.data.error]);\n    }\n  };\n}\n\nexport function updateNotificationChannel(data: any): ThunkResult<void> {\n  return async (dispatch) => {\n    try {\n      await getBackendSrv().put(`/api/alert-notifications/${data.id}`, data);\n      appEvents.emit(AppEvents.alertSuccess, ['Notification updated']);\n    } catch (error) {\n      appEvents.emit(AppEvents.alertError, [error.data.error]);\n    }\n  };\n}\n\nexport function testNotificationChannel(data: any): ThunkResult<void> {\n  return async (dispatch, getState) => {\n    const channel = getState().notificationChannel.notificationChannel;\n    await getBackendSrv().post('/api/alert-notifications/test', { id: channel.id, ...data });\n  };\n}\n\nexport function loadNotificationTypes(): ThunkResult<void> {\n  return async (dispatch) => {\n    const alertNotifiers: NotifierDTO[] = await getBackendSrv().get(`/api/alert-notifiers`);\n\n    const notificationTypes = alertNotifiers.sort((o1, o2) => {\n      if (o1.name > o2.name) {\n        return 1;\n      }\n      return -1;\n    });\n\n    dispatch(setNotificationChannels(notificationTypes));\n  };\n}\n\nexport function loadNotificationChannel(id: number): ThunkResult<void> {\n  return async (dispatch) => {\n    await dispatch(loadNotificationTypes());\n    const notificationChannel = await getBackendSrv().get(`/api/alert-notifications/${id}`);\n    dispatch(notificationChannelLoaded(notificationChannel));\n  };\n}\n","import { UrlQueryMap } from '@grafana/data';\nimport { locationSearchToObject, locationService } from '@grafana/runtime';\nimport { useCallback, useMemo } from 'react';\nimport { useLocation } from 'react-router-dom';\n\nexport function useQueryParams(): [UrlQueryMap, (values: UrlQueryMap, replace?: boolean) => void] {\n  const { search } = useLocation();\n  const queryParams = useMemo(() => locationSearchToObject(search || ''), [search]);\n  const update = useCallback(\n    (values: UrlQueryMap, replace?: boolean) => setImmediate(() => locationService.partial(values, replace)),\n    []\n  );\n  return [queryParams, update];\n}\n","import React, { PureComponent } from 'react';\nimport { hot } from 'react-hot-loader';\nimport { connect, ConnectedProps } from 'react-redux';\nimport Page from 'app/core/components/Page/Page';\nimport AlertRuleItem from './AlertRuleItem';\nimport appEvents from 'app/core/app_events';\nimport { getNavModel } from 'app/core/selectors/navModel';\nimport { AlertRule, StoreState } from 'app/types';\nimport { getAlertRulesAsync, togglePauseAlertRule } from './state/actions';\nimport { getAlertRuleItems, getSearchQuery } from './state/selectors';\nimport { FilterInput } from 'app/core/components/FilterInput/FilterInput';\nimport { SelectableValue } from '@grafana/data';\nimport { config, locationService } from '@grafana/runtime';\nimport { setSearchQuery } from './state/reducers';\nimport { Button, LinkButton, Select, VerticalGroup } from '@grafana/ui';\nimport { GrafanaRouteComponentProps } from 'app/core/navigation/types';\nimport { ShowModalReactEvent } from '../../types/events';\nimport { AlertHowToModal } from './AlertHowToModal';\n\nfunction mapStateToProps(state: StoreState) {\n  return {\n    navModel: getNavModel(state.navIndex, 'alert-list'),\n    alertRules: getAlertRuleItems(state),\n    search: getSearchQuery(state.alertRules),\n    isLoading: state.alertRules.isLoading,\n  };\n}\n\nconst mapDispatchToProps = {\n  getAlertRulesAsync,\n  setSearchQuery,\n  togglePauseAlertRule,\n};\n\nconst connector = connect(mapStateToProps, mapDispatchToProps);\n\ninterface OwnProps extends GrafanaRouteComponentProps<{}, { state: string }> {}\n\nexport type Props = OwnProps & ConnectedProps<typeof connector>;\n\nexport class AlertRuleListUnconnected extends PureComponent<Props> {\n  stateFilters = [\n    { label: 'All', value: 'all' },\n    { label: 'OK', value: 'ok' },\n    { label: 'Not OK', value: 'not_ok' },\n    { label: 'Alerting', value: 'alerting' },\n    { label: 'No data', value: 'no_data' },\n    { label: 'Paused', value: 'paused' },\n    { label: 'Pending', value: 'pending' },\n  ];\n\n  componentDidMount() {\n    this.fetchRules();\n  }\n\n  componentDidUpdate(prevProps: Props) {\n    if (prevProps.queryParams.state !== this.props.queryParams.state) {\n      this.fetchRules();\n    }\n  }\n\n  async fetchRules() {\n    await this.props.getAlertRulesAsync({ state: this.getStateFilter() });\n  }\n\n  getStateFilter(): string {\n    return this.props.queryParams.state ?? 'all';\n  }\n\n  onStateFilterChanged = (option: SelectableValue) => {\n    locationService.partial({ state: option.value });\n  };\n\n  onOpenHowTo = () => {\n    appEvents.publish(new ShowModalReactEvent({ component: AlertHowToModal }));\n  };\n\n  onSearchQueryChange = (value: string) => {\n    this.props.setSearchQuery(value);\n  };\n\n  onTogglePause = (rule: AlertRule) => {\n    this.props.togglePauseAlertRule(rule.id, { paused: rule.state !== 'paused' });\n  };\n\n  alertStateFilterOption = ({ text, value }: { text: string; value: string }) => {\n    return (\n      <option key={value} value={value}>\n        {text}\n      </option>\n    );\n  };\n\n  render() {\n    const { navModel, alertRules, search, isLoading } = this.props;\n\n    return (\n      <Page navModel={navModel}>\n        <Page.Contents isLoading={isLoading}>\n          <div className=\"page-action-bar\">\n            <div className=\"gf-form gf-form--grow\">\n              <FilterInput placeholder=\"Search alerts\" value={search} onChange={this.onSearchQueryChange} />\n            </div>\n            <div className=\"gf-form\">\n              <label className=\"gf-form-label\">States</label>\n\n              <div className=\"width-13\">\n                <Select\n                  menuShouldPortal\n                  options={this.stateFilters}\n                  onChange={this.onStateFilterChanged}\n                  value={this.getStateFilter()}\n                />\n              </div>\n            </div>\n            <div className=\"page-action-bar__spacer\" />\n            {config.featureToggles.ngalert && (\n              <LinkButton variant=\"primary\" href=\"alerting/ng/new\">\n                Add NG Alert\n              </LinkButton>\n            )}\n            <Button variant=\"secondary\" onClick={this.onOpenHowTo}>\n              How to add an alert\n            </Button>\n          </div>\n          <VerticalGroup spacing=\"none\">\n            {alertRules.map((rule) => {\n              return (\n                <AlertRuleItem\n                  rule={rule as AlertRule}\n                  key={rule.id}\n                  search={search}\n                  onTogglePause={() => this.onTogglePause(rule as AlertRule)}\n                />\n              );\n            })}\n          </VerticalGroup>\n        </Page.Contents>\n      </Page>\n    );\n  }\n}\n\nexport default hot(module)(connector(AlertRuleListUnconnected));\n","import { Icon, IconName, useStyles, Tooltip } from '@grafana/ui';\nimport { PopoverContent } from '@grafana/ui/src/components/Tooltip/Tooltip';\nimport { TooltipPlacement } from '@grafana/ui/src/components/Tooltip/PopoverController';\nimport React, { FC } from 'react';\nimport { css, cx } from '@emotion/css';\nimport { Link } from 'react-router-dom';\n\ninterface Props {\n  tooltip: PopoverContent;\n  icon: IconName;\n\n  className?: string;\n  tooltipPlacement?: TooltipPlacement;\n  to?: string;\n  target?: string;\n  onClick?: (e: React.MouseEvent<HTMLDivElement, MouseEvent>) => void;\n  'data-testid'?: string;\n}\n\nexport const ActionIcon: FC<Props> = ({\n  tooltip,\n  icon,\n  to,\n  target,\n  onClick,\n  className,\n  tooltipPlacement = 'top',\n  ...rest\n}) => {\n  const iconEl = <Icon className={cx(useStyles(getStyle), className)} onClick={onClick} name={icon} {...rest} />;\n\n  return (\n    <Tooltip content={tooltip} placement={tooltipPlacement}>\n      {(() => {\n        if (to) {\n          return (\n            <Link to={to} target={target}>\n              {iconEl}\n            </Link>\n          );\n        }\n        return iconEl;\n      })()}\n    </Tooltip>\n  );\n};\n\nexport const getStyle = () => css`\n  cursor: pointer;\n`;\n","import EmptyListCTA from 'app/core/components/EmptyListCTA/EmptyListCTA';\nimport { contextSrv } from 'app/core/services/context_srv';\nimport React, { FC } from 'react';\nimport { CallToActionCard } from '@grafana/ui';\n\nexport const NoRulesSplash: FC = () => {\n  if (contextSrv.hasEditPermissionInFolders || contextSrv.isEditor) {\n    return (\n      <EmptyListCTA\n        title=\"You haven`t created any alert rules yet\"\n        buttonIcon=\"bell\"\n        buttonLink={'alerting/new'}\n        buttonTitle=\"New alert rule\"\n        proTip=\"you can also create alert rules from existing panels and queries.\"\n        proTipLink=\"https://grafana.com/docs/\"\n        proTipLinkTitle=\"Learn more\"\n        proTipTarget=\"_blank\"\n      />\n    );\n  }\n  return <CallToActionCard message=\"No rules exist yet.\" callToActionElement={<div />} />;\n};\n","import { useMemo } from 'react';\n\nimport { CombinedRuleGroup, CombinedRuleNamespace, RuleFilterState } from 'app/types/unified-alerting';\nimport { isCloudRulesSource } from '../utils/datasource';\nimport { isAlertingRule, isGrafanaRulerRule } from '../utils/rules';\nimport { getFiltersFromUrlParams } from '../utils/misc';\nimport { useQueryParams } from 'app/core/hooks/useQueryParams';\nimport { PromRuleType, RulerGrafanaRuleDTO } from 'app/types/unified-alerting-dto';\nimport { getDataSourceSrv } from '@grafana/runtime';\nimport { labelsMatchMatchers, parseMatchers } from '../utils/alertmanager';\n\nexport const useFilteredRules = (namespaces: CombinedRuleNamespace[]) => {\n  const [queryParams] = useQueryParams();\n  const filters = getFiltersFromUrlParams(queryParams);\n\n  return useMemo(() => {\n    if (!filters.queryString && !filters.dataSource && !filters.alertState) {\n      return namespaces;\n    }\n    const filteredNamespaces = namespaces\n      // Filter by data source\n      // TODO: filter by multiple data sources for grafana-managed alerts\n      .filter(({ rulesSource }) =>\n        filters.dataSource && isCloudRulesSource(rulesSource) ? rulesSource.name === filters.dataSource : true\n      )\n      // If a namespace and group have rules that match the rules filters then keep them.\n      .reduce(reduceNamespaces(filters), [] as CombinedRuleNamespace[]);\n    return filteredNamespaces;\n  }, [namespaces, filters]);\n};\n\nconst reduceNamespaces = (filters: RuleFilterState) => {\n  return (namespaceAcc: CombinedRuleNamespace[], namespace: CombinedRuleNamespace) => {\n    const groups = namespace.groups.reduce(reduceGroups(filters), [] as CombinedRuleGroup[]);\n\n    if (groups.length) {\n      namespaceAcc.push({\n        ...namespace,\n        groups,\n      });\n    }\n\n    return namespaceAcc;\n  };\n};\n\n// Reduces groups to only groups that have rules matching the filters\nconst reduceGroups = (filters: RuleFilterState) => {\n  return (groupAcc: CombinedRuleGroup[], group: CombinedRuleGroup) => {\n    const rules = group.rules.filter((rule) => {\n      if (filters.dataSource && isGrafanaRulerRule(rule.rulerRule) && !isQueryingDataSource(rule.rulerRule, filters)) {\n        return false;\n      }\n      // Query strings can match alert name, label keys, and label values\n      if (filters.queryString) {\n        const normalizedQueryString = filters.queryString.toLocaleLowerCase();\n        const doesNameContainsQueryString = rule.name?.toLocaleLowerCase().includes(normalizedQueryString);\n        const matchers = parseMatchers(filters.queryString);\n\n        const doRuleLabelsMatchQuery = labelsMatchMatchers(rule.labels, matchers);\n        const doAlertsContainMatchingLabels =\n          rule.promRule &&\n          rule.promRule.type === PromRuleType.Alerting &&\n          rule.promRule.alerts &&\n          rule.promRule.alerts.some((alert) => labelsMatchMatchers(alert.labels, matchers));\n\n        if (!(doesNameContainsQueryString || doRuleLabelsMatchQuery || doAlertsContainMatchingLabels)) {\n          return false;\n        }\n      }\n      if (\n        filters.alertState &&\n        !(rule.promRule && isAlertingRule(rule.promRule) && rule.promRule.state === filters.alertState)\n      ) {\n        return false;\n      }\n      return true;\n    });\n    // Add rules to the group that match the rule list filters\n    if (rules.length) {\n      groupAcc.push({\n        ...group,\n        rules,\n      });\n    }\n    return groupAcc;\n  };\n};\n\nconst isQueryingDataSource = (rulerRule: RulerGrafanaRuleDTO, filter: RuleFilterState): boolean => {\n  if (!filter.dataSource) {\n    return true;\n  }\n\n  return !!rulerRule.grafana_alert.data.find((query) => {\n    if (!query.datasourceUid) {\n      return false;\n    }\n    const ds = getDataSourceSrv().getInstanceSettings(query.datasourceUid);\n    return ds?.name === filter.dataSource;\n  });\n};\n","import React, { FormEvent, useState } from 'react';\nimport { Button, Icon, Input, Label, RadioButtonGroup, Tooltip, useStyles } from '@grafana/ui';\nimport { DataSourceInstanceSettings, GrafanaTheme, SelectableValue } from '@grafana/data';\nimport { css, cx } from '@emotion/css';\nimport { debounce } from 'lodash';\n\nimport { PromAlertingRuleState } from 'app/types/unified-alerting-dto';\nimport { useQueryParams } from 'app/core/hooks/useQueryParams';\nimport { getFiltersFromUrlParams } from '../../utils/misc';\nimport { DataSourcePicker } from '@grafana/runtime';\nimport { alertStateToReadable } from '../../utils/rules';\n\nconst ViewOptions: SelectableValue[] = [\n  {\n    icon: 'folder',\n    label: 'Groups',\n    value: 'group',\n  },\n  {\n    icon: 'heart-rate',\n    label: 'State',\n    value: 'state',\n  },\n];\n\nconst RulesFilter = () => {\n  const [queryParams, setQueryParams] = useQueryParams();\n  // This key is used to force a rerender on the inputs when the filters are cleared\n  const [filterKey, setFilterKey] = useState<number>(Math.floor(Math.random() * 100));\n  const dataSourceKey = `dataSource-${filterKey}`;\n  const queryStringKey = `queryString-${filterKey}`;\n\n  const { dataSource, alertState, queryString } = getFiltersFromUrlParams(queryParams);\n\n  const styles = useStyles(getStyles);\n  const stateOptions = Object.entries(PromAlertingRuleState).map(([key, value]) => ({\n    label: alertStateToReadable(value),\n    value,\n  }));\n\n  const handleDataSourceChange = (dataSourceValue: DataSourceInstanceSettings) => {\n    setQueryParams({ dataSource: dataSourceValue.name });\n  };\n\n  const handleQueryStringChange = debounce((e: FormEvent<HTMLInputElement>) => {\n    const target = e.target as HTMLInputElement;\n    setQueryParams({ queryString: target.value || null });\n  }, 600);\n\n  const handleAlertStateChange = (value: string) => {\n    setQueryParams({ alertState: value });\n  };\n\n  const handleViewChange = (view: string) => {\n    setQueryParams({ view });\n  };\n\n  const handleClearFiltersClick = () => {\n    setQueryParams({\n      alertState: null,\n      queryString: null,\n      dataSource: null,\n    });\n    setFilterKey(filterKey + 1);\n  };\n\n  const searchIcon = <Icon name={'search'} />;\n  return (\n    <div className={styles.container}>\n      <div className={styles.inputWidth}>\n        <Label>Select data source</Label>\n        <DataSourcePicker\n          key={dataSourceKey}\n          alerting\n          noDefault\n          current={dataSource}\n          onChange={handleDataSourceChange}\n        />\n      </div>\n      <div className={cx(styles.flexRow, styles.spaceBetween)}>\n        <div className={styles.flexRow}>\n          <div className={styles.rowChild}>\n            <Label>\n              <Tooltip\n                content={\n                  <div>\n                    Filter rules and alerts using label querying, ex:\n                    <pre>{`{severity=\"critical\", instance=~\"cluster-us-.+\"}`}</pre>\n                  </div>\n                }\n              >\n                <Icon name=\"info-circle\" className={styles.tooltip} />\n              </Tooltip>\n              Search by label\n            </Label>\n            <Input\n              key={queryStringKey}\n              className={styles.inputWidth}\n              prefix={searchIcon}\n              onChange={handleQueryStringChange}\n              defaultValue={queryString}\n              placeholder=\"Search\"\n              data-testid=\"search-query-input\"\n            />\n          </div>\n          <div className={styles.rowChild}>\n            <Label>State</Label>\n            <RadioButtonGroup options={stateOptions} value={alertState} onChange={handleAlertStateChange} />\n          </div>\n          <div className={styles.rowChild}>\n            <Label>View as</Label>\n            <RadioButtonGroup\n              options={ViewOptions}\n              value={String(queryParams['view'] || 'group')}\n              onChange={handleViewChange}\n            />\n          </div>\n        </div>\n        {(dataSource || alertState || queryString) && (\n          <div className={styles.flexRow}>\n            <Button\n              className={styles.clearButton}\n              fullWidth={false}\n              icon=\"times\"\n              variant=\"secondary\"\n              onClick={handleClearFiltersClick}\n            >\n              Clear filters\n            </Button>\n          </div>\n        )}\n      </div>\n    </div>\n  );\n};\n\nconst getStyles = (theme: GrafanaTheme) => {\n  return {\n    container: css`\n      display: flex;\n      flex-direction: column;\n      border-bottom: 1px solid ${theme.colors.border1};\n      padding-bottom: ${theme.spacing.sm};\n\n      & > div {\n        margin-bottom: ${theme.spacing.sm};\n      }\n    `,\n    inputWidth: css`\n      width: 340px;\n      flex-grow: 0;\n    `,\n    flexRow: css`\n      display: flex;\n      flex-direction: row;\n      align-items: flex-end;\n      width: 100%;\n      flex-wrap: wrap;\n    `,\n    spaceBetween: css`\n      justify-content: space-between;\n    `,\n    rowChild: css`\n      margin-right: ${theme.spacing.sm};\n      margin-top: ${theme.spacing.sm};\n    `,\n    tooltip: css`\n      margin: 0 ${theme.spacing.xs};\n    `,\n    clearButton: css`\n      margin-top: ${theme.spacing.sm};\n    `,\n  };\n};\n\nexport default RulesFilter;\n","import { GrafanaTheme2 } from '@grafana/data';\nimport { useStyles2 } from '@grafana/ui';\nimport { PromAlertingRuleState } from 'app/types/unified-alerting-dto';\nimport { css } from '@emotion/css';\nimport React, { FC } from 'react';\n\ntype Props = {\n  status: PromAlertingRuleState | 'neutral';\n};\n\nexport const StateColoredText: FC<Props> = ({ children, status }) => {\n  const styles = useStyles2(getStyles);\n\n  return <span className={styles[status]}>{children || status}</span>;\n};\n\nconst getStyles = (theme: GrafanaTheme2) => ({\n  [PromAlertingRuleState.Inactive]: css`\n    color: ${theme.colors.success.text};\n  `,\n  [PromAlertingRuleState.Pending]: css`\n    color: ${theme.colors.warning.text};\n  `,\n  [PromAlertingRuleState.Firing]: css`\n    color: ${theme.colors.error.text};\n  `,\n  neutral: css`\n    color: ${theme.colors.text.secondary};\n  `,\n});\n","import { CombinedRule, CombinedRuleGroup, CombinedRuleNamespace } from 'app/types/unified-alerting';\nimport { PromAlertingRuleState } from 'app/types/unified-alerting-dto';\nimport pluralize from 'pluralize';\nimport React, { FC, Fragment, useMemo } from 'react';\nimport { isAlertingRule, isRecordingRule, isRecordingRulerRule } from '../../utils/rules';\nimport { StateColoredText } from '../StateColoredText';\n\ninterface Props {\n  showInactive?: boolean;\n  showRecording?: boolean;\n  group?: CombinedRuleGroup;\n  namespaces?: CombinedRuleNamespace[];\n}\n\nconst emptyStats = {\n  total: 0,\n  recording: 0,\n  [PromAlertingRuleState.Firing]: 0,\n  [PromAlertingRuleState.Pending]: 0,\n  [PromAlertingRuleState.Inactive]: 0,\n  error: 0,\n} as const;\n\nexport const RuleStats: FC<Props> = ({ showInactive, showRecording, group, namespaces }) => {\n  const calculated = useMemo(() => {\n    const stats = { ...emptyStats };\n    const calcRule = (rule: CombinedRule) => {\n      if (rule.promRule && isAlertingRule(rule.promRule)) {\n        stats[rule.promRule.state] += 1;\n      }\n      if (rule.promRule?.health === 'err' || rule.promRule?.health === 'error') {\n        stats.error += 1;\n      }\n      if (\n        (rule.promRule && isRecordingRule(rule.promRule)) ||\n        (rule.rulerRule && isRecordingRulerRule(rule.rulerRule))\n      ) {\n        stats.recording += 1;\n      }\n      stats.total += 1;\n    };\n    if (group) {\n      group.rules.forEach(calcRule);\n    }\n    if (namespaces) {\n      namespaces.forEach((namespace) => namespace.groups.forEach((group) => group.rules.forEach(calcRule)));\n    }\n    return stats;\n  }, [group, namespaces]);\n\n  const statsComponents: React.ReactNode[] = [];\n  if (calculated[PromAlertingRuleState.Firing]) {\n    statsComponents.push(\n      <StateColoredText key=\"firing\" status={PromAlertingRuleState.Firing}>\n        {calculated[PromAlertingRuleState.Firing]} firing\n      </StateColoredText>\n    );\n  }\n  if (calculated.error) {\n    statsComponents.push(\n      <StateColoredText key=\"errors\" status={PromAlertingRuleState.Firing}>\n        {calculated.error} errors\n      </StateColoredText>\n    );\n  }\n  if (calculated[PromAlertingRuleState.Pending]) {\n    statsComponents.push(\n      <StateColoredText key=\"pending\" status={PromAlertingRuleState.Pending}>\n        {calculated[PromAlertingRuleState.Pending]} pending\n      </StateColoredText>\n    );\n  }\n  if (showInactive && calculated[PromAlertingRuleState.Inactive]) {\n    statsComponents.push(\n      <StateColoredText key=\"inactive\" status=\"neutral\">\n        {calculated[PromAlertingRuleState.Inactive]} normal\n      </StateColoredText>\n    );\n  }\n  if (showRecording && calculated.recording) {\n    statsComponents.push(\n      <StateColoredText key=\"recording\" status=\"neutral\">\n        {calculated.recording} recording\n      </StateColoredText>\n    );\n  }\n\n  return (\n    <div>\n      <span>\n        {calculated.total} {pluralize('rule', calculated.total)}\n      </span>\n      {!!statsComponents.length && (\n        <>\n          <span>: </span>\n          {statsComponents.reduce<React.ReactNode[]>(\n            (prev, curr, idx) =>\n              prev.length\n                ? [\n                    prev,\n                    <Fragment key={idx}>\n                      <span>, </span>\n                    </Fragment>,\n                    curr,\n                  ]\n                : [curr],\n            []\n          )}\n        </>\n      )}\n    </div>\n  );\n};\n","import { CombinedRuleGroup, CombinedRuleNamespace } from 'app/types/unified-alerting';\nimport React, { FC, useState } from 'react';\nimport { Icon, Tooltip, useStyles2 } from '@grafana/ui';\nimport { GrafanaTheme2 } from '@grafana/data';\nimport { css } from '@emotion/css';\nimport { isGrafanaRulerRule } from '../../utils/rules';\nimport { CollapseToggle } from '../CollapseToggle';\nimport { RulesTable } from './RulesTable';\nimport { GRAFANA_RULES_SOURCE_NAME, isCloudRulesSource } from '../../utils/datasource';\nimport { ActionIcon } from './ActionIcon';\nimport { useHasRuler } from '../../hooks/useHasRuler';\nimport kbn from 'app/core/utils/kbn';\nimport { useFolder } from '../../hooks/useFolder';\nimport { RuleStats } from './RuleStats';\n\ninterface Props {\n  namespace: CombinedRuleNamespace;\n  group: CombinedRuleGroup;\n}\n\nexport const RulesGroup: FC<Props> = React.memo(({ group, namespace }) => {\n  const { rulesSource } = namespace;\n  const styles = useStyles2(getStyles);\n\n  const [isCollapsed, setIsCollapsed] = useState(true);\n\n  const hasRuler = useHasRuler();\n  const rulerRule = group.rules[0]?.rulerRule;\n  const folderUID = (rulerRule && isGrafanaRulerRule(rulerRule) && rulerRule.grafana_alert.namespace_uid) || undefined;\n  const { folder } = useFolder(folderUID);\n\n  const actionIcons: React.ReactNode[] = [];\n\n  // for grafana, link to folder views\n  if (rulesSource === GRAFANA_RULES_SOURCE_NAME) {\n    if (folderUID) {\n      const baseUrl = `/dashboards/f/${folderUID}/${kbn.slugifyForUrl(namespace.name)}`;\n      if (folder?.canSave) {\n        actionIcons.push(\n          <ActionIcon key=\"edit\" icon=\"pen\" tooltip=\"edit\" to={baseUrl + '/settings'} target=\"__blank\" />\n        );\n      }\n      if (folder?.canAdmin) {\n        actionIcons.push(\n          <ActionIcon\n            key=\"manage-perms\"\n            icon=\"lock\"\n            tooltip=\"manage permissions\"\n            to={baseUrl + '/permissions'}\n            target=\"__blank\"\n          />\n        );\n      }\n    } else if (hasRuler(rulesSource)) {\n      actionIcons.push(<ActionIcon key=\"edit\" icon=\"pen\" tooltip=\"edit\" />); // @TODO\n    }\n  }\n\n  const groupName = isCloudRulesSource(rulesSource) ? `${namespace.name} > ${group.name}` : namespace.name;\n\n  return (\n    <div className={styles.wrapper} data-testid=\"rule-group\">\n      <div className={styles.header} data-testid=\"rule-group-header\">\n        <CollapseToggle\n          className={styles.collapseToggle}\n          isCollapsed={isCollapsed}\n          onToggle={setIsCollapsed}\n          data-testid=\"group-collapse-toggle\"\n        />\n        <Icon name={isCollapsed ? 'folder-open' : 'folder'} />\n        {isCloudRulesSource(rulesSource) && (\n          <Tooltip content={rulesSource.name} placement=\"top\">\n            <img className={styles.dataSourceIcon} src={rulesSource.meta.info.logos.small} />\n          </Tooltip>\n        )}\n        <h6 className={styles.heading}>{groupName}</h6>\n        <div className={styles.spacer} />\n        <div className={styles.headerStats}>\n          <RuleStats showInactive={false} group={group} />\n        </div>\n        {!!actionIcons.length && (\n          <>\n            <div className={styles.actionsSeparator}>|</div>\n            <div className={styles.actionIcons}>{actionIcons}</div>\n          </>\n        )}\n      </div>\n      {!isCollapsed && (\n        <RulesTable showSummaryColumn={true} className={styles.rulesTable} showGuidelines={true} rules={group.rules} />\n      )}\n    </div>\n  );\n});\n\nRulesGroup.displayName = 'RulesGroup';\n\nexport const getStyles = (theme: GrafanaTheme2) => ({\n  wrapper: css`\n    & + & {\n      margin-top: ${theme.spacing(2)};\n    }\n  `,\n  header: css`\n    display: flex;\n    flex-direction: row;\n    align-items: center;\n    padding: ${theme.spacing(1)} ${theme.spacing(1)} ${theme.spacing(1)} 0;\n    background-color: ${theme.colors.background.secondary};\n    flex-wrap: wrap;\n  `,\n  headerStats: css`\n    span {\n      vertical-align: middle;\n    }\n\n    ${theme.breakpoints.down('sm')} {\n      order: 2;\n      width: 100%;\n      padding-left: ${theme.spacing(1)};\n    }\n  `,\n  heading: css`\n    margin-left: ${theme.spacing(1)};\n    margin-bottom: 0;\n  `,\n  spacer: css`\n    flex: 1;\n  `,\n  collapseToggle: css`\n    background: none;\n    border: none;\n    margin-top: -${theme.spacing(1)};\n    margin-bottom: -${theme.spacing(1)};\n\n    svg {\n      margin-bottom: 0;\n    }\n  `,\n  dataSourceIcon: css`\n    width: ${theme.spacing(2)};\n    height: ${theme.spacing(2)};\n    margin-left: ${theme.spacing(2)};\n  `,\n  dataSourceOrigin: css`\n    margin-right: 1em;\n    color: ${theme.colors.text.disabled};\n  `,\n  actionsSeparator: css`\n    margin: 0 ${theme.spacing(2)};\n  `,\n  actionIcons: css`\n    & > * + * {\n      margin-left: ${theme.spacing(1)};\n    }\n  `,\n  rulesTable: css`\n    margin-top: ${theme.spacing(3)};\n  `,\n});\n","import { css } from '@emotion/css';\nimport { GrafanaTheme } from '@grafana/data';\nimport { LoadingPlaceholder, useStyles } from '@grafana/ui';\nimport React, { FC, useMemo } from 'react';\nimport { useUnifiedAlertingSelector } from '../../hooks/useUnifiedAlertingSelector';\nimport { RulesGroup } from './RulesGroup';\nimport { getRulesDataSources, getRulesSourceName } from '../../utils/datasource';\nimport { CombinedRuleNamespace } from 'app/types/unified-alerting';\nimport pluralize from 'pluralize';\n\ninterface Props {\n  namespaces: CombinedRuleNamespace[];\n}\n\nexport const CloudRules: FC<Props> = ({ namespaces }) => {\n  const styles = useStyles(getStyles);\n  const rules = useUnifiedAlertingSelector((state) => state.promRules);\n  const rulesDataSources = useMemo(getRulesDataSources, []);\n\n  const dataSourcesLoading = useMemo(() => rulesDataSources.filter((ds) => rules[ds.name]?.loading), [\n    rules,\n    rulesDataSources,\n  ]);\n\n  return (\n    <section className={styles.wrapper}>\n      <div className={styles.sectionHeader}>\n        <h5>Cortex / Loki</h5>\n        {dataSourcesLoading.length ? (\n          <LoadingPlaceholder\n            className={styles.loader}\n            text={`Loading rules from ${dataSourcesLoading.length} ${pluralize('source', dataSourcesLoading.length)}`}\n          />\n        ) : (\n          <div />\n        )}\n      </div>\n\n      {namespaces.map((namespace) => {\n        const { groups, rulesSource } = namespace;\n        return groups.map((group) => (\n          <RulesGroup\n            group={group}\n            key={`${getRulesSourceName(rulesSource)}-${name}-${group.name}`}\n            namespace={namespace}\n          />\n        ));\n      })}\n      {namespaces?.length === 0 && !!rulesDataSources.length && <p>No rules found.</p>}\n      {!rulesDataSources.length && <p>There are no Prometheus or Loki datas sources configured.</p>}\n    </section>\n  );\n};\n\nconst getStyles = (theme: GrafanaTheme) => ({\n  loader: css`\n    margin-bottom: 0;\n  `,\n  sectionHeader: css`\n    display: flex;\n    justify-content: space-between;\n  `,\n  wrapper: css`\n    margin-bottom: ${theme.spacing.xl};\n  `,\n});\n","import { css } from '@emotion/css';\nimport { GrafanaTheme } from '@grafana/data';\nimport { LoadingPlaceholder, useStyles } from '@grafana/ui';\nimport React, { FC } from 'react';\nimport { useUnifiedAlertingSelector } from '../../hooks/useUnifiedAlertingSelector';\nimport { RulesGroup } from './RulesGroup';\nimport { GRAFANA_RULES_SOURCE_NAME } from '../../utils/datasource';\nimport { CombinedRuleNamespace } from 'app/types/unified-alerting';\nimport { initialAsyncRequestState } from '../../utils/redux';\n\ninterface Props {\n  namespaces: CombinedRuleNamespace[];\n}\n\nexport const GrafanaRules: FC<Props> = ({ namespaces }) => {\n  const styles = useStyles(getStyles);\n  const { loading } = useUnifiedAlertingSelector(\n    (state) => state.promRules[GRAFANA_RULES_SOURCE_NAME] || initialAsyncRequestState\n  );\n\n  return (\n    <section className={styles.wrapper}>\n      <div className={styles.sectionHeader}>\n        <h5>Grafana</h5>\n        {loading ? <LoadingPlaceholder className={styles.loader} text=\"Loading...\" /> : <div />}\n      </div>\n\n      {namespaces?.map((namespace) =>\n        namespace.groups.map((group) => (\n          <RulesGroup group={group} key={`${namespace.name}-${group.name}`} namespace={namespace} />\n        ))\n      )}\n      {namespaces?.length === 0 && <p>No rules found.</p>}\n    </section>\n  );\n};\n\nconst getStyles = (theme: GrafanaTheme) => ({\n  loader: css`\n    margin-bottom: 0;\n  `,\n  sectionHeader: css`\n    display: flex;\n    justify-content: space-between;\n  `,\n  wrapper: css`\n    margin-bottom: ${theme.spacing.xl};\n  `,\n});\n","import { CombinedRuleNamespace } from 'app/types/unified-alerting';\nimport React, { FC, useMemo } from 'react';\nimport { isCloudRulesSource, isGrafanaRulesSource } from '../../utils/datasource';\nimport { CloudRules } from './CloudRules';\nimport { GrafanaRules } from './GrafanaRules';\n\ninterface Props {\n  namespaces: CombinedRuleNamespace[];\n}\n\nexport const RuleListGroupView: FC<Props> = ({ namespaces }) => {\n  const [grafanaNamespaces, cloudNamespaces] = useMemo(() => {\n    const sorted = namespaces\n      .map((namespace) => ({\n        ...namespace,\n        groups: namespace.groups.sort((a, b) => a.name.localeCompare(b.name)),\n      }))\n      .sort((a, b) => a.name.localeCompare(b.name));\n    return [\n      sorted.filter((ns) => isGrafanaRulesSource(ns.rulesSource)),\n      sorted.filter((ns) => isCloudRulesSource(ns.rulesSource)),\n    ];\n  }, [namespaces]);\n\n  return (\n    <>\n      <GrafanaRules namespaces={grafanaNamespaces} />\n      <CloudRules namespaces={cloudNamespaces} />\n    </>\n  );\n};\n","import { css } from '@emotion/css';\nimport { GrafanaTheme2 } from '@grafana/data';\nimport { useStyles2 } from '@grafana/ui';\nimport { CombinedRule } from 'app/types/unified-alerting';\nimport { PromAlertingRuleState } from 'app/types/unified-alerting-dto';\nimport React, { FC, useState } from 'react';\nimport { alertStateToReadable } from '../../utils/rules';\nimport { CollapseToggle } from '../CollapseToggle';\nimport { RulesTable } from './RulesTable';\n\ninterface Props {\n  rules: CombinedRule[];\n  state: PromAlertingRuleState;\n  defaultCollapsed?: boolean;\n}\n\nexport const RuleListStateSection: FC<Props> = ({ rules, state, defaultCollapsed = false }) => {\n  const [collapsed, setCollapsed] = useState(defaultCollapsed);\n  const styles = useStyles2(getStyles);\n  return (\n    <>\n      <h4 className={styles.header}>\n        <CollapseToggle\n          className={styles.collapseToggle}\n          size=\"xxl\"\n          isCollapsed={collapsed}\n          onToggle={() => setCollapsed(!collapsed)}\n        />\n        {alertStateToReadable(state)} ({rules.length})\n      </h4>\n      {!collapsed && <RulesTable className={styles.rulesTable} rules={rules} showGroupColumn={true} />}\n    </>\n  );\n};\n\nconst getStyles = (theme: GrafanaTheme2) => ({\n  collapseToggle: css`\n    vertical-align: middle;\n  `,\n  header: css`\n    margin-top: ${theme.spacing(2)};\n  `,\n  rulesTable: css`\n    margin-top: ${theme.spacing(3)};\n  `,\n});\n","import { DataSourceInstanceSettings, GrafanaTheme, urlUtil } from '@grafana/data';\nimport { useStyles, Alert, LinkButton, withErrorBoundary } from '@grafana/ui';\nimport { SerializedError } from '@reduxjs/toolkit';\nimport React, { useEffect, useMemo } from 'react';\nimport { useDispatch } from 'react-redux';\nimport { AlertingPageWrapper } from './components/AlertingPageWrapper';\nimport { NoRulesSplash } from './components/rules/NoRulesCTA';\nimport { useUnifiedAlertingSelector } from './hooks/useUnifiedAlertingSelector';\nimport { useFilteredRules } from './hooks/useFilteredRules';\nimport { fetchAllPromAndRulerRulesAction } from './state/actions';\nimport { getAllRulesSourceNames, getRulesDataSources, GRAFANA_RULES_SOURCE_NAME } from './utils/datasource';\nimport { css } from '@emotion/css';\nimport { useCombinedRuleNamespaces } from './hooks/useCombinedRuleNamespaces';\nimport { RULE_LIST_POLL_INTERVAL_MS } from './utils/constants';\nimport { isRulerNotSupportedResponse } from './utils/rules';\nimport RulesFilter from './components/rules/RulesFilter';\nimport { RuleListGroupView } from './components/rules/RuleListGroupView';\nimport { RuleListStateView } from './components/rules/RuleListStateView';\nimport { useQueryParams } from 'app/core/hooks/useQueryParams';\nimport { useLocation } from 'react-router-dom';\nimport { contextSrv } from 'app/core/services/context_srv';\nimport { RuleStats } from './components/rules/RuleStats';\n\nconst VIEWS = {\n  groups: RuleListGroupView,\n  state: RuleListStateView,\n};\n\nexport const RuleList = withErrorBoundary(\n  () => {\n    const dispatch = useDispatch();\n    const styles = useStyles(getStyles);\n    const rulesDataSourceNames = useMemo(getAllRulesSourceNames, []);\n    const location = useLocation();\n\n    const [queryParams] = useQueryParams();\n\n    const view = VIEWS[queryParams['view'] as keyof typeof VIEWS]\n      ? (queryParams['view'] as keyof typeof VIEWS)\n      : 'groups';\n\n    const ViewComponent = VIEWS[view];\n\n    // fetch rules, then poll every RULE_LIST_POLL_INTERVAL_MS\n    useEffect(() => {\n      dispatch(fetchAllPromAndRulerRulesAction());\n      const interval = setInterval(() => dispatch(fetchAllPromAndRulerRulesAction()), RULE_LIST_POLL_INTERVAL_MS);\n      return () => {\n        clearInterval(interval);\n      };\n    }, [dispatch]);\n\n    const promRuleRequests = useUnifiedAlertingSelector((state) => state.promRules);\n    const rulerRuleRequests = useUnifiedAlertingSelector((state) => state.rulerRules);\n\n    const dispatched = rulesDataSourceNames.some(\n      (name) => promRuleRequests[name]?.dispatched || rulerRuleRequests[name]?.dispatched\n    );\n    const loading = rulesDataSourceNames.some(\n      (name) => promRuleRequests[name]?.loading || rulerRuleRequests[name]?.loading\n    );\n    const haveResults = rulesDataSourceNames.some(\n      (name) =>\n        (promRuleRequests[name]?.result?.length && !promRuleRequests[name]?.error) ||\n        (Object.keys(rulerRuleRequests[name]?.result || {}).length && !rulerRuleRequests[name]?.error)\n    );\n\n    const [promReqeustErrors, rulerRequestErrors] = useMemo(\n      () =>\n        [promRuleRequests, rulerRuleRequests].map((requests) =>\n          getRulesDataSources().reduce<Array<{ error: SerializedError; dataSource: DataSourceInstanceSettings }>>(\n            (result, dataSource) => {\n              const error = requests[dataSource.name]?.error;\n              if (requests[dataSource.name] && error && !isRulerNotSupportedResponse(requests[dataSource.name])) {\n                return [...result, { dataSource, error }];\n              }\n              return result;\n            },\n            []\n          )\n        ),\n      [promRuleRequests, rulerRuleRequests]\n    );\n\n    const grafanaPromError = promRuleRequests[GRAFANA_RULES_SOURCE_NAME]?.error;\n    const grafanaRulerError = rulerRuleRequests[GRAFANA_RULES_SOURCE_NAME]?.error;\n\n    const showNewAlertSplash = dispatched && !loading && !haveResults;\n\n    const combinedNamespaces = useCombinedRuleNamespaces();\n    const filteredNamespaces = useFilteredRules(combinedNamespaces);\n    return (\n      <AlertingPageWrapper pageId=\"alert-list\" isLoading={loading && !haveResults}>\n        {(promReqeustErrors.length || rulerRequestErrors.length || grafanaPromError) && (\n          <Alert data-testid=\"cloud-rulessource-errors\" title=\"Errors loading rules\" severity=\"error\">\n            {grafanaPromError && (\n              <div>Failed to load Grafana rules state: {grafanaPromError.message || 'Unknown error.'}</div>\n            )}\n            {grafanaRulerError && (\n              <div>Failed to load Grafana rules config: {grafanaRulerError.message || 'Unknown error.'}</div>\n            )}\n            {promReqeustErrors.map(({ dataSource, error }) => (\n              <div key={dataSource.name}>\n                Failed to load rules state from <a href={`datasources/edit/${dataSource.uid}`}>{dataSource.name}</a>:{' '}\n                {error.message || 'Unknown error.'}\n              </div>\n            ))}\n            {rulerRequestErrors.map(({ dataSource, error }) => (\n              <div key={dataSource.name}>\n                Failed to load rules config from <a href={'datasources/edit/${dataSource.uid}'}>{dataSource.name}</a>:{' '}\n                {error.message || 'Unknown error.'}\n              </div>\n            ))}\n          </Alert>\n        )}\n        {!showNewAlertSplash && (\n          <>\n            <RulesFilter />\n            <div className={styles.break} />\n            <div className={styles.buttonsContainer}>\n              <RuleStats showInactive={true} showRecording={true} namespaces={filteredNamespaces} />\n              <div />\n              {(contextSrv.hasEditPermissionInFolders || contextSrv.isEditor) && (\n                <LinkButton\n                  href={urlUtil.renderUrl('alerting/new', { returnTo: location.pathname + location.search })}\n                  icon=\"plus\"\n                >\n                  New alert rule\n                </LinkButton>\n              )}\n            </div>\n          </>\n        )}\n        {showNewAlertSplash && <NoRulesSplash />}\n        {haveResults && <ViewComponent namespaces={filteredNamespaces} />}\n      </AlertingPageWrapper>\n    );\n  },\n  { style: 'page' }\n);\n\nconst getStyles = (theme: GrafanaTheme) => ({\n  break: css`\n    width: 100%;\n    height: 0;\n    margin-bottom: ${theme.spacing.md};\n    border-bottom: solid 1px ${theme.colors.border2};\n  `,\n  iconError: css`\n    color: ${theme.palette.red};\n    margin-right: ${theme.spacing.md};\n  `,\n  buttonsContainer: css`\n    margin-bottom: ${theme.spacing.md};\n    display: flex;\n    justify-content: space-between;\n  `,\n});\n","import { useQueryParams } from 'app/core/hooks/useQueryParams';\nimport { CombinedRule, CombinedRuleNamespace } from 'app/types/unified-alerting';\nimport { PromAlertingRuleState } from 'app/types/unified-alerting-dto';\nimport React, { FC, useMemo } from 'react';\nimport { getFiltersFromUrlParams } from '../../utils/misc';\nimport { isAlertingRule } from '../../utils/rules';\nimport { RuleListStateSection } from './RuleListStateSection';\n\ninterface Props {\n  namespaces: CombinedRuleNamespace[];\n}\n\ntype GroupedRules = Record<PromAlertingRuleState, CombinedRule[]>;\n\nexport const RuleListStateView: FC<Props> = ({ namespaces }) => {\n  const filters = getFiltersFromUrlParams(useQueryParams()[0]);\n\n  const groupedRules = useMemo(() => {\n    const result: GroupedRules = {\n      [PromAlertingRuleState.Firing]: [],\n      [PromAlertingRuleState.Inactive]: [],\n      [PromAlertingRuleState.Pending]: [],\n    };\n\n    namespaces.forEach((namespace) =>\n      namespace.groups.forEach((group) =>\n        group.rules.forEach((rule) => {\n          if (rule.promRule && isAlertingRule(rule.promRule)) {\n            result[rule.promRule.state].push(rule);\n          }\n        })\n      )\n    );\n\n    Object.values(result).forEach((rules) => rules.sort((a, b) => a.name.localeCompare(b.name)));\n\n    return result;\n  }, [namespaces]);\n  return (\n    <>\n      {(!filters.alertState || filters.alertState === PromAlertingRuleState.Firing) && (\n        <RuleListStateSection state={PromAlertingRuleState.Firing} rules={groupedRules[PromAlertingRuleState.Firing]} />\n      )}\n      {(!filters.alertState || filters.alertState === PromAlertingRuleState.Pending) && (\n        <RuleListStateSection\n          state={PromAlertingRuleState.Pending}\n          rules={groupedRules[PromAlertingRuleState.Pending]}\n        />\n      )}\n      {(!filters.alertState || filters.alertState === PromAlertingRuleState.Inactive) && (\n        <RuleListStateSection\n          defaultCollapsed={filters.alertState !== PromAlertingRuleState.Inactive}\n          state={PromAlertingRuleState.Inactive}\n          rules={groupedRules[PromAlertingRuleState.Inactive]}\n        />\n      )}\n    </>\n  );\n};\n","import { config } from '@grafana/runtime';\nimport { RuleList } from './unified/RuleList';\nimport AlertRuleList from './AlertRuleList';\n\n// route between unified and \"old\" alerting pages based on feature flag\n\nexport default config.featureToggles.ngalert ? RuleList : AlertRuleList;\n","import { css, cx } from '@emotion/css';\nimport { GrafanaTheme2 } from '@grafana/data';\nimport { useStyles2 } from '@grafana/ui';\nimport React from 'react';\nimport { DynamicTable, DynamicTableProps } from './DynamicTable';\n\nexport type DynamicTableWithGuidelinesProps<T> = Omit<DynamicTableProps<T>, 'renderPrefixHeader, renderPrefixCell'>;\n\n// DynamicTable, but renders visual guidelines on the left, for larger screen widths\nexport const DynamicTableWithGuidelines = <T extends object>({\n  renderExpandedContent,\n  ...props\n}: DynamicTableWithGuidelinesProps<T>) => {\n  const styles = useStyles2(getStyles);\n  return (\n    <DynamicTable\n      renderExpandedContent={\n        renderExpandedContent\n          ? (item, index, items) => (\n              <>\n                {!(index === items.length - 1) && <div className={cx(styles.contentGuideline, styles.guideline)} />}\n                {renderExpandedContent(item, index, items)}\n              </>\n            )\n          : undefined\n      }\n      renderPrefixHeader={() => (\n        <div className={styles.relative}>\n          <div className={cx(styles.headerGuideline, styles.guideline)} />\n        </div>\n      )}\n      renderPrefixCell={(_, index, items) => (\n        <div className={styles.relative}>\n          <div className={cx(styles.topGuideline, styles.guideline)} />\n          {!(index === items.length - 1) && <div className={cx(styles.bottomGuideline, styles.guideline)} />}\n        </div>\n      )}\n      {...props}\n    />\n  );\n};\n\nexport const getStyles = (theme: GrafanaTheme2) => ({\n  relative: css`\n    position: relative;\n    height: 100%;\n  `,\n  guideline: css`\n    left: -19px;\n    border-left: 1px solid ${theme.colors.border.medium};\n    position: absolute;\n\n    ${theme.breakpoints.down('md')} {\n      display: none;\n    }\n  `,\n  topGuideline: css`\n    width: 18px;\n    border-bottom: 1px solid ${theme.colors.border.medium};\n    top: 0;\n    bottom: 50%;\n  `,\n  bottomGuideline: css`\n    top: 50%;\n    bottom: 0;\n  `,\n  contentGuideline: css`\n    top: 0;\n    bottom: 0;\n    left: -49px !important;\n  `,\n  headerGuideline: css`\n    top: -25px;\n    bottom: 0;\n  `,\n});\n","import { CombinedRule } from 'app/types/unified-alerting';\nimport React, { FC } from 'react';\nimport { useStyles2 } from '@grafana/ui';\nimport { css } from '@emotion/css';\nimport { GrafanaTheme2 } from '@grafana/data';\nimport { AlertLabels } from '../AlertLabels';\nimport { DetailsField } from '../DetailsField';\nimport { RuleDetailsActionButtons } from './RuleDetailsActionButtons';\nimport { RuleDetailsDataSources } from './RuleDetailsDataSources';\nimport { RuleDetailsMatchingInstances } from './RuleDetailsMatchingInstances';\nimport { RuleDetailsExpression } from './RuleDetailsExpression';\nimport { RuleDetailsAnnotations } from './RuleDetailsAnnotations';\n\ninterface Props {\n  rule: CombinedRule;\n}\n\nexport const RuleDetails: FC<Props> = ({ rule }) => {\n  const styles = useStyles2(getStyles);\n  const {\n    promRule,\n    namespace: { rulesSource },\n  } = rule;\n\n  const annotations = Object.entries(rule.annotations).filter(([_, value]) => !!value.trim());\n\n  return (\n    <div>\n      <RuleDetailsActionButtons rule={rule} rulesSource={rulesSource} />\n      <div className={styles.wrapper}>\n        <div className={styles.leftSide}>\n          {!!rule.labels && !!Object.keys(rule.labels).length && (\n            <DetailsField label=\"Labels\" horizontal={true}>\n              <AlertLabels labels={rule.labels} />\n            </DetailsField>\n          )}\n          <RuleDetailsExpression rulesSource={rulesSource} rule={rule} annotations={annotations} />\n          <RuleDetailsAnnotations annotations={annotations} />\n        </div>\n        <div className={styles.rightSide}>\n          <RuleDetailsDataSources rulesSource={rulesSource} rule={rule} />\n        </div>\n      </div>\n      <RuleDetailsMatchingInstances promRule={promRule} />\n    </div>\n  );\n};\n\nexport const getStyles = (theme: GrafanaTheme2) => ({\n  wrapper: css`\n    display: flex;\n    flex-direction: row;\n    ${theme.breakpoints.down('md')} {\n      flex-direction: column;\n    }\n  `,\n  leftSide: css`\n    flex: 1;\n  `,\n  rightSide: css`\n    ${theme.breakpoints.up('md')} {\n      padding-left: 90px;\n      width: 300px;\n    }\n  `,\n});\n","import { GrafanaTheme2 } from '@grafana/data';\nimport { useStyles2 } from '@grafana/ui';\nimport React, { FC, useMemo } from 'react';\nimport { css, cx } from '@emotion/css';\nimport { RuleDetails } from './RuleDetails';\nimport { isCloudRulesSource } from '../../utils/datasource';\nimport { useHasRuler } from '../../hooks/useHasRuler';\nimport { CombinedRule } from 'app/types/unified-alerting';\nimport { Annotation } from '../../utils/constants';\nimport { RuleState } from './RuleState';\nimport { RuleHealth } from './RuleHealth';\nimport { DynamicTable, DynamicTableColumnProps, DynamicTableItemProps } from '../DynamicTable';\nimport { DynamicTableWithGuidelines } from '../DynamicTableWithGuidelines';\n\ntype RuleTableColumnProps = DynamicTableColumnProps<CombinedRule>;\ntype RuleTableItemProps = DynamicTableItemProps<CombinedRule>;\n\ninterface Props {\n  rules: CombinedRule[];\n  showGuidelines?: boolean;\n  showGroupColumn?: boolean;\n  showSummaryColumn?: boolean;\n  emptyMessage?: string;\n  className?: string;\n}\n\nexport const RulesTable: FC<Props> = ({\n  rules,\n  className,\n  showGuidelines = false,\n  emptyMessage = 'No rules found.',\n  showGroupColumn = false,\n  showSummaryColumn = false,\n}) => {\n  const styles = useStyles2(getStyles);\n\n  const wrapperClass = cx(styles.wrapper, className, { [styles.wrapperMargin]: showGuidelines });\n\n  const items = useMemo((): RuleTableItemProps[] => {\n    const seenKeys: string[] = [];\n    return rules.map((rule, ruleIdx) => {\n      let key = JSON.stringify([rule.promRule?.type, rule.labels, rule.query, rule.name, rule.annotations]);\n      if (seenKeys.includes(key)) {\n        key += `-${ruleIdx}`;\n      }\n      seenKeys.push(key);\n      return {\n        id: key,\n        data: rule,\n      };\n    });\n  }, [rules]);\n\n  const columns = useColumns(showSummaryColumn, showGroupColumn);\n\n  if (!rules.length) {\n    return <div className={cx(wrapperClass, styles.emptyMessage)}>{emptyMessage}</div>;\n  }\n\n  const TableComponent = showGuidelines ? DynamicTableWithGuidelines : DynamicTable;\n\n  return (\n    <div className={wrapperClass} data-testid=\"rules-table\">\n      <TableComponent\n        cols={columns}\n        isExpandable={true}\n        items={items}\n        renderExpandedContent={({ data: rule }) => <RuleDetails rule={rule} />}\n      />\n    </div>\n  );\n};\n\nexport const getStyles = (theme: GrafanaTheme2) => ({\n  wrapperMargin: css`\n    ${theme.breakpoints.up('md')} {\n      margin-left: 36px;\n    }\n  `,\n  emptyMessage: css`\n    padding: ${theme.spacing(1)};\n  `,\n  wrapper: css`\n    width: auto;\n    background-color: ${theme.colors.background.secondary};\n    border-radius: ${theme.shape.borderRadius()};\n  `,\n  table: css`\n    width: 100%;\n    border-radius: ${theme.shape.borderRadius()};\n    border: solid 1px ${theme.colors.border.weak};\n    background-color: ${theme.colors.background.secondary};\n\n    th {\n      padding: ${theme.spacing(1)};\n    }\n\n    td + td {\n      padding: ${theme.spacing(0, 1)};\n    }\n\n    tr {\n      height: 38px;\n    }\n  `,\n  evenRow: css`\n    background-color: ${theme.colors.background.primary};\n  `,\n  state: css`\n    width: 110px;\n  `,\n});\n\nfunction useColumns(showSummaryColumn: boolean, showGroupColumn: boolean) {\n  const hasRuler = useHasRuler();\n\n  return useMemo((): RuleTableColumnProps[] => {\n    const columns: RuleTableColumnProps[] = [\n      {\n        id: 'state',\n        label: 'State',\n        // eslint-disable-next-line react/display-name\n        renderCell: ({ data: rule }) => {\n          const { namespace } = rule;\n          const { rulesSource } = namespace;\n          const { promRule, rulerRule } = rule;\n          const isDeleting = !!(hasRuler(rulesSource) && promRule && !rulerRule);\n          const isCreating = !!(hasRuler(rulesSource) && rulerRule && !promRule);\n          return <RuleState rule={rule} isDeleting={isDeleting} isCreating={isCreating} />;\n        },\n        size: '165px',\n      },\n      {\n        id: 'name',\n        label: 'Name',\n        // eslint-disable-next-line react/display-name\n        renderCell: ({ data: rule }) => rule.name,\n        size: 5,\n      },\n      {\n        id: 'health',\n        label: 'Health',\n        // eslint-disable-next-line react/display-name\n        renderCell: ({ data: { promRule } }) => (promRule ? <RuleHealth rule={promRule} /> : null),\n        size: '75px',\n      },\n    ];\n    if (showSummaryColumn) {\n      columns.push({\n        id: 'summary',\n        label: 'Summary',\n        // eslint-disable-next-line react/display-name\n        renderCell: ({ data: rule }) => rule.annotations[Annotation.summary] ?? '',\n        size: 5,\n      });\n    }\n    if (showGroupColumn) {\n      columns.push({\n        id: 'group',\n        label: 'Group',\n        // eslint-disable-next-line react/display-name\n        renderCell: ({ data: rule }) => {\n          const { namespace, group } = rule;\n          const { rulesSource } = namespace;\n          return isCloudRulesSource(rulesSource) ? `${namespace.name} > ${group.name}` : namespace.name;\n        },\n        size: 5,\n      });\n    }\n    return columns;\n  }, [hasRuler, showSummaryColumn, showGroupColumn]);\n}\n","var scope = (typeof global !== \"undefined\" && global) ||\n            (typeof self !== \"undefined\" && self) ||\n            window;\nvar apply = Function.prototype.apply;\n\n// DOM APIs, for completeness\n\nexports.setTimeout = function() {\n  return new Timeout(apply.call(setTimeout, scope, arguments), clearTimeout);\n};\nexports.setInterval = function() {\n  return new Timeout(apply.call(setInterval, scope, arguments), clearInterval);\n};\nexports.clearTimeout =\nexports.clearInterval = function(timeout) {\n  if (timeout) {\n    timeout.close();\n  }\n};\n\nfunction Timeout(id, clearFn) {\n  this._id = id;\n  this._clearFn = clearFn;\n}\nTimeout.prototype.unref = Timeout.prototype.ref = function() {};\nTimeout.prototype.close = function() {\n  this._clearFn.call(scope, this._id);\n};\n\n// Does not start the time, just sets up the members needed.\nexports.enroll = function(item, msecs) {\n  clearTimeout(item._idleTimeoutId);\n  item._idleTimeout = msecs;\n};\n\nexports.unenroll = function(item) {\n  clearTimeout(item._idleTimeoutId);\n  item._idleTimeout = -1;\n};\n\nexports._unrefActive = exports.active = function(item) {\n  clearTimeout(item._idleTimeoutId);\n\n  var msecs = item._idleTimeout;\n  if (msecs >= 0) {\n    item._idleTimeoutId = setTimeout(function onTimeout() {\n      if (item._onTimeout)\n        item._onTimeout();\n    }, msecs);\n  }\n};\n\n// setimmediate attaches itself to the global object\nrequire(\"setimmediate\");\n// On some exotic environments, it's not clear which object `setimmediate` was\n// able to install onto.  Search each possibility in the same order as the\n// `setimmediate` library.\nexports.setImmediate = (typeof self !== \"undefined\" && self.setImmediate) ||\n                       (typeof global !== \"undefined\" && global.setImmediate) ||\n                       (this && this.setImmediate);\nexports.clearImmediate = (typeof self !== \"undefined\" && self.clearImmediate) ||\n                         (typeof global !== \"undefined\" && global.clearImmediate) ||\n                         (this && this.clearImmediate);\n","import React, { useCallback } from 'react';\n// @ts-ignore\nimport Highlighter from 'react-highlight-words';\nimport { Icon, IconName, Button, LinkButton, Card } from '@grafana/ui';\nimport { AlertRule } from '../../types';\n\nexport interface Props {\n  rule: AlertRule;\n  search: string;\n  onTogglePause: () => void;\n}\n\nconst AlertRuleItem = ({ rule, search, onTogglePause }: Props) => {\n  const ruleUrl = `${rule.url}?editPanel=${rule.panelId}&tab=alert`;\n  const renderText = useCallback(\n    (text) => (\n      <Highlighter\n        key={text}\n        highlightClassName=\"highlight-search-match\"\n        textToHighlight={text}\n        searchWords={[search]}\n      />\n    ),\n    [search]\n  );\n\n  return (\n    <Card heading={<a href={ruleUrl}>{renderText(rule.name)}</a>}>\n      <Card.Figure>\n        <Icon size=\"xl\" name={rule.stateIcon as IconName} className={`alert-rule-item__icon ${rule.stateClass}`} />\n      </Card.Figure>\n      <Card.Meta>\n        <span key=\"state\">\n          <span key=\"text\" className={`${rule.stateClass}`}>\n            {renderText(rule.stateText)}{' '}\n          </span>\n          for {rule.stateAge}\n        </span>\n        {rule.info ? renderText(rule.info) : null}\n      </Card.Meta>\n      <Card.Actions>\n        <Button\n          key=\"play\"\n          variant=\"secondary\"\n          icon={rule.state === 'paused' ? 'play' : 'pause'}\n          onClick={onTogglePause}\n        >\n          {rule.state === 'paused' ? 'Resume' : 'Pause'}\n        </Button>\n        <LinkButton key=\"edit\" variant=\"secondary\" href={ruleUrl} icon=\"cog\">\n          Edit alert\n        </LinkButton>\n      </Card.Actions>\n    </Card>\n  );\n};\n\nexport default AlertRuleItem;\n","(function (global, undefined) {\n    \"use strict\";\n\n    if (global.setImmediate) {\n        return;\n    }\n\n    var nextHandle = 1; // Spec says greater than zero\n    var tasksByHandle = {};\n    var currentlyRunningATask = false;\n    var doc = global.document;\n    var registerImmediate;\n\n    function setImmediate(callback) {\n      // Callback can either be a function or a string\n      if (typeof callback !== \"function\") {\n        callback = new Function(\"\" + callback);\n      }\n      // Copy function arguments\n      var args = new Array(arguments.length - 1);\n      for (var i = 0; i < args.length; i++) {\n          args[i] = arguments[i + 1];\n      }\n      // Store and register the task\n      var task = { callback: callback, args: args };\n      tasksByHandle[nextHandle] = task;\n      registerImmediate(nextHandle);\n      return nextHandle++;\n    }\n\n    function clearImmediate(handle) {\n        delete tasksByHandle[handle];\n    }\n\n    function run(task) {\n        var callback = task.callback;\n        var args = task.args;\n        switch (args.length) {\n        case 0:\n            callback();\n            break;\n        case 1:\n            callback(args[0]);\n            break;\n        case 2:\n            callback(args[0], args[1]);\n            break;\n        case 3:\n            callback(args[0], args[1], args[2]);\n            break;\n        default:\n            callback.apply(undefined, args);\n            break;\n        }\n    }\n\n    function runIfPresent(handle) {\n        // From the spec: \"Wait until any invocations of this algorithm started before this one have completed.\"\n        // So if we're currently running a task, we'll need to delay this invocation.\n        if (currentlyRunningATask) {\n            // Delay by doing a setTimeout. setImmediate was tried instead, but in Firefox 7 it generated a\n            // \"too much recursion\" error.\n            setTimeout(runIfPresent, 0, handle);\n        } else {\n            var task = tasksByHandle[handle];\n            if (task) {\n                currentlyRunningATask = true;\n                try {\n                    run(task);\n                } finally {\n                    clearImmediate(handle);\n                    currentlyRunningATask = false;\n                }\n            }\n        }\n    }\n\n    function installNextTickImplementation() {\n        registerImmediate = function(handle) {\n            process.nextTick(function () { runIfPresent(handle); });\n        };\n    }\n\n    function canUsePostMessage() {\n        // The test against `importScripts` prevents this implementation from being installed inside a web worker,\n        // where `global.postMessage` means something completely different and can't be used for this purpose.\n        if (global.postMessage && !global.importScripts) {\n            var postMessageIsAsynchronous = true;\n            var oldOnMessage = global.onmessage;\n            global.onmessage = function() {\n                postMessageIsAsynchronous = false;\n            };\n            global.postMessage(\"\", \"*\");\n            global.onmessage = oldOnMessage;\n            return postMessageIsAsynchronous;\n        }\n    }\n\n    function installPostMessageImplementation() {\n        // Installs an event handler on `global` for the `message` event: see\n        // * https://developer.mozilla.org/en/DOM/window.postMessage\n        // * http://www.whatwg.org/specs/web-apps/current-work/multipage/comms.html#crossDocumentMessages\n\n        var messagePrefix = \"setImmediate$\" + Math.random() + \"$\";\n        var onGlobalMessage = function(event) {\n            if (event.source === global &&\n                typeof event.data === \"string\" &&\n                event.data.indexOf(messagePrefix) === 0) {\n                runIfPresent(+event.data.slice(messagePrefix.length));\n            }\n        };\n\n        if (global.addEventListener) {\n            global.addEventListener(\"message\", onGlobalMessage, false);\n        } else {\n            global.attachEvent(\"onmessage\", onGlobalMessage);\n        }\n\n        registerImmediate = function(handle) {\n            global.postMessage(messagePrefix + handle, \"*\");\n        };\n    }\n\n    function installMessageChannelImplementation() {\n        var channel = new MessageChannel();\n        channel.port1.onmessage = function(event) {\n            var handle = event.data;\n            runIfPresent(handle);\n        };\n\n        registerImmediate = function(handle) {\n            channel.port2.postMessage(handle);\n        };\n    }\n\n    function installReadyStateChangeImplementation() {\n        var html = doc.documentElement;\n        registerImmediate = function(handle) {\n            // Create a <script> element; its readystatechange event will be fired asynchronously once it is inserted\n            // into the document. Do so, thus queuing up the task. Remember to clean up once it's been called.\n            var script = doc.createElement(\"script\");\n            script.onreadystatechange = function () {\n                runIfPresent(handle);\n                script.onreadystatechange = null;\n                html.removeChild(script);\n                script = null;\n            };\n            html.appendChild(script);\n        };\n    }\n\n    function installSetTimeoutImplementation() {\n        registerImmediate = function(handle) {\n            setTimeout(runIfPresent, 0, handle);\n        };\n    }\n\n    // If supported, we should attach to the prototype of global, since that is where setTimeout et al. live.\n    var attachTo = Object.getPrototypeOf && Object.getPrototypeOf(global);\n    attachTo = attachTo && attachTo.setTimeout ? attachTo : global;\n\n    // Don't get fooled by e.g. browserify environments.\n    if ({}.toString.call(global.process) === \"[object process]\") {\n        // For Node.js before 0.9\n        installNextTickImplementation();\n\n    } else if (canUsePostMessage()) {\n        // For non-IE10 modern browsers\n        installPostMessageImplementation();\n\n    } else if (global.MessageChannel) {\n        // For web workers, where supported\n        installMessageChannelImplementation();\n\n    } else if (doc && \"onreadystatechange\" in doc.createElement(\"script\")) {\n        // For IE 6–8\n        installReadyStateChangeImplementation();\n\n    } else {\n        // For older browsers\n        installSetTimeoutImplementation();\n    }\n\n    attachTo.setImmediate = setImmediate;\n    attachTo.clearImmediate = clearImmediate;\n}(typeof self === \"undefined\" ? typeof global === \"undefined\" ? this : global : self));\n","import { AlertRule, AlertRulesState, NotificationChannelState, StoreState } from 'app/types';\n\nexport const getSearchQuery = (state: AlertRulesState) => state.searchQuery;\n\nexport const getAlertRuleItems = (state: StoreState): AlertRule[] => {\n  const regex = new RegExp(state.alertRules.searchQuery, 'i');\n\n  return state.alertRules.items.filter((item) => {\n    return regex.test(item.name) || regex.test(item.stateText) || regex.test(item.info!);\n  });\n};\n\nexport const getNotificationChannel = (state: NotificationChannelState, channelId: number) => {\n  if (state.notificationChannel.id === channelId) {\n    return state.notificationChannel;\n  }\n\n  return null;\n};\n","import { Modal, VerticalGroup } from '@grafana/ui';\nimport React from 'react';\n\nexport interface AlertHowToModalProps {\n  onDismiss: () => void;\n}\n\nexport function AlertHowToModal({ onDismiss }: AlertHowToModalProps): JSX.Element {\n  return (\n    <Modal title=\"Adding an Alert\" isOpen onDismiss={onDismiss} onClickBackdrop={onDismiss}>\n      <VerticalGroup spacing=\"sm\">\n        <img src=\"public/img/alert_howto_new.png\" alt=\"link to how to alert image\" />\n        <p>\n          Alerts are added and configured in the Alert tab of any dashboard graph panel, letting you build and visualize\n          an alert using existing queries.\n        </p>\n        <p>Remember to save the dashboard to persist your alert rule changes.</p>\n      </VerticalGroup>\n    </Modal>\n  );\n}\n","import React, { FC } from 'react';\nimport Page from 'app/core/components/Page/Page';\nimport { getNavModel } from 'app/core/selectors/navModel';\nimport { useSelector } from 'react-redux';\nimport { StoreState } from 'app/types/store';\n\ninterface Props {\n  pageId: string;\n  isLoading?: boolean;\n}\n\nexport const AlertingPageWrapper: FC<Props> = ({ children, pageId, isLoading }) => {\n  const navModel = getNavModel(\n    useSelector((state: StoreState) => state.navIndex),\n    pageId\n  );\n\n  return (\n    <Page navModel={navModel}>\n      <Page.Contents isLoading={isLoading}>{children}</Page.Contents>\n    </Page>\n  );\n};\n","import React, { FC, HTMLAttributes } from 'react';\nimport { css, cx } from '@emotion/css';\nimport { IconSize, useStyles, Icon } from '@grafana/ui';\n\ninterface Props extends HTMLAttributes<HTMLButtonElement> {\n  isCollapsed: boolean;\n  onToggle: (isCollapsed: boolean) => void;\n  size?: IconSize;\n  className?: string;\n  text?: string;\n}\n\nexport const CollapseToggle: FC<Props> = ({ isCollapsed, onToggle, className, text, size = 'xl', ...restOfProps }) => {\n  const styles = useStyles(getStyles);\n\n  return (\n    <button className={cx(styles.expandButton, className)} onClick={() => onToggle(!isCollapsed)} {...restOfProps}>\n      <Icon size={size} name={isCollapsed ? 'angle-right' : 'angle-down'} />\n      {text}\n    </button>\n  );\n};\n\nexport const getStyles = () => ({\n  expandButton: css`\n    background: none;\n    border: none;\n\n    outline: none !important;\n\n    display: inline-flex;\n    align-items: center;\n\n    svg {\n      margin-bottom: 0;\n    }\n  `,\n});\n","import { RulesSource } from 'app/types/unified-alerting';\nimport { useCallback } from 'react';\nimport { GRAFANA_RULES_SOURCE_NAME } from '../utils/datasource';\nimport { useUnifiedAlertingSelector } from './useUnifiedAlertingSelector';\n\n// datasource has ruler if it's grafana managed or if we're able to load rules from it\nexport function useHasRuler(): (rulesSource: string | RulesSource) => boolean {\n  const rulerRules = useUnifiedAlertingSelector((state) => state.rulerRules);\n  return useCallback(\n    (rulesSource: string | RulesSource) => {\n      const rulesSourceName = typeof rulesSource === 'string' ? rulesSource : rulesSource.name;\n      return rulesSourceName === GRAFANA_RULES_SOURCE_NAME || !!rulerRules[rulesSourceName]?.result;\n    },\n    [rulerRules]\n  );\n}\n"],"sourceRoot":""}
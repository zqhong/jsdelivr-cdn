{"version":3,"sources":["webpack:///./public/app/features/alerting/unified/components/rule-editor/RuleEditorSection.tsx","webpack:///./public/app/features/alerting/unified/components/rule-editor/SelectWIthAdd.tsx","webpack:///./public/app/features/alerting/unified/components/rule-editor/GroupAndNamespaceFields.tsx","webpack:///./public/app/features/alerting/unified/components/rule-editor/CloudRulesSourcePicker.tsx","webpack:///./public/app/features/alerting/unified/hooks/useRuleSourcesWithRuler.ts","webpack:///./public/app/features/alerting/unified/components/rule-editor/AlertTypeStep.tsx","webpack:///./public/app/features/alerting/unified/components/rule-editor/LabelsField.tsx","webpack:///./public/app/features/alerting/unified/components/rule-editor/AnnotationKeyInput.tsx","webpack:///./public/app/features/alerting/unified/components/rule-editor/AnnotationsField.tsx","webpack:///./public/app/features/alerting/unified/components/rule-editor/DetailsStep.tsx","webpack:///./public/app/features/alerting/unified/components/rule-editor/ExpressionEditor.tsx","webpack:///./public/app/features/alerting/unified/components/rule-editor/VizWrapper.tsx","webpack:///./public/app/features/alerting/unified/hooks/useVizHeight.ts","webpack:///./public/app/features/alerting/unified/components/rule-editor/QueryWrapper.tsx","webpack:///./public/app/features/alerting/unified/components/rule-editor/QueryRows.tsx","webpack:///./public/app/features/alerting/unified/components/rule-editor/QueryEditor.tsx","webpack:///./public/app/features/alerting/unified/components/rule-editor/QueryStep.tsx","webpack:///./public/app/features/alerting/unified/api/preview.ts","webpack:///./public/app/features/alerting/unified/types/preview.ts","webpack:///./public/app/features/alerting/unified/components/rule-editor/PreviewRuleResult.tsx","webpack:///./public/app/features/alerting/unified/components/rule-editor/PreviewRule.tsx","webpack:///./public/app/features/alerting/unified/components/rule-editor/CloudConditionsStep.tsx","webpack:///./public/app/features/alerting/unified/components/rule-editor/ConditionField.tsx","webpack:///./public/app/features/alerting/unified/components/rule-editor/GrafanaAlertStatePicker.tsx","webpack:///./public/app/features/alerting/unified/components/rule-editor/GrafanaConditionEvalWarning.tsx","webpack:///./public/app/features/alerting/unified/components/rule-editor/GrafanaConditionsStep.tsx","webpack:///./public/app/features/alerting/unified/components/rule-editor/AlertRuleForm.tsx","webpack:///./public/app/features/alerting/unified/RuleEditor.tsx","webpack:///./public/app/core/hooks/useQueryParams.ts","webpack:///./public/app/features/alerting/unified/utils/timeRange.ts","webpack:///./public/app/features/alerting/unified/state/AlertingQueryRunner.ts","webpack:///./public/app/features/alerting/unified/hooks/useFolder.ts","webpack:///./public/app/features/alerting/unified/hooks/useIsRuleEditable.ts","webpack:///./public/app/core/hooks/useCleanup.ts","webpack:///./node_modules/timers-browserify/main.js","webpack:///./node_modules/setimmediate/setImmediate.js","webpack:///./public/app/features/alerting/unified/components/PanelPluginsButtonGroup.tsx","webpack:///./public/app/features/expressions/guards.ts","webpack:///./public/app/features/alerting/unified/components/CollapseToggle.tsx"],"names":["RuleEditorSection","title","stepNo","children","description","styles","useStyles2","getStyles","className","parent","content","label","fieldset","theme","css","spacing","breakpoints","values","xl","colors","text","maxContrast","background","canvas","typography","size","lg","SelectWithAdd","value","onChange","options","placeholder","width","custom","onCustomChange","disabled","addLabel","isCustom","setIsCustom","useState","useEffect","_options","useMemo","autoFocus","e","target","menuShouldPortal","val","GroupAndNamespaceFields","dataSourceName","control","watch","formState","errors","setValue","useFormContext","style","getStyle","customGroup","setCustomGroup","rulerRequests","useUnifiedAlertingSelector","state","rulerRules","dispatch","useDispatch","fetchRulerRulesAction","rulesConfig","result","namespace","namespaceOptions","Object","keys","map","groupOptions","group","name","flexRow","data-testid","error","message","invalid","render","field","input","rules","required","CloudRulesSourcePicker","props","rulesSourcesWithRuler","checkEditingRequests","lotexSupportsRuleEditing","getRulesDataSources","filter","ds","undefined","forEach","checkIfLotexSupportsEditingRulesAction","useRulesSourcesWithRuler","dataSourceFilter","useCallback","find","id","noDefault","alerting","current","AlertTypeStep","editingExistingRule","register","ruleFormType","alertTypeOptions","RuleFormType","grafana","contextSrv","isEditor","push","cloud","formInput","type","v","folder","RuleFolderPicker","enableCreateNew","enableReset","wrapper","md","flexColumn","xs","deleteLabelButton","addLabelButton","centerAlignRow","equalSign","labelInput","sm","LabelsField","useStyles","labels","cx","fields","append","remove","index","key","defaultValue","aria-label","icon","variant","onClick","AnnotationKeyInput","existingKeys","rest","annotationOptions","Annotation","includes","annotationLabels","annotationValueInput","textarea","addAnnotationsButton","flexRowItemMargin","AnnotationsField","annotations","_","idx","isUrl","toLocaleLowerCase","endsWith","ValueInputComponent","Input","TextArea","DetailsStep","ExpressionEditor","mapToValue","mapToQuery","settings","getDataSourceSrv","getInstanceSettings","query","expr","existing","Error","useQueryMappers","setQuery","refId","hide","loading","dataSource","useAsync","get","onChangeQuery","components","QueryEditor","errorMessage","queries","app","CoreApp","CloudAlerting","onRunQuery","noop","datasource","VizWrapper","data","currentPanel","changePanel","setOptions","frameIndex","showHeader","vizHeight","pluginId","useTheme2","TIMESERIES","STAT","series","dataIsEmpty","length","rowHeight","gridSize","tableHeight","useVizHeight","buttonGroup","PanelPluginsButtonGroup","height","onOptionsChange","visHeight","QueryWrapper","dsSettings","onChangeDataSource","onChangeTimeRange","onRunQueries","onRemoveQuery","onDuplicateQuery","isExpression","isExpressionQuery","model","changePluginId","TABLE","QueryEditorRow","cloneDeep","onAddQuery","renderHeaderExtras","timeRange","relativeTimeRange","getDefaultRelativeTimeRange","range","renderTimePicker","visualization","hideDisableQuery","border","medium","shape","borderRadius","QueryRows","PureComponent","constructor","super","this","onQueriesChange","item","itemIndex","previous","datasourceUid","uid","destination","startIndex","source","endIndex","update","Array","from","removed","splice","dataPerQuery","onDragEnd","droppableId","direction","provided","ref","innerRef","droppableProps","getDataSourceSettings","runner","run","cancel","onChangeQueries","addQuery","defaultDataSource","getDatasourceSrv","ExpressionDatasourceUID","expressionDatasource","newQuery","ExpressionQueryType","classic","conditions","defaultCondition","panelDataByRefId","AlertingQueryRunner","componentDidMount","subscribe","setState","componentWillUnmount","destroy","renderAddQueryRow","align","onNewAlertingQuery","selectors","QueryTab","config","expressionsEnabled","placement","onNewExpressionQuery","expressionButton","isRunning","d","Boolean","LoadingState","Loading","renderRunQueryButton","theme2","runWrapper","onCancelQueries","container","queryToAdd","getNextRefIdChar","queryType","defaultTimeRange","stylesFactory","primary","xxl","editorWrapper","QueryStep","expression","validate","isArray","previewAlertRule","request","isCloudPreviewRequest","previewCloudAlertRule","isGrafanaPreviewRequest","withLoadingIndicator","whileLoading","createResponse","getBackendSrv","fetch","method","url","pipe","Done","instances","dataFrameFromJSON","catchError","of","toDataQueryError","share","previewGrafanaAlertRule","ruleType","getDefaultTimeRange","PreviewRuleResult","preview","table","PreviewRule","onPreview","setPreview","getValues","isMounted","useMountedState","condition","grafana_condition","now","dateTimeFormatISO","Date","createPreviewRequest","takeWhile","response","isCompleted","usePreview","CloudConditionsStep","forTime","inlineField","pattern","timeOptions","timeUnit","ConditionField","q","expressions","ExpressionDatasourceID","noOptionsMessage","GrafanaAlertStateDecision","Alerting","NoData","OK","GrafanaAlertStatePicker","includeNoData","opts","opt","GrafanaConditionEvalWarning","evaluateFor","evaluateEvery","durationFor","parseDuration","durationEvery","isEmpty","millisFor","durationToMilliseconds","millisEvery","severity","forValidationOptions","durationValidationPattern","evaluateEveryValidationOptions","positiveDurationValidationPattern","duration","diff","MIN_TIME_RANGE_STEP_S","GrafanaConditionsStep","showErrorHandling","setShowErrorHandling","tooltip","validationMessageHorizontalOverflow","CollapseToggle","isCollapsed","onToggle","collapsed","collapseToggle","AlertRuleForm","queryParams","useQueryParams","returnTo","defaultValues","rulerRuleToFormValues","getDefaultFormValues","getDefaultQueries","JSON","parse","formAPI","useForm","mode","shouldFocusError","handleSubmit","showStep2","submitState","ruleForm","saveRule","initialAsyncRequestState","useCleanup","unifiedAlerting","submit","exitOnSave","saveRuleFormAction","trim","redirectOnSave","onInvalid","appEvents","emit","AppEvents","alertError","onSubmit","preventDefault","form","pageIcon","to","fill","buttonSpinner","inline","contentOuter","autoHeightMin","hideHorizontalTrack","contentInner","weak","ExistingRuleEditor","identifier","existingRule","dispatched","isEditable","useIsRuleEditable","ruleId","rule","fetchEditableRuleAction","Page","Contents","AlertWarning","warningStyles","warning","href","withErrorBoundary","match","params","hasEditPermissionInFolders","search","useLocation","locationSearchToObject","replace","setImmediate","locationService","partial","FALL_BACK_TIME_RANGE","getReferencedIds","getReferencedIdsForClassicCondition","math","getReferencedIdsForMath","resample","reduce","getReferencedIdsForReduce","getTimeRanges","referencedRefIds","referencedRefIdsKey","backendSrv","subject","ReplaySubject","lastResult","asObservable","empty","initialState","next","subscription","runRequest","nextResult","applyChange","preProcessed","preProcessPanelData","setStructureRevision","mapErrorToPanelData","unsubscribe","requestIsRunning","complete","initial","requestId","uuidv4","mapToPanelData","cancelNetworkRequestsOnUnsubscribe","dataByQuery","getTimeRange","relative","Math","max","min","getTimeRangeForExpression","rangeUtil","relativeToTimeRange","console","warn","results","entries","frames","queryError","change","useFolder","folderRequests","folders","fetchFolderIfNotFetchedAction","rulesSourceName","folderUID","isGrafanaRulerRule","grafana_alert","namespace_uid","canSave","stateSelector","selectorRef","useRef","cleanUpAction","self","window","apply","Function","prototype","Timeout","clearFn","_id","_clearFn","exports","setTimeout","call","scope","arguments","clearTimeout","setInterval","clearInterval","timeout","close","unref","enroll","msecs","_idleTimeoutId","_idleTimeout","unenroll","_unrefActive","active","_onTimeout","global","clearImmediate","registerImmediate","html","channel","messagePrefix","onGlobalMessage","nextHandle","tasksByHandle","currentlyRunningATask","doc","document","attachTo","getPrototypeOf","toString","process","handle","nextTick","runIfPresent","postMessage","importScripts","postMessageIsAsynchronous","oldOnMessage","onmessage","canUsePostMessage","MessageChannel","port1","event","port2","createElement","documentElement","script","onreadystatechange","removeChild","appendChild","random","indexOf","slice","addEventListener","attachEvent","callback","args","i","task","panels","panel","isSupportedPanelPlugin","imgUrl","info","logos","small","dataQuery","restOfProps","expandButton"],"mappings":"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","file":"AlertingRuleForm.807b3f41627421e0a149.js","sourcesContent":["import { css } from '@emotion/css';\nimport { GrafanaTheme2 } from '@grafana/data';\nimport { FieldSet, useStyles2 } from '@grafana/ui';\nimport React, { FC } from 'react';\n\nexport interface RuleEditorSectionProps {\n  title: string;\n  stepNo: number;\n  description?: string;\n}\n\nexport const RuleEditorSection: FC<RuleEditorSectionProps> = ({ title, stepNo, children, description }) => {\n  const styles = useStyles2(getStyles);\n\n  return (\n    <div className={styles.parent}>\n      <div>\n        <span className={styles.stepNo}>{stepNo}</span>\n      </div>\n      <div className={styles.content}>\n        <FieldSet label={title} className={styles.fieldset}>\n          {description && <p className={styles.description}>{description}</p>}\n          {children}\n        </FieldSet>\n      </div>\n    </div>\n  );\n};\n\nconst getStyles = (theme: GrafanaTheme2) => ({\n  fieldset: css`\n    legend {\n      font-size: 16px;\n      padding-top: ${theme.spacing(0.5)};\n    }\n  `,\n  parent: css`\n    display: flex;\n    flex-direction: row;\n    max-width: ${theme.breakpoints.values.xl};\n    & + & {\n      margin-top: ${theme.spacing(4)};\n    }\n  `,\n  description: css`\n    margin-top: -${theme.spacing(2)};\n  `,\n  stepNo: css`\n    display: inline-block;\n    width: ${theme.spacing(4)};\n    height: ${theme.spacing(4)};\n    line-height: ${theme.spacing(4)};\n    border-radius: ${theme.spacing(4)};\n    text-align: center;\n    color: ${theme.colors.text.maxContrast};\n    background-color: ${theme.colors.background.canvas};\n    font-size: ${theme.typography.size.lg};\n    margin-right: ${theme.spacing(2)};\n  `,\n  content: css`\n    flex: 1;\n  `,\n});\n","import { SelectableValue } from '@grafana/data';\nimport { Input, Select } from '@grafana/ui';\nimport React, { FC, useEffect, useMemo, useState } from 'react';\n\ninterface Props {\n  onChange: (value: string) => void;\n  options: Array<SelectableValue<string>>;\n  value?: string;\n  addLabel?: string;\n  className?: string;\n  placeholder?: string;\n  custom?: boolean;\n  onCustomChange?: (custom: boolean) => void;\n  width?: number;\n  disabled?: boolean;\n}\n\nexport const SelectWithAdd: FC<Props> = ({\n  value,\n  onChange,\n  options,\n  className,\n  placeholder,\n  width,\n  custom,\n  onCustomChange,\n  disabled = false,\n  addLabel = '+ Add new',\n}) => {\n  const [isCustom, setIsCustom] = useState(custom);\n\n  useEffect(() => {\n    if (custom) {\n      setIsCustom(custom);\n    }\n  }, [custom]);\n\n  const _options = useMemo((): Array<SelectableValue<string>> => [...options, { value: '__add__', label: addLabel }], [\n    options,\n    addLabel,\n  ]);\n\n  if (isCustom) {\n    return (\n      <Input\n        width={width}\n        autoFocus={!custom}\n        value={value || ''}\n        placeholder={placeholder}\n        className={className}\n        disabled={disabled}\n        onChange={(e) => onChange((e.target as HTMLInputElement).value)}\n      />\n    );\n  } else {\n    return (\n      <Select\n        menuShouldPortal\n        width={width}\n        options={_options}\n        value={value}\n        className={className}\n        placeholder={placeholder}\n        disabled={disabled}\n        onChange={(val: SelectableValue) => {\n          const value = val?.value;\n          if (value === '__add__') {\n            setIsCustom(true);\n            if (onCustomChange) {\n              onCustomChange(true);\n            }\n            onChange('');\n          } else {\n            onChange(value);\n          }\n        }}\n      />\n    );\n  }\n};\n","import React, { FC, useEffect, useMemo, useState } from 'react';\nimport { useDispatch } from 'react-redux';\nimport { useUnifiedAlertingSelector } from '../../hooks/useUnifiedAlertingSelector';\nimport { fetchRulerRulesAction } from '../../state/actions';\nimport { RuleFormValues } from '../../types/rule-form';\nimport { useFormContext } from 'react-hook-form';\nimport { GrafanaTheme2, SelectableValue } from '@grafana/data';\nimport { SelectWithAdd } from './SelectWIthAdd';\nimport { Field, InputControl, useStyles2 } from '@grafana/ui';\nimport { css } from '@emotion/css';\n\ninterface Props {\n  dataSourceName: string;\n}\n\nexport const GroupAndNamespaceFields: FC<Props> = ({ dataSourceName }) => {\n  const {\n    control,\n    watch,\n    formState: { errors },\n    setValue,\n  } = useFormContext<RuleFormValues>();\n\n  const style = useStyles2(getStyle);\n\n  const [customGroup, setCustomGroup] = useState(false);\n\n  const rulerRequests = useUnifiedAlertingSelector((state) => state.rulerRules);\n  const dispatch = useDispatch();\n  useEffect(() => {\n    dispatch(fetchRulerRulesAction(dataSourceName));\n  }, [dataSourceName, dispatch]);\n\n  const rulesConfig = rulerRequests[dataSourceName]?.result;\n\n  const namespace = watch('namespace');\n\n  const namespaceOptions = useMemo(\n    (): Array<SelectableValue<string>> =>\n      rulesConfig ? Object.keys(rulesConfig).map((namespace) => ({ label: namespace, value: namespace })) : [],\n    [rulesConfig]\n  );\n\n  const groupOptions = useMemo(\n    (): Array<SelectableValue<string>> =>\n      (namespace && rulesConfig?.[namespace]?.map((group) => ({ label: group.name, value: group.name }))) || [],\n    [namespace, rulesConfig]\n  );\n\n  return (\n    <div className={style.flexRow}>\n      <Field\n        data-testid=\"namespace-picker\"\n        label=\"Namespace\"\n        error={errors.namespace?.message}\n        invalid={!!errors.namespace?.message}\n      >\n        <InputControl\n          render={({ field: { onChange, ref, ...field } }) => (\n            <SelectWithAdd\n              {...field}\n              className={style.input}\n              onChange={(value) => {\n                setValue('group', ''); //reset if namespace changes\n                onChange(value);\n              }}\n              onCustomChange={(custom: boolean) => {\n                custom && setCustomGroup(true);\n              }}\n              options={namespaceOptions}\n              width={42}\n            />\n          )}\n          name=\"namespace\"\n          control={control}\n          rules={{\n            required: { value: true, message: 'Required.' },\n          }}\n        />\n      </Field>\n      <Field data-testid=\"group-picker\" label=\"Group\" error={errors.group?.message} invalid={!!errors.group?.message}>\n        <InputControl\n          render={({ field: { ref, ...field } }) => (\n            <SelectWithAdd {...field} options={groupOptions} width={42} custom={customGroup} className={style.input} />\n          )}\n          name=\"group\"\n          control={control}\n          rules={{\n            required: { value: true, message: 'Required.' },\n          }}\n        />\n      </Field>\n    </div>\n  );\n};\n\nconst getStyle = (theme: GrafanaTheme2) => ({\n  flexRow: css`\n    display: flex;\n    flex-direction: row;\n    justify-content: flex-start;\n\n    & > * + * {\n      margin-left: ${theme.spacing(3)};\n    }\n  `,\n  input: css`\n    width: 330px !important;\n  `,\n});\n","import React, { useCallback } from 'react';\nimport { DataSourceInstanceSettings } from '@grafana/data';\nimport { DataSourcePicker } from '@grafana/runtime';\nimport { useRulesSourcesWithRuler } from '../../hooks/useRuleSourcesWithRuler';\n\ninterface Props {\n  onChange: (ds: DataSourceInstanceSettings) => void;\n  value: string | null;\n  onBlur?: () => void;\n  name?: string;\n}\n\nexport function CloudRulesSourcePicker({ value, ...props }: Props): JSX.Element {\n  const rulesSourcesWithRuler = useRulesSourcesWithRuler();\n\n  const dataSourceFilter = useCallback(\n    (ds: DataSourceInstanceSettings): boolean => {\n      return !!rulesSourcesWithRuler.find(({ id }) => id === ds.id);\n    },\n    [rulesSourcesWithRuler]\n  );\n\n  return <DataSourcePicker noDefault alerting filter={dataSourceFilter} current={value} {...props} />;\n}\n","import { DataSourceInstanceSettings } from '@grafana/data';\nimport { useEffect, useMemo } from 'react';\nimport { useDispatch } from 'react-redux';\nimport { checkIfLotexSupportsEditingRulesAction } from '../state/actions';\nimport { getRulesDataSources } from '../utils/datasource';\nimport { useUnifiedAlertingSelector } from './useUnifiedAlertingSelector';\n\nexport function useRulesSourcesWithRuler(): DataSourceInstanceSettings[] {\n  const checkEditingRequests = useUnifiedAlertingSelector((state) => state.lotexSupportsRuleEditing);\n  const dispatch = useDispatch();\n\n  // try fetching rules for each prometheus to see if it has ruler\n  useEffect(() => {\n    getRulesDataSources()\n      .filter((ds) => checkEditingRequests[ds.name] === undefined)\n      .forEach((ds) => dispatch(checkIfLotexSupportsEditingRulesAction(ds.name)));\n  }, [dispatch, checkEditingRequests]);\n\n  return useMemo(() => getRulesDataSources().filter((ds) => checkEditingRequests[ds.name]?.result), [\n    checkEditingRequests,\n  ]);\n}\n","import React, { FC, useMemo } from 'react';\nimport { DataSourceInstanceSettings, GrafanaTheme2, SelectableValue } from '@grafana/data';\nimport { Field, Input, InputControl, Select, useStyles2 } from '@grafana/ui';\nimport { css } from '@emotion/css';\nimport { RuleEditorSection } from './RuleEditorSection';\nimport { useFormContext } from 'react-hook-form';\nimport { RuleFormType, RuleFormValues } from '../../types/rule-form';\nimport { RuleFolderPicker } from './RuleFolderPicker';\nimport { GroupAndNamespaceFields } from './GroupAndNamespaceFields';\nimport { contextSrv } from 'app/core/services/context_srv';\nimport { CloudRulesSourcePicker } from './CloudRulesSourcePicker';\n\ninterface Props {\n  editingExistingRule: boolean;\n}\n\nexport const AlertTypeStep: FC<Props> = ({ editingExistingRule }) => {\n  const styles = useStyles2(getStyles);\n\n  const {\n    register,\n    control,\n    watch,\n    formState: { errors },\n    setValue,\n  } = useFormContext<RuleFormValues & { location?: string }>();\n\n  const ruleFormType = watch('type');\n  const dataSourceName = watch('dataSourceName');\n\n  const alertTypeOptions = useMemo((): SelectableValue[] => {\n    const result = [\n      {\n        label: 'Grafana managed alert',\n        value: RuleFormType.grafana,\n        description: 'Classic Grafana alerts based on thresholds.',\n      },\n    ];\n\n    if (contextSrv.isEditor) {\n      result.push({\n        label: 'Cortex/Loki managed alert',\n        value: RuleFormType.cloud,\n        description: 'Alert based on a system or application behavior. Based on Prometheus.',\n      });\n    }\n\n    return result;\n  }, []);\n\n  return (\n    <RuleEditorSection stepNo={1} title=\"Alert type\">\n      <Field\n        className={styles.formInput}\n        label=\"Alert name\"\n        error={errors?.name?.message}\n        invalid={!!errors.name?.message}\n      >\n        <Input\n          id=\"name\"\n          {...register('name', { required: { value: true, message: 'Must enter an alert name' } })}\n          autoFocus={true}\n        />\n      </Field>\n      <div className={styles.flexRow}>\n        <Field\n          disabled={editingExistingRule}\n          label=\"Alert type\"\n          className={styles.formInput}\n          error={errors.type?.message}\n          invalid={!!errors.type?.message}\n          data-testid=\"alert-type-picker\"\n        >\n          <InputControl\n            render={({ field: { onChange, ref, ...field } }) => (\n              <Select\n                menuShouldPortal\n                {...field}\n                options={alertTypeOptions}\n                onChange={(v: SelectableValue) => onChange(v?.value)}\n              />\n            )}\n            name=\"type\"\n            control={control}\n            rules={{\n              required: { value: true, message: 'Please select alert type' },\n            }}\n          />\n        </Field>\n        {ruleFormType === RuleFormType.cloud && (\n          <Field\n            className={styles.formInput}\n            label=\"Select data source\"\n            error={errors.dataSourceName?.message}\n            invalid={!!errors.dataSourceName?.message}\n            data-testid=\"datasource-picker\"\n          >\n            <InputControl\n              render={({ field: { onChange, ref, ...field } }) => (\n                <CloudRulesSourcePicker\n                  {...field}\n                  onChange={(ds: DataSourceInstanceSettings) => {\n                    // reset location if switching data sources, as different rules source will have different groups and namespaces\n                    setValue('location', undefined);\n                    onChange(ds?.name ?? null);\n                  }}\n                />\n              )}\n              name=\"dataSourceName\"\n              control={control}\n              rules={{\n                required: { value: true, message: 'Please select a data source' },\n              }}\n            />\n          </Field>\n        )}\n      </div>\n      {ruleFormType === RuleFormType.cloud && dataSourceName && (\n        <GroupAndNamespaceFields dataSourceName={dataSourceName} />\n      )}\n      {ruleFormType === RuleFormType.grafana && (\n        <Field\n          label=\"Folder\"\n          className={styles.formInput}\n          error={errors.folder?.message}\n          invalid={!!errors.folder?.message}\n          data-testid=\"folder-picker\"\n        >\n          <InputControl\n            render={({ field: { ref, ...field } }) => (\n              <RuleFolderPicker {...field} enableCreateNew={true} enableReset={true} />\n            )}\n            name=\"folder\"\n            rules={{\n              required: { value: true, message: 'Please select a folder' },\n            }}\n          />\n        </Field>\n      )}\n    </RuleEditorSection>\n  );\n};\n\nconst getStyles = (theme: GrafanaTheme2) => ({\n  formInput: css`\n    width: 330px;\n    & + & {\n      margin-left: ${theme.spacing(3)};\n    }\n  `,\n  flexRow: css`\n    display: flex;\n    flex-direction: row;\n    justify-content: flex-start;\n  `,\n});\n","import React, { FC } from 'react';\nimport { Button, Field, FieldArray, Input, InlineLabel, Label, useStyles } from '@grafana/ui';\nimport { GrafanaTheme } from '@grafana/data';\nimport { css, cx } from '@emotion/css';\nimport { useFormContext } from 'react-hook-form';\n\ninterface Props {\n  className?: string;\n}\n\nconst LabelsField: FC<Props> = ({ className }) => {\n  const styles = useStyles(getStyles);\n  const {\n    register,\n    control,\n    watch,\n    formState: { errors },\n  } = useFormContext();\n  const labels = watch('labels');\n  return (\n    <div className={cx(className, styles.wrapper)}>\n      <Label>Custom Labels</Label>\n      <FieldArray control={control} name=\"labels\">\n        {({ fields, append, remove }) => {\n          return (\n            <>\n              <div className={styles.flexRow}>\n                <InlineLabel width={18}>Labels</InlineLabel>\n                <div className={styles.flexColumn}>\n                  {fields.map((field, index) => {\n                    return (\n                      <div key={field.id}>\n                        <div className={cx(styles.flexRow, styles.centerAlignRow)}>\n                          <Field\n                            className={styles.labelInput}\n                            invalid={!!errors.labels?.[index]?.key?.message}\n                            error={errors.labels?.[index]?.key?.message}\n                          >\n                            <Input\n                              {...register(`labels[${index}].key`, {\n                                required: { value: !!labels[index]?.value, message: 'Required.' },\n                              })}\n                              placeholder=\"key\"\n                              data-testid={`label-key-${index}`}\n                              defaultValue={field.key}\n                            />\n                          </Field>\n                          <InlineLabel className={styles.equalSign}>=</InlineLabel>\n                          <Field\n                            className={styles.labelInput}\n                            invalid={!!errors.labels?.[index]?.value?.message}\n                            error={errors.labels?.[index]?.value?.message}\n                          >\n                            <Input\n                              {...register(`labels[${index}].value`, {\n                                required: { value: !!labels[index]?.key, message: 'Required.' },\n                              })}\n                              placeholder=\"value\"\n                              data-testid={`label-value-${index}`}\n                              defaultValue={field.value}\n                            />\n                          </Field>\n                          <Button\n                            className={styles.deleteLabelButton}\n                            aria-label=\"delete label\"\n                            icon=\"trash-alt\"\n                            variant=\"secondary\"\n                            onClick={() => {\n                              remove(index);\n                            }}\n                          />\n                        </div>\n                      </div>\n                    );\n                  })}\n                  <Button\n                    className={styles.addLabelButton}\n                    icon=\"plus-circle\"\n                    type=\"button\"\n                    variant=\"secondary\"\n                    onClick={() => {\n                      append({});\n                    }}\n                  >\n                    Add label\n                  </Button>\n                </div>\n              </div>\n            </>\n          );\n        }}\n      </FieldArray>\n    </div>\n  );\n};\n\nconst getStyles = (theme: GrafanaTheme) => {\n  return {\n    wrapper: css`\n      margin-top: ${theme.spacing.md};\n    `,\n    flexColumn: css`\n      display: flex;\n      flex-direction: column;\n    `,\n    flexRow: css`\n      display: flex;\n      flex-direction: row;\n      justify-content: flex-start;\n\n      & + button {\n        margin-left: ${theme.spacing.xs};\n      }\n    `,\n    deleteLabelButton: css`\n      margin-left: ${theme.spacing.xs};\n      align-self: flex-start;\n    `,\n    addLabelButton: css`\n      flex-grow: 0;\n      align-self: flex-start;\n    `,\n    centerAlignRow: css`\n      align-items: baseline;\n    `,\n    equalSign: css`\n      align-self: flex-start;\n      width: 28px;\n      justify-content: center;\n      margin-left: ${theme.spacing.xs};\n    `,\n    labelInput: css`\n      width: 183px;\n      margin-bottom: ${theme.spacing.sm};\n      & + & {\n        margin-left: ${theme.spacing.sm};\n      }\n    `,\n  };\n};\n\nexport default LabelsField;\n","import { SelectableValue } from '@grafana/data';\nimport React, { FC, useMemo } from 'react';\nimport { SelectWithAdd } from './SelectWIthAdd';\nimport { Annotation, annotationLabels } from '../../utils/constants';\n\ninterface Props {\n  onChange: (value: string) => void;\n  existingKeys: string[];\n\n  value?: string;\n  width?: number;\n  className?: string;\n}\n\nexport const AnnotationKeyInput: FC<Props> = ({ value, existingKeys, ...rest }) => {\n  const annotationOptions = useMemo(\n    (): SelectableValue[] =>\n      Object.values(Annotation)\n        .filter((key) => !existingKeys.includes(key)) // remove keys already taken in other annotations\n        .map((key) => ({ value: key, label: annotationLabels[key] })),\n    [existingKeys]\n  );\n\n  return (\n    <SelectWithAdd\n      value={value}\n      options={annotationOptions}\n      custom={!!value && !(Object.values(Annotation) as string[]).includes(value)}\n      {...rest}\n    />\n  );\n};\n","import React, { FC, useCallback } from 'react';\nimport { Button, Field, FieldArray, Input, InputControl, Label, TextArea, useStyles } from '@grafana/ui';\nimport { GrafanaTheme } from '@grafana/data';\nimport { css, cx } from '@emotion/css';\nimport { useFormContext } from 'react-hook-form';\nimport { RuleFormValues } from '../../types/rule-form';\nimport { AnnotationKeyInput } from './AnnotationKeyInput';\n\nconst AnnotationsField: FC = () => {\n  const styles = useStyles(getStyles);\n  const {\n    control,\n    register,\n    watch,\n    formState: { errors },\n  } = useFormContext();\n  const annotations = watch('annotations') as RuleFormValues['annotations'];\n\n  const existingKeys = useCallback(\n    (index: number): string[] => annotations.filter((_, idx: number) => idx !== index).map(({ key }) => key),\n    [annotations]\n  );\n\n  return (\n    <>\n      <Label>Summary and annotations</Label>\n      <FieldArray name={'annotations'} control={control}>\n        {({ fields, append, remove }) => {\n          return (\n            <div className={styles.flexColumn}>\n              {fields.map((field, index) => {\n                const isUrl = annotations[index]?.key?.toLocaleLowerCase().endsWith('url');\n                const ValueInputComponent = isUrl ? Input : TextArea;\n                return (\n                  <div key={field.id} className={styles.flexRow}>\n                    <Field\n                      className={styles.field}\n                      invalid={!!errors.annotations?.[index]?.key?.message}\n                      error={errors.annotations?.[index]?.key?.message}\n                      data-testid={`annotation-key-${index}`}\n                    >\n                      <InputControl\n                        name={`annotations[${index}].key`}\n                        render={({ field: { ref, ...field } }) => (\n                          <AnnotationKeyInput {...field} existingKeys={existingKeys(index)} width={18} />\n                        )}\n                        control={control}\n                        rules={{ required: { value: !!annotations[index]?.value, message: 'Required.' } }}\n                      />\n                    </Field>\n                    <Field\n                      className={cx(styles.flexRowItemMargin, styles.field)}\n                      invalid={!!errors.annotations?.[index]?.value?.message}\n                      error={errors.annotations?.[index]?.value?.message}\n                    >\n                      <ValueInputComponent\n                        data-testid={`annotation-value-${index}`}\n                        className={cx(styles.annotationValueInput, { [styles.textarea]: !isUrl })}\n                        {...register(`annotations[${index}].value`)}\n                        placeholder={isUrl ? 'https://' : `Text`}\n                        defaultValue={field.value}\n                      />\n                    </Field>\n                    <Button\n                      type=\"button\"\n                      className={styles.flexRowItemMargin}\n                      aria-label=\"delete annotation\"\n                      icon=\"trash-alt\"\n                      variant=\"secondary\"\n                      onClick={() => remove(index)}\n                    />\n                  </div>\n                );\n              })}\n              <Button\n                className={styles.addAnnotationsButton}\n                icon=\"plus-circle\"\n                type=\"button\"\n                variant=\"secondary\"\n                onClick={() => {\n                  append({ key: '', value: '' });\n                }}\n              >\n                Add info\n              </Button>\n            </div>\n          );\n        }}\n      </FieldArray>\n    </>\n  );\n};\n\nconst getStyles = (theme: GrafanaTheme) => ({\n  annotationValueInput: css`\n    width: 426px;\n  `,\n  textarea: css`\n    height: 76px;\n  `,\n  addAnnotationsButton: css`\n    flex-grow: 0;\n    align-self: flex-start;\n    margin-left: 148px;\n  `,\n  flexColumn: css`\n    display: flex;\n    flex-direction: column;\n  `,\n  field: css`\n    margin-bottom: ${theme.spacing.xs};\n  `,\n  flexRow: css`\n    display: flex;\n    flex-direction: row;\n    justify-content: flex-start;\n  `,\n  flexRowItemMargin: css`\n    margin-left: ${theme.spacing.xs};\n  `,\n});\n\nexport default AnnotationsField;\n","import React, { FC } from 'react';\nimport LabelsField from './LabelsField';\nimport AnnotationsField from './AnnotationsField';\nimport { RuleEditorSection } from './RuleEditorSection';\n\nexport const DetailsStep: FC = () => {\n  return (\n    <RuleEditorSection\n      stepNo={4}\n      title=\"Add details for your alert\"\n      description=\"Write a summary and add labels to help you better manage your alerts\"\n    >\n      <AnnotationsField />\n      <LabelsField />\n    </RuleEditorSection>\n  );\n};\n","import React, { FC, useCallback, useMemo, useState } from 'react';\nimport { noop } from 'lodash';\nimport { CoreApp, DataQuery } from '@grafana/data';\nimport { getDataSourceSrv } from '@grafana/runtime';\nimport { useAsync } from 'react-use';\nimport { PromQuery } from 'app/plugins/datasource/prometheus/types';\nimport { LokiQuery } from 'app/plugins/datasource/loki/types';\n\nexport interface ExpressionEditorProps {\n  value?: string;\n  onChange: (value: string) => void;\n  dataSourceName: string; // will be a prometheus or loki datasource\n}\n\nexport const ExpressionEditor: FC<ExpressionEditorProps> = ({ value, onChange, dataSourceName }) => {\n  const { mapToValue, mapToQuery } = useQueryMappers(dataSourceName);\n  const [query, setQuery] = useState(mapToQuery({ refId: 'A', hide: false }, value));\n  const { error, loading, value: dataSource } = useAsync(() => {\n    return getDataSourceSrv().get(dataSourceName);\n  }, [dataSourceName]);\n\n  const onChangeQuery = useCallback(\n    (query: DataQuery) => {\n      setQuery(query);\n      onChange(mapToValue(query));\n    },\n    [onChange, mapToValue]\n  );\n\n  if (loading || dataSource?.name !== dataSourceName) {\n    return null;\n  }\n\n  if (error || !dataSource || !dataSource?.components?.QueryEditor) {\n    const errorMessage = error?.message || 'Data source plugin does not export any Query Editor component';\n    return <div>Could not load query editor due to: {errorMessage}</div>;\n  }\n\n  const QueryEditor = dataSource?.components?.QueryEditor;\n\n  return (\n    <QueryEditor\n      query={query}\n      queries={[query]}\n      app={CoreApp.CloudAlerting}\n      onChange={onChangeQuery}\n      onRunQuery={noop}\n      datasource={dataSource}\n    />\n  );\n};\n\ntype QueryMappers<T extends DataQuery = DataQuery> = {\n  mapToValue: (query: T) => string;\n  mapToQuery: (existing: T, value: string | undefined) => T;\n};\n\nfunction useQueryMappers(dataSourceName: string): QueryMappers {\n  return useMemo(() => {\n    const settings = getDataSourceSrv().getInstanceSettings(dataSourceName);\n\n    switch (settings?.type) {\n      case 'loki':\n      case 'prometheus':\n        return {\n          mapToValue: (query: DataQuery) => (query as PromQuery | LokiQuery).expr,\n          mapToQuery: (existing: DataQuery, value: string | undefined) => ({ ...existing, expr: value }),\n        };\n      default:\n        throw new Error(`${dataSourceName} is not supported as an expression editor`);\n    }\n  }, [dataSourceName]);\n}\n","import React, { FC, useState } from 'react';\nimport AutoSizer from 'react-virtualized-auto-sizer';\nimport { css } from '@emotion/css';\nimport { GrafanaTheme2, PanelData } from '@grafana/data';\nimport { PanelRenderer } from '@grafana/runtime';\nimport { useStyles2 } from '@grafana/ui';\nimport { PanelOptions } from 'app/plugins/panel/table/models.gen';\nimport { useVizHeight } from '../../hooks/useVizHeight';\nimport { SupportedPanelPlugins, PanelPluginsButtonGroup } from '../PanelPluginsButtonGroup';\n\ninterface Props {\n  data: PanelData;\n  currentPanel: SupportedPanelPlugins;\n  changePanel: (panel: SupportedPanelPlugins) => void;\n}\n\nexport const VizWrapper: FC<Props> = ({ data, currentPanel, changePanel }) => {\n  const [options, setOptions] = useState<PanelOptions>({\n    frameIndex: 0,\n    showHeader: true,\n  });\n  const vizHeight = useVizHeight(data, currentPanel, options.frameIndex);\n  const styles = useStyles2(getStyles(vizHeight));\n\n  if (!options || !data) {\n    return null;\n  }\n\n  return (\n    <div className={styles.wrapper}>\n      <div className={styles.buttonGroup}>\n        <PanelPluginsButtonGroup onChange={changePanel} value={currentPanel} />\n      </div>\n      <AutoSizer>\n        {({ width }) => {\n          if (width === 0) {\n            return null;\n          }\n          return (\n            <div style={{ height: `${vizHeight}px`, width: `${width}px` }}>\n              <PanelRenderer\n                height={vizHeight}\n                width={width}\n                data={data}\n                pluginId={currentPanel}\n                title=\"title\"\n                onOptionsChange={setOptions}\n                options={options}\n              />\n            </div>\n          );\n        }}\n      </AutoSizer>\n    </div>\n  );\n};\n\nconst getStyles = (visHeight: number) => (theme: GrafanaTheme2) => ({\n  wrapper: css`\n    padding: 0 ${theme.spacing(2)};\n    height: ${visHeight + theme.spacing.gridSize * 4}px;\n  `,\n  buttonGroup: css`\n    display: flex;\n    justify-content: flex-end;\n  `,\n});\n","import { PanelData } from '@grafana/data';\nimport { useTheme2 } from '@grafana/ui';\nimport { STAT, TIMESERIES } from '../utils/constants';\n\nexport function useVizHeight(data: PanelData, pluginId: string, frameIndex: number) {\n  const theme = useTheme2();\n  if (pluginId === TIMESERIES || pluginId === STAT || dataIsEmpty(data)) {\n    return 200;\n  }\n\n  const values = data.series[frameIndex].fields[0].values.length;\n  const rowHeight = theme.spacing.gridSize * 5;\n\n  /*\n   Calculate how if we can make  the table smaller than 200px\n   for when we only have 1-2 values\n   The extra rowHeight is to accommodate the header.\n  */\n  const tableHeight = values * rowHeight + rowHeight;\n\n  return tableHeight >= 200 ? 200 : tableHeight;\n}\n\nfunction dataIsEmpty(data: PanelData) {\n  return !data || !data.series[0] || !data.series[0].fields[0] || !data.series[0].fields[0].values;\n}\n","import React, { FC, ReactNode, useState } from 'react';\nimport { css } from '@emotion/css';\nimport { cloneDeep } from 'lodash';\nimport {\n  DataQuery,\n  DataSourceInstanceSettings,\n  GrafanaTheme2,\n  PanelData,\n  RelativeTimeRange,\n  getDefaultRelativeTimeRange,\n} from '@grafana/data';\nimport { useStyles2, RelativeTimeRangePicker } from '@grafana/ui';\nimport { QueryEditorRow } from 'app/features/query/components/QueryEditorRow';\nimport { VizWrapper } from './VizWrapper';\nimport { isExpressionQuery } from 'app/features/expressions/guards';\nimport { TABLE, TIMESERIES } from '../../utils/constants';\nimport { AlertQuery } from 'app/types/unified-alerting-dto';\nimport { SupportedPanelPlugins } from '../PanelPluginsButtonGroup';\n\ninterface Props {\n  data: PanelData;\n  query: AlertQuery;\n  queries: AlertQuery[];\n  dsSettings: DataSourceInstanceSettings;\n  onChangeDataSource: (settings: DataSourceInstanceSettings, index: number) => void;\n  onChangeQuery: (query: DataQuery, index: number) => void;\n  onChangeTimeRange?: (timeRange: RelativeTimeRange, index: number) => void;\n  onRemoveQuery: (query: DataQuery) => void;\n  onDuplicateQuery: (query: AlertQuery) => void;\n  onRunQueries: () => void;\n  index: number;\n}\n\nexport const QueryWrapper: FC<Props> = ({\n  data,\n  dsSettings,\n  index,\n  onChangeDataSource,\n  onChangeQuery,\n  onChangeTimeRange,\n  onRunQueries,\n  onRemoveQuery,\n  onDuplicateQuery,\n  query,\n  queries,\n}) => {\n  const styles = useStyles2(getStyles);\n  const isExpression = isExpressionQuery(query.model);\n  const [pluginId, changePluginId] = useState<SupportedPanelPlugins>(isExpression ? TABLE : TIMESERIES);\n\n  const renderTimePicker = (query: AlertQuery, index: number): ReactNode => {\n    if (isExpressionQuery(query.model) || !onChangeTimeRange) {\n      return null;\n    }\n\n    return (\n      <RelativeTimeRangePicker\n        timeRange={query.relativeTimeRange ?? getDefaultRelativeTimeRange()}\n        onChange={(range) => onChangeTimeRange(range, index)}\n      />\n    );\n  };\n\n  return (\n    <div className={styles.wrapper}>\n      <QueryEditorRow<DataQuery>\n        dataSource={dsSettings}\n        onChangeDataSource={!isExpression ? (settings) => onChangeDataSource(settings, index) : undefined}\n        id={query.refId}\n        index={index}\n        key={query.refId}\n        data={data}\n        query={cloneDeep(query.model)}\n        onChange={(query) => onChangeQuery(query, index)}\n        onRemoveQuery={onRemoveQuery}\n        onAddQuery={onDuplicateQuery}\n        onRunQuery={onRunQueries}\n        queries={queries}\n        renderHeaderExtras={() => renderTimePicker(query, index)}\n        visualization={data ? <VizWrapper data={data} changePanel={changePluginId} currentPanel={pluginId} /> : null}\n        hideDisableQuery={true}\n      />\n    </div>\n  );\n};\n\nconst getStyles = (theme: GrafanaTheme2) => ({\n  wrapper: css`\n    label: AlertingQueryWrapper;\n    margin-bottom: ${theme.spacing(1)};\n    border: 1px solid ${theme.colors.border.medium};\n    border-radius: ${theme.shape.borderRadius(1)};\n    padding-bottom: ${theme.spacing(1)};\n  `,\n});\n","import React, { PureComponent } from 'react';\nimport { DragDropContext, Droppable, DropResult } from 'react-beautiful-dnd';\nimport { DataQuery, DataSourceInstanceSettings, PanelData, RelativeTimeRange } from '@grafana/data';\nimport { getDataSourceSrv } from '@grafana/runtime';\nimport { QueryWrapper } from './QueryWrapper';\nimport { AlertQuery } from 'app/types/unified-alerting-dto';\n\ninterface Props {\n  // The query configuration\n  queries: AlertQuery[];\n  data: Record<string, PanelData>;\n\n  // Query editing\n  onQueriesChange: (queries: AlertQuery[]) => void;\n  onDuplicateQuery: (query: AlertQuery) => void;\n  onRunQueries: () => void;\n}\n\ninterface State {\n  dataPerQuery: Record<string, PanelData>;\n}\n\nexport class QueryRows extends PureComponent<Props, State> {\n  constructor(props: Props) {\n    super(props);\n\n    this.state = { dataPerQuery: {} };\n  }\n\n  onRemoveQuery = (query: DataQuery) => {\n    this.props.onQueriesChange(\n      this.props.queries.filter((item) => {\n        return item.model.refId !== query.refId;\n      })\n    );\n  };\n\n  onChangeTimeRange = (timeRange: RelativeTimeRange, index: number) => {\n    const { queries, onQueriesChange } = this.props;\n    onQueriesChange(\n      queries.map((item, itemIndex) => {\n        if (itemIndex !== index) {\n          return item;\n        }\n        return {\n          ...item,\n          relativeTimeRange: timeRange,\n        };\n      })\n    );\n  };\n\n  onChangeDataSource = (settings: DataSourceInstanceSettings, index: number) => {\n    const { queries, onQueriesChange } = this.props;\n\n    onQueriesChange(\n      queries.map((item, itemIndex) => {\n        if (itemIndex !== index) {\n          return item;\n        }\n\n        const previous = getDataSourceSrv().getInstanceSettings(item.datasourceUid);\n\n        if (previous?.type === settings.uid) {\n          return {\n            ...item,\n            datasourceUid: settings.uid,\n          };\n        }\n\n        const { refId, hide } = item.model;\n\n        return {\n          ...item,\n          datasourceUid: settings.uid,\n          model: { refId, hide },\n        };\n      })\n    );\n  };\n\n  onChangeQuery = (query: DataQuery, index: number) => {\n    const { queries, onQueriesChange } = this.props;\n\n    onQueriesChange(\n      queries.map((item, itemIndex) => {\n        if (itemIndex !== index) {\n          return item;\n        }\n        return {\n          ...item,\n          refId: query.refId,\n          model: {\n            ...item.model,\n            ...query,\n            datasource: query.datasource!,\n          },\n        };\n      })\n    );\n  };\n\n  onDragEnd = (result: DropResult) => {\n    const { queries, onQueriesChange } = this.props;\n\n    if (!result || !result.destination) {\n      return;\n    }\n\n    const startIndex = result.source.index;\n    const endIndex = result.destination.index;\n    if (startIndex === endIndex) {\n      return;\n    }\n\n    const update = Array.from(queries);\n    const [removed] = update.splice(startIndex, 1);\n    update.splice(endIndex, 0, removed);\n    onQueriesChange(update);\n  };\n\n  onDuplicateQuery = (query: DataQuery, source: AlertQuery): void => {\n    this.props.onDuplicateQuery({\n      ...source,\n      model: query,\n    });\n  };\n\n  getDataSourceSettings = (query: AlertQuery): DataSourceInstanceSettings | undefined => {\n    return getDataSourceSrv().getInstanceSettings(query.datasourceUid);\n  };\n\n  render() {\n    const { onDuplicateQuery, onRunQueries, queries } = this.props;\n\n    return (\n      <DragDropContext onDragEnd={this.onDragEnd}>\n        <Droppable droppableId=\"alerting-queries\" direction=\"vertical\">\n          {(provided) => {\n            return (\n              <div ref={provided.innerRef} {...provided.droppableProps}>\n                {queries.map((query, index) => {\n                  const data = this.props.data ? this.props.data[query.refId] : ({} as PanelData);\n                  const dsSettings = this.getDataSourceSettings(query);\n\n                  if (!dsSettings) {\n                    return null;\n                  }\n\n                  return (\n                    <QueryWrapper\n                      index={index}\n                      key={`${query.refId}-${index}`}\n                      dsSettings={dsSettings}\n                      data={data}\n                      query={query}\n                      onChangeQuery={this.onChangeQuery}\n                      onRemoveQuery={this.onRemoveQuery}\n                      queries={queries}\n                      onChangeDataSource={this.onChangeDataSource}\n                      onDuplicateQuery={onDuplicateQuery}\n                      onRunQueries={onRunQueries}\n                      onChangeTimeRange={this.onChangeTimeRange}\n                    />\n                  );\n                })}\n                {provided.placeholder}\n              </div>\n            );\n          }}\n        </Droppable>\n      </DragDropContext>\n    );\n  }\n}\n","import React, { PureComponent } from 'react';\nimport { css } from '@emotion/css';\nimport {\n  DataQuery,\n  getDefaultRelativeTimeRange,\n  GrafanaTheme2,\n  LoadingState,\n  PanelData,\n  RelativeTimeRange,\n} from '@grafana/data';\nimport { selectors } from '@grafana/e2e-selectors';\nimport { Button, HorizontalGroup, Icon, stylesFactory, Tooltip } from '@grafana/ui';\nimport { config } from '@grafana/runtime';\nimport { QueryRows } from './QueryRows';\nimport {\n  dataSource as expressionDatasource,\n  ExpressionDatasourceUID,\n} from 'app/features/expressions/ExpressionDatasource';\nimport { getNextRefIdChar } from 'app/core/utils/query';\nimport { defaultCondition } from 'app/features/expressions/utils/expressionTypes';\nimport { ExpressionQueryType } from 'app/features/expressions/types';\nimport { AlertQuery } from 'app/types/unified-alerting-dto';\nimport { AlertingQueryRunner } from '../../state/AlertingQueryRunner';\nimport { getDatasourceSrv } from 'app/features/plugins/datasource_srv';\nimport { isExpressionQuery } from 'app/features/expressions/guards';\n\ninterface Props {\n  value?: AlertQuery[];\n  onChange: (queries: AlertQuery[]) => void;\n}\n\ninterface State {\n  panelDataByRefId: Record<string, PanelData>;\n}\nexport class QueryEditor extends PureComponent<Props, State> {\n  private runner: AlertingQueryRunner;\n  private queries: AlertQuery[];\n\n  constructor(props: Props) {\n    super(props);\n    this.state = { panelDataByRefId: {} };\n    this.runner = new AlertingQueryRunner();\n    this.queries = props.value ?? [];\n  }\n\n  componentDidMount() {\n    this.runner.get().subscribe((data) => {\n      this.setState({ panelDataByRefId: data });\n    });\n  }\n\n  componentWillUnmount() {\n    this.runner.destroy();\n  }\n\n  onRunQueries = () => {\n    const { queries } = this;\n    this.runner.run(queries);\n  };\n\n  onCancelQueries = () => {\n    this.runner.cancel();\n  };\n\n  onChangeQueries = (queries: AlertQuery[]) => {\n    this.queries = queries;\n    this.props.onChange(queries);\n  };\n\n  onDuplicateQuery = (query: AlertQuery) => {\n    const { queries } = this;\n    this.onChangeQueries(addQuery(queries, query));\n  };\n\n  onNewAlertingQuery = () => {\n    const { queries } = this;\n    const defaultDataSource = getDatasourceSrv().getInstanceSettings('default');\n\n    if (!defaultDataSource) {\n      return;\n    }\n\n    this.onChangeQueries(\n      addQuery(queries, {\n        datasourceUid: defaultDataSource.uid,\n        model: {\n          refId: '',\n          datasource: defaultDataSource.name,\n        },\n      })\n    );\n  };\n\n  onNewExpressionQuery = () => {\n    const { queries } = this;\n\n    this.onChangeQueries(\n      addQuery(queries, {\n        datasourceUid: ExpressionDatasourceUID,\n        model: expressionDatasource.newQuery({\n          type: ExpressionQueryType.classic,\n          conditions: [defaultCondition],\n        }),\n      })\n    );\n  };\n\n  renderAddQueryRow(styles: ReturnType<typeof getStyles>) {\n    return (\n      <HorizontalGroup spacing=\"md\" align=\"flex-start\">\n        <Button\n          type=\"button\"\n          icon=\"plus\"\n          onClick={this.onNewAlertingQuery}\n          variant=\"secondary\"\n          aria-label={selectors.components.QueryTab.addQuery}\n        >\n          Query\n        </Button>\n        {config.expressionsEnabled && (\n          <Tooltip content=\"Beta feature: queries could stop working in next version\" placement=\"right\">\n            <Button\n              type=\"button\"\n              icon=\"plus\"\n              onClick={this.onNewExpressionQuery}\n              variant=\"secondary\"\n              className={styles.expressionButton}\n            >\n              <span>Expression&nbsp;</span>\n              <Icon name=\"exclamation-triangle\" className=\"muted\" size=\"sm\" />\n            </Button>\n          </Tooltip>\n        )}\n      </HorizontalGroup>\n    );\n  }\n\n  isRunning() {\n    const data = Object.values(this.state.panelDataByRefId).find((d) => Boolean(d));\n    return data?.state === LoadingState.Loading;\n  }\n\n  renderRunQueryButton() {\n    const isRunning = this.isRunning();\n    const styles = getStyles(config.theme2);\n\n    if (isRunning) {\n      return (\n        <div className={styles.runWrapper}>\n          <Button icon=\"fa fa-spinner\" type=\"button\" variant=\"destructive\" onClick={this.onCancelQueries}>\n            Cancel\n          </Button>\n        </div>\n      );\n    }\n\n    return (\n      <div className={styles.runWrapper}>\n        <Button icon=\"sync\" type=\"button\" onClick={this.onRunQueries}>\n          Run queries\n        </Button>\n      </div>\n    );\n  }\n\n  render() {\n    const { value = [] } = this.props;\n    const { panelDataByRefId } = this.state;\n    const styles = getStyles(config.theme2);\n\n    return (\n      <div className={styles.container}>\n        <QueryRows\n          data={panelDataByRefId}\n          queries={value}\n          onQueriesChange={this.onChangeQueries}\n          onDuplicateQuery={this.onDuplicateQuery}\n          onRunQueries={this.onRunQueries}\n        />\n        {this.renderAddQueryRow(styles)}\n        {this.renderRunQueryButton()}\n      </div>\n    );\n  }\n}\n\nconst addQuery = (queries: AlertQuery[], queryToAdd: Pick<AlertQuery, 'model' | 'datasourceUid'>): AlertQuery[] => {\n  const refId = getNextRefIdChar(queries);\n\n  const query: AlertQuery = {\n    ...queryToAdd,\n    refId,\n    queryType: '',\n    model: {\n      ...queryToAdd.model,\n      hide: false,\n      refId,\n    },\n    relativeTimeRange: defaultTimeRange(queryToAdd.model),\n  };\n\n  return [...queries, query];\n};\n\nconst defaultTimeRange = (model: DataQuery): RelativeTimeRange | undefined => {\n  if (isExpressionQuery(model)) {\n    return;\n  }\n\n  return getDefaultRelativeTimeRange();\n};\n\nconst getStyles = stylesFactory((theme: GrafanaTheme2) => {\n  return {\n    container: css`\n      background-color: ${theme.colors.background.primary};\n      height: 100%;\n      max-width: ${theme.breakpoints.values.xxl}px;\n    `,\n    runWrapper: css`\n      margin-top: ${theme.spacing(1)};\n    `,\n    editorWrapper: css`\n      border: 1px solid ${theme.colors.border.medium};\n      border-radius: ${theme.shape.borderRadius()};\n    `,\n    expressionButton: css`\n      margin-right: ${theme.spacing(0.5)};\n    `,\n  };\n});\n","import React, { FC } from 'react';\nimport { useFormContext } from 'react-hook-form';\nimport { Field, InputControl } from '@grafana/ui';\nimport { ExpressionEditor } from './ExpressionEditor';\nimport { RuleEditorSection } from './RuleEditorSection';\nimport { RuleFormType, RuleFormValues } from '../../types/rule-form';\nimport { QueryEditor } from './QueryEditor';\n\nexport const QueryStep: FC = () => {\n  const {\n    control,\n    watch,\n    formState: { errors },\n  } = useFormContext<RuleFormValues>();\n  const type = watch('type');\n  const dataSourceName = watch('dataSourceName');\n  return (\n    <RuleEditorSection stepNo={2} title=\"Create a query to be alerted on\">\n      {type === RuleFormType.cloud && dataSourceName && (\n        <Field error={errors.expression?.message} invalid={!!errors.expression?.message}>\n          <InputControl\n            name=\"expression\"\n            render={({ field: { ref, ...field } }) => <ExpressionEditor {...field} dataSourceName={dataSourceName} />}\n            control={control}\n            rules={{\n              required: { value: true, message: 'A valid expression is required' },\n            }}\n          />\n        </Field>\n      )}\n      {type === RuleFormType.grafana && (\n        <Field\n          invalid={!!errors.queries}\n          error={(!!errors.queries && 'Must provide at least one valid query.') || undefined}\n        >\n          <InputControl\n            name=\"queries\"\n            render={({ field: { ref, ...field } }) => <QueryEditor {...field} />}\n            control={control}\n            rules={{\n              validate: (queries) => Array.isArray(queries) && !!queries.length,\n            }}\n          />\n        </Field>\n      )}\n    </RuleEditorSection>\n  );\n};\n","import {\n  dataFrameFromJSON,\n  DataFrameJSON,\n  getDefaultTimeRange,\n  LoadingState,\n  PanelData,\n  withLoadingIndicator,\n} from '@grafana/data';\nimport { getBackendSrv, toDataQueryError } from '@grafana/runtime';\nimport { Observable, of } from 'rxjs';\nimport { catchError, map, share } from 'rxjs/operators';\nimport {\n  CloudPreviewRuleRequest,\n  GrafanaPreviewRuleRequest,\n  isCloudPreviewRequest,\n  isGrafanaPreviewRequest,\n  PreviewRuleRequest,\n  PreviewRuleResponse,\n} from '../types/preview';\nimport { RuleFormType } from '../types/rule-form';\n\nexport function previewAlertRule(request: PreviewRuleRequest): Observable<PreviewRuleResponse> {\n  if (isCloudPreviewRequest(request)) {\n    return previewCloudAlertRule(request);\n  }\n\n  if (isGrafanaPreviewRequest(request)) {\n    return previewGrafanaAlertRule(request);\n  }\n\n  throw new Error('unsupported preview rule request');\n}\n\ntype GrafanaPreviewRuleResponse = {\n  instances: DataFrameJSON[];\n};\n\nfunction previewGrafanaAlertRule(request: GrafanaPreviewRuleRequest): Observable<PreviewRuleResponse> {\n  const type = RuleFormType.grafana;\n\n  return withLoadingIndicator({\n    whileLoading: createResponse(type),\n    source: getBackendSrv()\n      .fetch<GrafanaPreviewRuleResponse>({\n        method: 'POST',\n        url: `/api/v1/rule/test/grafana`,\n        data: request,\n      })\n      .pipe(\n        map(({ data }) => {\n          return createResponse(type, {\n            state: LoadingState.Done,\n            series: data.instances.map(dataFrameFromJSON),\n          });\n        }),\n        catchError((error: Error) => {\n          return of(\n            createResponse(type, {\n              state: LoadingState.Error,\n              error: toDataQueryError(error),\n            })\n          );\n        }),\n        share()\n      ),\n  });\n}\n\nfunction createResponse(ruleType: RuleFormType, data: Partial<PanelData> = {}): PreviewRuleResponse {\n  return {\n    ruleType,\n    data: {\n      state: LoadingState.Loading,\n      series: [],\n      timeRange: getDefaultTimeRange(),\n      ...data,\n    },\n  };\n}\n\nfunction previewCloudAlertRule(request: CloudPreviewRuleRequest): Observable<PreviewRuleResponse> {\n  throw new Error('preview for cloud alerting rules is not implemented');\n}\n","import { PanelData } from '@grafana/data';\nimport { AlertQuery } from 'app/types/unified-alerting-dto';\nimport { RuleFormType } from './rule-form';\n\nexport type PreviewRuleRequest = GrafanaPreviewRuleRequest | CloudPreviewRuleRequest;\n\nexport type GrafanaPreviewRuleRequest = {\n  grafana_condition: {\n    condition: string;\n    data: AlertQuery[];\n    now: string;\n  };\n};\n\nexport type CloudPreviewRuleRequest = {\n  dataSourceName: string;\n  expr: string;\n};\n\nexport type PreviewRuleResponse = {\n  ruleType: RuleFormType;\n  data: PanelData;\n};\n\nexport function isCloudPreviewRequest(request: PreviewRuleRequest): request is CloudPreviewRuleRequest {\n  return 'expr' in request;\n}\n\nexport function isGrafanaPreviewRequest(request: PreviewRuleRequest): request is GrafanaPreviewRuleRequest {\n  return 'grafana_condition' in request;\n}\n","import React from 'react';\nimport { css } from '@emotion/css';\nimport AutoSizer from 'react-virtualized-auto-sizer';\nimport { useStyles2 } from '@grafana/ui';\nimport { PanelRenderer } from '@grafana/runtime';\nimport { GrafanaTheme2, LoadingState } from '@grafana/data';\nimport { PreviewRuleResponse } from '../../types/preview';\nimport { RuleFormType } from '../../types/rule-form';\n\ntype Props = {\n  preview: PreviewRuleResponse | undefined;\n};\n\nexport function PreviewRuleResult(props: Props): React.ReactElement | null {\n  const { preview } = props;\n  const styles = useStyles2(getStyles);\n\n  if (!preview) {\n    return null;\n  }\n\n  const { data, ruleType } = preview;\n\n  if (data.state === LoadingState.Loading) {\n    return (\n      <div className={styles.container}>\n        <span>Loading preview...</span>\n      </div>\n    );\n  }\n\n  if (data.state === LoadingState.Error) {\n    return <div className={styles.container}>{data.error ?? 'Failed to preview alert rule'}</div>;\n  }\n\n  return (\n    <div className={styles.container}>\n      <span>\n        Preview based on the result of running the query, for this moment.{' '}\n        {ruleType === RuleFormType.grafana ? 'Configuration for `no data` and `error handling` is not applied.' : null}\n      </span>\n      <div className={styles.table}>\n        <AutoSizer>\n          {({ width, height }) => (\n            <div style={{ width: `${width}px`, height: `${height}px` }}>\n              <PanelRenderer title=\"\" width={width} height={height} pluginId=\"table\" data={data} />\n            </div>\n          )}\n        </AutoSizer>\n      </div>\n    </div>\n  );\n}\n\nfunction getStyles(theme: GrafanaTheme2) {\n  return {\n    container: css`\n      margin: ${theme.spacing(2)} 0;\n    `,\n    table: css`\n      flex: 1 1 auto;\n      height: 135px;\n      margin-top: ${theme.spacing(2)};\n      border: 1px solid ${theme.colors.border.medium};\n      border-radius: ${theme.shape.borderRadius(1)};\n    `,\n  };\n}\n","import React, { useCallback, useState } from 'react';\nimport { css } from '@emotion/css';\nimport { useFormContext } from 'react-hook-form';\nimport { takeWhile } from 'rxjs/operators';\nimport { useMountedState } from 'react-use';\nimport { Button, HorizontalGroup, useStyles2 } from '@grafana/ui';\nimport { dateTimeFormatISO, GrafanaTheme2, LoadingState } from '@grafana/data';\nimport { RuleFormType } from '../../types/rule-form';\nimport { PreviewRuleRequest, PreviewRuleResponse } from '../../types/preview';\nimport { previewAlertRule } from '../../api/preview';\nimport { PreviewRuleResult } from './PreviewRuleResult';\n\nconst fields: string[] = ['type', 'dataSourceName', 'condition', 'queries', 'expression'];\n\nexport function PreviewRule(): React.ReactElement | null {\n  const styles = useStyles2(getStyles);\n  const [preview, onPreview] = usePreview();\n  const { getValues } = useFormContext();\n  const [type] = getValues(fields);\n\n  if (type === RuleFormType.cloud) {\n    return null;\n  }\n\n  return (\n    <div className={styles.container}>\n      <HorizontalGroup>\n        <Button type=\"button\" variant=\"primary\" onClick={onPreview}>\n          Preview alerts\n        </Button>\n      </HorizontalGroup>\n      <PreviewRuleResult preview={preview} />\n    </div>\n  );\n}\n\nfunction usePreview(): [PreviewRuleResponse | undefined, () => void] {\n  const [preview, setPreview] = useState<PreviewRuleResponse | undefined>();\n  const { getValues } = useFormContext();\n  const isMounted = useMountedState();\n\n  const onPreview = useCallback(() => {\n    const values = getValues(fields);\n    const request = createPreviewRequest(values);\n\n    previewAlertRule(request)\n      .pipe(takeWhile((response) => !isCompleted(response), true))\n      .subscribe((response) => {\n        if (!isMounted()) {\n          return;\n        }\n        setPreview(response);\n      });\n  }, [getValues, isMounted]);\n\n  return [preview, onPreview];\n}\n\nfunction createPreviewRequest(values: any[]): PreviewRuleRequest {\n  const [type, dataSourceName, condition, queries, expression] = values;\n\n  switch (type) {\n    case RuleFormType.cloud:\n      return {\n        dataSourceName,\n        expr: expression,\n      };\n\n    case RuleFormType.grafana:\n      return {\n        grafana_condition: {\n          condition,\n          data: queries,\n          now: dateTimeFormatISO(Date.now()),\n        },\n      };\n\n    default:\n      throw new Error(`Alert type ${type} not supported by preview.`);\n  }\n}\n\nfunction isCompleted(response: PreviewRuleResponse): boolean {\n  switch (response.data.state) {\n    case LoadingState.Done:\n    case LoadingState.Error:\n      return true;\n    default:\n      return false;\n  }\n}\n\nfunction getStyles(theme: GrafanaTheme2) {\n  return {\n    container: css`\n      margin-top: ${theme.spacing(2)};\n    `,\n  };\n}\n","import React, { FC } from 'react';\nimport { css } from '@emotion/css';\nimport { GrafanaTheme } from '@grafana/data';\nimport { Field, Input, InputControl, Select, useStyles } from '@grafana/ui';\nimport { useFormContext } from 'react-hook-form';\nimport { RuleFormValues } from '../../types/rule-form';\nimport { timeOptions } from '../../utils/time';\nimport { RuleEditorSection } from './RuleEditorSection';\nimport { PreviewRule } from './PreviewRule';\n\nexport const CloudConditionsStep: FC = () => {\n  const styles = useStyles(getStyles);\n  const {\n    register,\n    control,\n    formState: { errors },\n  } = useFormContext<RuleFormValues>();\n\n  return (\n    <RuleEditorSection stepNo={3} title=\"Define alert conditions\">\n      <Field label=\"For\" description=\"Expression has to be true for this long for the alert to be fired.\">\n        <div className={styles.flexRow}>\n          <Field invalid={!!errors.forTime?.message} error={errors.forTime?.message} className={styles.inlineField}>\n            <Input\n              {...register('forTime', { pattern: { value: /^\\d+$/, message: 'Must be a positive integer.' } })}\n              width={8}\n            />\n          </Field>\n          <InputControl\n            name=\"forTimeUnit\"\n            render={({ field: { onChange, ref, ...field } }) => (\n              <Select\n                menuShouldPortal\n                {...field}\n                options={timeOptions}\n                onChange={(value) => onChange(value?.value)}\n                width={15}\n                className={styles.timeUnit}\n              />\n            )}\n            control={control}\n          />\n        </div>\n      </Field>\n      <PreviewRule />\n    </RuleEditorSection>\n  );\n};\n\nconst getStyles = (theme: GrafanaTheme) => ({\n  inlineField: css`\n    margin-bottom: 0;\n  `,\n  flexRow: css`\n    display: flex;\n    flex-direction: row;\n    justify-content: flex-start;\n    align-items: flex-start;\n  `,\n  timeUnit: css`\n    margin-left: ${theme.spacing.xs};\n  `,\n});\n","import { SelectableValue } from '@grafana/data';\nimport { Field, InputControl, Select } from '@grafana/ui';\nimport { ExpressionDatasourceID } from 'app/features/expressions/ExpressionDatasource';\nimport React, { FC, useEffect, useMemo } from 'react';\nimport { useFormContext } from 'react-hook-form';\nimport { RuleFormValues } from '../../types/rule-form';\n\nexport const ConditionField: FC = () => {\n  const {\n    watch,\n    setValue,\n    formState: { errors },\n  } = useFormContext<RuleFormValues>();\n\n  const queries = watch('queries');\n  const condition = watch('condition');\n\n  const options = useMemo(\n    (): SelectableValue[] =>\n      queries\n        .filter((q) => !!q.refId)\n        .map((q) => ({\n          value: q.refId,\n          label: q.refId,\n        })),\n    [queries]\n  );\n\n  // reset condition if option no longer exists or if it is unset, but there are options available\n  useEffect(() => {\n    const expressions = queries.filter((query) => query.model.datasource === ExpressionDatasourceID);\n    if (condition && !options.find(({ value }) => value === condition)) {\n      setValue('condition', expressions.length ? expressions[expressions.length - 1].refId : null);\n    } else if (!condition && expressions.length) {\n      setValue('condition', expressions[expressions.length - 1].refId);\n    }\n  }, [condition, options, queries, setValue]);\n\n  return (\n    <Field\n      label=\"Condition\"\n      description=\"The query or expression that will be alerted on\"\n      error={errors.condition?.message}\n      invalid={!!errors.condition?.message}\n    >\n      <InputControl\n        name=\"condition\"\n        render={({ field: { onChange, ref, ...field } }) => (\n          <Select\n            menuShouldPortal\n            {...field}\n            width={42}\n            options={options}\n            onChange={(v: SelectableValue) => onChange(v?.value ?? null)}\n            noOptionsMessage=\"No queries defined\"\n          />\n        )}\n        rules={{\n          required: {\n            value: true,\n            message: 'Please select the condition to alert on',\n          },\n        }}\n      />\n    </Field>\n  );\n};\n","import { SelectableValue } from '@grafana/data';\nimport { Select } from '@grafana/ui';\nimport { SelectBaseProps } from '@grafana/ui/src/components/Select/types';\nimport { GrafanaAlertStateDecision } from 'app/types/unified-alerting-dto';\nimport React, { FC, useMemo } from 'react';\n\ntype Props = Omit<SelectBaseProps<GrafanaAlertStateDecision>, 'options'> & {\n  includeNoData: boolean;\n};\n\nconst options: SelectableValue[] = [\n  { value: GrafanaAlertStateDecision.Alerting, label: 'Alerting' },\n  { value: GrafanaAlertStateDecision.NoData, label: 'No Data' },\n  { value: GrafanaAlertStateDecision.OK, label: 'OK' },\n];\n\nexport const GrafanaAlertStatePicker: FC<Props> = ({ includeNoData, ...props }) => {\n  const opts = useMemo(() => {\n    if (includeNoData) {\n      return options;\n    }\n    return options.filter((opt) => opt.value !== GrafanaAlertStateDecision.NoData);\n  }, [includeNoData]);\n  return <Select menuShouldPortal options={opts} {...props} />;\n};\n","import { durationToMilliseconds, parseDuration } from '@grafana/data';\nimport { Alert } from '@grafana/ui';\nimport { isEmpty } from 'lodash';\nimport React, { FC } from 'react';\nimport { useFormContext } from 'react-hook-form';\nimport { RuleFormValues } from '../../types/rule-form';\n\n// a warning that will be shown if a problematic yet technically valid combination of \"evaluate every\" and \"evaluate for\" is enetered\nexport const GrafanaConditionEvalWarning: FC = () => {\n  const { watch } = useFormContext<RuleFormValues>();\n  const evaluateFor = watch('evaluateFor');\n  const evaluateEvery = watch('evaluateEvery');\n  if (evaluateFor === '0') {\n    return null;\n  }\n  const durationFor = parseDuration(evaluateFor);\n  const durationEvery = parseDuration(evaluateEvery);\n  if (isEmpty(durationFor) || isEmpty(durationEvery)) {\n    return null;\n  }\n  const millisFor = durationToMilliseconds(durationFor);\n  const millisEvery = durationToMilliseconds(durationEvery);\n  if (millisFor && millisEvery && millisFor <= millisEvery) {\n    return (\n      <Alert severity=\"warning\" title=\"\">\n        Setting a &quot;for&quot; duration that is less than or equal to the evaluation interval will result in the\n        evaluation interval being used to calculate when an alert that has stopped receiving data will be closed.\n      </Alert>\n    );\n  }\n  return null;\n};\n","import React, { FC, useState } from 'react';\nimport { css } from '@emotion/css';\nimport { parseDuration, durationToMilliseconds, GrafanaTheme2 } from '@grafana/data';\nimport { Field, InlineLabel, Input, InputControl, useStyles2 } from '@grafana/ui';\nimport { useFormContext, RegisterOptions } from 'react-hook-form';\nimport { RuleFormValues } from '../../types/rule-form';\nimport { positiveDurationValidationPattern, durationValidationPattern } from '../../utils/time';\nimport { ConditionField } from './ConditionField';\nimport { GrafanaAlertStatePicker } from './GrafanaAlertStatePicker';\nimport { RuleEditorSection } from './RuleEditorSection';\nimport { PreviewRule } from './PreviewRule';\nimport { GrafanaConditionEvalWarning } from './GrafanaConditionEvalWarning';\nimport { CollapseToggle } from '../CollapseToggle';\n\nconst MIN_TIME_RANGE_STEP_S = 10; // 10 seconds\n\nconst forValidationOptions: RegisterOptions = {\n  required: {\n    value: true,\n    message: 'Required.',\n  },\n  pattern: durationValidationPattern,\n};\n\nconst evaluateEveryValidationOptions: RegisterOptions = {\n  required: {\n    value: true,\n    message: 'Required.',\n  },\n  pattern: positiveDurationValidationPattern,\n  validate: (value: string) => {\n    const duration = parseDuration(value);\n    if (Object.keys(duration).length) {\n      const diff = durationToMilliseconds(duration);\n      if (diff < MIN_TIME_RANGE_STEP_S * 1000) {\n        return `Cannot be less than ${MIN_TIME_RANGE_STEP_S} seconds.`;\n      }\n      if (diff % (MIN_TIME_RANGE_STEP_S * 1000) !== 0) {\n        return `Must be a multiple of ${MIN_TIME_RANGE_STEP_S} seconds.`;\n      }\n    }\n    return true;\n  },\n};\n\nexport const GrafanaConditionsStep: FC = () => {\n  const styles = useStyles2(getStyles);\n  const [showErrorHandling, setShowErrorHandling] = useState(false);\n  const {\n    register,\n    formState: { errors },\n  } = useFormContext<RuleFormValues>();\n\n  return (\n    <RuleEditorSection stepNo={3} title=\"Define alert conditions\">\n      <ConditionField />\n      <Field label=\"Evaluate\">\n        <div className={styles.flexRow}>\n          <InlineLabel width={16} tooltip=\"How often the alert will be evaluated to see if it fires\">\n            Evaluate every\n          </InlineLabel>\n          <Field\n            className={styles.inlineField}\n            error={errors.evaluateEvery?.message}\n            invalid={!!errors.evaluateEvery?.message}\n            validationMessageHorizontalOverflow={true}\n          >\n            <Input width={8} {...register('evaluateEvery', evaluateEveryValidationOptions)} />\n          </Field>\n          <InlineLabel\n            width={7}\n            tooltip='Once condition is breached, alert will go into pending state. If it is pending for longer than the \"for\" value, it will become a firing alert.'\n          >\n            for\n          </InlineLabel>\n          <Field\n            className={styles.inlineField}\n            error={errors.evaluateFor?.message}\n            invalid={!!errors.evaluateFor?.message}\n            validationMessageHorizontalOverflow={true}\n          >\n            <Input width={8} {...register('evaluateFor', forValidationOptions)} />\n          </Field>\n        </div>\n      </Field>\n      <GrafanaConditionEvalWarning />\n      <CollapseToggle\n        isCollapsed={!showErrorHandling}\n        onToggle={(collapsed) => setShowErrorHandling(!collapsed)}\n        text=\"Configure no data and error handling\"\n        className={styles.collapseToggle}\n      />\n      {showErrorHandling && (\n        <>\n          <Field label=\"Alert state if no data or all values are null\">\n            <InputControl\n              render={({ field: { onChange, ref, ...field } }) => (\n                <GrafanaAlertStatePicker\n                  {...field}\n                  width={42}\n                  includeNoData={true}\n                  onChange={(value) => onChange(value?.value)}\n                />\n              )}\n              name=\"noDataState\"\n            />\n          </Field>\n          <Field label=\"Alert state if execution error or timeout\">\n            <InputControl\n              render={({ field: { onChange, ref, ...field } }) => (\n                <GrafanaAlertStatePicker\n                  {...field}\n                  width={42}\n                  includeNoData={false}\n                  onChange={(value) => onChange(value?.value)}\n                />\n              )}\n              name=\"execErrState\"\n            />\n          </Field>\n        </>\n      )}\n      <PreviewRule />\n    </RuleEditorSection>\n  );\n};\n\nconst getStyles = (theme: GrafanaTheme2) => ({\n  inlineField: css`\n    margin-bottom: 0;\n  `,\n  flexRow: css`\n    display: flex;\n    flex-direction: row;\n    justify-content: flex-start;\n    align-items: flex-start;\n  `,\n  collapseToggle: css`\n    margin: ${theme.spacing(2, 0, 2, -1)};\n  `,\n});\n","import React, { FC, useMemo } from 'react';\nimport { GrafanaTheme2, AppEvents } from '@grafana/data';\nimport { PageToolbar, Button, useStyles2, CustomScrollbar, Spinner } from '@grafana/ui';\nimport { css } from '@emotion/css';\n\nimport { AlertTypeStep } from './AlertTypeStep';\nimport { DetailsStep } from './DetailsStep';\nimport { QueryStep } from './QueryStep';\nimport { useForm, FormProvider } from 'react-hook-form';\n\nimport { RuleFormType, RuleFormValues } from '../../types/rule-form';\nimport { useUnifiedAlertingSelector } from '../../hooks/useUnifiedAlertingSelector';\nimport { initialAsyncRequestState } from '../../utils/redux';\nimport { saveRuleFormAction } from '../../state/actions';\nimport { RuleWithLocation } from 'app/types/unified-alerting';\nimport { useDispatch } from 'react-redux';\nimport { useCleanup } from 'app/core/hooks/useCleanup';\nimport { rulerRuleToFormValues, getDefaultFormValues, getDefaultQueries } from '../../utils/rule-form';\nimport { Link } from 'react-router-dom';\nimport { useQueryParams } from 'app/core/hooks/useQueryParams';\n\nimport { appEvents } from 'app/core/core';\nimport { CloudConditionsStep } from './CloudConditionsStep';\nimport { GrafanaConditionsStep } from './GrafanaConditionsStep';\n\ntype Props = {\n  existing?: RuleWithLocation;\n};\n\nexport const AlertRuleForm: FC<Props> = ({ existing }) => {\n  const styles = useStyles2(getStyles);\n  const dispatch = useDispatch();\n  const [queryParams] = useQueryParams();\n\n  const returnTo: string = (queryParams['returnTo'] as string | undefined) ?? '/alerting/list';\n\n  const defaultValues: RuleFormValues = useMemo(() => {\n    if (existing) {\n      return rulerRuleToFormValues(existing);\n    }\n    return {\n      ...getDefaultFormValues(),\n      queries: getDefaultQueries(),\n      ...(queryParams['defaults'] ? JSON.parse(queryParams['defaults'] as string) : {}),\n    };\n  }, [existing, queryParams]);\n\n  const formAPI = useForm<RuleFormValues>({\n    mode: 'onSubmit',\n    defaultValues,\n    shouldFocusError: true,\n  });\n\n  const { handleSubmit, watch } = formAPI;\n\n  const type = watch('type');\n  const dataSourceName = watch('dataSourceName');\n\n  const showStep2 = Boolean(type && (type === RuleFormType.grafana || !!dataSourceName));\n\n  const submitState = useUnifiedAlertingSelector((state) => state.ruleForm.saveRule) || initialAsyncRequestState;\n  useCleanup((state) => state.unifiedAlerting.ruleForm.saveRule);\n\n  const submit = (values: RuleFormValues, exitOnSave: boolean) => {\n    dispatch(\n      saveRuleFormAction({\n        values: {\n          ...defaultValues,\n          ...values,\n          annotations:\n            values.annotations\n              ?.map(({ key, value }) => ({ key: key.trim(), value: value.trim() }))\n              .filter(({ key, value }) => !!key && !!value) ?? [],\n          labels:\n            values.labels\n              ?.map(({ key, value }) => ({ key: key.trim(), value: value.trim() }))\n              .filter(({ key }) => !!key) ?? [],\n        },\n        existing,\n        redirectOnSave: exitOnSave ? returnTo : undefined,\n      })\n    );\n  };\n\n  const onInvalid = () => {\n    appEvents.emit(AppEvents.alertError, ['There are errors in the form. Please correct them and try again!']);\n  };\n\n  return (\n    <FormProvider {...formAPI}>\n      <form onSubmit={(e) => e.preventDefault()} className={styles.form}>\n        <PageToolbar title=\"Create alert rule\" pageIcon=\"bell\">\n          <Link to={returnTo}>\n            <Button variant=\"secondary\" disabled={submitState.loading} type=\"button\" fill=\"outline\">\n              Cancel\n            </Button>\n          </Link>\n          <Button\n            variant=\"secondary\"\n            type=\"button\"\n            onClick={handleSubmit((values) => submit(values, false), onInvalid)}\n            disabled={submitState.loading}\n          >\n            {submitState.loading && <Spinner className={styles.buttonSpinner} inline={true} />}\n            Save\n          </Button>\n          <Button\n            variant=\"primary\"\n            type=\"button\"\n            onClick={handleSubmit((values) => submit(values, true), onInvalid)}\n            disabled={submitState.loading}\n          >\n            {submitState.loading && <Spinner className={styles.buttonSpinner} inline={true} />}\n            Save and exit\n          </Button>\n        </PageToolbar>\n        <div className={styles.contentOuter}>\n          <CustomScrollbar autoHeightMin=\"100%\" hideHorizontalTrack={true}>\n            <div className={styles.contentInner}>\n              <AlertTypeStep editingExistingRule={!!existing} />\n              {showStep2 && (\n                <>\n                  <QueryStep />\n                  {type === RuleFormType.cloud ? <CloudConditionsStep /> : <GrafanaConditionsStep />}\n                  <DetailsStep />\n                </>\n              )}\n            </div>\n          </CustomScrollbar>\n        </div>\n      </form>\n    </FormProvider>\n  );\n};\n\nconst getStyles = (theme: GrafanaTheme2) => {\n  return {\n    buttonSpinner: css`\n      margin-right: ${theme.spacing(1)};\n    `,\n    form: css`\n      width: 100%;\n      height: 100%;\n      display: flex;\n      flex-direction: column;\n    `,\n    contentInner: css`\n      flex: 1;\n      padding: ${theme.spacing(2)};\n    `,\n    contentOuter: css`\n      background: ${theme.colors.background.primary};\n      border: 1px solid ${theme.colors.border.weak};\n      border-radius: ${theme.shape.borderRadius()};\n      margin: ${theme.spacing(0, 2, 2)};\n      overflow: hidden;\n      flex: 1;\n    `,\n    flexRow: css`\n      display: flex;\n      flex-direction: row;\n      justify-content: flex-start;\n    `,\n  };\n};\n","import { css } from '@emotion/css';\nimport { GrafanaTheme2 } from '@grafana/data';\nimport { Alert, LinkButton, LoadingPlaceholder, useStyles2, withErrorBoundary } from '@grafana/ui';\nimport Page from 'app/core/components/Page/Page';\nimport { contextSrv } from 'app/core/services/context_srv';\nimport { useCleanup } from 'app/core/hooks/useCleanup';\nimport { GrafanaRouteComponentProps } from 'app/core/navigation/types';\nimport { RuleIdentifier } from 'app/types/unified-alerting';\nimport React, { FC, useEffect } from 'react';\nimport { useDispatch } from 'react-redux';\nimport { AlertRuleForm } from './components/rule-editor/AlertRuleForm';\nimport { useIsRuleEditable } from './hooks/useIsRuleEditable';\nimport { useUnifiedAlertingSelector } from './hooks/useUnifiedAlertingSelector';\nimport { fetchEditableRuleAction } from './state/actions';\nimport * as ruleId from './utils/rule-id';\n\ninterface ExistingRuleEditorProps {\n  identifier: RuleIdentifier;\n}\n\nconst ExistingRuleEditor: FC<ExistingRuleEditorProps> = ({ identifier }) => {\n  useCleanup((state) => state.unifiedAlerting.ruleForm.existingRule);\n  const { loading, result, error, dispatched } = useUnifiedAlertingSelector((state) => state.ruleForm.existingRule);\n  const dispatch = useDispatch();\n  const { isEditable } = useIsRuleEditable(ruleId.ruleIdentifierToRuleSourceName(identifier), result?.rule);\n\n  useEffect(() => {\n    if (!dispatched) {\n      dispatch(fetchEditableRuleAction(identifier));\n    }\n  }, [dispatched, dispatch, identifier]);\n\n  if (loading || isEditable === undefined) {\n    return (\n      <Page.Contents>\n        <LoadingPlaceholder text=\"Loading rule...\" />\n      </Page.Contents>\n    );\n  }\n  if (error) {\n    return (\n      <Page.Contents>\n        <Alert severity=\"error\" title=\"Failed to load rule\">\n          {error.message}\n        </Alert>\n      </Page.Contents>\n    );\n  }\n  if (!result) {\n    return <AlertWarning title=\"Rule not found\">Sorry! This rule does not exist.</AlertWarning>;\n  }\n  if (isEditable === false) {\n    return <AlertWarning title=\"Cannot edit rule\">Sorry! You do not have permission to edit this rule.</AlertWarning>;\n  }\n  return <AlertRuleForm existing={result} />;\n};\n\ntype RuleEditorProps = GrafanaRouteComponentProps<{ id?: string }>;\n\nconst RuleEditor: FC<RuleEditorProps> = ({ match }) => {\n  const { id } = match.params;\n  const identifier = ruleId.tryParse(id, true);\n\n  if (identifier) {\n    return <ExistingRuleEditor key={id} identifier={identifier} />;\n  }\n  if (!(contextSrv.hasEditPermissionInFolders || contextSrv.isEditor)) {\n    return <AlertWarning title=\"Cannot create rules\">Sorry! You are not allowed to create rules.</AlertWarning>;\n  }\n  return <AlertRuleForm />;\n};\n\nconst AlertWarning: FC<{ title: string }> = ({ title, children }) => (\n  <Alert className={useStyles2(warningStyles).warning} severity=\"warning\" title={title}>\n    <p>{children}</p>\n    <LinkButton href=\"alerting/list\">To rule list</LinkButton>\n  </Alert>\n);\n\nconst warningStyles = (theme: GrafanaTheme2) => ({\n  warning: css`\n    margin: ${theme.spacing(4)};\n  `,\n});\n\nexport default withErrorBoundary(RuleEditor, { style: 'page' });\n","import { UrlQueryMap } from '@grafana/data';\nimport { locationSearchToObject, locationService } from '@grafana/runtime';\nimport { useCallback, useMemo } from 'react';\nimport { useLocation } from 'react-router-dom';\n\nexport function useQueryParams(): [UrlQueryMap, (values: UrlQueryMap, replace?: boolean) => void] {\n  const { search } = useLocation();\n  const queryParams = useMemo(() => locationSearchToObject(search || ''), [search]);\n  const update = useCallback(\n    (values: UrlQueryMap, replace?: boolean) => setImmediate(() => locationService.partial(values, replace)),\n    []\n  );\n  return [queryParams, update];\n}\n","import { RelativeTimeRange } from '@grafana/data';\nimport { AlertQuery } from 'app/types/unified-alerting-dto';\nimport { ExpressionQuery, ExpressionQueryType } from '../../../expressions/types';\n\nconst FALL_BACK_TIME_RANGE = { from: 21600, to: 0 };\n\nexport const getTimeRangeForExpression = (query: ExpressionQuery, queries: AlertQuery[]): RelativeTimeRange => {\n  const referencedRefIds: string[] | undefined = getReferencedIds(query, queries);\n\n  if (!referencedRefIds) {\n    return FALL_BACK_TIME_RANGE;\n  }\n\n  const { from, to } = getTimeRanges(referencedRefIds, queries);\n\n  if (!from.length && !to.length) {\n    return FALL_BACK_TIME_RANGE;\n  }\n\n  return {\n    from: Math.max(...from),\n    to: Math.min(...to),\n  };\n};\n\nconst getReferencedIds = (model: ExpressionQuery, queries: AlertQuery[]): string[] | undefined => {\n  switch (model.type) {\n    case ExpressionQueryType.classic:\n      return getReferencedIdsForClassicCondition(model);\n    case ExpressionQueryType.math:\n      return getReferencedIdsForMath(model, queries);\n    case ExpressionQueryType.resample:\n    case ExpressionQueryType.reduce:\n      return getReferencedIdsForReduce(model);\n  }\n};\n\nconst getReferencedIdsForClassicCondition = (model: ExpressionQuery) => {\n  return model.conditions?.map((condition) => {\n    return condition.query.params[0];\n  });\n};\n\nconst getTimeRanges = (referencedRefIds: string[], queries: AlertQuery[]) => {\n  let from: number[] = [];\n  let to = [FALL_BACK_TIME_RANGE.to];\n  for (const referencedRefIdsKey of referencedRefIds) {\n    const query = queries.find((query) => query.refId === referencedRefIdsKey);\n\n    if (!query || !query.relativeTimeRange) {\n      continue;\n    }\n    from.push(query.relativeTimeRange.from);\n    to.push(query.relativeTimeRange.to);\n  }\n\n  return {\n    from,\n    to,\n  };\n};\n\nconst getReferencedIdsForMath = (model: ExpressionQuery, queries: AlertQuery[]) => {\n  return (\n    queries\n      // filter queries of type query and filter expression on if it includes any refIds\n      .filter((q) => q.queryType === 'query' && model.expression?.includes(q.refId))\n      .map((q) => {\n        return q.refId;\n      })\n  );\n};\n\nconst getReferencedIdsForReduce = (model: ExpressionQuery) => {\n  return model.expression ? [model.expression] : undefined;\n};\n","import { Observable, of, OperatorFunction, ReplaySubject, Unsubscribable } from 'rxjs';\nimport { catchError, map, share } from 'rxjs/operators';\nimport { v4 as uuidv4 } from 'uuid';\nimport {\n  dataFrameFromJSON,\n  DataFrameJSON,\n  getDefaultTimeRange,\n  LoadingState,\n  PanelData,\n  rangeUtil,\n  TimeRange,\n  withLoadingIndicator,\n} from '@grafana/data';\nimport { FetchResponse, toDataQueryError } from '@grafana/runtime';\nimport { BackendSrv, getBackendSrv } from 'app/core/services/backend_srv';\nimport { preProcessPanelData } from 'app/features/query/state/runRequest';\nimport { AlertQuery } from 'app/types/unified-alerting-dto';\nimport { getTimeRangeForExpression } from '../utils/timeRange';\nimport { isExpressionQuery } from 'app/features/expressions/guards';\nimport { setStructureRevision } from 'app/features/query/state/processing/revision';\nimport { cancelNetworkRequestsOnUnsubscribe } from 'app/features/query/state/processing/canceler';\n\nexport interface AlertingQueryResult {\n  frames: DataFrameJSON[];\n}\n\nexport interface AlertingQueryResponse {\n  results: Record<string, AlertingQueryResult>;\n}\nexport class AlertingQueryRunner {\n  private subject: ReplaySubject<Record<string, PanelData>>;\n  private subscription?: Unsubscribable;\n  private lastResult: Record<string, PanelData>;\n\n  constructor(private backendSrv = getBackendSrv()) {\n    this.subject = new ReplaySubject(1);\n    this.lastResult = {};\n  }\n\n  get(): Observable<Record<string, PanelData>> {\n    return this.subject.asObservable();\n  }\n\n  run(queries: AlertQuery[]) {\n    if (queries.length === 0) {\n      const empty = initialState(queries, LoadingState.Done);\n      return this.subject.next(empty);\n    }\n\n    this.subscription = runRequest(this.backendSrv, queries).subscribe({\n      next: (dataPerQuery) => {\n        const nextResult = applyChange(dataPerQuery, (refId, data) => {\n          const previous = this.lastResult[refId];\n          const preProcessed = preProcessPanelData(data, previous);\n          return setStructureRevision(preProcessed, previous);\n        });\n\n        this.lastResult = nextResult;\n        this.subject.next(this.lastResult);\n      },\n\n      error: (error: Error) => {\n        this.lastResult = mapErrorToPanelData(this.lastResult, error);\n        this.subject.next(this.lastResult);\n      },\n    });\n  }\n\n  cancel() {\n    if (!this.subscription) {\n      return;\n    }\n    this.subscription.unsubscribe();\n\n    let requestIsRunning = false;\n\n    const nextResult = applyChange(this.lastResult, (refId, data) => {\n      if (data.state === LoadingState.Loading) {\n        requestIsRunning = true;\n      }\n\n      return {\n        ...data,\n        state: LoadingState.Done,\n      };\n    });\n\n    if (requestIsRunning) {\n      this.subject.next(nextResult);\n    }\n  }\n\n  destroy() {\n    if (this.subject) {\n      this.subject.complete();\n    }\n\n    this.cancel();\n  }\n}\n\nconst runRequest = (backendSrv: BackendSrv, queries: AlertQuery[]): Observable<Record<string, PanelData>> => {\n  const initial = initialState(queries, LoadingState.Loading);\n  const request = {\n    data: { data: queries },\n    url: '/api/v1/eval',\n    method: 'POST',\n    requestId: uuidv4(),\n  };\n\n  return withLoadingIndicator({\n    whileLoading: initial,\n    source: backendSrv.fetch<AlertingQueryResponse>(request).pipe(\n      mapToPanelData(initial),\n      catchError((error) => of(mapErrorToPanelData(initial, error))),\n      cancelNetworkRequestsOnUnsubscribe(backendSrv, request.requestId),\n      share()\n    ),\n  });\n};\n\nconst initialState = (queries: AlertQuery[], state: LoadingState): Record<string, PanelData> => {\n  return queries.reduce((dataByQuery: Record<string, PanelData>, query) => {\n    dataByQuery[query.refId] = {\n      state,\n      series: [],\n      timeRange: getTimeRange(query, queries),\n    };\n\n    return dataByQuery;\n  }, {});\n};\n\nconst getTimeRange = (query: AlertQuery, queries: AlertQuery[]): TimeRange => {\n  if (isExpressionQuery(query.model)) {\n    const relative = getTimeRangeForExpression(query.model, queries);\n    return rangeUtil.relativeToTimeRange(relative);\n  }\n\n  if (!query.relativeTimeRange) {\n    console.warn(`Query with refId: ${query.refId} did not have any relative time range, using default.`);\n    return getDefaultTimeRange();\n  }\n\n  return rangeUtil.relativeToTimeRange(query.relativeTimeRange);\n};\n\nconst mapToPanelData = (\n  dataByQuery: Record<string, PanelData>\n): OperatorFunction<FetchResponse<AlertingQueryResponse>, Record<string, PanelData>> => {\n  return map((response) => {\n    const { data } = response;\n    const results: Record<string, PanelData> = {};\n\n    for (const [refId, result] of Object.entries(data.results)) {\n      results[refId] = {\n        timeRange: dataByQuery[refId].timeRange,\n        state: LoadingState.Done,\n        series: result.frames.map(dataFrameFromJSON),\n      };\n    }\n\n    return results;\n  });\n};\n\nconst mapErrorToPanelData = (lastResult: Record<string, PanelData>, error: Error): Record<string, PanelData> => {\n  const queryError = toDataQueryError(error);\n\n  return applyChange(lastResult, (refId, data) => {\n    return {\n      ...data,\n      state: LoadingState.Error,\n      error: queryError,\n    };\n  });\n};\n\nconst applyChange = (\n  initial: Record<string, PanelData>,\n  change: (refId: string, data: PanelData) => PanelData\n): Record<string, PanelData> => {\n  const nextResult: Record<string, PanelData> = {};\n\n  for (const [refId, data] of Object.entries(initial)) {\n    nextResult[refId] = change(refId, data);\n  }\n\n  return nextResult;\n};\n","import { FolderDTO } from 'app/types';\nimport { useDispatch } from 'react-redux';\nimport { useUnifiedAlertingSelector } from './useUnifiedAlertingSelector';\nimport { useEffect } from 'react';\nimport { fetchFolderIfNotFetchedAction } from '../state/actions';\nimport { initialAsyncRequestState } from '../utils/redux';\n\ninterface ReturnBag {\n  folder?: FolderDTO;\n  loading: boolean;\n}\n\nexport function useFolder(uid?: string): ReturnBag {\n  const dispatch = useDispatch();\n  const folderRequests = useUnifiedAlertingSelector((state) => state.folders);\n  useEffect(() => {\n    if (uid) {\n      dispatch(fetchFolderIfNotFetchedAction(uid));\n    }\n  }, [dispatch, uid]);\n\n  if (uid) {\n    const request = folderRequests[uid] || initialAsyncRequestState;\n    return {\n      folder: request.result,\n      loading: request.loading,\n    };\n  }\n  return {\n    loading: false,\n  };\n}\n","import { contextSrv } from 'app/core/services/context_srv';\nimport { isGrafanaRulerRule } from '../utils/rules';\nimport { RulerRuleDTO } from 'app/types/unified-alerting-dto';\nimport { useFolder } from './useFolder';\nimport { useUnifiedAlertingSelector } from './useUnifiedAlertingSelector';\nimport { useDispatch } from 'react-redux';\nimport { useEffect } from 'react';\nimport { checkIfLotexSupportsEditingRulesAction } from '../state/actions';\n\ninterface ResultBag {\n  isEditable?: boolean;\n  loading: boolean;\n}\n\nexport function useIsRuleEditable(rulesSourceName: string, rule?: RulerRuleDTO): ResultBag {\n  const checkEditingRequests = useUnifiedAlertingSelector((state) => state.lotexSupportsRuleEditing);\n  const dispatch = useDispatch();\n  const folderUID = rule && isGrafanaRulerRule(rule) ? rule.grafana_alert.namespace_uid : undefined;\n\n  const { folder, loading } = useFolder(folderUID);\n\n  useEffect(() => {\n    if (checkEditingRequests[rulesSourceName] === undefined) {\n      dispatch(checkIfLotexSupportsEditingRulesAction(rulesSourceName));\n    }\n  }, [rulesSourceName, checkEditingRequests, dispatch]);\n\n  if (!rule) {\n    return { isEditable: false, loading: false };\n  }\n\n  // grafana rules can be edited if user can edit the folder they're in\n  if (isGrafanaRulerRule(rule)) {\n    if (!folderUID) {\n      throw new Error(\n        `Rule ${rule.grafana_alert.title} does not have a folder uid, cannot determine if it is editable.`\n      );\n    }\n    return {\n      isEditable: folder?.canSave,\n      loading,\n    };\n  }\n\n  // prom rules are only editable by users with Editor role and only if rules source supports editing\n  return {\n    isEditable: contextSrv.isEditor && !!checkEditingRequests[rulesSourceName]?.result,\n    loading: !!checkEditingRequests[rulesSourceName]?.loading,\n  };\n}\n","import { useEffect, useRef } from 'react';\nimport { useDispatch } from 'react-redux';\nimport { cleanUpAction, StateSelector } from '../actions/cleanUp';\n\nexport function useCleanup<T>(stateSelector: StateSelector<T>) {\n  const dispatch = useDispatch();\n  //bit of a hack to unburden user from having to wrap stateSelcetor in a useCallback. Otherwise cleanup would happen on every render\n  const selectorRef = useRef(stateSelector);\n  selectorRef.current = stateSelector;\n  useEffect(() => {\n    return () => {\n      dispatch(cleanUpAction({ stateSelector: selectorRef.current }));\n    };\n  }, [dispatch]);\n}\n","var scope = (typeof global !== \"undefined\" && global) ||\n            (typeof self !== \"undefined\" && self) ||\n            window;\nvar apply = Function.prototype.apply;\n\n// DOM APIs, for completeness\n\nexports.setTimeout = function() {\n  return new Timeout(apply.call(setTimeout, scope, arguments), clearTimeout);\n};\nexports.setInterval = function() {\n  return new Timeout(apply.call(setInterval, scope, arguments), clearInterval);\n};\nexports.clearTimeout =\nexports.clearInterval = function(timeout) {\n  if (timeout) {\n    timeout.close();\n  }\n};\n\nfunction Timeout(id, clearFn) {\n  this._id = id;\n  this._clearFn = clearFn;\n}\nTimeout.prototype.unref = Timeout.prototype.ref = function() {};\nTimeout.prototype.close = function() {\n  this._clearFn.call(scope, this._id);\n};\n\n// Does not start the time, just sets up the members needed.\nexports.enroll = function(item, msecs) {\n  clearTimeout(item._idleTimeoutId);\n  item._idleTimeout = msecs;\n};\n\nexports.unenroll = function(item) {\n  clearTimeout(item._idleTimeoutId);\n  item._idleTimeout = -1;\n};\n\nexports._unrefActive = exports.active = function(item) {\n  clearTimeout(item._idleTimeoutId);\n\n  var msecs = item._idleTimeout;\n  if (msecs >= 0) {\n    item._idleTimeoutId = setTimeout(function onTimeout() {\n      if (item._onTimeout)\n        item._onTimeout();\n    }, msecs);\n  }\n};\n\n// setimmediate attaches itself to the global object\nrequire(\"setimmediate\");\n// On some exotic environments, it's not clear which object `setimmediate` was\n// able to install onto.  Search each possibility in the same order as the\n// `setimmediate` library.\nexports.setImmediate = (typeof self !== \"undefined\" && self.setImmediate) ||\n                       (typeof global !== \"undefined\" && global.setImmediate) ||\n                       (this && this.setImmediate);\nexports.clearImmediate = (typeof self !== \"undefined\" && self.clearImmediate) ||\n                         (typeof global !== \"undefined\" && global.clearImmediate) ||\n                         (this && this.clearImmediate);\n","(function (global, undefined) {\n    \"use strict\";\n\n    if (global.setImmediate) {\n        return;\n    }\n\n    var nextHandle = 1; // Spec says greater than zero\n    var tasksByHandle = {};\n    var currentlyRunningATask = false;\n    var doc = global.document;\n    var registerImmediate;\n\n    function setImmediate(callback) {\n      // Callback can either be a function or a string\n      if (typeof callback !== \"function\") {\n        callback = new Function(\"\" + callback);\n      }\n      // Copy function arguments\n      var args = new Array(arguments.length - 1);\n      for (var i = 0; i < args.length; i++) {\n          args[i] = arguments[i + 1];\n      }\n      // Store and register the task\n      var task = { callback: callback, args: args };\n      tasksByHandle[nextHandle] = task;\n      registerImmediate(nextHandle);\n      return nextHandle++;\n    }\n\n    function clearImmediate(handle) {\n        delete tasksByHandle[handle];\n    }\n\n    function run(task) {\n        var callback = task.callback;\n        var args = task.args;\n        switch (args.length) {\n        case 0:\n            callback();\n            break;\n        case 1:\n            callback(args[0]);\n            break;\n        case 2:\n            callback(args[0], args[1]);\n            break;\n        case 3:\n            callback(args[0], args[1], args[2]);\n            break;\n        default:\n            callback.apply(undefined, args);\n            break;\n        }\n    }\n\n    function runIfPresent(handle) {\n        // From the spec: \"Wait until any invocations of this algorithm started before this one have completed.\"\n        // So if we're currently running a task, we'll need to delay this invocation.\n        if (currentlyRunningATask) {\n            // Delay by doing a setTimeout. setImmediate was tried instead, but in Firefox 7 it generated a\n            // \"too much recursion\" error.\n            setTimeout(runIfPresent, 0, handle);\n        } else {\n            var task = tasksByHandle[handle];\n            if (task) {\n                currentlyRunningATask = true;\n                try {\n                    run(task);\n                } finally {\n                    clearImmediate(handle);\n                    currentlyRunningATask = false;\n                }\n            }\n        }\n    }\n\n    function installNextTickImplementation() {\n        registerImmediate = function(handle) {\n            process.nextTick(function () { runIfPresent(handle); });\n        };\n    }\n\n    function canUsePostMessage() {\n        // The test against `importScripts` prevents this implementation from being installed inside a web worker,\n        // where `global.postMessage` means something completely different and can't be used for this purpose.\n        if (global.postMessage && !global.importScripts) {\n            var postMessageIsAsynchronous = true;\n            var oldOnMessage = global.onmessage;\n            global.onmessage = function() {\n                postMessageIsAsynchronous = false;\n            };\n            global.postMessage(\"\", \"*\");\n            global.onmessage = oldOnMessage;\n            return postMessageIsAsynchronous;\n        }\n    }\n\n    function installPostMessageImplementation() {\n        // Installs an event handler on `global` for the `message` event: see\n        // * https://developer.mozilla.org/en/DOM/window.postMessage\n        // * http://www.whatwg.org/specs/web-apps/current-work/multipage/comms.html#crossDocumentMessages\n\n        var messagePrefix = \"setImmediate$\" + Math.random() + \"$\";\n        var onGlobalMessage = function(event) {\n            if (event.source === global &&\n                typeof event.data === \"string\" &&\n                event.data.indexOf(messagePrefix) === 0) {\n                runIfPresent(+event.data.slice(messagePrefix.length));\n            }\n        };\n\n        if (global.addEventListener) {\n            global.addEventListener(\"message\", onGlobalMessage, false);\n        } else {\n            global.attachEvent(\"onmessage\", onGlobalMessage);\n        }\n\n        registerImmediate = function(handle) {\n            global.postMessage(messagePrefix + handle, \"*\");\n        };\n    }\n\n    function installMessageChannelImplementation() {\n        var channel = new MessageChannel();\n        channel.port1.onmessage = function(event) {\n            var handle = event.data;\n            runIfPresent(handle);\n        };\n\n        registerImmediate = function(handle) {\n            channel.port2.postMessage(handle);\n        };\n    }\n\n    function installReadyStateChangeImplementation() {\n        var html = doc.documentElement;\n        registerImmediate = function(handle) {\n            // Create a <script> element; its readystatechange event will be fired asynchronously once it is inserted\n            // into the document. Do so, thus queuing up the task. Remember to clean up once it's been called.\n            var script = doc.createElement(\"script\");\n            script.onreadystatechange = function () {\n                runIfPresent(handle);\n                script.onreadystatechange = null;\n                html.removeChild(script);\n                script = null;\n            };\n            html.appendChild(script);\n        };\n    }\n\n    function installSetTimeoutImplementation() {\n        registerImmediate = function(handle) {\n            setTimeout(runIfPresent, 0, handle);\n        };\n    }\n\n    // If supported, we should attach to the prototype of global, since that is where setTimeout et al. live.\n    var attachTo = Object.getPrototypeOf && Object.getPrototypeOf(global);\n    attachTo = attachTo && attachTo.setTimeout ? attachTo : global;\n\n    // Don't get fooled by e.g. browserify environments.\n    if ({}.toString.call(global.process) === \"[object process]\") {\n        // For Node.js before 0.9\n        installNextTickImplementation();\n\n    } else if (canUsePostMessage()) {\n        // For non-IE10 modern browsers\n        installPostMessageImplementation();\n\n    } else if (global.MessageChannel) {\n        // For web workers, where supported\n        installMessageChannelImplementation();\n\n    } else if (doc && \"onreadystatechange\" in doc.createElement(\"script\")) {\n        // For IE 6–8\n        installReadyStateChangeImplementation();\n\n    } else {\n        // For older browsers\n        installSetTimeoutImplementation();\n    }\n\n    attachTo.setImmediate = setImmediate;\n    attachTo.clearImmediate = clearImmediate;\n}(typeof self === \"undefined\" ? typeof global === \"undefined\" ? this : global : self));\n","import { SelectableValue } from '@grafana/data';\nimport { config } from '@grafana/runtime';\nimport { RadioButtonGroup } from '@grafana/ui';\nimport React, { useMemo } from 'react';\nimport { STAT, TABLE, TIMESERIES } from '../utils/constants';\n\nexport type SupportedPanelPlugins = 'timeseries' | 'table' | 'stat';\n\ntype Props = {\n  value: SupportedPanelPlugins;\n  onChange: (value: SupportedPanelPlugins) => void;\n  size?: 'sm' | 'md';\n};\n\nexport function PanelPluginsButtonGroup(props: Props): JSX.Element | null {\n  const { value, onChange, size = 'md' } = props;\n  const panels = useMemo(() => getSupportedPanels(), []);\n\n  return <RadioButtonGroup options={panels} value={value} onChange={onChange} size={size} />;\n}\n\nfunction getSupportedPanels(): Array<SelectableValue<SupportedPanelPlugins>> {\n  return Object.values(config.panels).reduce((panels: Array<SelectableValue<SupportedPanelPlugins>>, panel) => {\n    if (isSupportedPanelPlugin(panel.id)) {\n      panels.push({\n        value: panel.id,\n        label: panel.name,\n        imgUrl: panel.info.logos.small,\n      });\n    }\n    return panels;\n  }, []);\n}\n\nfunction isSupportedPanelPlugin(id: string): id is SupportedPanelPlugins {\n  switch (id) {\n    case TIMESERIES:\n    case TABLE:\n    case STAT:\n      return true;\n    default:\n      return false;\n  }\n}\n","import { DataQuery } from '@grafana/data';\nimport { ExpressionDatasourceID } from './ExpressionDatasource';\nimport { ExpressionQuery, ExpressionQueryType } from './types';\n\nexport const isExpressionQuery = (dataQuery?: DataQuery): dataQuery is ExpressionQuery => {\n  if (!dataQuery) {\n    return false;\n  }\n\n  if (dataQuery.datasource === ExpressionDatasourceID) {\n    return true;\n  }\n\n  const expression = dataQuery as ExpressionQuery;\n\n  if (typeof expression.type !== 'string') {\n    return false;\n  }\n  return Object.values(ExpressionQueryType).includes(expression.type);\n};\n","import React, { FC, HTMLAttributes } from 'react';\nimport { css, cx } from '@emotion/css';\nimport { IconSize, useStyles, Icon } from '@grafana/ui';\n\ninterface Props extends HTMLAttributes<HTMLButtonElement> {\n  isCollapsed: boolean;\n  onToggle: (isCollapsed: boolean) => void;\n  size?: IconSize;\n  className?: string;\n  text?: string;\n}\n\nexport const CollapseToggle: FC<Props> = ({ isCollapsed, onToggle, className, text, size = 'xl', ...restOfProps }) => {\n  const styles = useStyles(getStyles);\n\n  return (\n    <button className={cx(styles.expandButton, className)} onClick={() => onToggle(!isCollapsed)} {...restOfProps}>\n      <Icon size={size} name={isCollapsed ? 'angle-right' : 'angle-down'} />\n      {text}\n    </button>\n  );\n};\n\nexport const getStyles = () => ({\n  expandButton: css`\n    background: none;\n    border: none;\n\n    outline: none !important;\n\n    display: inline-flex;\n    align-items: center;\n\n    svg {\n      margin-bottom: 0;\n    }\n  `,\n});\n"],"sourceRoot":""}
{"version":3,"sources":["webpack:///./public/app/features/users/SignupInvited.tsx"],"names":["navModel","main","icon","text","subTitle","breadcrumbs","title","url","node","SignupInvitedPage","match","code","params","initFormModel","setInitFormModel","useState","greeting","setGreeting","invitedBy","setInvitedBy","useAsync","async","invite","getBackendSrv","get","email","name","username","Contents","className","contextSrv","user","orgName","defaultValues","onSubmit","post","formData","inviteCode","window","location","href","getConfig","appSubUrl","register","errors","invalid","error","message","label","placeholder","required","pattern","value","password","type"],"mappings":"4cAgBA,MAAMA,EAAW,CACfC,KAAM,CACJC,KAAM,UACNC,KAAM,SACNC,SAAU,gCACVC,YAAa,CAAC,CAAEC,MAAO,QAASC,IAAK,WAEvCC,KAAM,CACJL,KAAM,KAMGM,EAA+B,EAAGC,YAC7C,MAAMC,EAAOD,EAAME,OAAOD,MACnBE,EAAeC,GAAoBC,sBACnCC,EAAUC,GAAeF,sBACzBG,EAAWC,GAAgBJ,qBAElCK,YAASC,UACP,MAAMC,QAAeC,0BAAgBC,IAAK,oBAAmBb,GAE7DG,EAAiB,CACfW,MAAOH,EAAOG,MACdC,KAAMJ,EAAOI,KACbC,SAAUL,EAAOG,QAGnBR,EAAYK,EAAOI,MAAQJ,EAAOG,OAASH,EAAOK,UAClDR,EAAaG,EAAOJ,YACnB,CAACP,IAOJ,OAAKE,EAKH,cAAC,IAAD,CAAMb,SAAUA,EAAhB,SACE,eAAC,IAAK4B,SAAN,WACE,qBAAIC,UAAU,mBAAd,mBAAwCb,GAAY,QAApD,OAEA,sBAAKa,UAAU,sBAAf,UACE,6BAAKX,GAAa,YADpB,wDACyF,IACvF,sBAAMW,UAAU,iBAAhB,SAAkCC,IAAWC,KAAKC,UAFpD,MAGE,wBAHF,iGAMA,cAAC,OAAD,CAAMC,cAAepB,EAAeqB,SApBzBb,gBACTE,0BAAgBY,KAAK,4BAArB,KAAuDC,EAAvD,CAAiEC,WAAY1B,KACnF2B,OAAOC,SAASC,KAAOC,cAAYC,UAAY,KAkB3C,SACG,EAAGC,WAAUC,YACZ,qCACE,cAAC,QAAD,CAAOC,UAAWD,EAAOnB,MAAOqB,MAAOF,EAAOnB,OAASmB,EAAOnB,MAAMsB,QAASC,MAAM,QAAnF,SACE,cAAC,QAAD,GACEC,YAAY,qBACRN,EAAS,QAAS,CACpBO,SAAU,oBACVC,QAAS,CACPC,MAAO,YACPL,QAAS,0BAKjB,cAAC,QAAD,CAAOF,UAAWD,EAAOlB,KAAMoB,MAAOF,EAAOlB,MAAQkB,EAAOlB,KAAKqB,QAASC,MAAM,OAAhF,SACE,cAAC,QAAD,GAAOC,YAAY,mBAAsBN,EAAS,YAEpD,cAAC,QAAD,CAAOE,UAAWD,EAAOjB,SAAUmB,MAAOF,EAAOjB,UAAYiB,EAAOjB,SAASoB,QAASC,MAAM,WAA5F,SACE,cAAC,QAAD,KAAWL,EAAS,WAAY,CAAEO,SAAU,yBAA5C,CAAuED,YAAY,gBAErF,cAAC,QAAD,CAAOJ,UAAWD,EAAOS,SAAUP,MAAOF,EAAOS,UAAYT,EAAOS,SAASN,QAASC,MAAM,WAA5F,SACE,cAAC,QAAD,KACML,EAAS,WAAY,CAAEO,SAAU,yBADvC,CAEEI,KAAK,WACLL,YAAY,gBAvBlB,MA2BE,cAAC,SAAD,CAAQK,KAAK,SAAb,gCA3CH,MAoDI7C","file":"SignupInvited.807b3f41627421e0a149.js","sourcesContent":["import React, { FC, useState } from 'react';\nimport { getBackendSrv } from '@grafana/runtime';\nimport { Button, Field, Form, Input } from '@grafana/ui';\nimport { useAsync } from 'react-use';\nimport Page from 'app/core/components/Page/Page';\nimport { contextSrv } from 'app/core/core';\nimport { getConfig } from 'app/core/config';\nimport { GrafanaRouteComponentProps } from 'app/core/navigation/types';\n\ninterface FormModel {\n  email: string;\n  name?: string;\n  username: string;\n  password?: string;\n}\n\nconst navModel = {\n  main: {\n    icon: 'grafana',\n    text: 'Invite',\n    subTitle: 'Register your Grafana account',\n    breadcrumbs: [{ title: 'Login', url: 'login' }],\n  },\n  node: {\n    text: '',\n  },\n};\n\nexport interface Props extends GrafanaRouteComponentProps<{ code: string }> {}\n\nexport const SignupInvitedPage: FC<Props> = ({ match }) => {\n  const code = match.params.code;\n  const [initFormModel, setInitFormModel] = useState<FormModel>();\n  const [greeting, setGreeting] = useState<string>();\n  const [invitedBy, setInvitedBy] = useState<string>();\n\n  useAsync(async () => {\n    const invite = await getBackendSrv().get(`/api/user/invite/${code}`);\n\n    setInitFormModel({\n      email: invite.email,\n      name: invite.name,\n      username: invite.email,\n    });\n\n    setGreeting(invite.name || invite.email || invite.username);\n    setInvitedBy(invite.invitedBy);\n  }, [code]);\n\n  const onSubmit = async (formData: FormModel) => {\n    await getBackendSrv().post('/api/user/invite/complete', { ...formData, inviteCode: code });\n    window.location.href = getConfig().appSubUrl + '/';\n  };\n\n  if (!initFormModel) {\n    return null;\n  }\n\n  return (\n    <Page navModel={navModel}>\n      <Page.Contents>\n        <h3 className=\"page-sub-heading\">Hello {greeting || 'there'}.</h3>\n\n        <div className=\"modal-tagline p-b-2\">\n          <em>{invitedBy || 'Someone'}</em> has invited you to join Grafana and the organization{' '}\n          <span className=\"highlight-word\">{contextSrv.user.orgName}</span>\n          <br />\n          Please complete the following and choose a password to accept your invitation and continue:\n        </div>\n        <Form defaultValues={initFormModel} onSubmit={onSubmit}>\n          {({ register, errors }) => (\n            <>\n              <Field invalid={!!errors.email} error={errors.email && errors.email.message} label=\"Email\">\n                <Input\n                  placeholder=\"email@example.com\"\n                  {...register('email', {\n                    required: 'Email is required',\n                    pattern: {\n                      value: /^\\S+@\\S+$/,\n                      message: 'Email is invalid',\n                    },\n                  })}\n                />\n              </Field>\n              <Field invalid={!!errors.name} error={errors.name && errors.name.message} label=\"Name\">\n                <Input placeholder=\"Name (optional)\" {...register('name')} />\n              </Field>\n              <Field invalid={!!errors.username} error={errors.username && errors.username.message} label=\"Username\">\n                <Input {...register('username', { required: 'Username is required' })} placeholder=\"Username\" />\n              </Field>\n              <Field invalid={!!errors.password} error={errors.password && errors.password.message} label=\"Password\">\n                <Input\n                  {...register('password', { required: 'Password is required' })}\n                  type=\"password\"\n                  placeholder=\"Password\"\n                />\n              </Field>\n\n              <Button type=\"submit\">Sign up</Button>\n            </>\n          )}\n        </Form>\n      </Page.Contents>\n    </Page>\n  );\n};\n\nexport default SignupInvitedPage;\n"],"sourceRoot":""}
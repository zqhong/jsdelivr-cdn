{"version":3,"sources":["webpack:///./public/app/features/manage-dashboards/components/SnapshotListTable.tsx","webpack:///./public/app/features/manage-dashboards/SnapshotListPage.tsx"],"names":["SnapshotListTable","snapshots","setSnapshots","useState","removeSnapshot","setRemoveSnapshot","currentPath","locationService","getLocation","pathname","fullUrl","window","location","href","baseUrl","substr","indexOf","useAsync","async","response","getBackendSrv","get","then","result","map","snapshot","url","key","doRemoveSnapshot","useCallback","filteredSnapshots","filter","ss","delete","catch","className","style","width","externalUrl","name","external","variant","size","icon","onClick","isOpen","title","body","confirmText","onDismiss","undefined","onConfirm","SnapshotListPage","navModel","Page","Contents","connect","state","getNavModel","navIndex"],"mappings":"2ZAgBO,MAAMA,EAAwB,KACnC,MAAOC,EAAWC,GAAgBC,mBAAqB,KAChDC,EAAgBC,GAAqBF,qBACtCG,EAAcC,kBAAgBC,cAAcC,SAC5CC,EAAUC,OAAOC,SAASC,KAC1BC,EAAUJ,EAAQK,OAAO,EAAGL,EAAQM,QAAQV,IAElDW,IAASC,UACP,MAAMC,QAjBDC,0BACJC,IAAI,4BACJC,KAAMC,GACEA,EAAOC,IAAKC,GAAD,KACbA,EADa,CAEhBC,IAAM,uBAAsBD,EAASE,QAazCzB,EAAaiB,IACZ,CAACjB,IAEJ,MAAM0B,EAAmBC,sBACvBX,UACE,MAAMY,EAAoB7B,EAAU8B,OAAQC,GAAOA,EAAGL,MAAQF,EAASE,KACvEzB,EAAa4B,SACPV,0BACHa,OAAQ,kBAAiBR,EAASE,KAClCO,MAAM,KACLhC,EAAaD,MAGnB,CAACA,IAGH,OACE,gCACE,wBAAOkC,UAAU,eAAjB,UACE,gCACE,qCACE,6BACE,6CAFJ,MAIE,6BACE,qDAEF,oBAAIC,MAAO,CAAEC,MAAO,UACpB,oBAAID,MAAO,CAAEC,MAAO,UACpB,oBAAID,MAAO,CAAEC,MAAO,eAGxB,gCACGpC,EAAUuB,IAAKC,IACd,MAAMC,EAAMD,EAASa,aAAeb,EAASC,IACvChB,EAAUe,EAASa,aAAgB,GAAExB,IAAUW,EAASC,MAC9D,OACE,+BACE,6BACE,mBAAGb,KAAMa,EAAT,SAAeD,EAASc,SAE1B,6BACE,mBAAG1B,KAAMa,EAAT,SAAehB,MAEjB,6BAAKe,EAASe,WAAT,MAAqB,sBAAML,UAAU,gBAAhB,0BAC1B,oBAAIA,UAAU,cAAd,SACE,cAAC,aAAD,CAAYtB,KAAMa,EAAKe,QAAQ,YAAYC,KAAK,KAAKC,KAAK,MAA1D,oBAIF,oBAAIR,UAAU,aAAd,SACE,cAAC,SAAD,CAAQM,QAAQ,cAAcC,KAAK,KAAKC,KAAK,QAAQC,QAAS,IAAMvC,EAAkBoB,SAdjFA,EAASE,YAsB1B,cAAC,eAAD,CACEkB,SAAUzC,EACVuC,KAAK,YACLG,MAAM,SACNC,KAAO,oCAAmC3C,aAApC,EAAoCA,EAAgBmC,SAC1DS,YAAY,SACZC,UAAW,IAAM5C,OAAkB6C,GACnCC,UAAW,KACTvB,EAAiBxB,GACjBC,OAAkB6C,U,mEC/ErB,MAAME,EAA8B,EAAGC,WAAUzC,cAEpD,cAAC0C,EAAA,EAAD,CAAMD,SAAUA,EAAhB,eACE,cAACC,EAAA,EAAKC,SAAN,UACE,cAACvD,EAAD,SAUOwD,4BAJ2DC,IAAD,CACvEJ,SAAUK,YAAYD,EAAME,SAAU,eAGzBH,CAAyBJ","file":"SnapshotListPage.807b3f41627421e0a149.js","sourcesContent":["import React, { FC, useState, useCallback } from 'react';\nimport { ConfirmModal, Button, LinkButton } from '@grafana/ui';\nimport { getBackendSrv, locationService } from '@grafana/runtime';\nimport { Snapshot } from '../types';\nimport useAsync from 'react-use/lib/useAsync';\n\nexport function getSnapshots() {\n  return getBackendSrv()\n    .get('/api/dashboard/snapshots')\n    .then((result: Snapshot[]) => {\n      return result.map((snapshot) => ({\n        ...snapshot,\n        url: `/dashboard/snapshot/${snapshot.key}`,\n      }));\n    });\n}\nexport const SnapshotListTable: FC = () => {\n  const [snapshots, setSnapshots] = useState<Snapshot[]>([]);\n  const [removeSnapshot, setRemoveSnapshot] = useState<Snapshot | undefined>();\n  const currentPath = locationService.getLocation().pathname;\n  const fullUrl = window.location.href;\n  const baseUrl = fullUrl.substr(0, fullUrl.indexOf(currentPath));\n\n  useAsync(async () => {\n    const response = await getSnapshots();\n    setSnapshots(response);\n  }, [setSnapshots]);\n\n  const doRemoveSnapshot = useCallback(\n    async (snapshot: Snapshot) => {\n      const filteredSnapshots = snapshots.filter((ss) => ss.key !== snapshot.key);\n      setSnapshots(filteredSnapshots);\n      await getBackendSrv()\n        .delete(`/api/snapshots/${snapshot.key}`)\n        .catch(() => {\n          setSnapshots(snapshots);\n        });\n    },\n    [snapshots]\n  );\n\n  return (\n    <div>\n      <table className=\"filter-table\">\n        <thead>\n          <tr>\n            <th>\n              <strong>Name</strong>\n            </th>\n            <th>\n              <strong>Snapshot url</strong>\n            </th>\n            <th style={{ width: '70px' }}></th>\n            <th style={{ width: '30px' }}></th>\n            <th style={{ width: '25px' }}></th>\n          </tr>\n        </thead>\n        <tbody>\n          {snapshots.map((snapshot) => {\n            const url = snapshot.externalUrl || snapshot.url;\n            const fullUrl = snapshot.externalUrl || `${baseUrl}${snapshot.url}`;\n            return (\n              <tr key={snapshot.key}>\n                <td>\n                  <a href={url}>{snapshot.name}</a>\n                </td>\n                <td>\n                  <a href={url}>{fullUrl}</a>\n                </td>\n                <td>{snapshot.external && <span className=\"query-keyword\">External</span>}</td>\n                <td className=\"text-center\">\n                  <LinkButton href={url} variant=\"secondary\" size=\"sm\" icon=\"eye\">\n                    View\n                  </LinkButton>\n                </td>\n                <td className=\"text-right\">\n                  <Button variant=\"destructive\" size=\"sm\" icon=\"times\" onClick={() => setRemoveSnapshot(snapshot)} />\n                </td>\n              </tr>\n            );\n          })}\n        </tbody>\n      </table>\n\n      <ConfirmModal\n        isOpen={!!removeSnapshot}\n        icon=\"trash-alt\"\n        title=\"Delete\"\n        body={`Are you sure you want to delete '${removeSnapshot?.name}'?`}\n        confirmText=\"Delete\"\n        onDismiss={() => setRemoveSnapshot(undefined)}\n        onConfirm={() => {\n          doRemoveSnapshot(removeSnapshot!);\n          setRemoveSnapshot(undefined);\n        }}\n      />\n    </div>\n  );\n};\n","import React, { FC } from 'react';\nimport { MapStateToProps, connect } from 'react-redux';\nimport { NavModel } from '@grafana/data';\nimport Page from 'app/core/components/Page/Page';\nimport { StoreState } from 'app/types';\nimport { SnapshotListTable } from './components/SnapshotListTable';\nimport { GrafanaRouteComponentProps } from '../../core/navigation/types';\nimport { getNavModel } from 'app/core/selectors/navModel';\n\ninterface ConnectedProps {\n  navModel: NavModel;\n}\ninterface Props extends ConnectedProps, GrafanaRouteComponentProps {}\n\nexport const SnapshotListPage: FC<Props> = ({ navModel, location }) => {\n  return (\n    <Page navModel={navModel}>\n      <Page.Contents>\n        <SnapshotListTable />\n      </Page.Contents>\n    </Page>\n  );\n};\n\nconst mapStateToProps: MapStateToProps<ConnectedProps, {}, StoreState> = (state: StoreState) => ({\n  navModel: getNavModel(state.navIndex, 'snapshots'),\n});\n\nexport default connect(mapStateToProps)(SnapshotListPage);\n"],"sourceRoot":""}
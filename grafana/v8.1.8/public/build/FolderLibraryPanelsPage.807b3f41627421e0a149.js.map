{"version":3,"sources":["webpack:///./public/app/features/folders/state/actions.ts","webpack:///./public/app/features/folders/FolderLibraryPanelsPage.tsx","webpack:///./public/app/features/library-panels/components/OpenLibraryPanelModal/OpenLibraryPanelModal.tsx","webpack:///./public/app/features/folders/state/navModel.ts"],"names":["getFolderByUid","uid","async","folder","backendSrv","dispatch","loadFolder","updateNavIndex","buildNavModel","saveFolder","res","put","title","version","appEvents","emit","AppEvents","alertSuccess","locationService","push","url","deleteFolder","delete","getFolderPermissions","permissions","get","loadFolderPermissions","toUpdateItem","item","userId","teamId","role","permission","updateFolderPermission","itemToUpdate","level","getStore","itemsToUpdate","inherited","updated","post","items","removeFolderPermission","itemToDelete","addFolderPermission","newItem","createNewFolder","folderName","newFolder","getBackendSrv","locationUtil","stripBaseFromUrl","mapDispatchToProps","connector","connect","state","props","match","params","navModel","getNavModel","navIndex","getLoadingNav","folderUid","FolderLibraryPanelsPage","loading","useAsync","selected","setSelected","useState","undefined","Contents","isLoading","onClick","currentFolderId","id","showSecondaryActions","showSort","showPanelFilter","onDismiss","libraryPanel","OpenLibraryPanelModal","styles","useStyles2","getStyles","setLoading","connected","setConnected","option","setOption","useEffect","connectedDashboards","getLibraryPanelConnectedDashboards","length","getConnected","loadOptions","useCallback","searchString","options","getConnectedDashboards","filter","d","toLowerCase","includes","map","label","value","loadOptionsAsync","debouncedLoadOptions","useMemo","debounce","leading","trailing","onClickBackdrop","isOpen","className","container","menuShouldPortal","isClearable","defaultOptions","onChange","placeholder","noOptionsMessage","ButtonRow","variant","fill","e","preventDefault","urlUtil","renderUrl","disabled","Boolean","theme","css","model","icon","subTitle","text","breadcrumbs","children","active","canAdmin","canSave","tabIndex","main","canEdit","node"],"mappings":"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","file":"FolderLibraryPanelsPage.807b3f41627421e0a149.js","sourcesContent":["import { AppEvents, locationUtil } from '@grafana/data';\nimport { getBackendSrv, locationService } from '@grafana/runtime';\nimport { backendSrv } from 'app/core/services/backend_srv';\nimport { FolderState, ThunkResult } from 'app/types';\nimport { DashboardAcl, DashboardAclUpdateDTO, NewDashboardAclItem, PermissionLevel } from 'app/types/acl';\nimport { updateNavIndex } from 'app/core/actions';\nimport { buildNavModel } from './navModel';\nimport appEvents from 'app/core/app_events';\nimport { loadFolder, loadFolderPermissions } from './reducers';\n\nexport function getFolderByUid(uid: string): ThunkResult<void> {\n  return async (dispatch) => {\n    const folder = await backendSrv.getFolderByUid(uid);\n    dispatch(loadFolder(folder));\n    dispatch(updateNavIndex(buildNavModel(folder)));\n  };\n}\n\nexport function saveFolder(folder: FolderState): ThunkResult<void> {\n  return async (dispatch) => {\n    const res = await backendSrv.put(`/api/folders/${folder.uid}`, {\n      title: folder.title,\n      version: folder.version,\n    });\n\n    // this should be redux action at some point\n    appEvents.emit(AppEvents.alertSuccess, ['Folder saved']);\n    locationService.push(`${res.url}/settings`);\n  };\n}\n\nexport function deleteFolder(uid: string): ThunkResult<void> {\n  return async (dispatch) => {\n    await backendSrv.delete(`/api/folders/${uid}?forceDeleteRules=true`);\n    locationService.push('/dashboards');\n  };\n}\n\nexport function getFolderPermissions(uid: string): ThunkResult<void> {\n  return async (dispatch) => {\n    const permissions = await backendSrv.get(`/api/folders/${uid}/permissions`);\n    dispatch(loadFolderPermissions(permissions));\n  };\n}\n\nfunction toUpdateItem(item: DashboardAcl): DashboardAclUpdateDTO {\n  return {\n    userId: item.userId,\n    teamId: item.teamId,\n    role: item.role,\n    permission: item.permission,\n  };\n}\n\nexport function updateFolderPermission(itemToUpdate: DashboardAcl, level: PermissionLevel): ThunkResult<void> {\n  return async (dispatch, getStore) => {\n    const folder = getStore().folder;\n    const itemsToUpdate = [];\n\n    for (const item of folder.permissions) {\n      if (item.inherited) {\n        continue;\n      }\n\n      const updated = toUpdateItem(item);\n\n      // if this is the item we want to update, update it's permission\n      if (itemToUpdate === item) {\n        updated.permission = level;\n      }\n\n      itemsToUpdate.push(updated);\n    }\n\n    await backendSrv.post(`/api/folders/${folder.uid}/permissions`, { items: itemsToUpdate });\n    await dispatch(getFolderPermissions(folder.uid));\n  };\n}\n\nexport function removeFolderPermission(itemToDelete: DashboardAcl): ThunkResult<void> {\n  return async (dispatch, getStore) => {\n    const folder = getStore().folder;\n    const itemsToUpdate = [];\n\n    for (const item of folder.permissions) {\n      if (item.inherited || item === itemToDelete) {\n        continue;\n      }\n      itemsToUpdate.push(toUpdateItem(item));\n    }\n\n    await backendSrv.post(`/api/folders/${folder.uid}/permissions`, { items: itemsToUpdate });\n    await dispatch(getFolderPermissions(folder.uid));\n  };\n}\n\nexport function addFolderPermission(newItem: NewDashboardAclItem): ThunkResult<void> {\n  return async (dispatch, getStore) => {\n    const folder = getStore().folder;\n    const itemsToUpdate = [];\n\n    for (const item of folder.permissions) {\n      if (item.inherited) {\n        continue;\n      }\n      itemsToUpdate.push(toUpdateItem(item));\n    }\n\n    itemsToUpdate.push({\n      userId: newItem.userId,\n      teamId: newItem.teamId,\n      role: newItem.role,\n      permission: newItem.permission,\n    });\n\n    await backendSrv.post(`/api/folders/${folder.uid}/permissions`, { items: itemsToUpdate });\n    await dispatch(getFolderPermissions(folder.uid));\n  };\n}\n\nexport function createNewFolder(folderName: string): ThunkResult<void> {\n  return async () => {\n    const newFolder = await getBackendSrv().post('/api/folders', { title: folderName });\n    appEvents.emit(AppEvents.alertSuccess, ['Folder Created', 'OK']);\n    locationService.push(locationUtil.stripBaseFromUrl(newFolder.url));\n  };\n}\n","import React, { useState } from 'react';\nimport { connect, ConnectedProps } from 'react-redux';\nimport { useAsync } from 'react-use';\n\nimport { GrafanaRouteComponentProps } from '../../core/navigation/types';\nimport { StoreState } from '../../types';\nimport { getNavModel } from '../../core/selectors/navModel';\nimport { getLoadingNav } from './state/navModel';\nimport { LibraryElementDTO } from '../library-panels/types';\nimport Page from '../../core/components/Page/Page';\nimport { LibraryPanelsSearch } from '../library-panels/components/LibraryPanelsSearch/LibraryPanelsSearch';\nimport { OpenLibraryPanelModal } from '../library-panels/components/OpenLibraryPanelModal/OpenLibraryPanelModal';\nimport { getFolderByUid } from './state/actions';\n\nexport interface OwnProps extends GrafanaRouteComponentProps<{ uid: string }> {}\n\nconst mapStateToProps = (state: StoreState, props: OwnProps) => {\n  const uid = props.match.params.uid;\n  return {\n    navModel: getNavModel(state.navIndex, `folder-library-panels-${uid}`, getLoadingNav(1)),\n    folderUid: uid,\n    folder: state.folder,\n  };\n};\n\nconst mapDispatchToProps = {\n  getFolderByUid,\n};\n\nconst connector = connect(mapStateToProps, mapDispatchToProps);\n\nexport type Props = OwnProps & ConnectedProps<typeof connector>;\n\nexport function FolderLibraryPanelsPage({ navModel, getFolderByUid, folderUid, folder }: Props): JSX.Element {\n  const { loading } = useAsync<void>(async () => await getFolderByUid(folderUid), [getFolderByUid, folderUid]);\n  const [selected, setSelected] = useState<LibraryElementDTO | undefined>(undefined);\n\n  return (\n    <Page navModel={navModel}>\n      <Page.Contents isLoading={loading}>\n        <LibraryPanelsSearch\n          onClick={setSelected}\n          currentFolderId={folder.id}\n          showSecondaryActions\n          showSort\n          showPanelFilter\n        />\n        {selected ? <OpenLibraryPanelModal onDismiss={() => setSelected(undefined)} libraryPanel={selected} /> : null}\n      </Page.Contents>\n    </Page>\n  );\n}\n\nexport default connector(FolderLibraryPanelsPage);\n","import React, { MouseEvent, useCallback, useEffect, useMemo, useState } from 'react';\nimport { css } from '@emotion/css';\nimport { AsyncSelect, Button, Modal, useStyles2 } from '@grafana/ui';\nimport { GrafanaTheme2, SelectableValue, urlUtil } from '@grafana/data';\nimport { locationService } from '@grafana/runtime';\n\nimport { LibraryElementDTO } from '../../types';\nimport { DashboardSearchHit } from '../../../search/types';\nimport { getConnectedDashboards, getLibraryPanelConnectedDashboards } from '../../state/api';\nimport { debounce } from 'lodash';\n\nexport interface OpenLibraryPanelModalProps {\n  onDismiss: () => void;\n  libraryPanel: LibraryElementDTO;\n}\n\nexport function OpenLibraryPanelModal({ libraryPanel, onDismiss }: OpenLibraryPanelModalProps): JSX.Element {\n  const styles = useStyles2(getStyles);\n  const [loading, setLoading] = useState(false);\n  const [connected, setConnected] = useState(0);\n  const [option, setOption] = useState<SelectableValue<DashboardSearchHit> | undefined>(undefined);\n  useEffect(() => {\n    const getConnected = async () => {\n      const connectedDashboards = await getLibraryPanelConnectedDashboards(libraryPanel.uid);\n      setConnected(connectedDashboards.length);\n    };\n    getConnected();\n  }, [libraryPanel.uid]);\n  const loadOptions = useCallback(\n    (searchString: string) => loadOptionsAsync(libraryPanel.uid, searchString, setLoading),\n    [libraryPanel.uid]\n  );\n  const debouncedLoadOptions = useMemo(() => debounce(loadOptions, 300, { leading: true, trailing: true }), [\n    loadOptions,\n  ]);\n  const onViewPanel = (e: MouseEvent<HTMLButtonElement>) => {\n    e.preventDefault();\n    locationService.push(urlUtil.renderUrl(`/d/${option?.value?.uid}`, {}));\n  };\n\n  return (\n    <Modal title=\"View panel in dashboard\" onDismiss={onDismiss} onClickBackdrop={onDismiss} isOpen>\n      <div className={styles.container}>\n        {connected === 0 ? (\n          <span>Panel is not linked to a dashboard. Add the panel to a dashboard and retry.</span>\n        ) : null}\n        {connected > 0 ? (\n          <>\n            <p>\n              This panel is being used in{' '}\n              <strong>\n                {connected} {connected > 1 ? 'dashboards' : 'dashboard'}\n              </strong>\n              .Please choose which dashboard to view the panel in:\n            </p>\n            <AsyncSelect\n              menuShouldPortal\n              isClearable\n              isLoading={loading}\n              defaultOptions={true}\n              loadOptions={debouncedLoadOptions}\n              onChange={setOption}\n              placeholder=\"Start typing to search for dashboard\"\n              noOptionsMessage=\"No dashboards found\"\n            />\n          </>\n        ) : null}\n      </div>\n      <Modal.ButtonRow>\n        <Button variant=\"secondary\" onClick={onDismiss} fill=\"outline\">\n          Cancel\n        </Button>\n        <Button onClick={onViewPanel} disabled={!Boolean(option)}>\n          {option ? `View panel in ${option?.label}...` : 'View panel in dashboard...'}\n        </Button>\n      </Modal.ButtonRow>\n    </Modal>\n  );\n}\n\nasync function loadOptionsAsync(uid: string, searchString: string, setLoading: (loading: boolean) => void) {\n  setLoading(true);\n  const searchHits = await getConnectedDashboards(uid);\n  const options = searchHits\n    .filter((d) => d.title.toLowerCase().includes(searchString.toLowerCase()))\n    .map((d) => ({ label: d.title, value: d }));\n  setLoading(false);\n\n  return options;\n}\n\nfunction getStyles(theme: GrafanaTheme2) {\n  return {\n    container: css``,\n  };\n}\n","import { NavModel, NavModelItem } from '@grafana/data';\n\nimport { FolderDTO } from 'app/types';\n\nexport function buildNavModel(folder: FolderDTO): NavModelItem {\n  const model = {\n    icon: 'folder',\n    id: 'manage-folder',\n    subTitle: 'Manage folder dashboards and permissions',\n    url: '',\n    text: folder.title,\n    breadcrumbs: [{ title: 'Dashboards', url: 'dashboards' }],\n    children: [\n      {\n        active: false,\n        icon: 'apps',\n        id: `folder-dashboards-${folder.uid}`,\n        text: 'Dashboards',\n        url: folder.url,\n      },\n    ],\n  };\n\n  model.children.push({\n    active: false,\n    icon: 'library-panel',\n    id: `folder-library-panels-${folder.uid}`,\n    text: 'Panels',\n    url: `${folder.url}/library-panels`,\n  });\n\n  if (folder.canAdmin) {\n    model.children.push({\n      active: false,\n      icon: 'lock',\n      id: `folder-permissions-${folder.uid}`,\n      text: 'Permissions',\n      url: `${folder.url}/permissions`,\n    });\n  }\n\n  if (folder.canSave) {\n    model.children.push({\n      active: false,\n      icon: 'cog',\n      id: `folder-settings-${folder.uid}`,\n      text: 'Settings',\n      url: `${folder.url}/settings`,\n    });\n  }\n\n  return model;\n}\n\nexport function getLoadingNav(tabIndex: number): NavModel {\n  const main = buildNavModel({\n    id: 1,\n    uid: 'loading',\n    title: 'Loading',\n    url: 'url',\n    canSave: true,\n    canEdit: true,\n    canAdmin: true,\n    version: 0,\n  });\n\n  main.children![tabIndex].active = true;\n\n  return {\n    main: main,\n    node: main.children![tabIndex],\n  };\n}\n"],"sourceRoot":""}
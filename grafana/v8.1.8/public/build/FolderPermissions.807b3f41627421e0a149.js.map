{"version":3,"sources":["webpack:///./public/app/features/folders/state/actions.ts","webpack:///./public/app/features/folders/FolderPermissions.tsx","webpack:///./public/app/features/folders/state/navModel.ts"],"names":["getFolderByUid","uid","async","folder","backendSrv","dispatch","loadFolder","updateNavIndex","buildNavModel","saveFolder","res","put","title","version","appEvents","emit","AppEvents","alertSuccess","locationService","push","url","deleteFolder","delete","getFolderPermissions","permissions","get","loadFolderPermissions","toUpdateItem","item","userId","teamId","role","permission","updateFolderPermission","itemToUpdate","level","getStore","itemsToUpdate","inherited","updated","post","items","removeFolderPermission","itemToDelete","addFolderPermission","newItem","createNewFolder","folderName","newFolder","getBackendSrv","locationUtil","stripBaseFromUrl","mapDispatchToProps","connector","connect","state","props","match","params","navModel","getNavModel","navIndex","getLoadingNav","folderUid","FolderPermissions","PureComponent","constructor","super","this","setState","isAdding","componentDidMount","render","id","Contents","isLoading","folderInfo","className","placement","content","name","onClick","onOpenAddPermissions","disabled","in","onAddPermission","onCancel","onCancelAddPermission","onRemoveItem","onPermissionChanged","isFetching","model","icon","subTitle","text","breadcrumbs","children","active","canAdmin","canSave","tabIndex","main","canEdit","node"],"mappings":"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","file":"FolderPermissions.807b3f41627421e0a149.js","sourcesContent":["import { AppEvents, locationUtil } from '@grafana/data';\nimport { getBackendSrv, locationService } from '@grafana/runtime';\nimport { backendSrv } from 'app/core/services/backend_srv';\nimport { FolderState, ThunkResult } from 'app/types';\nimport { DashboardAcl, DashboardAclUpdateDTO, NewDashboardAclItem, PermissionLevel } from 'app/types/acl';\nimport { updateNavIndex } from 'app/core/actions';\nimport { buildNavModel } from './navModel';\nimport appEvents from 'app/core/app_events';\nimport { loadFolder, loadFolderPermissions } from './reducers';\n\nexport function getFolderByUid(uid: string): ThunkResult<void> {\n  return async (dispatch) => {\n    const folder = await backendSrv.getFolderByUid(uid);\n    dispatch(loadFolder(folder));\n    dispatch(updateNavIndex(buildNavModel(folder)));\n  };\n}\n\nexport function saveFolder(folder: FolderState): ThunkResult<void> {\n  return async (dispatch) => {\n    const res = await backendSrv.put(`/api/folders/${folder.uid}`, {\n      title: folder.title,\n      version: folder.version,\n    });\n\n    // this should be redux action at some point\n    appEvents.emit(AppEvents.alertSuccess, ['Folder saved']);\n    locationService.push(`${res.url}/settings`);\n  };\n}\n\nexport function deleteFolder(uid: string): ThunkResult<void> {\n  return async (dispatch) => {\n    await backendSrv.delete(`/api/folders/${uid}?forceDeleteRules=true`);\n    locationService.push('/dashboards');\n  };\n}\n\nexport function getFolderPermissions(uid: string): ThunkResult<void> {\n  return async (dispatch) => {\n    const permissions = await backendSrv.get(`/api/folders/${uid}/permissions`);\n    dispatch(loadFolderPermissions(permissions));\n  };\n}\n\nfunction toUpdateItem(item: DashboardAcl): DashboardAclUpdateDTO {\n  return {\n    userId: item.userId,\n    teamId: item.teamId,\n    role: item.role,\n    permission: item.permission,\n  };\n}\n\nexport function updateFolderPermission(itemToUpdate: DashboardAcl, level: PermissionLevel): ThunkResult<void> {\n  return async (dispatch, getStore) => {\n    const folder = getStore().folder;\n    const itemsToUpdate = [];\n\n    for (const item of folder.permissions) {\n      if (item.inherited) {\n        continue;\n      }\n\n      const updated = toUpdateItem(item);\n\n      // if this is the item we want to update, update it's permission\n      if (itemToUpdate === item) {\n        updated.permission = level;\n      }\n\n      itemsToUpdate.push(updated);\n    }\n\n    await backendSrv.post(`/api/folders/${folder.uid}/permissions`, { items: itemsToUpdate });\n    await dispatch(getFolderPermissions(folder.uid));\n  };\n}\n\nexport function removeFolderPermission(itemToDelete: DashboardAcl): ThunkResult<void> {\n  return async (dispatch, getStore) => {\n    const folder = getStore().folder;\n    const itemsToUpdate = [];\n\n    for (const item of folder.permissions) {\n      if (item.inherited || item === itemToDelete) {\n        continue;\n      }\n      itemsToUpdate.push(toUpdateItem(item));\n    }\n\n    await backendSrv.post(`/api/folders/${folder.uid}/permissions`, { items: itemsToUpdate });\n    await dispatch(getFolderPermissions(folder.uid));\n  };\n}\n\nexport function addFolderPermission(newItem: NewDashboardAclItem): ThunkResult<void> {\n  return async (dispatch, getStore) => {\n    const folder = getStore().folder;\n    const itemsToUpdate = [];\n\n    for (const item of folder.permissions) {\n      if (item.inherited) {\n        continue;\n      }\n      itemsToUpdate.push(toUpdateItem(item));\n    }\n\n    itemsToUpdate.push({\n      userId: newItem.userId,\n      teamId: newItem.teamId,\n      role: newItem.role,\n      permission: newItem.permission,\n    });\n\n    await backendSrv.post(`/api/folders/${folder.uid}/permissions`, { items: itemsToUpdate });\n    await dispatch(getFolderPermissions(folder.uid));\n  };\n}\n\nexport function createNewFolder(folderName: string): ThunkResult<void> {\n  return async () => {\n    const newFolder = await getBackendSrv().post('/api/folders', { title: folderName });\n    appEvents.emit(AppEvents.alertSuccess, ['Folder Created', 'OK']);\n    locationService.push(locationUtil.stripBaseFromUrl(newFolder.url));\n  };\n}\n","import React, { PureComponent } from 'react';\nimport { connect, ConnectedProps } from 'react-redux';\nimport Page from 'app/core/components/Page/Page';\nimport { Tooltip, Icon, Button } from '@grafana/ui';\nimport { SlideDown } from 'app/core/components/Animations/SlideDown';\nimport { getNavModel } from 'app/core/selectors/navModel';\nimport { StoreState } from 'app/types';\nimport { DashboardAcl, PermissionLevel, NewDashboardAclItem } from 'app/types/acl';\nimport {\n  getFolderByUid,\n  getFolderPermissions,\n  updateFolderPermission,\n  removeFolderPermission,\n  addFolderPermission,\n} from './state/actions';\nimport { getLoadingNav } from './state/navModel';\nimport PermissionList from 'app/core/components/PermissionList/PermissionList';\nimport AddPermission from 'app/core/components/PermissionList/AddPermission';\nimport PermissionsInfo from 'app/core/components/PermissionList/PermissionsInfo';\nimport { GrafanaRouteComponentProps } from 'app/core/navigation/types';\n\nexport interface OwnProps extends GrafanaRouteComponentProps<{ uid: string }> {}\n\nconst mapStateToProps = (state: StoreState, props: OwnProps) => {\n  const uid = props.match.params.uid;\n  return {\n    navModel: getNavModel(state.navIndex, `folder-permissions-${uid}`, getLoadingNav(1)),\n    folderUid: uid,\n    folder: state.folder,\n  };\n};\n\nconst mapDispatchToProps = {\n  getFolderByUid,\n  getFolderPermissions,\n  updateFolderPermission,\n  removeFolderPermission,\n  addFolderPermission,\n};\n\nconst connector = connect(mapStateToProps, mapDispatchToProps);\n\nexport type Props = OwnProps & ConnectedProps<typeof connector>;\n\nexport interface State {\n  isAdding: boolean;\n}\n\nexport class FolderPermissions extends PureComponent<Props, State> {\n  constructor(props: Props) {\n    super(props);\n\n    this.state = {\n      isAdding: false,\n    };\n  }\n\n  componentDidMount() {\n    this.props.getFolderByUid(this.props.folderUid);\n    this.props.getFolderPermissions(this.props.folderUid);\n  }\n\n  onOpenAddPermissions = () => {\n    this.setState({ isAdding: true });\n  };\n\n  onRemoveItem = (item: DashboardAcl) => {\n    this.props.removeFolderPermission(item);\n  };\n\n  onPermissionChanged = (item: DashboardAcl, level: PermissionLevel) => {\n    this.props.updateFolderPermission(item, level);\n  };\n\n  onAddPermission = (newItem: NewDashboardAclItem) => {\n    return this.props.addFolderPermission(newItem);\n  };\n\n  onCancelAddPermission = () => {\n    this.setState({ isAdding: false });\n  };\n\n  render() {\n    const { navModel, folder } = this.props;\n    const { isAdding } = this.state;\n\n    if (folder.id === 0) {\n      return (\n        <Page navModel={navModel}>\n          <Page.Contents isLoading={true}>\n            <span />\n          </Page.Contents>\n        </Page>\n      );\n    }\n\n    const folderInfo = { title: folder.title, url: folder.url, id: folder.id };\n\n    return (\n      <Page navModel={navModel}>\n        <Page.Contents>\n          <div className=\"page-action-bar\">\n            <h3 className=\"page-sub-heading\">Folder Permissions</h3>\n            <Tooltip placement=\"auto\" content={<PermissionsInfo />}>\n              <Icon className=\"icon--has-hover page-sub-heading-icon\" name=\"question-circle\" />\n            </Tooltip>\n            <div className=\"page-action-bar__spacer\" />\n            <Button className=\"pull-right\" onClick={this.onOpenAddPermissions} disabled={isAdding}>\n              Add Permission\n            </Button>\n          </div>\n          <SlideDown in={isAdding}>\n            <AddPermission onAddPermission={this.onAddPermission} onCancel={this.onCancelAddPermission} />\n          </SlideDown>\n          <PermissionList\n            items={folder.permissions}\n            onRemoveItem={this.onRemoveItem}\n            onPermissionChanged={this.onPermissionChanged}\n            isFetching={false}\n            folderInfo={folderInfo}\n          />\n        </Page.Contents>\n      </Page>\n    );\n  }\n}\n\nexport default connector(FolderPermissions);\n","import { NavModel, NavModelItem } from '@grafana/data';\n\nimport { FolderDTO } from 'app/types';\n\nexport function buildNavModel(folder: FolderDTO): NavModelItem {\n  const model = {\n    icon: 'folder',\n    id: 'manage-folder',\n    subTitle: 'Manage folder dashboards and permissions',\n    url: '',\n    text: folder.title,\n    breadcrumbs: [{ title: 'Dashboards', url: 'dashboards' }],\n    children: [\n      {\n        active: false,\n        icon: 'apps',\n        id: `folder-dashboards-${folder.uid}`,\n        text: 'Dashboards',\n        url: folder.url,\n      },\n    ],\n  };\n\n  model.children.push({\n    active: false,\n    icon: 'library-panel',\n    id: `folder-library-panels-${folder.uid}`,\n    text: 'Panels',\n    url: `${folder.url}/library-panels`,\n  });\n\n  if (folder.canAdmin) {\n    model.children.push({\n      active: false,\n      icon: 'lock',\n      id: `folder-permissions-${folder.uid}`,\n      text: 'Permissions',\n      url: `${folder.url}/permissions`,\n    });\n  }\n\n  if (folder.canSave) {\n    model.children.push({\n      active: false,\n      icon: 'cog',\n      id: `folder-settings-${folder.uid}`,\n      text: 'Settings',\n      url: `${folder.url}/settings`,\n    });\n  }\n\n  return model;\n}\n\nexport function getLoadingNav(tabIndex: number): NavModel {\n  const main = buildNavModel({\n    id: 1,\n    uid: 'loading',\n    title: 'Loading',\n    url: 'url',\n    canSave: true,\n    canEdit: true,\n    canAdmin: true,\n    version: 0,\n  });\n\n  main.children![tabIndex].active = true;\n\n  return {\n    main: main,\n    node: main.children![tabIndex],\n  };\n}\n"],"sourceRoot":""}
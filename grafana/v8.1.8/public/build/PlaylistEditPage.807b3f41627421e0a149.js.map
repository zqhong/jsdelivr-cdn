{"version":3,"sources":["webpack:///./public/app/features/playlist/usePlaylist.tsx","webpack:///./public/app/features/playlist/PlaylistEditPage.tsx","webpack:///./public/app/features/playlist/api.ts","webpack:///./public/app/features/playlist/PlaylistTableRow.tsx","webpack:///./public/app/features/playlist/PlaylistTableRows.tsx","webpack:///./public/app/features/playlist/PlaylistTable.tsx","webpack:///./public/app/features/playlist/PlaylistForm.tsx","webpack:///./public/app/features/playlist/usePlaylistItems.tsx","webpack:///./public/app/features/playlist/styles.ts"],"names":["usePlaylist","playlistId","playlist","setPlaylist","useState","items","interval","name","loading","setLoading","useEffect","async","list","getPlaylist","initPlaylist","PlaylistEditPage","navModel","match","styles","useStyles2","getPlaylistStyles","params","id","Contents","isLoading","className","subHeading","description","onSubmit","updatePlaylist","locationService","push","connect","state","getNavModel","navIndex","createPlaylist","withErrorHandling","getBackendSrv","post","put","get","apiCall","dispatch","notifyApp","createSuccessNotification","e","createErrorNotification","PlaylistTableRow","item","onDelete","onMoveDown","onMoveUp","first","last","useStyles","getStyles","aria-label","selectors","pages","PlaylistForm","itemRow","type","cx","td","itemIdType","title","itemTagType","TagBadge","label","removeIcon","count","settings","size","onClick","event","preventDefault","itemMoveUp","itemMoveDown","itemDelete","theme","css","spacing","xs","PlaylistTableRows","length","map","index","PlaylistTable","searchSrv","SearchSrv","propItems","addById","addByTag","deleteItem","moveDown","moveUp","playlistItems","setItems","useCallback","dashboard","find","newItem","value","toString","order","tags","tag","movePlaylistItem","offset","newItems","currentPosition","indexOf","newPosition","splice","filter","i","usePlaylistItems","validateOn","register","errors","isDisabled","Object","keys","invalid","error","message","required","placeholder","defaultValue","DashboardPicker","onChange","isClearable","TagFilter","hideValues","tagOptions","getDashboardTags","variant","disabled","href","config","appSubUrl"],"mappings":"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","file":"PlaylistEditPage.807b3f41627421e0a149.js","sourcesContent":["import { useEffect, useState } from 'react';\nimport { Playlist } from './types';\nimport { getPlaylist } from './api';\n\nexport function usePlaylist(playlistId?: number) {\n  const [playlist, setPlaylist] = useState<Playlist>({ items: [], interval: '5m', name: '' });\n  const [loading, setLoading] = useState<boolean>(true);\n\n  useEffect(() => {\n    const initPlaylist = async () => {\n      if (!playlistId) {\n        setLoading(false);\n        return;\n      }\n      const list = await getPlaylist(playlistId);\n      setPlaylist(list);\n      setLoading(false);\n    };\n    initPlaylist();\n  }, [playlistId]);\n\n  return { playlist, loading };\n}\n","import React, { FC } from 'react';\nimport { connect, MapStateToProps } from 'react-redux';\nimport { NavModel } from '@grafana/data';\nimport { locationService } from '@grafana/runtime';\nimport { useStyles2 } from '@grafana/ui';\n\nimport Page from 'app/core/components/Page/Page';\nimport { StoreState } from 'app/types';\nimport { GrafanaRouteComponentProps } from '../../core/navigation/types';\nimport { getNavModel } from 'app/core/selectors/navModel';\nimport { PlaylistForm } from './PlaylistForm';\nimport { updatePlaylist } from './api';\nimport { Playlist } from './types';\nimport { usePlaylist } from './usePlaylist';\nimport { getPlaylistStyles } from './styles';\n\ninterface ConnectedProps {\n  navModel: NavModel;\n}\n\nexport interface RouteParams {\n  id: number;\n}\n\ninterface Props extends ConnectedProps, GrafanaRouteComponentProps<RouteParams> {}\n\nexport const PlaylistEditPage: FC<Props> = ({ navModel, match }) => {\n  const styles = useStyles2(getPlaylistStyles);\n  const { playlist, loading } = usePlaylist(match.params.id);\n  const onSubmit = async (playlist: Playlist) => {\n    await updatePlaylist(match.params.id, playlist);\n    locationService.push('/playlists');\n  };\n\n  return (\n    <Page navModel={navModel}>\n      <Page.Contents isLoading={loading}>\n        <h3 className={styles.subHeading}>Edit playlist</h3>\n\n        <p className={styles.description}>\n          A playlist rotates through a pre-selected list of dashboards. A playlist can be a great way to build\n          situational awareness, or just show off your metrics to your team or visitors.\n        </p>\n\n        <PlaylistForm onSubmit={onSubmit} playlist={playlist} />\n      </Page.Contents>\n    </Page>\n  );\n};\n\nconst mapStateToProps: MapStateToProps<ConnectedProps, {}, StoreState> = (state: StoreState) => ({\n  navModel: getNavModel(state.navIndex, 'playlists'),\n});\n\nexport default connect(mapStateToProps)(PlaylistEditPage);\n","import { getBackendSrv } from '@grafana/runtime';\n\nimport { Playlist } from './types';\nimport { dispatch } from '../../store/store';\nimport { notifyApp } from '../../core/actions';\nimport { createErrorNotification, createSuccessNotification } from '../../core/copy/appNotification';\n\nexport async function createPlaylist(playlist: Playlist) {\n  await withErrorHandling(async () => await getBackendSrv().post('/api/playlists', playlist));\n}\n\nexport async function updatePlaylist(id: number, playlist: Playlist) {\n  await withErrorHandling(async () => await getBackendSrv().put(`/api/playlists/${id}`, playlist));\n}\n\nexport async function getPlaylist(id: number): Promise<Playlist> {\n  const result: Playlist = await getBackendSrv().get(`/api/playlists/${id}`);\n  return result;\n}\n\nasync function withErrorHandling(apiCall: () => Promise<void>) {\n  try {\n    await apiCall();\n    dispatch(notifyApp(createSuccessNotification('Playlist saved')));\n  } catch (e) {\n    dispatch(notifyApp(createErrorNotification('Unable to save playlist', e)));\n  }\n}\n","import React, { FC, MouseEvent } from 'react';\nimport { css, cx } from '@emotion/css';\nimport { Icon, IconButton, useStyles } from '@grafana/ui';\nimport { GrafanaTheme } from '@grafana/data';\n\nimport { TagBadge } from '../../core/components/TagFilter/TagBadge';\nimport { PlaylistItem } from './types';\nimport { selectors } from '@grafana/e2e-selectors';\n\ninterface PlaylistTableRowProps {\n  first: boolean;\n  last: boolean;\n  item: PlaylistItem;\n  onMoveUp: (item: PlaylistItem) => void;\n  onMoveDown: (item: PlaylistItem) => void;\n  onDelete: (item: PlaylistItem) => void;\n}\n\nexport const PlaylistTableRow: FC<PlaylistTableRowProps> = ({ item, onDelete, onMoveDown, onMoveUp, first, last }) => {\n  const styles = useStyles(getStyles);\n  const onDeleteClick = (event: MouseEvent) => {\n    event.preventDefault();\n    onDelete(item);\n  };\n  const onMoveDownClick = (event: MouseEvent) => {\n    event.preventDefault();\n    onMoveDown(item);\n  };\n  const onMoveUpClick = (event: MouseEvent) => {\n    event.preventDefault();\n    onMoveUp(item);\n  };\n\n  return (\n    <tr aria-label={selectors.pages.PlaylistForm.itemRow} key={item.title}>\n      {item.type === 'dashboard_by_id' ? (\n        <td className={cx(styles.td, styles.item)}>\n          <Icon name=\"apps\" aria-label={selectors.pages.PlaylistForm.itemIdType} />\n          <span>{item.title}</span>\n        </td>\n      ) : null}\n      {item.type === 'dashboard_by_tag' ? (\n        <td className={cx(styles.td, styles.item)}>\n          <Icon name=\"tag-alt\" aria-label={selectors.pages.PlaylistForm.itemTagType} />\n          <TagBadge key={item.id} label={item.title} removeIcon={false} count={0} />\n        </td>\n      ) : null}\n      <td className={cx(styles.td, styles.settings)}>\n        {!first ? (\n          <IconButton\n            name=\"arrow-up\"\n            size=\"md\"\n            onClick={onMoveUpClick}\n            aria-label={selectors.pages.PlaylistForm.itemMoveUp}\n            type=\"button\"\n          />\n        ) : null}\n        {!last ? (\n          <IconButton\n            name=\"arrow-down\"\n            size=\"md\"\n            onClick={onMoveDownClick}\n            aria-label={selectors.pages.PlaylistForm.itemMoveDown}\n            type=\"button\"\n          />\n        ) : null}\n        <IconButton\n          name=\"times\"\n          size=\"md\"\n          onClick={onDeleteClick}\n          aria-label={selectors.pages.PlaylistForm.itemDelete}\n          type=\"button\"\n        />\n      </td>\n    </tr>\n  );\n};\n\nfunction getStyles(theme: GrafanaTheme) {\n  return {\n    td: css`\n      label: td;\n      line-height: 28px;\n      max-width: 335px;\n      white-space: nowrap;\n      text-overflow: ellipsis;\n      overflow: hidden;\n    `,\n    item: css`\n      label: item;\n      span {\n        margin-left: ${theme.spacing.xs};\n      }\n    `,\n    settings: css`\n      label: settings;\n      text-align: right;\n    `,\n  };\n}\n","import React, { FC } from 'react';\n\nimport { PlaylistTableRow } from './PlaylistTableRow';\nimport { PlaylistItem } from './types';\n\ninterface PlaylistTableRowsProps {\n  items: PlaylistItem[];\n  onMoveUp: (item: PlaylistItem) => void;\n  onMoveDown: (item: PlaylistItem) => void;\n  onDelete: (item: PlaylistItem) => void;\n}\n\nexport const PlaylistTableRows: FC<PlaylistTableRowsProps> = ({ items, onMoveUp, onMoveDown, onDelete }) => {\n  if (items.length === 0) {\n    return (\n      <tr>\n        <td>\n          <em>Playlist is empty. Add dashboards below.</em>\n        </td>\n      </tr>\n    );\n  }\n\n  return (\n    <>\n      {items.map((item, index) => {\n        const first = index === 0;\n        const last = index === items.length - 1;\n        return (\n          <PlaylistTableRow\n            first={first}\n            last={last}\n            item={item}\n            onDelete={onDelete}\n            onMoveDown={onMoveDown}\n            onMoveUp={onMoveUp}\n            key={item.title}\n          />\n        );\n      })}\n    </>\n  );\n};\n","import React, { FC } from 'react';\n\nimport { PlaylistTableRows } from './PlaylistTableRows';\nimport { PlaylistItem } from './types';\n\ninterface PlaylistTableProps {\n  items: PlaylistItem[];\n  onMoveUp: (item: PlaylistItem) => void;\n  onMoveDown: (item: PlaylistItem) => void;\n  onDelete: (item: PlaylistItem) => void;\n}\n\nexport const PlaylistTable: FC<PlaylistTableProps> = ({ items, onMoveUp, onMoveDown, onDelete }) => {\n  return (\n    <div className=\"gf-form-group\">\n      <h3 className=\"page-headering\">Dashboards</h3>\n\n      <table className=\"filter-table\">\n        <tbody>\n          <PlaylistTableRows items={items} onMoveUp={onMoveUp} onMoveDown={onMoveDown} onDelete={onDelete} />\n        </tbody>\n      </table>\n    </div>\n  );\n};\n","import React, { FC } from 'react';\nimport { config } from '@grafana/runtime';\nimport { Button, Field, Form, HorizontalGroup, Input, LinkButton } from '@grafana/ui';\nimport { selectors } from '@grafana/e2e-selectors';\n\nimport { Playlist } from './types';\nimport { DashboardPicker } from '../../core/components/Select/DashboardPicker';\nimport { TagFilter } from '../../core/components/TagFilter/TagFilter';\nimport { SearchSrv } from '../../core/services/search_srv';\nimport { usePlaylistItems } from './usePlaylistItems';\nimport { PlaylistTable } from './PlaylistTable';\n\ninterface PlaylistFormProps {\n  onSubmit: (playlist: Playlist) => void;\n  playlist: Playlist;\n}\n\nconst searchSrv = new SearchSrv();\n\nexport const PlaylistForm: FC<PlaylistFormProps> = ({ onSubmit, playlist }) => {\n  const { name, interval, items: propItems } = playlist;\n  const { items, addById, addByTag, deleteItem, moveDown, moveUp } = usePlaylistItems(propItems);\n  return (\n    <>\n      <Form onSubmit={(list: Playlist) => onSubmit({ ...list, items })} validateOn={'onBlur'}>\n        {({ register, errors }) => {\n          const isDisabled = items.length === 0 || Object.keys(errors).length > 0;\n          return (\n            <>\n              <Field label=\"Name\" invalid={!!errors.name} error={errors?.name?.message}>\n                <Input\n                  type=\"text\"\n                  {...register('name', { required: 'Name is required' })}\n                  placeholder=\"Name\"\n                  defaultValue={name}\n                  aria-label={selectors.pages.PlaylistForm.name}\n                />\n              </Field>\n              <Field label=\"Interval\" invalid={!!errors.interval} error={errors?.interval?.message}>\n                <Input\n                  type=\"text\"\n                  {...register('interval', { required: 'Interval is required' })}\n                  placeholder=\"5m\"\n                  defaultValue={interval ?? '5m'}\n                  aria-label={selectors.pages.PlaylistForm.interval}\n                />\n              </Field>\n\n              <PlaylistTable items={items} onMoveUp={moveUp} onMoveDown={moveDown} onDelete={deleteItem} />\n\n              <div className=\"gf-form-group\">\n                <h3 className=\"page-headering\">Add dashboards</h3>\n\n                <Field label=\"Add by title\">\n                  <DashboardPicker onChange={addById} isClearable />\n                </Field>\n\n                <Field label=\"Add by tag\">\n                  <TagFilter\n                    isClearable\n                    tags={[]}\n                    hideValues\n                    tagOptions={searchSrv.getDashboardTags}\n                    onChange={addByTag}\n                    placeholder={''}\n                  />\n                </Field>\n              </div>\n\n              <HorizontalGroup>\n                <Button variant=\"primary\" disabled={isDisabled}>\n                  Save\n                </Button>\n                <LinkButton variant=\"secondary\" href={`${config.appSubUrl}/playlists`}>\n                  Cancel\n                </LinkButton>\n              </HorizontalGroup>\n            </>\n          );\n        }}\n      </Form>\n    </>\n  );\n};\n","import { useCallback, useState } from 'react';\n\nimport { PlaylistItem } from './types';\nimport { DashboardPickerItem } from '../../core/components/Select/DashboardPicker';\n\nexport function usePlaylistItems(playlistItems?: PlaylistItem[]) {\n  const [items, setItems] = useState<PlaylistItem[]>(playlistItems ?? []);\n\n  const addById = useCallback(\n    (dashboard: DashboardPickerItem) => {\n      if (items.find((item) => item.id === dashboard.id)) {\n        return;\n      }\n\n      const newItem: PlaylistItem = {\n        id: dashboard.id,\n        title: dashboard.label,\n        type: 'dashboard_by_id',\n        value: dashboard.id.toString(10),\n        order: items.length + 1,\n      };\n      setItems([...items, newItem]);\n    },\n    [items]\n  );\n\n  const addByTag = useCallback(\n    (tags: string[]) => {\n      const tag = tags[0];\n      if (!tag || items.find((item) => item.value === tag)) {\n        return;\n      }\n\n      const newItem: PlaylistItem = {\n        title: tag,\n        type: 'dashboard_by_tag',\n        value: tag,\n        order: items.length + 1,\n      };\n      setItems([...items, newItem]);\n    },\n    [items]\n  );\n\n  const movePlaylistItem = useCallback(\n    (item: PlaylistItem, offset: number) => {\n      const newItems = [...items];\n      const currentPosition = newItems.indexOf(item);\n      const newPosition = currentPosition + offset;\n\n      if (newPosition >= 0 && newPosition < newItems.length) {\n        newItems.splice(currentPosition, 1);\n        newItems.splice(newPosition, 0, item);\n      }\n      setItems(newItems);\n    },\n    [items]\n  );\n\n  const moveUp = useCallback(\n    (item: PlaylistItem) => {\n      movePlaylistItem(item, -1);\n    },\n    [movePlaylistItem]\n  );\n\n  const moveDown = useCallback(\n    (item: PlaylistItem) => {\n      movePlaylistItem(item, 1);\n    },\n    [movePlaylistItem]\n  );\n\n  const deleteItem = useCallback(\n    (item: PlaylistItem) => {\n      setItems(items.filter((i) => i !== item));\n    },\n    [items]\n  );\n\n  return { items, addById, addByTag, deleteItem, moveDown, moveUp };\n}\n","import { GrafanaTheme2 } from '@grafana/data';\nimport { css } from '@emotion/css';\n\nexport function getPlaylistStyles(theme: GrafanaTheme2) {\n  return {\n    description: css`\n      label: description;\n      width: 555px;\n      margin-bottom: 20px;\n    `,\n    subHeading: css`\n      label: sub-heading;\n      margin-bottom: ${theme.spacing(2)};\n    `,\n  };\n}\n"],"sourceRoot":""}
{"version":3,"sources":["webpack:///./public/app/features/admin/ServerStats.tsx","webpack:///./public/app/features/admin/state/apis.tsx"],"names":["ServerStats","PureComponent","stats","isLoading","this","props","getServerStats","setState","error","console","render","navModel","state","Contents","className","map","StatItem","stat","name","tooltip","content","placement","value","hot","module","connect","getNavModel","navIndex","hasLicense","config","licenseInfo","async","res","getBackendSrv","get","users","admins","editors","viewers","activeUsers","href","activeAdmins","activeEditors","activeViewers","activeSessions","dashboards","orgs","playlists","snapshots","tags","stars","alerts","datasources"],"mappings":"mQAoBO,MAAMA,UAAoBC,gBAA4B,kB,UAAA,Y,EAC5C,CACbC,MAAO,GACPC,WAAW,I,EAH8C,W,EAAA,M,sFAMpC,0BACrB,IACE,MAAMD,QAAcE,KAAKC,MAAMC,iBAC/BF,KAAKG,SAAS,CAAEL,QAAOC,WAAW,IAClC,MAAOK,GACPC,QAAQD,MAAMA,IAIlBE,SACE,MAAM,SAAEC,GAAaP,KAAKC,OACpB,MAAEH,EAAF,UAASC,GAAcC,KAAKQ,MAElC,OACE,cAAC,IAAD,CAAMD,SAAUA,EAAhB,SACE,cAAC,IAAKE,SAAN,CAAeV,UAAWA,EAA1B,SACE,wBAAOW,UAAU,2BAAjB,gBACE,gCACE,+BACE,sCACA,6CAGJ,gCAAQZ,EAAMa,IAAIC,aAQ9B,SAASA,EAASC,GAChB,OACE,+BACE,+BACGA,EAAKC,KAAM,IACXD,EAAKE,SACJ,cAAC,UAAD,CAASC,QAASH,EAAKE,QAASE,UAAW,MAA3C,eACE,cAAC,OAAD,CAAMH,KAAM,sBAIlB,6BAAKD,EAAKK,UATHL,EAAKC,MAmBHK,wBAAIC,EAAJD,CAAYE,kBALFb,IAAD,CACtBD,SAAUe,YAAYd,EAAMe,SAAU,gBACtCrB,eAAgBA,MAGSmB,CAAyBzB,K,iJCnEpD,MAAM,WAAE4B,GAAeC,IAAOC,YAEjBxB,EAAiByB,UAC5B,IACE,MAAMC,QAAYC,0BAAgBC,IAAI,mBACtC,MAAO,CACL,CAAEhB,KAAM,cAAeI,MAAOU,EAAIG,UAC7BP,EAMD,GALA,CACE,CAAEV,KAAM,eAAgBI,MAAOU,EAAII,QACnC,CAAElB,KAAM,gBAAiBI,MAAOU,EAAIK,SACpC,CAAEnB,KAAM,gBAAiBI,MAAOU,EAAIM,UAG1C,CACEpB,KAAM,mCACNI,MAAOU,EAAIO,YACXpB,QAASS,EACL,IACE,qFACyC,mBAAGY,KAAK,mBAAR,6BADzC,OAIF,OAEDZ,EAMD,GALA,CACE,CAAEV,KAAM,oCAAqCI,MAAOU,EAAIS,cACxD,CAAEvB,KAAM,qCAAsCI,MAAOU,EAAIU,eACzD,CAAExB,KAAM,qCAAsCI,MAAOU,EAAIW,gBAG/D,CAAEzB,KAAM,kBAAmBI,MAAOU,EAAIY,gBACtC,CAAE1B,KAAM,mBAAoBI,MAAOU,EAAIa,YACvC,CAAE3B,KAAM,aAAcI,MAAOU,EAAIc,MACjC,CAAE5B,KAAM,kBAAmBI,MAAOU,EAAIe,WACtC,CAAE7B,KAAM,kBAAmBI,MAAOU,EAAIgB,WACtC,CAAE9B,KAAM,uBAAwBI,MAAOU,EAAIiB,MAC3C,CAAE/B,KAAM,2BAA4BI,MAAOU,EAAIkB,OAC/C,CAAEhC,KAAM,eAAgBI,MAAOU,EAAImB,QACnC,CAAEjC,KAAM,qBAAsBI,MAAOU,EAAIoB,cAE3C,MAAO5C,GAEP,MADAC,QAAQD,MAAMA,GACRA","file":"ServerStats.807b3f41627421e0a149.js","sourcesContent":["import React, { PureComponent } from 'react';\nimport { hot } from 'react-hot-loader';\nimport { connect } from 'react-redux';\nimport { Icon, Tooltip } from '@grafana/ui';\nimport { NavModel } from '@grafana/data';\nimport { StoreState } from 'app/types';\nimport { getNavModel } from 'app/core/selectors/navModel';\nimport Page from 'app/core/components/Page/Page';\nimport { getServerStats, ServerStat } from './state/apis';\n\ninterface Props {\n  navModel: NavModel;\n  getServerStats: () => Promise<ServerStat[]>;\n}\n\ninterface State {\n  stats: ServerStat[];\n  isLoading: boolean;\n}\n\nexport class ServerStats extends PureComponent<Props, State> {\n  state: State = {\n    stats: [],\n    isLoading: true,\n  };\n\n  async componentDidMount() {\n    try {\n      const stats = await this.props.getServerStats();\n      this.setState({ stats, isLoading: false });\n    } catch (error) {\n      console.error(error);\n    }\n  }\n\n  render() {\n    const { navModel } = this.props;\n    const { stats, isLoading } = this.state;\n\n    return (\n      <Page navModel={navModel}>\n        <Page.Contents isLoading={isLoading}>\n          <table className=\"filter-table form-inline\">\n            <thead>\n              <tr>\n                <th>Name</th>\n                <th>Value</th>\n              </tr>\n            </thead>\n            <tbody>{stats.map(StatItem)}</tbody>\n          </table>\n        </Page.Contents>\n      </Page>\n    );\n  }\n}\n\nfunction StatItem(stat: ServerStat) {\n  return (\n    <tr key={stat.name}>\n      <td>\n        {stat.name}{' '}\n        {stat.tooltip && (\n          <Tooltip content={stat.tooltip} placement={'top'}>\n            <Icon name={'info-circle'} />\n          </Tooltip>\n        )}\n      </td>\n      <td>{stat.value}</td>\n    </tr>\n  );\n}\n\nconst mapStateToProps = (state: StoreState) => ({\n  navModel: getNavModel(state.navIndex, 'server-stats'),\n  getServerStats: getServerStats,\n});\n\nexport default hot(module)(connect(mapStateToProps)(ServerStats));\n","import React from 'react';\nimport { getBackendSrv } from '@grafana/runtime';\nimport { PopoverContent } from '@grafana/ui';\nimport { config } from 'app/core/config';\n\nexport interface ServerStat {\n  name: string;\n  value: number;\n  tooltip?: PopoverContent;\n}\n\nconst { hasLicense } = config.licenseInfo;\n\nexport const getServerStats = async (): Promise<ServerStat[]> => {\n  try {\n    const res = await getBackendSrv().get('api/admin/stats');\n    return [\n      { name: 'Total users', value: res.users },\n      ...(!hasLicense\n        ? [\n            { name: 'Total admins', value: res.admins },\n            { name: 'Total editors', value: res.editors },\n            { name: 'Total viewers', value: res.viewers },\n          ]\n        : []),\n      {\n        name: 'Active users (seen last 30 days)',\n        value: res.activeUsers,\n        tooltip: hasLicense\n          ? () => (\n              <>\n                For active user count by role, see the <a href=\"/admin/licensing\">Licensing page</a>.\n              </>\n            )\n          : '',\n      },\n      ...(!hasLicense\n        ? [\n            { name: 'Active admins (seen last 30 days)', value: res.activeAdmins },\n            { name: 'Active editors (seen last 30 days)', value: res.activeEditors },\n            { name: 'Active viewers (seen last 30 days)', value: res.activeViewers },\n          ]\n        : []),\n      { name: 'Active sessions', value: res.activeSessions },\n      { name: 'Total dashboards', value: res.dashboards },\n      { name: 'Total orgs', value: res.orgs },\n      { name: 'Total playlists', value: res.playlists },\n      { name: 'Total snapshots', value: res.snapshots },\n      { name: 'Total dashboard tags', value: res.tags },\n      { name: 'Total starred dashboards', value: res.stars },\n      { name: 'Total alerts', value: res.alerts },\n      { name: 'Total data sources', value: res.datasources },\n    ];\n  } catch (error) {\n    console.error(error);\n    throw error;\n  }\n};\n"],"sourceRoot":""}
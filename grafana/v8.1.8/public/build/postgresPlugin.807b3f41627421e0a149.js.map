{"version":3,"sources":["webpack:///./public/app/plugins/datasource/postgres/response_parser.ts","webpack:///./public/app/plugins/datasource/postgres/postgres_query_model.ts","webpack:///./public/app/plugins/datasource/postgres/datasource.ts","webpack:///./public/app/plugins/datasource/postgres/meta_query.ts","webpack:///./public/app/plugins/datasource/postgres/sql_part.ts","webpack:///./public/app/plugins/datasource/postgres/query_ctrl.ts","webpack:///./public/app/plugins/datasource/postgres/config_ctrl.ts","webpack:///./public/app/plugins/datasource/postgres/module.ts","webpack:///./public/app/features/datasources/utils/passwordHandlers.ts","webpack:///./public/app/core/components/sql_part/sql_part.ts"],"names":["ResponseParser","transformMetricFindResponse","raw","frames","toDataQueryResponse","data","length","frame","values","textField","fields","find","f","name","valueField","i","push","text","get","value","flatMap","toArray","map","v","Array","from","Set","options","timeField","Error","timeEndField","tagsField","list","timeEnd","Math","floor","undefined","annotation","time","tags","trim","split","PostgresQueryModel","constructor","target","templateSrv","scopedVars","this","format","timeColumn","metricColumn","group","where","type","params","select","rawQuery","interpolateQueryStr","bind","unquoteIdentifier","substring","replace","quoteIdentifier","String","quoteLiteral","escapeLiteral","hasTimeGroup","g","hasMetricColumn","variable","defaultFormatFn","multi","includeAll","join","render","interpolate","rawSql","buildQuery","hasUnixEpochTimecolumn","indexOf","timeColumnType","buildTimeColumn","alias","timeGroup","query","macro","args","buildMetricColumn","buildValueColumns","column","buildValueColumn","aggregate","windows","func","overParts","over","curr","prev","buildWhereClause","conditions","tag","index","buildGroupClause","groupSection","part","table","PostgresDatasource","DataSourceWithBackend","instanceSettings","getTemplateSrv","timeSrv","getTimeSrv","super","queryModel","_map","id","jsonData","responseParser","settingsData","interval","timeInterval","interpolateVariablesInQueries","queries","expandedQueries","datasource","interpolateVariable","filterQuery","hide","applyTemplateVariables","refId","datasourceId","Promise","reject","message","getBackendSrv","fetch","url","method","range","valueOf","toString","to","requestId","pipe","async","transformAnnotationResponse","res","toPromise","metricFindQuery","optionalOptions","getSearchFilterScopedVar","wildcardChar","interpolatedQuery","timeRange","rsp","getVersion","getTimescaleDBVersion","testDatasource","then","status","catch","err","toTestingStatus","targetContainsTemplate","variableExists","PostgresMetaQuery","getOperators","datatype","quoteIdentAsLiteral","findMetricTable","buildSchemaConstraint","buildTableConstraint","includes","parts","buildTableQuery","buildColumnQuery","buildValueQuery","buildDatatypeQuery","buildAggregateQuery","register","SqlPartDef","style","dynamicLookup","defaultParams","label","quote","create","def","SqlPart","PostgresQueryCtrl","QueryCtrl","$scope","$injector","uiSegmentSrv","panel","metaBuilder","updateProjection","formats","panelCtrl","result","segment","newSegment","tableSegment","html","timeColumnSegment","updateRawSqlAndRefresh","fake","metricColumnSegment","buildSelectMenu","whereAdd","newPlusButton","groupAdd","events","on","PanelEvents","dataReceived","onDataReceived","dataError","onDataError","refresh","selectParts","sqlPart","filter","n","whereParts","groupParts","updatePersistedParts","selectMenu","aggregates","submenu","timescaledb","postgresVersion","aggregates2","toggleEditorMode","appEvents","publish","ShowConfirmModalEvent","title","text2","icon","yesText","onConfirm","$evalAsync","resetPlusButton","button","plusButton","getTableSegments","transformToSegments","handleQueryError","tableChanged","task1","r","timeColumnChanged","task2","all","getTimeColumnSegments","partModel","splice","getMetricColumnSegments","addNone","metricColumnChanged","dataList","lastQueryError","lastQueryMeta","meta","results","queryRes","error","config","segments","expandable","addTemplateVars","getVariables","templateQuoter","unshift","findAggregateIndex","findIndex","p","findWindowIndex","addSelectPart","item","subItem","partType","addAlias","clone","addGroup","aggIndex","windowIndex","removeSelectPart","modelsIndex","partIndex","handleSelectPartEvent","evt","resolve","handleGroupPartEvent","removeGroup","some","s","handleWherePartEvent","param","newOperators","d","getWhereOptions","addWhereAction","getGroupOptions","addGroupAction","PostgresConfigCtrl","datasourceSrv","current","ctrl","sslmode","tlsConfigurationMethod","showTimescaleDBHelp","autoDetectFeatures","onPasswordReset","createResetHandler","PasswordFieldEnum","Password","onPasswordChange","createChangeHandler","tlsModeMapping","loadDatasource","ds","version","Number","major","trunc","minor","postgresVersions","toggleTimescaleDBHelp","tlsAuth","tlsAuthWithCACert","tlsSkipVerify","PostgresAnnotationsQueryCtrl","plugin","DataSourcePlugin","setQueryCtrl","setConfigCtrl","setAnnotationQueryCtrl","field","event","preventDefault","secureJsonFields","secureJsonData","currentTarget","toUpperCase","wrapOpen","wrapClose","separator","updateParam","strValue","optional"],"mappings":"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","file":"postgresPlugin.807b3f41627421e0a149.js","sourcesContent":["import { AnnotationEvent, DataFrame, MetricFindValue } from '@grafana/data';\nimport { BackendDataSourceResponse, FetchResponse, toDataQueryResponse } from '@grafana/runtime';\n\nexport default class ResponseParser {\n  transformMetricFindResponse(raw: FetchResponse<BackendDataSourceResponse>): MetricFindValue[] {\n    const frames = toDataQueryResponse(raw).data as DataFrame[];\n\n    if (!frames || !frames.length) {\n      return [];\n    }\n\n    const frame = frames[0];\n\n    const values: MetricFindValue[] = [];\n    const textField = frame.fields.find((f) => f.name === '__text');\n    const valueField = frame.fields.find((f) => f.name === '__value');\n\n    if (textField && valueField) {\n      for (let i = 0; i < textField.values.length; i++) {\n        values.push({ text: '' + textField.values.get(i), value: '' + valueField.values.get(i) });\n      }\n    } else {\n      values.push(\n        ...frame.fields\n          .flatMap((f) => f.values.toArray())\n          .map((v) => ({\n            text: v,\n          }))\n      );\n    }\n\n    return Array.from(new Set(values.map((v) => v.text))).map((text) => ({\n      text,\n      value: values.find((v) => v.text === text)?.value,\n    }));\n  }\n\n  async transformAnnotationResponse(options: any, data: BackendDataSourceResponse): Promise<AnnotationEvent[]> {\n    const frames = toDataQueryResponse({ data: data }).data as DataFrame[];\n    if (!frames || !frames.length) {\n      return [];\n    }\n    const frame = frames[0];\n    const timeField = frame.fields.find((f) => f.name === 'time');\n\n    if (!timeField) {\n      throw new Error('Missing mandatory time column (with time column alias) in annotation query');\n    }\n\n    const timeEndField = frame.fields.find((f) => f.name === 'timeend');\n    const textField = frame.fields.find((f) => f.name === 'text');\n    const tagsField = frame.fields.find((f) => f.name === 'tags');\n\n    const list: AnnotationEvent[] = [];\n    for (let i = 0; i < frame.length; i++) {\n      const timeEnd = timeEndField && timeEndField.values.get(i) ? Math.floor(timeEndField.values.get(i)) : undefined;\n      list.push({\n        annotation: options.annotation,\n        time: Math.floor(timeField.values.get(i)),\n        timeEnd,\n        text: textField && textField.values.get(i) ? textField.values.get(i) : '',\n        tags:\n          tagsField && tagsField.values.get(i)\n            ? tagsField.values\n                .get(i)\n                .trim()\n                .split(/\\s*,\\s*/)\n            : [],\n      });\n    }\n\n    return list;\n  }\n}\n","import { find, map } from 'lodash';\nimport { TemplateSrv } from '@grafana/runtime';\nimport { ScopedVars } from '@grafana/data';\n\nexport default class PostgresQueryModel {\n  target: any;\n  templateSrv: any;\n  scopedVars: any;\n\n  /** @ngInject */\n  constructor(target: any, templateSrv?: TemplateSrv, scopedVars?: ScopedVars) {\n    this.target = target;\n    this.templateSrv = templateSrv;\n    this.scopedVars = scopedVars;\n\n    target.format = target.format || 'time_series';\n    target.timeColumn = target.timeColumn || 'time';\n    target.metricColumn = target.metricColumn || 'none';\n\n    target.group = target.group || [];\n    target.where = target.where || [{ type: 'macro', name: '$__timeFilter', params: [] }];\n    target.select = target.select || [[{ type: 'column', params: ['value'] }]];\n\n    // handle pre query gui panels gracefully\n    if (!('rawQuery' in this.target)) {\n      if ('rawSql' in target) {\n        // pre query gui panel\n        target.rawQuery = true;\n      } else {\n        // new panel\n        target.rawQuery = false;\n      }\n    }\n\n    // give interpolateQueryStr access to this\n    this.interpolateQueryStr = this.interpolateQueryStr.bind(this);\n  }\n\n  // remove identifier quoting from identifier to use in metadata queries\n  unquoteIdentifier(value: string) {\n    if (value[0] === '\"' && value[value.length - 1] === '\"') {\n      return value.substring(1, value.length - 1).replace(/\"\"/g, '\"');\n    } else {\n      return value;\n    }\n  }\n\n  quoteIdentifier(value: any) {\n    return '\"' + String(value).replace(/\"/g, '\"\"') + '\"';\n  }\n\n  quoteLiteral(value: any) {\n    return \"'\" + String(value).replace(/'/g, \"''\") + \"'\";\n  }\n\n  escapeLiteral(value: any) {\n    return String(value).replace(/'/g, \"''\");\n  }\n\n  hasTimeGroup() {\n    return find(this.target.group, (g: any) => g.type === 'time');\n  }\n\n  hasMetricColumn() {\n    return this.target.metricColumn !== 'none';\n  }\n\n  interpolateQueryStr(value: any, variable: { multi: any; includeAll: any }, defaultFormatFn: any) {\n    // if no multi or include all do not regexEscape\n    if (!variable.multi && !variable.includeAll) {\n      return this.escapeLiteral(value);\n    }\n\n    if (typeof value === 'string') {\n      return this.quoteLiteral(value);\n    }\n\n    const escapedValues = map(value, this.quoteLiteral);\n    return escapedValues.join(',');\n  }\n\n  render(interpolate?: any) {\n    const target = this.target;\n\n    // new query with no table set yet\n    if (!this.target.rawQuery && !('table' in this.target)) {\n      return '';\n    }\n\n    if (!target.rawQuery) {\n      target.rawSql = this.buildQuery();\n    }\n\n    if (interpolate) {\n      return this.templateSrv.replace(target.rawSql, this.scopedVars, this.interpolateQueryStr);\n    } else {\n      return target.rawSql;\n    }\n  }\n\n  hasUnixEpochTimecolumn() {\n    return ['int4', 'int8', 'float4', 'float8', 'numeric'].indexOf(this.target.timeColumnType) > -1;\n  }\n\n  buildTimeColumn(alias = true) {\n    const timeGroup = this.hasTimeGroup();\n    let query;\n    let macro = '$__timeGroup';\n\n    if (timeGroup) {\n      let args;\n      if (timeGroup.params.length > 1 && timeGroup.params[1] !== 'none') {\n        args = timeGroup.params.join(',');\n      } else {\n        args = timeGroup.params[0];\n      }\n      if (this.hasUnixEpochTimecolumn()) {\n        macro = '$__unixEpochGroup';\n      }\n      if (alias) {\n        macro += 'Alias';\n      }\n      query = macro + '(' + this.target.timeColumn + ',' + args + ')';\n    } else {\n      query = this.target.timeColumn;\n      if (alias) {\n        query += ' AS \"time\"';\n      }\n    }\n\n    return query;\n  }\n\n  buildMetricColumn() {\n    if (this.hasMetricColumn()) {\n      return this.target.metricColumn + ' AS metric';\n    }\n\n    return '';\n  }\n\n  buildValueColumns() {\n    let query = '';\n    for (const column of this.target.select) {\n      query += ',\\n  ' + this.buildValueColumn(column);\n    }\n\n    return query;\n  }\n\n  buildValueColumn(column: any) {\n    let query = '';\n\n    const columnName: any = find(column, (g: any) => g.type === 'column');\n    query = columnName.params[0];\n\n    const aggregate: any = find(column, (g: any) => g.type === 'aggregate' || g.type === 'percentile');\n    const windows: any = find(column, (g: any) => g.type === 'window' || g.type === 'moving_window');\n\n    if (aggregate) {\n      const func = aggregate.params[0];\n      switch (aggregate.type) {\n        case 'aggregate':\n          if (func === 'first' || func === 'last') {\n            query = func + '(' + query + ',' + this.target.timeColumn + ')';\n          } else {\n            query = func + '(' + query + ')';\n          }\n          break;\n        case 'percentile':\n          query = func + '(' + aggregate.params[1] + ') WITHIN GROUP (ORDER BY ' + query + ')';\n          break;\n      }\n    }\n\n    if (windows) {\n      const overParts = [];\n      if (this.hasMetricColumn()) {\n        overParts.push('PARTITION BY ' + this.target.metricColumn);\n      }\n      overParts.push('ORDER BY ' + this.buildTimeColumn(false));\n\n      const over = overParts.join(' ');\n      let curr: string;\n      let prev: string;\n      switch (windows.type) {\n        case 'window':\n          switch (windows.params[0]) {\n            case 'delta':\n              curr = query;\n              prev = 'lag(' + curr + ') OVER (' + over + ')';\n              query = curr + ' - ' + prev;\n              break;\n            case 'increase':\n              curr = query;\n              prev = 'lag(' + curr + ') OVER (' + over + ')';\n              query = '(CASE WHEN ' + curr + ' >= ' + prev + ' THEN ' + curr + ' - ' + prev;\n              query += ' WHEN ' + prev + ' IS NULL THEN NULL ELSE ' + curr + ' END)';\n              break;\n            case 'rate':\n              let timeColumn = this.target.timeColumn;\n              if (aggregate) {\n                timeColumn = 'min(' + timeColumn + ')';\n              }\n\n              curr = query;\n              prev = 'lag(' + curr + ') OVER (' + over + ')';\n              query = '(CASE WHEN ' + curr + ' >= ' + prev + ' THEN ' + curr + ' - ' + prev;\n              query += ' WHEN ' + prev + ' IS NULL THEN NULL ELSE ' + curr + ' END)';\n              query += '/extract(epoch from ' + timeColumn + ' - lag(' + timeColumn + ') OVER (' + over + '))';\n              break;\n            default:\n              query = windows.params[0] + '(' + query + ') OVER (' + over + ')';\n              break;\n          }\n          break;\n        case 'moving_window':\n          query = windows.params[0] + '(' + query + ') OVER (' + over + ' ROWS ' + windows.params[1] + ' PRECEDING)';\n          break;\n      }\n    }\n\n    const alias: any = find(column, (g: any) => g.type === 'alias');\n    if (alias) {\n      query += ' AS ' + this.quoteIdentifier(alias.params[0]);\n    }\n\n    return query;\n  }\n\n  buildWhereClause() {\n    let query = '';\n    const conditions = map(this.target.where, (tag, index) => {\n      switch (tag.type) {\n        case 'macro':\n          return tag.name + '(' + this.target.timeColumn + ')';\n          break;\n        case 'expression':\n          return tag.params.join(' ');\n          break;\n      }\n    });\n\n    if (conditions.length > 0) {\n      query = '\\nWHERE\\n  ' + conditions.join(' AND\\n  ');\n    }\n\n    return query;\n  }\n\n  buildGroupClause() {\n    let query = '';\n    let groupSection = '';\n\n    for (let i = 0; i < this.target.group.length; i++) {\n      const part = this.target.group[i];\n      if (i > 0) {\n        groupSection += ', ';\n      }\n      if (part.type === 'time') {\n        groupSection += '1';\n      } else {\n        groupSection += part.params[0];\n      }\n    }\n\n    if (groupSection.length) {\n      query = '\\nGROUP BY ' + groupSection;\n      if (this.hasMetricColumn()) {\n        query += ',2';\n      }\n    }\n    return query;\n  }\n\n  buildQuery() {\n    let query = 'SELECT';\n\n    query += '\\n  ' + this.buildTimeColumn();\n    if (this.hasMetricColumn()) {\n      query += ',\\n  ' + this.buildMetricColumn();\n    }\n    query += this.buildValueColumns();\n\n    query += '\\nFROM ' + this.target.table;\n\n    query += this.buildWhereClause();\n    query += this.buildGroupClause();\n\n    query += '\\nORDER BY 1';\n    if (this.hasMetricColumn()) {\n      query += ',2';\n    }\n\n    return query;\n  }\n}\n","import { map as _map } from 'lodash';\nimport { map } from 'rxjs/operators';\nimport { BackendDataSourceResponse, DataSourceWithBackend, FetchResponse, getBackendSrv } from '@grafana/runtime';\nimport { AnnotationEvent, DataSourceInstanceSettings, MetricFindValue, ScopedVars } from '@grafana/data';\n\nimport ResponseParser from './response_parser';\nimport PostgresQueryModel from 'app/plugins/datasource/postgres/postgres_query_model';\nimport { getTemplateSrv, TemplateSrv } from 'app/features/templating/template_srv';\nimport { getTimeSrv, TimeSrv } from 'app/features/dashboard/services/TimeSrv';\n//Types\nimport { PostgresOptions, PostgresQuery, PostgresQueryForInterpolation } from './types';\nimport { getSearchFilterScopedVar } from '../../../features/variables/utils';\nimport { toTestingStatus } from '@grafana/runtime/src/utils/queryResponse';\n\nexport class PostgresDatasource extends DataSourceWithBackend<PostgresQuery, PostgresOptions> {\n  id: any;\n  name: any;\n  jsonData: any;\n  responseParser: ResponseParser;\n  queryModel: PostgresQueryModel;\n  interval: string;\n\n  constructor(\n    instanceSettings: DataSourceInstanceSettings<PostgresOptions>,\n    private readonly templateSrv: TemplateSrv = getTemplateSrv(),\n    private readonly timeSrv: TimeSrv = getTimeSrv()\n  ) {\n    super(instanceSettings);\n    this.name = instanceSettings.name;\n    this.id = instanceSettings.id;\n    this.jsonData = instanceSettings.jsonData;\n    this.responseParser = new ResponseParser();\n    this.queryModel = new PostgresQueryModel({});\n    const settingsData = instanceSettings.jsonData || ({} as PostgresOptions);\n    this.interval = settingsData.timeInterval || '1m';\n  }\n\n  interpolateVariable = (value: string | string[], variable: { multi: any; includeAll: any }) => {\n    if (typeof value === 'string') {\n      if (variable.multi || variable.includeAll) {\n        return this.queryModel.quoteLiteral(value);\n      } else {\n        return value;\n      }\n    }\n\n    if (typeof value === 'number') {\n      return value;\n    }\n\n    const quotedValues = _map(value, (v) => {\n      return this.queryModel.quoteLiteral(v);\n    });\n    return quotedValues.join(',');\n  };\n\n  interpolateVariablesInQueries(\n    queries: PostgresQueryForInterpolation[],\n    scopedVars: ScopedVars\n  ): PostgresQueryForInterpolation[] {\n    let expandedQueries = queries;\n    if (queries && queries.length > 0) {\n      expandedQueries = queries.map((query) => {\n        const expandedQuery = {\n          ...query,\n          datasource: this.name,\n          rawSql: this.templateSrv.replace(query.rawSql, scopedVars, this.interpolateVariable),\n          rawQuery: true,\n        };\n        return expandedQuery;\n      });\n    }\n    return expandedQueries;\n  }\n\n  filterQuery(query: PostgresQuery): boolean {\n    return !query.hide;\n  }\n\n  applyTemplateVariables(target: PostgresQuery, scopedVars: ScopedVars): Record<string, any> {\n    const queryModel = new PostgresQueryModel(target, this.templateSrv, scopedVars);\n    return {\n      refId: target.refId,\n      datasourceId: this.id,\n      rawSql: queryModel.render(this.interpolateVariable as any),\n      format: target.format,\n    };\n  }\n\n  async annotationQuery(options: any): Promise<AnnotationEvent[]> {\n    if (!options.annotation.rawQuery) {\n      return Promise.reject({\n        message: 'Query missing in annotation definition',\n      });\n    }\n\n    const query = {\n      refId: options.annotation.name,\n      datasourceId: this.id,\n      rawSql: this.templateSrv.replace(options.annotation.rawQuery, options.scopedVars, this.interpolateVariable),\n      format: 'table',\n    };\n\n    return getBackendSrv()\n      .fetch<BackendDataSourceResponse>({\n        url: '/api/ds/query',\n        method: 'POST',\n        data: {\n          from: options.range.from.valueOf().toString(),\n          to: options.range.to.valueOf().toString(),\n          queries: [query],\n        },\n        requestId: options.annotation.name,\n      })\n      .pipe(\n        map(\n          async (res: FetchResponse<BackendDataSourceResponse>) =>\n            await this.responseParser.transformAnnotationResponse(options, res.data)\n        )\n      )\n      .toPromise();\n  }\n\n  metricFindQuery(query: string, optionalOptions: any): Promise<MetricFindValue[]> {\n    let refId = 'tempvar';\n    if (optionalOptions && optionalOptions.variable && optionalOptions.variable.name) {\n      refId = optionalOptions.variable.name;\n    }\n\n    const rawSql = this.templateSrv.replace(\n      query,\n      getSearchFilterScopedVar({ query, wildcardChar: '%', options: optionalOptions }),\n      this.interpolateVariable\n    );\n\n    const interpolatedQuery = {\n      refId: refId,\n      datasourceId: this.id,\n      rawSql,\n      format: 'table',\n    };\n\n    const range = this.timeSrv.timeRange();\n\n    return getBackendSrv()\n      .fetch<BackendDataSourceResponse>({\n        url: '/api/ds/query',\n        method: 'POST',\n        data: {\n          from: range.from.valueOf().toString(),\n          to: range.to.valueOf().toString(),\n          queries: [interpolatedQuery],\n        },\n        requestId: refId,\n      })\n      .pipe(\n        map((rsp) => {\n          return this.responseParser.transformMetricFindResponse(rsp);\n        })\n      )\n      .toPromise();\n  }\n\n  getVersion(): Promise<any> {\n    return this.metricFindQuery(\"SELECT current_setting('server_version_num')::int/100\", {});\n  }\n\n  getTimescaleDBVersion(): Promise<any> {\n    return this.metricFindQuery(\"SELECT extversion FROM pg_extension WHERE extname = 'timescaledb'\", {});\n  }\n\n  testDatasource(): Promise<any> {\n    return this.metricFindQuery('SELECT 1', {})\n      .then(() => {\n        return { status: 'success', message: 'Database Connection OK' };\n      })\n      .catch((err: any) => {\n        return toTestingStatus(err);\n      });\n  }\n\n  targetContainsTemplate(target: any) {\n    let rawSql = '';\n\n    if (target.rawQuery) {\n      rawSql = target.rawSql;\n    } else {\n      const query = new PostgresQueryModel(target);\n      rawSql = query.buildQuery();\n    }\n\n    rawSql = rawSql.replace('$__', '');\n\n    return this.templateSrv.variableExists(rawSql);\n  }\n}\n","import QueryModel from './postgres_query_model';\n\nexport class PostgresMetaQuery {\n  constructor(private target: { table: string; timeColumn: string }, private queryModel: QueryModel) {}\n\n  getOperators(datatype: string) {\n    switch (datatype) {\n      case 'float4':\n      case 'float8': {\n        return ['=', '!=', '<', '<=', '>', '>='];\n      }\n      case 'text':\n      case 'varchar':\n      case 'char': {\n        return ['=', '!=', '<', '<=', '>', '>=', 'IN', 'NOT IN', 'LIKE', 'NOT LIKE', '~', '~*', '!~', '!~*'];\n      }\n      default: {\n        return ['=', '!=', '<', '<=', '>', '>=', 'IN', 'NOT IN'];\n      }\n    }\n  }\n\n  // quote identifier as literal to use in metadata queries\n  quoteIdentAsLiteral(value: string) {\n    return this.queryModel.quoteLiteral(this.queryModel.unquoteIdentifier(value));\n  }\n\n  findMetricTable() {\n    // query that returns first table found that has a timestamp(tz) column and a float column\n    let query = `\nSELECT\n\tquote_ident(table_name) as table_name,\n\t( SELECT\n\t    quote_ident(column_name) as column_name\n\t  FROM information_schema.columns c\n    WHERE\n      c.table_schema = t.table_schema AND\n      c.table_name = t.table_name AND\n      udt_name IN ('timestamptz','timestamp')\n    ORDER BY ordinal_position LIMIT 1\n  ) AS time_column,\n  ( SELECT\n      quote_ident(column_name) AS column_name\n    FROM information_schema.columns c\n    WHERE\n      c.table_schema = t.table_schema AND\n      c.table_name = t.table_name AND\n      udt_name='float8'\n    ORDER BY ordinal_position LIMIT 1\n  ) AS value_column\nFROM information_schema.tables t\nWHERE `;\n    query += this.buildSchemaConstraint();\n    query += ` AND\n  EXISTS\n  ( SELECT 1\n    FROM information_schema.columns c\n    WHERE\n      c.table_schema = t.table_schema AND\n      c.table_name = t.table_name AND\n      udt_name IN ('timestamptz','timestamp')\n  ) AND\n  EXISTS\n  ( SELECT 1\n    FROM information_schema.columns c\n    WHERE\n      c.table_schema = t.table_schema AND\n      c.table_name = t.table_name AND\n      udt_name='float8'\n  )\nLIMIT 1\n;`;\n    return query;\n  }\n\n  buildSchemaConstraint() {\n    const query = `\ntable_schema IN (\n  SELECT\n    CASE WHEN trim(s[i]) = '\"$user\"' THEN user ELSE trim(s[i]) END\n  FROM\n    generate_series(\n      array_lower(string_to_array(current_setting('search_path'),','),1),\n      array_upper(string_to_array(current_setting('search_path'),','),1)\n    ) as i,\n    string_to_array(current_setting('search_path'),',') s\n)`;\n    return query;\n  }\n\n  buildTableConstraint(table: string) {\n    let query = '';\n\n    // check for schema qualified table\n    if (table.includes('.')) {\n      const parts = table.split('.');\n      query = 'table_schema = ' + this.quoteIdentAsLiteral(parts[0]);\n      query += ' AND table_name = ' + this.quoteIdentAsLiteral(parts[1]);\n      return query;\n    } else {\n      query = this.buildSchemaConstraint();\n      query += ' AND table_name = ' + this.quoteIdentAsLiteral(table);\n\n      return query;\n    }\n  }\n\n  buildTableQuery() {\n    let query = 'SELECT quote_ident(table_name) FROM information_schema.tables WHERE ';\n    query += this.buildSchemaConstraint();\n    query += ' ORDER BY table_name';\n    return query;\n  }\n\n  buildColumnQuery(type?: string) {\n    let query = 'SELECT quote_ident(column_name) FROM information_schema.columns WHERE ';\n    query += this.buildTableConstraint(this.target.table);\n\n    switch (type) {\n      case 'time': {\n        query +=\n          \" AND data_type IN ('timestamp without time zone','timestamp with time zone','bigint','integer','double precision','real')\";\n        break;\n      }\n      case 'metric': {\n        query += \" AND data_type IN ('text','character','character varying')\";\n        break;\n      }\n      case 'value': {\n        query += \" AND data_type IN ('bigint','integer','double precision','real')\";\n        query += ' AND column_name <> ' + this.quoteIdentAsLiteral(this.target.timeColumn);\n        break;\n      }\n      case 'group': {\n        query += \" AND data_type IN ('text','character','character varying')\";\n        break;\n      }\n    }\n\n    query += ' ORDER BY column_name';\n\n    return query;\n  }\n\n  buildValueQuery(column: string) {\n    let query = 'SELECT DISTINCT quote_literal(' + column + ')';\n    query += ' FROM ' + this.target.table;\n    query += ' WHERE $__timeFilter(' + this.target.timeColumn + ')';\n    query += ' AND ' + column + ' IS NOT NULL';\n    query += ' ORDER BY 1 LIMIT 100';\n    return query;\n  }\n\n  buildDatatypeQuery(column: string) {\n    let query = 'SELECT udt_name FROM information_schema.columns WHERE ';\n    query += this.buildTableConstraint(this.target.table);\n    query += ' AND column_name = ' + this.quoteIdentAsLiteral(column);\n    return query;\n  }\n\n  buildAggregateQuery() {\n    let query = 'SELECT DISTINCT proname FROM pg_aggregate ';\n    query += 'INNER JOIN pg_proc ON pg_aggregate.aggfnoid = pg_proc.oid ';\n    query += 'INNER JOIN pg_type ON pg_type.oid=pg_proc.prorettype ';\n    query += \"WHERE pronargs=1 AND typname IN ('float8') AND aggkind='n' ORDER BY 1\";\n    return query;\n  }\n}\n","import { SqlPartDef, SqlPart } from 'app/core/components/sql_part/sql_part';\n\nconst index: any[] = [];\n\nfunction createPart(part: any): any {\n  const def = index[part.type];\n  if (!def) {\n    return null;\n  }\n\n  return new SqlPart(part, def);\n}\n\nfunction register(options: any) {\n  index[options.type] = new SqlPartDef(options);\n}\n\nregister({\n  type: 'column',\n  style: 'label',\n  params: [{ type: 'column', dynamicLookup: true }],\n  defaultParams: ['value'],\n});\n\nregister({\n  type: 'expression',\n  style: 'expression',\n  label: 'Expr:',\n  params: [\n    { name: 'left', type: 'string', dynamicLookup: true },\n    { name: 'op', type: 'string', dynamicLookup: true },\n    { name: 'right', type: 'string', dynamicLookup: true },\n  ],\n  defaultParams: ['value', '=', 'value'],\n});\n\nregister({\n  type: 'macro',\n  style: 'label',\n  label: 'Macro:',\n  params: [],\n  defaultParams: [],\n});\n\nregister({\n  type: 'aggregate',\n  style: 'label',\n  params: [\n    {\n      name: 'name',\n      type: 'string',\n      options: ['avg', 'count', 'min', 'max', 'sum', 'stddev', 'variance'],\n    },\n  ],\n  defaultParams: ['avg'],\n});\n\nregister({\n  type: 'percentile',\n  label: 'Aggregate:',\n  style: 'label',\n  params: [\n    {\n      name: 'name',\n      type: 'string',\n      options: ['percentile_cont', 'percentile_disc'],\n    },\n    {\n      name: 'fraction',\n      type: 'number',\n      options: ['0.5', '0.75', '0.9', '0.95', '0.99'],\n    },\n  ],\n  defaultParams: ['percentile_cont', '0.95'],\n});\n\nregister({\n  type: 'alias',\n  style: 'label',\n  params: [{ name: 'name', type: 'string', quote: 'double' }],\n  defaultParams: ['alias'],\n});\n\nregister({\n  type: 'time',\n  style: 'function',\n  label: 'time',\n  params: [\n    {\n      name: 'interval',\n      type: 'interval',\n      options: ['$__interval', '1s', '10s', '1m', '5m', '10m', '15m', '1h'],\n    },\n    {\n      name: 'fill',\n      type: 'string',\n      options: ['none', 'NULL', 'previous', '0'],\n    },\n  ],\n  defaultParams: ['$__interval', 'none'],\n});\n\nregister({\n  type: 'window',\n  style: 'label',\n  params: [\n    {\n      name: 'function',\n      type: 'string',\n      options: ['delta', 'increase', 'rate', 'sum'],\n    },\n  ],\n  defaultParams: ['increase'],\n});\n\nregister({\n  type: 'moving_window',\n  style: 'label',\n  label: 'Moving Window:',\n  params: [\n    {\n      name: 'function',\n      type: 'string',\n      options: ['avg'],\n    },\n    {\n      name: 'window_size',\n      type: 'number',\n      options: ['3', '5', '7', '10', '20'],\n    },\n  ],\n  defaultParams: ['avg', '5'],\n});\n\nexport default {\n  create: createPart,\n};\n","import { clone, filter, find, findIndex, indexOf, map } from 'lodash';\nimport appEvents from 'app/core/app_events';\nimport { PostgresMetaQuery } from './meta_query';\nimport { QueryCtrl } from 'app/plugins/sdk';\nimport { SqlPart } from 'app/core/components/sql_part/sql_part';\nimport PostgresQueryModel from './postgres_query_model';\nimport sqlPart from './sql_part';\nimport { auto } from 'angular';\nimport { PanelEvents, QueryResultMeta } from '@grafana/data';\nimport { VariableWithMultiSupport } from 'app/features/variables/types';\nimport { TemplateSrv } from '@grafana/runtime';\nimport { ShowConfirmModalEvent } from 'app/types/events';\n\nconst defaultQuery = `SELECT\n  $__time(time_column),\n  value1\nFROM\n  metric_table\nWHERE\n  $__timeFilter(time_column)\n`;\n\nexport class PostgresQueryCtrl extends QueryCtrl {\n  static templateUrl = 'partials/query.editor.html';\n\n  formats: any[];\n  queryModel: PostgresQueryModel;\n  metaBuilder: PostgresMetaQuery;\n  lastQueryMeta?: QueryResultMeta;\n  lastQueryError?: string;\n  showHelp = false;\n  tableSegment: any;\n  whereAdd: any;\n  timeColumnSegment: any;\n  metricColumnSegment: any;\n  selectMenu: any[] = [];\n  selectParts: SqlPart[][] = [[]];\n  groupParts: SqlPart[] = [];\n  whereParts: SqlPart[] = [];\n  groupAdd: any;\n\n  /** @ngInject */\n  constructor(\n    $scope: any,\n    $injector: auto.IInjectorService,\n    private templateSrv: TemplateSrv,\n    private uiSegmentSrv: any\n  ) {\n    super($scope, $injector);\n    this.target = this.target;\n    this.queryModel = new PostgresQueryModel(this.target, templateSrv, this.panel.scopedVars);\n    this.metaBuilder = new PostgresMetaQuery(this.target, this.queryModel);\n    this.updateProjection();\n\n    this.formats = [\n      { text: 'Time series', value: 'time_series' },\n      { text: 'Table', value: 'table' },\n    ];\n\n    if (!this.target.rawSql) {\n      // special handling when in table panel\n      if (this.panelCtrl.panel.type === 'table') {\n        this.target.format = 'table';\n        this.target.rawSql = 'SELECT 1';\n        this.target.rawQuery = true;\n      } else {\n        this.target.rawSql = defaultQuery;\n        this.datasource.metricFindQuery(this.metaBuilder.findMetricTable()).then((result: any) => {\n          if (result.length > 0) {\n            this.target.table = result[0].text;\n            let segment = this.uiSegmentSrv.newSegment(this.target.table);\n            this.tableSegment.html = segment.html;\n            this.tableSegment.value = segment.value;\n\n            this.target.timeColumn = result[1].text;\n            segment = this.uiSegmentSrv.newSegment(this.target.timeColumn);\n            this.timeColumnSegment.html = segment.html;\n            this.timeColumnSegment.value = segment.value;\n\n            this.target.timeColumnType = 'timestamp';\n            this.target.select = [[{ type: 'column', params: [result[2].text] }]];\n            this.updateProjection();\n            this.updateRawSqlAndRefresh();\n          }\n        });\n      }\n    }\n\n    if (!this.target.table) {\n      this.tableSegment = uiSegmentSrv.newSegment({ value: 'select table', fake: true });\n    } else {\n      this.tableSegment = uiSegmentSrv.newSegment(this.target.table);\n    }\n\n    this.timeColumnSegment = uiSegmentSrv.newSegment(this.target.timeColumn);\n    this.metricColumnSegment = uiSegmentSrv.newSegment(this.target.metricColumn);\n\n    this.buildSelectMenu();\n    this.whereAdd = this.uiSegmentSrv.newPlusButton();\n    this.groupAdd = this.uiSegmentSrv.newPlusButton();\n\n    this.panelCtrl.events.on(PanelEvents.dataReceived, this.onDataReceived.bind(this), $scope);\n    this.panelCtrl.events.on(PanelEvents.dataError, this.onDataError.bind(this), $scope);\n  }\n\n  updateRawSqlAndRefresh() {\n    if (!this.target.rawQuery) {\n      this.target.rawSql = this.queryModel.buildQuery();\n    }\n\n    this.panelCtrl.refresh();\n  }\n\n  updateProjection() {\n    this.selectParts = map(this.target.select, (parts: any) => {\n      return map(parts, sqlPart.create).filter((n) => n);\n    });\n    this.whereParts = map(this.target.where, sqlPart.create).filter((n) => n);\n    this.groupParts = map(this.target.group, sqlPart.create).filter((n) => n);\n  }\n\n  updatePersistedParts() {\n    this.target.select = map(this.selectParts, (selectParts) => {\n      return map(selectParts, (part: any) => {\n        return { type: part.def.type, datatype: part.datatype, params: part.params };\n      });\n    });\n    this.target.where = map(this.whereParts, (part: any) => {\n      return { type: part.def.type, datatype: part.datatype, name: part.name, params: part.params };\n    });\n    this.target.group = map(this.groupParts, (part: any) => {\n      return { type: part.def.type, datatype: part.datatype, params: part.params };\n    });\n  }\n\n  buildSelectMenu() {\n    this.selectMenu = [];\n    const aggregates = {\n      text: 'Aggregate Functions',\n      value: 'aggregate',\n      submenu: [\n        { text: 'Average', value: 'avg' },\n        { text: 'Count', value: 'count' },\n        { text: 'Maximum', value: 'max' },\n        { text: 'Minimum', value: 'min' },\n        { text: 'Sum', value: 'sum' },\n        { text: 'Standard deviation', value: 'stddev' },\n        { text: 'Variance', value: 'variance' },\n      ],\n    };\n\n    // first and last aggregate are timescaledb specific\n    if (this.datasource.jsonData.timescaledb === true) {\n      aggregates.submenu.push({ text: 'First', value: 'first' });\n      aggregates.submenu.push({ text: 'Last', value: 'last' });\n    }\n\n    this.selectMenu.push(aggregates);\n\n    // ordered set aggregates require postgres 9.4+\n    if (this.datasource.jsonData.postgresVersion >= 904) {\n      const aggregates2 = {\n        text: 'Ordered-Set Aggregate Functions',\n        value: 'percentile',\n        submenu: [\n          { text: 'Percentile (continuous)', value: 'percentile_cont' },\n          { text: 'Percentile (discrete)', value: 'percentile_disc' },\n        ],\n      };\n      this.selectMenu.push(aggregates2);\n    }\n\n    const windows = {\n      text: 'Window Functions',\n      value: 'window',\n      submenu: [\n        { text: 'Delta', value: 'delta' },\n        { text: 'Increase', value: 'increase' },\n        { text: 'Rate', value: 'rate' },\n        { text: 'Sum', value: 'sum' },\n        { text: 'Moving Average', value: 'avg', type: 'moving_window' },\n      ],\n    };\n    this.selectMenu.push(windows);\n\n    this.selectMenu.push({ text: 'Alias', value: 'alias' });\n    this.selectMenu.push({ text: 'Column', value: 'column' });\n  }\n\n  toggleEditorMode() {\n    if (this.target.rawQuery) {\n      appEvents.publish(\n        new ShowConfirmModalEvent({\n          title: 'Warning',\n          text2: 'Switching to query builder may overwrite your raw SQL.',\n          icon: 'exclamation-triangle',\n          yesText: 'Switch',\n          onConfirm: () => {\n            // This could be called from React, so wrap in $evalAsync.\n            // Will then either run as part of the current digest cycle or trigger a new one.\n            this.$scope.$evalAsync(() => {\n              this.target.rawQuery = !this.target.rawQuery;\n            });\n          },\n        })\n      );\n    } else {\n      // This could be called from React, so wrap in $evalAsync.\n      // Will then either run as part of the current digest cycle or trigger a new one.\n      this.$scope.$evalAsync(() => {\n        this.target.rawQuery = !this.target.rawQuery;\n      });\n    }\n  }\n\n  resetPlusButton(button: { html: any; value: any; type: any; fake: any }) {\n    const plusButton = this.uiSegmentSrv.newPlusButton();\n    button.html = plusButton.html;\n    button.value = plusButton.value;\n    button.type = plusButton.type;\n    button.fake = plusButton.fake;\n  }\n\n  getTableSegments() {\n    return this.datasource\n      .metricFindQuery(this.metaBuilder.buildTableQuery())\n      .then(this.transformToSegments({}))\n      .catch(this.handleQueryError.bind(this));\n  }\n\n  tableChanged() {\n    this.target.table = this.tableSegment.value;\n    this.target.where = [];\n    this.target.group = [];\n    this.updateProjection();\n\n    const segment = this.uiSegmentSrv.newSegment('none');\n    this.metricColumnSegment.html = segment.html;\n    this.metricColumnSegment.value = segment.value;\n    this.target.metricColumn = 'none';\n\n    const task1 = this.datasource.metricFindQuery(this.metaBuilder.buildColumnQuery('time')).then((result: any) => {\n      // check if time column is still valid\n      if (result.length > 0 && !find(result, (r: any) => r.text === this.target.timeColumn)) {\n        const segment = this.uiSegmentSrv.newSegment(result[0].text);\n        this.timeColumnSegment.html = segment.html;\n        this.timeColumnSegment.value = segment.value;\n      }\n      return this.timeColumnChanged(false);\n    });\n    const task2 = this.datasource.metricFindQuery(this.metaBuilder.buildColumnQuery('value')).then((result: any) => {\n      if (result.length > 0) {\n        this.target.select = [[{ type: 'column', params: [result[0].text] }]];\n        this.updateProjection();\n      }\n    });\n\n    Promise.all([task1, task2]).then(() => {\n      this.updateRawSqlAndRefresh();\n    });\n  }\n\n  getTimeColumnSegments() {\n    return this.datasource\n      .metricFindQuery(this.metaBuilder.buildColumnQuery('time'))\n      .then(this.transformToSegments({}))\n      .catch(this.handleQueryError.bind(this));\n  }\n\n  timeColumnChanged(refresh?: boolean) {\n    this.target.timeColumn = this.timeColumnSegment.value;\n    return this.datasource\n      .metricFindQuery(this.metaBuilder.buildDatatypeQuery(this.target.timeColumn))\n      .then((result: any) => {\n        if (result.length === 1) {\n          if (this.target.timeColumnType !== result[0].text) {\n            this.target.timeColumnType = result[0].text;\n          }\n          let partModel;\n          if (this.queryModel.hasUnixEpochTimecolumn()) {\n            partModel = sqlPart.create({ type: 'macro', name: '$__unixEpochFilter', params: [] });\n          } else {\n            partModel = sqlPart.create({ type: 'macro', name: '$__timeFilter', params: [] });\n          }\n\n          if (this.whereParts.length >= 1 && this.whereParts[0].def.type === 'macro') {\n            // replace current macro\n            this.whereParts[0] = partModel;\n          } else {\n            this.whereParts.splice(0, 0, partModel);\n          }\n        }\n\n        this.updatePersistedParts();\n        if (refresh !== false) {\n          this.updateRawSqlAndRefresh();\n        }\n      });\n  }\n\n  getMetricColumnSegments() {\n    return this.datasource\n      .metricFindQuery(this.metaBuilder.buildColumnQuery('metric'))\n      .then(this.transformToSegments({ addNone: true }))\n      .catch(this.handleQueryError.bind(this));\n  }\n\n  metricColumnChanged() {\n    this.target.metricColumn = this.metricColumnSegment.value;\n    this.updateRawSqlAndRefresh();\n  }\n\n  onDataReceived(dataList: any) {\n    this.lastQueryError = undefined;\n    this.lastQueryMeta = dataList[0]?.meta;\n  }\n\n  onDataError(err: any) {\n    if (err.data && err.data.results) {\n      const queryRes = err.data.results[this.target.refId];\n      if (queryRes) {\n        this.lastQueryError = queryRes.error;\n      }\n    }\n  }\n\n  transformToSegments(config: { addNone?: any; addTemplateVars?: any; templateQuoter?: any }) {\n    return (results: any) => {\n      const segments = map(results, (segment) => {\n        return this.uiSegmentSrv.newSegment({\n          value: segment.text,\n          expandable: segment.expandable,\n        });\n      });\n\n      if (config.addTemplateVars) {\n        for (const variable of this.templateSrv.getVariables()) {\n          let value;\n          value = '$' + variable.name;\n          if (config.templateQuoter && ((variable as unknown) as VariableWithMultiSupport).multi === false) {\n            value = config.templateQuoter(value);\n          }\n\n          segments.unshift(\n            this.uiSegmentSrv.newSegment({\n              type: 'template',\n              value: value,\n              expandable: true,\n            })\n          );\n        }\n      }\n\n      if (config.addNone) {\n        segments.unshift(this.uiSegmentSrv.newSegment({ type: 'template', value: 'none', expandable: true }));\n      }\n\n      return segments;\n    };\n  }\n\n  findAggregateIndex(selectParts: any) {\n    return findIndex(selectParts, (p: any) => p.def.type === 'aggregate' || p.def.type === 'percentile');\n  }\n\n  findWindowIndex(selectParts: any) {\n    return findIndex(selectParts, (p: any) => p.def.type === 'window' || p.def.type === 'moving_window');\n  }\n\n  addSelectPart(selectParts: any[], item: { value: any }, subItem: { type: any; value: any }) {\n    let partType = item.value;\n    if (subItem && subItem.type) {\n      partType = subItem.type;\n    }\n    let partModel = sqlPart.create({ type: partType });\n    if (subItem) {\n      partModel.params[0] = subItem.value;\n    }\n    let addAlias = false;\n\n    switch (partType) {\n      case 'column':\n        const parts = map(selectParts, (part: any) => {\n          return sqlPart.create({ type: part.def.type, params: clone(part.params) });\n        });\n        this.selectParts.push(parts);\n        break;\n      case 'percentile':\n      case 'aggregate':\n        // add group by if no group by yet\n        if (this.target.group.length === 0) {\n          this.addGroup('time', '$__interval');\n        }\n        const aggIndex = this.findAggregateIndex(selectParts);\n        if (aggIndex !== -1) {\n          // replace current aggregation\n          selectParts[aggIndex] = partModel;\n        } else {\n          selectParts.splice(1, 0, partModel);\n        }\n        if (!find(selectParts, (p: any) => p.def.type === 'alias')) {\n          addAlias = true;\n        }\n        break;\n      case 'moving_window':\n      case 'window':\n        const windowIndex = this.findWindowIndex(selectParts);\n        if (windowIndex !== -1) {\n          // replace current window function\n          selectParts[windowIndex] = partModel;\n        } else {\n          const aggIndex = this.findAggregateIndex(selectParts);\n          if (aggIndex !== -1) {\n            selectParts.splice(aggIndex + 1, 0, partModel);\n          } else {\n            selectParts.splice(1, 0, partModel);\n          }\n        }\n        if (!find(selectParts, (p: any) => p.def.type === 'alias')) {\n          addAlias = true;\n        }\n        break;\n      case 'alias':\n        addAlias = true;\n        break;\n    }\n\n    if (addAlias) {\n      // set initial alias name to column name\n      partModel = sqlPart.create({ type: 'alias', params: [selectParts[0].params[0].replace(/\"/g, '')] });\n      if (selectParts[selectParts.length - 1].def.type === 'alias') {\n        selectParts[selectParts.length - 1] = partModel;\n      } else {\n        selectParts.push(partModel);\n      }\n    }\n\n    this.updatePersistedParts();\n    this.updateRawSqlAndRefresh();\n  }\n\n  removeSelectPart(selectParts: any, part: { def: { type: string } }) {\n    if (part.def.type === 'column') {\n      // remove all parts of column unless its last column\n      if (this.selectParts.length > 1) {\n        const modelsIndex = indexOf(this.selectParts, selectParts);\n        this.selectParts.splice(modelsIndex, 1);\n      }\n    } else {\n      const partIndex = indexOf(selectParts, part);\n      selectParts.splice(partIndex, 1);\n    }\n\n    this.updatePersistedParts();\n  }\n\n  handleSelectPartEvent(selectParts: any, part: { def: any }, evt: { name: any }) {\n    switch (evt.name) {\n      case 'get-param-options': {\n        switch (part.def.type) {\n          case 'aggregate':\n            return this.datasource\n              .metricFindQuery(this.metaBuilder.buildAggregateQuery())\n              .then(this.transformToSegments({}))\n              .catch(this.handleQueryError.bind(this));\n          case 'column':\n            return this.datasource\n              .metricFindQuery(this.metaBuilder.buildColumnQuery('value'))\n              .then(this.transformToSegments({}))\n              .catch(this.handleQueryError.bind(this));\n        }\n      }\n      case 'part-param-changed': {\n        this.updatePersistedParts();\n        this.updateRawSqlAndRefresh();\n        break;\n      }\n      case 'action': {\n        this.removeSelectPart(selectParts, part);\n        this.updateRawSqlAndRefresh();\n        break;\n      }\n      case 'get-part-actions': {\n        return Promise.resolve([{ text: 'Remove', value: 'remove-part' }]);\n      }\n    }\n  }\n\n  handleGroupPartEvent(part: any, index: any, evt: { name: any }) {\n    switch (evt.name) {\n      case 'get-param-options': {\n        return this.datasource\n          .metricFindQuery(this.metaBuilder.buildColumnQuery())\n          .then(this.transformToSegments({}))\n          .catch(this.handleQueryError.bind(this));\n      }\n      case 'part-param-changed': {\n        this.updatePersistedParts();\n        this.updateRawSqlAndRefresh();\n        break;\n      }\n      case 'action': {\n        this.removeGroup(part, index);\n        this.updateRawSqlAndRefresh();\n        break;\n      }\n      case 'get-part-actions': {\n        return Promise.resolve([{ text: 'Remove', value: 'remove-part' }]);\n      }\n    }\n  }\n\n  addGroup(partType: string, value: string) {\n    let params = [value];\n    if (partType === 'time') {\n      params = ['$__interval', 'none'];\n    }\n    const partModel = sqlPart.create({ type: partType, params: params });\n\n    if (partType === 'time') {\n      // put timeGroup at start\n      this.groupParts.splice(0, 0, partModel);\n    } else {\n      this.groupParts.push(partModel);\n    }\n\n    // add aggregates when adding group by\n    for (const selectParts of this.selectParts) {\n      if (!selectParts.some((part) => part.def.type === 'aggregate')) {\n        const aggregate = sqlPart.create({ type: 'aggregate', params: ['avg'] });\n        selectParts.splice(1, 0, aggregate);\n        if (!selectParts.some((part) => part.def.type === 'alias')) {\n          const alias = sqlPart.create({ type: 'alias', params: [selectParts[0].part.params[0]] });\n          selectParts.push(alias);\n        }\n      }\n    }\n\n    this.updatePersistedParts();\n  }\n\n  removeGroup(part: { def: { type: string } }, index: number) {\n    if (part.def.type === 'time') {\n      // remove aggregations\n      this.selectParts = map(this.selectParts, (s: any) => {\n        return filter(s, (part: any) => {\n          if (part.def.type === 'aggregate' || part.def.type === 'percentile') {\n            return false;\n          }\n          return true;\n        });\n      });\n    }\n\n    this.groupParts.splice(index, 1);\n    this.updatePersistedParts();\n  }\n\n  handleWherePartEvent(whereParts: any, part: any, evt: any, index: any) {\n    switch (evt.name) {\n      case 'get-param-options': {\n        switch (evt.param.name) {\n          case 'left':\n            return this.datasource\n              .metricFindQuery(this.metaBuilder.buildColumnQuery())\n              .then(this.transformToSegments({}))\n              .catch(this.handleQueryError.bind(this));\n          case 'right':\n            if (['int4', 'int8', 'float4', 'float8', 'timestamp', 'timestamptz'].indexOf(part.datatype) > -1) {\n              // don't do value lookups for numerical fields\n              return Promise.resolve([]);\n            } else {\n              return this.datasource\n                .metricFindQuery(this.metaBuilder.buildValueQuery(part.params[0]))\n                .then(\n                  this.transformToSegments({\n                    addTemplateVars: true,\n                    templateQuoter: (v: string) => {\n                      return this.queryModel.quoteLiteral(v);\n                    },\n                  })\n                )\n                .catch(this.handleQueryError.bind(this));\n            }\n          case 'op':\n            return Promise.resolve(this.uiSegmentSrv.newOperators(this.metaBuilder.getOperators(part.datatype)));\n          default:\n            return Promise.resolve([]);\n        }\n      }\n      case 'part-param-changed': {\n        this.updatePersistedParts();\n        this.datasource.metricFindQuery(this.metaBuilder.buildDatatypeQuery(part.params[0])).then((d: any) => {\n          if (d.length === 1) {\n            part.datatype = d[0].text;\n          }\n        });\n        this.updateRawSqlAndRefresh();\n        break;\n      }\n      case 'action': {\n        // remove element\n        whereParts.splice(index, 1);\n        this.updatePersistedParts();\n        this.updateRawSqlAndRefresh();\n        break;\n      }\n      case 'get-part-actions': {\n        return Promise.resolve([{ text: 'Remove', value: 'remove-part' }]);\n      }\n    }\n  }\n\n  getWhereOptions() {\n    const options = [];\n    if (this.queryModel.hasUnixEpochTimecolumn()) {\n      options.push(this.uiSegmentSrv.newSegment({ type: 'macro', value: '$__unixEpochFilter' }));\n    } else {\n      options.push(this.uiSegmentSrv.newSegment({ type: 'macro', value: '$__timeFilter' }));\n    }\n    options.push(this.uiSegmentSrv.newSegment({ type: 'expression', value: 'Expression' }));\n    return Promise.resolve(options);\n  }\n\n  addWhereAction(part: any, index: any) {\n    switch (this.whereAdd.type) {\n      case 'macro': {\n        const partModel = sqlPart.create({ type: 'macro', name: this.whereAdd.value, params: [] });\n        if (this.whereParts.length >= 1 && this.whereParts[0].def.type === 'macro') {\n          // replace current macro\n          this.whereParts[0] = partModel;\n        } else {\n          this.whereParts.splice(0, 0, partModel);\n        }\n        break;\n      }\n      default: {\n        this.whereParts.push(sqlPart.create({ type: 'expression', params: ['value', '=', 'value'] }));\n      }\n    }\n\n    this.updatePersistedParts();\n    this.resetPlusButton(this.whereAdd);\n    this.updateRawSqlAndRefresh();\n  }\n\n  getGroupOptions() {\n    return this.datasource\n      .metricFindQuery(this.metaBuilder.buildColumnQuery('group'))\n      .then((tags: any) => {\n        const options = [];\n        if (!this.queryModel.hasTimeGroup()) {\n          options.push(this.uiSegmentSrv.newSegment({ type: 'time', value: 'time($__interval,none)' }));\n        }\n        for (const tag of tags) {\n          options.push(this.uiSegmentSrv.newSegment({ type: 'column', value: tag.text }));\n        }\n        return options;\n      })\n      .catch(this.handleQueryError.bind(this));\n  }\n\n  addGroupAction() {\n    switch (this.groupAdd.value) {\n      default: {\n        this.addGroup(this.groupAdd.type, this.groupAdd.value);\n      }\n    }\n\n    this.resetPlusButton(this.groupAdd);\n    this.updateRawSqlAndRefresh();\n  }\n\n  handleQueryError(err: any): any[] {\n    this.error = err.message || 'Failed to issue metric query';\n    return [];\n  }\n}\n","import { find } from 'lodash';\nimport {\n  createChangeHandler,\n  createResetHandler,\n  PasswordFieldEnum,\n} from '../../../features/datasources/utils/passwordHandlers';\nimport DatasourceSrv from 'app/features/plugins/datasource_srv';\n\nexport class PostgresConfigCtrl {\n  static templateUrl = 'partials/config.html';\n\n  // Set through angular bindings\n  declare current: any;\n\n  datasourceSrv: any;\n  showTimescaleDBHelp: boolean;\n  onPasswordReset: ReturnType<typeof createResetHandler>;\n  onPasswordChange: ReturnType<typeof createChangeHandler>;\n\n  /** @ngInject */\n  constructor($scope: any, datasourceSrv: DatasourceSrv) {\n    this.current = $scope.ctrl.current;\n    this.datasourceSrv = datasourceSrv;\n    this.current.jsonData.sslmode = this.current.jsonData.sslmode || 'verify-full';\n    this.current.jsonData.tlsConfigurationMethod = this.current.jsonData.tlsConfigurationMethod || 'file-path';\n    this.current.jsonData.postgresVersion = this.current.jsonData.postgresVersion || 903;\n    this.showTimescaleDBHelp = false;\n    this.autoDetectFeatures();\n    this.onPasswordReset = createResetHandler(this, PasswordFieldEnum.Password);\n    this.onPasswordChange = createChangeHandler(this, PasswordFieldEnum.Password);\n    this.tlsModeMapping();\n  }\n\n  autoDetectFeatures() {\n    if (!this.current.id) {\n      return;\n    }\n\n    this.datasourceSrv.loadDatasource(this.current.name).then((ds: any) => {\n      return ds.getVersion().then((version: any) => {\n        version = Number(version[0].text);\n\n        // timescaledb is only available for 9.6+\n        if (version >= 906) {\n          ds.getTimescaleDBVersion().then((version: any) => {\n            if (version.length === 1) {\n              this.current.jsonData.timescaledb = true;\n            }\n          });\n        }\n\n        const major = Math.trunc(version / 100);\n        const minor = version % 100;\n        let name = String(major);\n        if (version < 1000) {\n          name = String(major) + '.' + String(minor);\n        }\n        if (!find(this.postgresVersions, (p: any) => p.value === version)) {\n          this.postgresVersions.push({ name: name, value: version });\n        }\n        this.current.jsonData.postgresVersion = version;\n      });\n    });\n  }\n\n  toggleTimescaleDBHelp() {\n    this.showTimescaleDBHelp = !this.showTimescaleDBHelp;\n  }\n\n  tlsModeMapping() {\n    if (this.current.jsonData.sslmode === 'disable') {\n      this.current.jsonData.tlsAuth = false;\n      this.current.jsonData.tlsAuthWithCACert = false;\n      this.current.jsonData.tlsSkipVerify = true;\n    } else {\n      this.current.jsonData.tlsAuth = true;\n      this.current.jsonData.tlsAuthWithCACert = true;\n      this.current.jsonData.tlsSkipVerify = false;\n    }\n  }\n\n  // the value portion is derived from postgres server_version_num/100\n  postgresVersions = [\n    { name: '9.3', value: 903 },\n    { name: '9.4', value: 904 },\n    { name: '9.5', value: 905 },\n    { name: '9.6', value: 906 },\n    { name: '10', value: 1000 },\n    { name: '11', value: 1100 },\n    { name: '12', value: 1200 },\n  ];\n}\n","import { PostgresDatasource } from './datasource';\nimport { PostgresQueryCtrl } from './query_ctrl';\nimport { PostgresConfigCtrl } from './config_ctrl';\nimport { PostgresQuery } from './types';\nimport { DataSourcePlugin } from '@grafana/data';\n\nconst defaultQuery = `SELECT\n  extract(epoch from time_column) AS time,\n  text_column as text,\n  tags_column as tags\nFROM\n  metric_table\nWHERE\n  $__timeFilter(time_column)\n`;\n\nclass PostgresAnnotationsQueryCtrl {\n  static templateUrl = 'partials/annotations.editor.html';\n\n  declare annotation: any;\n\n  /** @ngInject */\n  constructor($scope: any) {\n    this.annotation = $scope.ctrl.annotation;\n    this.annotation.rawQuery = this.annotation.rawQuery || defaultQuery;\n  }\n}\n\nexport const plugin = new DataSourcePlugin<PostgresDatasource, PostgresQuery>(PostgresDatasource)\n  .setQueryCtrl(PostgresQueryCtrl)\n  .setConfigCtrl(PostgresConfigCtrl)\n  .setAnnotationQueryCtrl(PostgresAnnotationsQueryCtrl);\n","/**\n * Set of handlers for secure password field in Angular components. They handle backward compatibility with\n * passwords stored in plain text fields.\n */\n\nimport { SyntheticEvent } from 'react';\n\nexport enum PasswordFieldEnum {\n  Password = 'password',\n  BasicAuthPassword = 'basicAuthPassword',\n}\n\n/**\n * Basic shape for settings controllers in at the moment mostly angular data source plugins.\n */\nexport type Ctrl = {\n  current: {\n    secureJsonFields: {\n      [key: string]: boolean;\n    };\n    secureJsonData?: {\n      [key: string]: string;\n    };\n    password?: string;\n    basicAuthPassword?: string;\n  };\n};\n\nexport const createResetHandler = (ctrl: Ctrl, field: PasswordFieldEnum) => (\n  event: SyntheticEvent<HTMLInputElement>\n) => {\n  event.preventDefault();\n  // Reset also normal plain text password to remove it and only save it in secureJsonData.\n  ctrl.current[field] = undefined;\n  ctrl.current.secureJsonFields[field] = false;\n  ctrl.current.secureJsonData = ctrl.current.secureJsonData || {};\n  ctrl.current.secureJsonData[field] = '';\n};\n\nexport const createChangeHandler = (ctrl: any, field: PasswordFieldEnum) => (\n  event: SyntheticEvent<HTMLInputElement>\n) => {\n  ctrl.current.secureJsonData = ctrl.current.secureJsonData || {};\n  ctrl.current.secureJsonData[field] = event.currentTarget.value;\n};\n","import { clone } from 'lodash';\n\nexport class SqlPartDef {\n  type: string;\n  style: string;\n  label: string;\n  params: any[];\n  defaultParams: any[];\n  wrapOpen: string;\n  wrapClose: string;\n  separator: string;\n\n  constructor(options: any) {\n    this.type = options.type;\n    if (options.label) {\n      this.label = options.label;\n    } else {\n      this.label = this.type[0].toUpperCase() + this.type.substring(1) + ':';\n    }\n    this.style = options.style;\n    if (this.style === 'function') {\n      this.wrapOpen = '(';\n      this.wrapClose = ')';\n      this.separator = ', ';\n    } else {\n      this.wrapOpen = ' ';\n      this.wrapClose = ' ';\n      this.separator = ' ';\n    }\n    this.params = options.params;\n    this.defaultParams = options.defaultParams;\n  }\n}\n\nexport class SqlPart {\n  part: any;\n  def: SqlPartDef;\n  params: any[];\n  label: string;\n  name: string;\n  datatype: string;\n\n  constructor(part: any, def: any) {\n    this.part = part;\n    this.def = def;\n    if (!this.def) {\n      throw { message: 'Could not find sql part ' + part.type };\n    }\n\n    this.datatype = part.datatype;\n\n    if (part.name) {\n      this.name = part.name;\n      this.label = def.label + ' ' + part.name;\n    } else {\n      this.name = '';\n      this.label = def.label;\n    }\n\n    part.params = part.params || clone(this.def.defaultParams);\n    this.params = part.params;\n  }\n\n  updateParam(strValue: string, index: number) {\n    // handle optional parameters\n    if (strValue === '' && this.def.params[index].optional) {\n      this.params.splice(index, 1);\n    } else {\n      this.params[index] = strValue;\n    }\n\n    this.part.params = this.params;\n  }\n}\n"],"sourceRoot":""}
{"version":3,"sources":["webpack:///./public/app/features/admin/AdminOrgsTable.tsx","webpack:///./public/app/features/admin/AdminListOrgsPage.tsx"],"names":["AdminOrgsTable","orgs","onDelete","deleteOrg","setDeleteOrg","useState","className","style","width","map","org","href","id","name","variant","size","icon","onClick","isOpen","title","body","confirmText","onDismiss","undefined","onConfirm","AdminListOrgsPages","navIndex","useSelector","state","navModel","getNavModel","fetchOrgs","useAsyncFn","async","getBackendSrv","get","getOrgs","useEffect","Page","Contents","loading","error","value","orgId","delete","then"],"mappings":"kMASO,MAAMA,EAA4B,EAAGC,OAAMC,eAChD,MAAOC,EAAWC,GAAgBC,qBAClC,OACE,wBAAOC,UAAU,+CAAjB,UACE,gCACE,qCACE,qCADF,MAEE,uCACA,oBAAIC,MAAO,CAAEC,MAAO,aAGxB,gCACGP,EAAKQ,IAAKC,GACT,+BACE,oBAAIJ,UAAU,UAAd,SACE,mBAAGK,KAAO,mBAAkBD,EAAIE,GAAhC,SAAuCF,EAAIE,OAE7C,oBAAIN,UAAU,UAAd,SACE,mBAAGK,KAAO,mBAAkBD,EAAIE,GAAhC,SAAuCF,EAAIG,SAE7C,oBAAIP,UAAU,aAAd,SACE,cAAC,SAAD,CAAQQ,QAAQ,cAAcC,KAAK,KAAKC,KAAK,QAAQC,QAAS,IAAMb,EAAaM,SAR3E,GAAEA,EAAIE,MAAMF,EAAIG,WAa7BV,GACC,cAAC,eAAD,CACEe,QAAM,EACNF,KAAK,YACLG,MAAM,SACNC,KACE,oEACyCjB,EAAUU,KADnD,WAEE,wBAFF,UAES,8FAGXQ,YAAY,SACZC,UAAW,IAAMlB,OAAamB,GAC9BC,UAAW,KACTtB,EAASC,EAAUS,IACnBR,OAAamB,U,8ECxCzB,MAQaE,EAAyB,KACpC,MAAMC,EAAWC,sBAAaC,GAAsBA,EAAMF,UACpDG,EAAWC,YAAYJ,EAAU,gBAChCE,EAAOG,GAAaC,IAAWC,cAPxBA,gBACDC,0BAAgBC,IAAI,aAMuBC,GAAW,IAMnE,OAJAC,oBAAU,KACRN,KACC,CAACA,IAGF,cAACO,EAAA,EAAD,CAAMT,SAAUA,EAAhB,SACE,cAACS,EAAA,EAAKC,SAAN,UACE,2CACE,sBAAKjC,UAAU,kBAAf,UACE,qBAAKA,UAAU,4BACf,cAAC,aAAD,CAAYU,KAAK,OAAOL,KAAK,UAA7B,yBAIDiB,EAAMY,SAAW,yBACjBZ,EAAMa,MACNb,EAAMc,OACL,cAAC1C,EAAD,CACEC,KAAM2B,EAAMc,MACZxC,SAAWyC,IAhCPV,gBACHC,0BAAgBU,OAAO,aAAeD,GAgCrCxC,CAAUwC,GAAOE,KAAK,IAAMd,gBAU7BN","file":"AdminListOrgsPage.807b3f41627421e0a149.js","sourcesContent":["import React, { FC, useState } from 'react';\nimport { Organization } from 'app/types';\nimport { Button, ConfirmModal } from '@grafana/ui';\n\ninterface Props {\n  orgs: Organization[];\n  onDelete: (orgId: number) => void;\n}\n\nexport const AdminOrgsTable: FC<Props> = ({ orgs, onDelete }) => {\n  const [deleteOrg, setDeleteOrg] = useState<Organization>();\n  return (\n    <table className=\"filter-table form-inline filter-table--hover\">\n      <thead>\n        <tr>\n          <th>ID</th>\n          <th>Name</th>\n          <th style={{ width: '1%' }}></th>\n        </tr>\n      </thead>\n      <tbody>\n        {orgs.map((org) => (\n          <tr key={`${org.id}-${org.name}`}>\n            <td className=\"link-td\">\n              <a href={`admin/orgs/edit/${org.id}`}>{org.id}</a>\n            </td>\n            <td className=\"link-td\">\n              <a href={`admin/orgs/edit/${org.id}`}>{org.name}</a>\n            </td>\n            <td className=\"text-right\">\n              <Button variant=\"destructive\" size=\"sm\" icon=\"times\" onClick={() => setDeleteOrg(org)} />\n            </td>\n          </tr>\n        ))}\n      </tbody>\n      {deleteOrg && (\n        <ConfirmModal\n          isOpen\n          icon=\"trash-alt\"\n          title=\"Delete\"\n          body={\n            <div>\n              Are you sure you want to delete &apos;{deleteOrg.name}&apos;?\n              <br /> <small>All dashboards for this organization will be removed!</small>\n            </div>\n          }\n          confirmText=\"Delete\"\n          onDismiss={() => setDeleteOrg(undefined)}\n          onConfirm={() => {\n            onDelete(deleteOrg.id);\n            setDeleteOrg(undefined);\n          }}\n        />\n      )}\n    </table>\n  );\n};\n","import React, { FC, useEffect } from 'react';\nimport { getNavModel } from 'app/core/selectors/navModel';\nimport Page from 'app/core/components/Page/Page';\nimport { useSelector } from 'react-redux';\nimport { StoreState } from 'app/types/store';\nimport { LinkButton } from '@grafana/ui';\nimport { getBackendSrv } from '@grafana/runtime';\nimport { AdminOrgsTable } from './AdminOrgsTable';\nimport useAsyncFn from 'react-use/lib/useAsyncFn';\n\nconst deleteOrg = async (orgId: number) => {\n  return await getBackendSrv().delete('/api/orgs/' + orgId);\n};\n\nconst getOrgs = async () => {\n  return await getBackendSrv().get('/api/orgs');\n};\n\nexport const AdminListOrgsPages: FC = () => {\n  const navIndex = useSelector((state: StoreState) => state.navIndex);\n  const navModel = getNavModel(navIndex, 'global-orgs');\n  const [state, fetchOrgs] = useAsyncFn(async () => await getOrgs(), []);\n\n  useEffect(() => {\n    fetchOrgs();\n  }, [fetchOrgs]);\n\n  return (\n    <Page navModel={navModel}>\n      <Page.Contents>\n        <>\n          <div className=\"page-action-bar\">\n            <div className=\"page-action-bar__spacer\" />\n            <LinkButton icon=\"plus\" href=\"org/new\">\n              New org\n            </LinkButton>\n          </div>\n          {state.loading && 'Fetching organizations'}\n          {state.error}\n          {state.value && (\n            <AdminOrgsTable\n              orgs={state.value}\n              onDelete={(orgId) => {\n                deleteOrg(orgId).then(() => fetchOrgs());\n              }}\n            />\n          )}\n        </>\n      </Page.Contents>\n    </Page>\n  );\n};\n\nexport default AdminListOrgsPages;\n"],"sourceRoot":""}
{"version":3,"sources":["webpack:///./public/app/features/profile/api.ts","webpack:///./public/app/features/profile/state/actions.ts","webpack:///./public/app/features/profile/ChangePasswordForm.tsx","webpack:///./public/app/features/profile/ChangePasswordPage.tsx","webpack:///./node_modules/react-use/esm/useMount.js"],"names":["api","changePassword","async","payload","getBackendSrv","put","err","console","error","revokeUserSession","tokenId","post","authTokenId","loadUser","get","loadSessions","loadOrgs","loadTeams","setUserOrg","org","orgId","updateUserProfile","dispatch","setUpdating","updating","initUserProfilePage","initLoadTeams","teams","teamsLoaded","initLoadOrgs","orgs","orgsLoaded","initLoadSessions","sessions","sessionsLoaded","user","userLoaded","userSessionRevoked","changeUserOrg","window","location","href","config","appSubUrl","ChangePasswordForm","onChangePassword","isSaving","ldapEnabled","authProxyEnabled","disableLoginForm","authSource","authLabels","length","className","css","onSubmit","register","errors","getValues","label","invalid","oldPassword","message","id","autoComplete","required","newPassword","validate","confirm","v","confirmNew","old","variant","disabled","fill","mapDispatchToProps","connector","connect","state","userState","isUpdating","navModel","getNavModel","navIndex","ChangePasswordPage","useMount","Contents","isLoading","Boolean","hot","module","fn"],"mappings":"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","file":"95.807b3f41627421e0a149.js","sourcesContent":["import { getBackendSrv } from '@grafana/runtime';\n\nimport { ChangePasswordFields, ProfileUpdateFields } from './types';\nimport { Team, UserDTO, UserOrg, UserSession } from '../../types';\n\nasync function changePassword(payload: ChangePasswordFields): Promise<void> {\n  try {\n    await getBackendSrv().put('/api/user/password', payload);\n  } catch (err) {\n    console.error(err);\n  }\n}\n\nfunction loadUser(): Promise<UserDTO> {\n  return getBackendSrv().get('/api/user');\n}\n\nfunction loadTeams(): Promise<Team[]> {\n  return getBackendSrv().get('/api/user/teams');\n}\n\nfunction loadOrgs(): Promise<UserOrg[]> {\n  return getBackendSrv().get('/api/user/orgs');\n}\n\nfunction loadSessions(): Promise<UserSession[]> {\n  return getBackendSrv().get('/api/user/auth-tokens');\n}\n\nasync function revokeUserSession(tokenId: number): Promise<void> {\n  await getBackendSrv().post('/api/user/revoke-auth-token', {\n    authTokenId: tokenId,\n  });\n}\n\nasync function setUserOrg(org: UserOrg): Promise<void> {\n  await getBackendSrv().post('/api/user/using/' + org.orgId, {});\n}\n\nasync function updateUserProfile(payload: ProfileUpdateFields): Promise<void> {\n  try {\n    await getBackendSrv().put('/api/user', payload);\n  } catch (err) {\n    console.error(err);\n  }\n}\n\nexport const api = {\n  changePassword,\n  revokeUserSession,\n  loadUser,\n  loadSessions,\n  loadOrgs,\n  loadTeams,\n  setUserOrg,\n  updateUserProfile,\n};\n","import { config } from '@grafana/runtime';\n\nimport { ChangePasswordFields, ProfileUpdateFields } from '../types';\nimport { ThunkResult, UserOrg } from '../../../types';\nimport {\n  initLoadOrgs,\n  initLoadSessions,\n  initLoadTeams,\n  orgsLoaded,\n  sessionsLoaded,\n  setUpdating,\n  teamsLoaded,\n  userLoaded,\n  userSessionRevoked,\n} from './reducers';\nimport { api } from '../api';\n\nexport function changePassword(payload: ChangePasswordFields): ThunkResult<void> {\n  return async function (dispatch) {\n    dispatch(setUpdating({ updating: true }));\n    await api.changePassword(payload);\n    dispatch(setUpdating({ updating: false }));\n  };\n}\n\nexport function initUserProfilePage(): ThunkResult<void> {\n  return async function (dispatch) {\n    await dispatch(loadUser());\n    dispatch(loadTeams());\n    dispatch(loadOrgs());\n    dispatch(loadSessions());\n  };\n}\n\nexport function loadUser(): ThunkResult<void> {\n  return async function (dispatch) {\n    const user = await api.loadUser();\n    dispatch(userLoaded({ user }));\n  };\n}\n\nfunction loadTeams(): ThunkResult<void> {\n  return async function (dispatch) {\n    dispatch(initLoadTeams());\n    const teams = await api.loadTeams();\n    dispatch(teamsLoaded({ teams }));\n  };\n}\n\nfunction loadOrgs(): ThunkResult<void> {\n  return async function (dispatch) {\n    dispatch(initLoadOrgs());\n    const orgs = await api.loadOrgs();\n    dispatch(orgsLoaded({ orgs }));\n  };\n}\n\nfunction loadSessions(): ThunkResult<void> {\n  return async function (dispatch) {\n    dispatch(initLoadSessions());\n    const sessions = await api.loadSessions();\n    dispatch(sessionsLoaded({ sessions }));\n  };\n}\n\nexport function revokeUserSession(tokenId: number): ThunkResult<void> {\n  return async function (dispatch) {\n    dispatch(setUpdating({ updating: true }));\n    await api.revokeUserSession(tokenId);\n    dispatch(userSessionRevoked({ tokenId }));\n  };\n}\n\nexport function changeUserOrg(org: UserOrg): ThunkResult<void> {\n  return async function (dispatch) {\n    dispatch(setUpdating({ updating: true }));\n    await api.setUserOrg(org);\n    window.location.href = config.appSubUrl + '/profile';\n  };\n}\n\nexport function updateUserProfile(payload: ProfileUpdateFields): ThunkResult<void> {\n  return async function (dispatch) {\n    dispatch(setUpdating({ updating: true }));\n    await api.updateUserProfile(payload);\n    await dispatch(loadUser());\n    dispatch(setUpdating({ updating: false }));\n  };\n}\n","import React, { FC } from 'react';\nimport { css } from '@emotion/css';\nimport { Button, Field, Form, HorizontalGroup, LinkButton } from '@grafana/ui';\n\nimport config from 'app/core/config';\nimport { UserDTO } from 'app/types';\nimport { ChangePasswordFields } from './types';\nimport { PasswordField } from '../../core/components/PasswordField/PasswordField';\n\nexport interface Props {\n  user: UserDTO;\n  isSaving: boolean;\n  onChangePassword: (payload: ChangePasswordFields) => void;\n}\n\nexport const ChangePasswordForm: FC<Props> = ({ user, onChangePassword, isSaving }) => {\n  const { ldapEnabled, authProxyEnabled, disableLoginForm } = config;\n  const authSource = user.authLabels?.length && user.authLabels[0];\n\n  if (ldapEnabled || authProxyEnabled) {\n    return <p>You cannot change password when LDAP or auth proxy authentication is enabled.</p>;\n  }\n  if (authSource && disableLoginForm) {\n    return <p>Password cannot be changed here.</p>;\n  }\n\n  return (\n    <div\n      className={css`\n        max-width: 400px;\n      `}\n    >\n      <Form onSubmit={onChangePassword}>\n        {({ register, errors, getValues }) => {\n          return (\n            <>\n              <Field label=\"Old password\" invalid={!!errors.oldPassword} error={errors?.oldPassword?.message}>\n                <PasswordField\n                  id=\"current-password\"\n                  autoComplete=\"current-password\"\n                  {...register('oldPassword', { required: 'Old password is required' })}\n                />\n              </Field>\n\n              <Field label=\"New password\" invalid={!!errors.newPassword} error={errors?.newPassword?.message}>\n                <PasswordField\n                  id=\"new-password\"\n                  autoComplete=\"new-password\"\n                  {...register('newPassword', {\n                    required: 'New password is required',\n                    validate: {\n                      confirm: (v) => v === getValues().confirmNew || 'Passwords must match',\n                      old: (v) => v !== getValues().oldPassword || `New password can't be the same as the old one.`,\n                    },\n                  })}\n                />\n              </Field>\n\n              <Field label=\"Confirm password\" invalid={!!errors.confirmNew} error={errors?.confirmNew?.message}>\n                <PasswordField\n                  id=\"confirm-new-password\"\n                  autoComplete=\"new-password\"\n                  {...register('confirmNew', {\n                    required: 'New password confirmation is required',\n                    validate: (v) => v === getValues().newPassword || 'Passwords must match',\n                  })}\n                />\n              </Field>\n              <HorizontalGroup>\n                <Button variant=\"primary\" disabled={isSaving}>\n                  Change Password\n                </Button>\n                <LinkButton variant=\"secondary\" href={`${config.appSubUrl}/profile`} fill=\"outline\">\n                  Cancel\n                </LinkButton>\n              </HorizontalGroup>\n            </>\n          );\n        }}\n      </Form>\n    </div>\n  );\n};\n","import React from 'react';\nimport { useMount } from 'react-use';\nimport { hot } from 'react-hot-loader';\nimport { connect, ConnectedProps } from 'react-redux';\nimport { NavModel } from '@grafana/data';\n\nimport { StoreState } from 'app/types';\nimport { getNavModel } from 'app/core/selectors/navModel';\nimport Page from 'app/core/components/Page/Page';\nimport { ChangePasswordForm } from './ChangePasswordForm';\nimport { changePassword, loadUser } from './state/actions';\n\nexport interface OwnProps {\n  navModel: NavModel;\n}\n\nfunction mapStateToProps(state: StoreState) {\n  const userState = state.user;\n  const { isUpdating, user } = userState;\n  return {\n    navModel: getNavModel(state.navIndex, `change-password`),\n    isUpdating,\n    user,\n  };\n}\n\nconst mapDispatchToProps = {\n  loadUser,\n  changePassword,\n};\n\nconst connector = connect(mapStateToProps, mapDispatchToProps);\n\nexport type Props = OwnProps & ConnectedProps<typeof connector>;\n\nexport function ChangePasswordPage({ navModel, loadUser, isUpdating, user, changePassword }: Props) {\n  useMount(() => loadUser());\n\n  return (\n    <Page navModel={navModel}>\n      <Page.Contents isLoading={!Boolean(user)}>\n        {user ? (\n          <>\n            <h3 className=\"page-heading\">Change Your Password</h3>\n            <ChangePasswordForm user={user} onChangePassword={changePassword} isSaving={isUpdating} />\n          </>\n        ) : null}\n      </Page.Contents>\n    </Page>\n  );\n}\n\nexport default hot(module)(connector(ChangePasswordPage));\n","import useEffectOnce from './useEffectOnce';\nvar useMount = function (fn) {\n    useEffectOnce(function () {\n        fn();\n    });\n};\nexport default useMount;\n"],"sourceRoot":""}
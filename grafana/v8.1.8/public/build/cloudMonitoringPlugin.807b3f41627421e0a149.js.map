{"version":3,"sources":["webpack:///./public/app/plugins/datasource/cloud-monitoring/api.ts","webpack:///./public/app/plugins/datasource/cloud-monitoring/CloudMonitoringMetricFindQuery.ts","webpack:///./public/app/plugins/datasource/cloud-monitoring/components/VariableQueryEditor.tsx","webpack:///./public/app/plugins/datasource/cloud-monitoring/variables.ts","webpack:///./public/app/plugins/datasource/cloud-monitoring/datasource.ts","webpack:///./public/app/plugins/datasource/cloud-monitoring/components/ConfigEditor/JWTConfig.tsx","webpack:///./public/app/plugins/datasource/cloud-monitoring/components/ConfigEditor/ConfigEditor.tsx","webpack:///./public/app/plugins/datasource/cloud-monitoring/components/CloudMonitoringCheatSheet.tsx","webpack:///./public/app/plugins/datasource/cloud-monitoring/annotations_query_ctrl.ts","webpack:///./public/app/plugins/datasource/cloud-monitoring/module.ts"],"names":["Api","constructor","baseUrl","this","cache","defaultOptions","useCache","responseMap","res","get","path","options","Promise","resolve","getBackendSrv","fetch","url","method","pipe","map","response","responsePropName","match","split","data","catchError","error","appEvents","emit","CoreEvents","dsRequestError","formatCloudMonitoringError","of","toPromise","post","test","projectName","CloudMonitoringMetricFindQuery","datasource","query","getDefaultProject","selectedQueryType","MetricFindQueryTypes","Projects","handleProjectsQuery","Services","handleServiceQuery","MetricTypes","handleMetricTypesQuery","LabelKeys","handleLabelKeysQuery","LabelValues","handleLabelValuesQuery","ResourceTypes","handleResourceTypeQuery","Aligners","handleAlignersQuery","AlignmentPeriods","handleAlignmentPeriodQuery","Aggregations","handleAggregationQuery","SLOServices","handleSLOServicesQuery","SLO","handleSLOQuery","Selectors","handleSelectorQuery","console","getProjects","s","text","label","value","expandable","metricDescriptors","getMetricTypes","extractServicesFromMetricDescriptors","serviceShortName","service","selectedService","getMetricTypesByService","templateSrv","replace","displayName","type","selectedMetricType","getLabelKeys","toFindQueryResult","labelKey","labels","getLabels","interpolatedKey","hasOwnProperty","descriptor","find","m","getAlignmentOptionsByMetric","valueType","metricKind","getAggregationOptionsByMetric","getSLOServices","selectedSLOService","getServiceLevelObjectives","SELECTORS","ALIGNMENT_PERIODS","x","isString","CloudMonitoringVariableQueryEditor","PureComponent","props","super","queryTypes","metricTypes","services","sloServices","projects","loading","queryModel","state","onChange","refId","Object","assign","defaults","some","getTemplateSrv","length","setState","onPropsChange","queryType","metricType","onLabelKeyChange","componentDidUpdate","prevProps","prevState","selecQueryTypeChanged","selectSLOServiceChanged","result","l","renderQueryTypeSwitch","variableOptionGroup","expanded","getVariables","v","name","allowCustomValue","onProjectChange","onServiceChange","onMetricTypeChange","render","className","onQueryTypeChange","CloudMonitoringVariableSupport","CustomVariableSupport","metricFindQuery","bind","request","executeObservable","from","execute","targets","ensureGCEDefaultProject","mergeMap","CloudMonitoringDatasource","DataSourceWithBackend","instanceSettings","timeSrv","getTimeSrv","authenticationType","jsonData","api","API","variables","intervalMs","t","migrateQuery","annotation","queries","datasourceId","id","view","crossSeriesReducer","perSeriesAligner","target","scopedVars","title","tags","filters","interpolateFilters","range","valueOf","toString","to","dataQueryResponse","toDataQueryResponse","df","i","j","fields","values","push","time","Date","parse","applyTemplateVariables","metricQuery","sloQuery","interpolateProps","groupBys","interpolateGroupBys","editorMode","QueryType","METRICS","timeRange","results","meta","status","message","statusText","code","getGCEDefaultProject","defaultProject","err","throwError","gceDefaultProject","serviceId","p","goal","projectId","hide","rest","object","entries","reduce","acc","key","filterQuery","selectorName","sloId","EditorMode","MQL","interpolateVariablesInQueries","completeFilter","chunk","operator","condition","filter","flatten","interpolatedGroupBys","forEach","gb","interpolated","Array","isArray","concat","configKeys","JWTConfig","isConfigured","styles","useStyles","getStyles","enableUpload","setEnableUpload","useState","setError","accept","onFileUpload","event","currentTarget","files","reader","FileReader","readerOnLoad","e","json","JSON","token_uri","client_email","project_id","validateJson","onload","readAsText","cx","startCase","labelWidth","disabled","width","placeholder","variant","onClick","severity","theme","css","spacing","md","ConfigEditor","onOptionsChange","secureJsonFields","AuthType","JWT","rel","href","menuShouldPortal","authTypes","defaultValue","onUpdateDatasourceJsonDataOptionSelect","jwt","private_key","secureJsonData","privateKey","clientEmail","tokenUri","GCE","CloudMonitoringCheatSheet","CloudMonitoringAnnotationsQueryCtrl","$scope","ctrl","onQueryChange","plugin","DataSourcePlugin","setQueryEditorHelp","setQueryEditor","QueryEditor","setConfigEditor","setAnnotationQueryCtrl","setVariableQueryEditor"],"mappings":"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","file":"cloudMonitoringPlugin.807b3f41627421e0a149.js","sourcesContent":["import { Observable, of } from 'rxjs';\nimport { catchError, map } from 'rxjs/operators';\nimport { SelectableValue } from '@grafana/data';\nimport { FetchResponse, getBackendSrv } from '@grafana/runtime';\n\nimport appEvents from 'app/core/app_events';\nimport { CoreEvents } from 'app/types';\nimport { formatCloudMonitoringError } from './functions';\nimport { MetricDescriptor } from './types';\n\nexport interface PostResponse {\n  results: Record<string, any>;\n}\n\ninterface Options {\n  responseMap?: (res: any) => SelectableValue<string> | MetricDescriptor;\n  baseUrl?: string;\n  useCache?: boolean;\n}\n\nexport default class Api {\n  cache: { [key: string]: Array<SelectableValue<string>> };\n  defaultOptions: Options;\n\n  constructor(private baseUrl: string) {\n    this.cache = {};\n    this.defaultOptions = {\n      useCache: true,\n      responseMap: (res: any) => res,\n      baseUrl: this.baseUrl,\n    };\n  }\n\n  get(path: string, options?: Options): Promise<Array<SelectableValue<string>> | MetricDescriptor[]> {\n    const { useCache, responseMap, baseUrl } = { ...this.defaultOptions, ...options };\n\n    if (useCache && this.cache[path]) {\n      return Promise.resolve(this.cache[path]);\n    }\n\n    return getBackendSrv()\n      .fetch<Record<string, any>>({\n        url: baseUrl + path,\n        method: 'GET',\n      })\n      .pipe(\n        map((response) => {\n          const responsePropName = path.match(/([^\\/]*)\\/*$/)![1].split('?')[0];\n          let res = [];\n          if (response && response.data && response.data[responsePropName]) {\n            res = response.data[responsePropName].map(responseMap);\n          }\n\n          if (useCache) {\n            this.cache[path] = res;\n          }\n\n          return res;\n        }),\n        catchError((error) => {\n          appEvents.emit(CoreEvents.dsRequestError, {\n            error: { data: { error: formatCloudMonitoringError(error) } },\n          });\n          return of([]);\n        })\n      )\n      .toPromise();\n  }\n\n  post(data: Record<string, any>): Observable<FetchResponse<PostResponse>> {\n    return getBackendSrv().fetch<PostResponse>({\n      url: '/api/tsdb/query',\n      method: 'POST',\n      data,\n    });\n  }\n\n  test(projectName: string) {\n    return getBackendSrv()\n      .fetch<any>({\n        url: `${this.baseUrl}${projectName}/metricDescriptors`,\n        method: 'GET',\n      })\n      .toPromise();\n  }\n}\n","import { isString } from 'lodash';\nimport { ALIGNMENT_PERIODS, SELECTORS } from './constants';\nimport CloudMonitoringDatasource from './datasource';\nimport { CloudMonitoringVariableQuery, MetricDescriptor, MetricFindQueryTypes, MetricKind, ValueTypes } from './types';\nimport { SelectableValue } from '@grafana/data';\nimport {\n  extractServicesFromMetricDescriptors,\n  getAggregationOptionsByMetric,\n  getAlignmentOptionsByMetric,\n  getLabelKeys,\n  getMetricTypesByService,\n} from './functions';\n\nexport default class CloudMonitoringMetricFindQuery {\n  constructor(private datasource: CloudMonitoringDatasource) {}\n\n  async execute(query: CloudMonitoringVariableQuery) {\n    try {\n      if (!query.projectName) {\n        query.projectName = this.datasource.getDefaultProject();\n      }\n\n      switch (query.selectedQueryType) {\n        case MetricFindQueryTypes.Projects:\n          return this.handleProjectsQuery();\n        case MetricFindQueryTypes.Services:\n          return this.handleServiceQuery(query);\n        case MetricFindQueryTypes.MetricTypes:\n          return this.handleMetricTypesQuery(query);\n        case MetricFindQueryTypes.LabelKeys:\n          return this.handleLabelKeysQuery(query);\n        case MetricFindQueryTypes.LabelValues:\n          return this.handleLabelValuesQuery(query);\n        case MetricFindQueryTypes.ResourceTypes:\n          return this.handleResourceTypeQuery(query);\n        case MetricFindQueryTypes.Aligners:\n          return this.handleAlignersQuery(query);\n        case MetricFindQueryTypes.AlignmentPeriods:\n          return this.handleAlignmentPeriodQuery();\n        case MetricFindQueryTypes.Aggregations:\n          return this.handleAggregationQuery(query);\n        case MetricFindQueryTypes.SLOServices:\n          return this.handleSLOServicesQuery(query);\n        case MetricFindQueryTypes.SLO:\n          return this.handleSLOQuery(query);\n        case MetricFindQueryTypes.Selectors:\n          return this.handleSelectorQuery();\n        default:\n          return [];\n      }\n    } catch (error) {\n      console.error(`Could not run CloudMonitoringMetricFindQuery ${query}`, error);\n      return [];\n    }\n  }\n\n  async handleProjectsQuery() {\n    const projects = await this.datasource.getProjects();\n    return (projects as SelectableValue<string>).map((s: { label: string; value: string }) => ({\n      text: s.label,\n      value: s.value,\n      expandable: true,\n    }));\n  }\n\n  async handleServiceQuery({ projectName }: CloudMonitoringVariableQuery) {\n    const metricDescriptors = await this.datasource.getMetricTypes(projectName);\n    const services: MetricDescriptor[] = extractServicesFromMetricDescriptors(metricDescriptors);\n    return services.map((s) => ({\n      text: s.serviceShortName,\n      value: s.service,\n      expandable: true,\n    }));\n  }\n\n  async handleMetricTypesQuery({ selectedService, projectName }: CloudMonitoringVariableQuery) {\n    if (!selectedService) {\n      return [];\n    }\n    const metricDescriptors = await this.datasource.getMetricTypes(projectName);\n    return getMetricTypesByService(metricDescriptors, this.datasource.templateSrv.replace(selectedService)).map(\n      (s) => ({\n        text: s.displayName,\n        value: s.type,\n        expandable: true,\n      })\n    );\n  }\n\n  async handleLabelKeysQuery({ selectedMetricType, projectName }: CloudMonitoringVariableQuery) {\n    if (!selectedMetricType) {\n      return [];\n    }\n    const labelKeys = await getLabelKeys(this.datasource, selectedMetricType, projectName);\n    return labelKeys.map(this.toFindQueryResult);\n  }\n\n  async handleLabelValuesQuery({ selectedMetricType, labelKey, projectName }: CloudMonitoringVariableQuery) {\n    if (!selectedMetricType) {\n      return [];\n    }\n    const refId = 'handleLabelValuesQuery';\n    const labels = await this.datasource.getLabels(selectedMetricType, refId, projectName, [labelKey]);\n    const interpolatedKey = this.datasource.templateSrv.replace(labelKey);\n    const values = labels.hasOwnProperty(interpolatedKey) ? labels[interpolatedKey] : [];\n    return values.map(this.toFindQueryResult);\n  }\n\n  async handleResourceTypeQuery({ selectedMetricType, projectName }: CloudMonitoringVariableQuery) {\n    if (!selectedMetricType) {\n      return [];\n    }\n    const refId = 'handleResourceTypeQueryQueryType';\n    const labels = await this.datasource.getLabels(selectedMetricType, refId, projectName);\n    return labels['resource.type']?.map(this.toFindQueryResult) ?? [];\n  }\n\n  async handleAlignersQuery({ selectedMetricType, projectName }: CloudMonitoringVariableQuery) {\n    if (!selectedMetricType) {\n      return [];\n    }\n    const metricDescriptors = await this.datasource.getMetricTypes(projectName);\n    const descriptor = metricDescriptors.find(\n      (m) => m.type === this.datasource.templateSrv.replace(selectedMetricType)\n    );\n\n    if (!descriptor) {\n      return [];\n    }\n\n    return getAlignmentOptionsByMetric(descriptor.valueType, descriptor.metricKind).map(this.toFindQueryResult);\n  }\n\n  async handleAggregationQuery({ selectedMetricType, projectName }: CloudMonitoringVariableQuery) {\n    if (!selectedMetricType) {\n      return [];\n    }\n\n    const metricDescriptors = await this.datasource.getMetricTypes(projectName);\n    const descriptor = metricDescriptors.find(\n      (m) => m.type === this.datasource.templateSrv.replace(selectedMetricType)\n    );\n\n    if (!descriptor) {\n      return [];\n    }\n\n    return getAggregationOptionsByMetric(descriptor.valueType as ValueTypes, descriptor.metricKind as MetricKind).map(\n      this.toFindQueryResult\n    );\n  }\n\n  async handleSLOServicesQuery({ projectName }: CloudMonitoringVariableQuery) {\n    const services = await this.datasource.getSLOServices(projectName);\n    return services.map(this.toFindQueryResult);\n  }\n\n  async handleSLOQuery({ selectedSLOService, projectName }: CloudMonitoringVariableQuery) {\n    const slos = await this.datasource.getServiceLevelObjectives(projectName, selectedSLOService);\n    return slos.map(this.toFindQueryResult);\n  }\n\n  async handleSelectorQuery() {\n    return SELECTORS.map(this.toFindQueryResult);\n  }\n\n  handleAlignmentPeriodQuery() {\n    return ALIGNMENT_PERIODS.map(this.toFindQueryResult);\n  }\n\n  toFindQueryResult(x: any) {\n    return isString(x) ? { text: x, expandable: true } : { ...x, expandable: true };\n  }\n}\n","import React, { PureComponent } from 'react';\n\nimport { getTemplateSrv } from '@grafana/runtime';\nimport { QueryEditorProps } from '@grafana/data';\n\nimport { VariableQueryField } from './';\nimport { extractServicesFromMetricDescriptors, getLabelKeys, getMetricTypes } from '../functions';\nimport {\n  CloudMonitoringOptions,\n  CloudMonitoringQuery,\n  CloudMonitoringVariableQuery,\n  MetricDescriptor,\n  MetricFindQueryTypes,\n  VariableQueryData,\n} from '../types';\nimport CloudMonitoringDatasource from '../datasource';\n\nexport type Props = QueryEditorProps<\n  CloudMonitoringDatasource,\n  CloudMonitoringQuery,\n  CloudMonitoringOptions,\n  CloudMonitoringVariableQuery\n>;\n\nexport class CloudMonitoringVariableQueryEditor extends PureComponent<Props, VariableQueryData> {\n  queryTypes: Array<{ value: string; label: string }> = [\n    { value: MetricFindQueryTypes.Projects, label: 'Projects' },\n    { value: MetricFindQueryTypes.Services, label: 'Services' },\n    { value: MetricFindQueryTypes.MetricTypes, label: 'Metric Types' },\n    { value: MetricFindQueryTypes.LabelKeys, label: 'Label Keys' },\n    { value: MetricFindQueryTypes.LabelValues, label: 'Label Values' },\n    { value: MetricFindQueryTypes.ResourceTypes, label: 'Resource Types' },\n    { value: MetricFindQueryTypes.Aggregations, label: 'Aggregations' },\n    { value: MetricFindQueryTypes.Aligners, label: 'Aligners' },\n    { value: MetricFindQueryTypes.AlignmentPeriods, label: 'Alignment Periods' },\n    { value: MetricFindQueryTypes.Selectors, label: 'Selectors' },\n    { value: MetricFindQueryTypes.SLOServices, label: 'SLO Services' },\n    { value: MetricFindQueryTypes.SLO, label: 'Service Level Objectives (SLO)' },\n  ];\n\n  defaults: VariableQueryData = {\n    selectedQueryType: this.queryTypes[0].value,\n    metricDescriptors: [],\n    selectedService: '',\n    selectedMetricType: '',\n    labels: [],\n    labelKey: '',\n    metricTypes: [],\n    services: [],\n    sloServices: [],\n    selectedSLOService: '',\n    projects: [],\n    projectName: '',\n    loading: true,\n  };\n\n  constructor(props: Props) {\n    super(props);\n    this.state = Object.assign(\n      this.defaults,\n      { projectName: this.props.datasource.getDefaultProject() },\n      this.props.query\n    );\n  }\n\n  async componentDidMount() {\n    const projects = (await this.props.datasource.getProjects()) as MetricDescriptor[];\n    const metricDescriptors = await this.props.datasource.getMetricTypes(\n      this.props.query.projectName || this.props.datasource.getDefaultProject()\n    );\n    const services = extractServicesFromMetricDescriptors(metricDescriptors).map((m: any) => ({\n      value: m.service,\n      label: m.serviceShortName,\n    }));\n\n    let selectedService = '';\n    if (services.some((s) => s.value === getTemplateSrv().replace(this.state.selectedService))) {\n      selectedService = this.state.selectedService;\n    } else if (services && services.length > 0) {\n      selectedService = services[0].value;\n    }\n\n    const { metricTypes, selectedMetricType } = getMetricTypes(\n      metricDescriptors,\n      this.state.selectedMetricType,\n      getTemplateSrv().replace(this.state.selectedMetricType),\n      getTemplateSrv().replace(selectedService)\n    );\n\n    const sloServices = await this.props.datasource.getSLOServices(this.state.projectName);\n\n    const state: any = {\n      services,\n      selectedService,\n      metricTypes,\n      selectedMetricType,\n      metricDescriptors,\n      projects,\n      ...(await this.getLabels(selectedMetricType, this.state.projectName)),\n      sloServices,\n      loading: false,\n    };\n    this.setState(state, () => this.onPropsChange());\n  }\n\n  onPropsChange = () => {\n    const { metricDescriptors, labels, metricTypes, services, ...queryModel } = this.state;\n    this.props.onChange({ ...queryModel, refId: 'CloudMonitoringVariableQueryEditor-VariableQuery' });\n  };\n\n  async onQueryTypeChange(queryType: string) {\n    const state: any = {\n      selectedQueryType: queryType,\n      ...(await this.getLabels(this.state.selectedMetricType, this.state.projectName, queryType)),\n    };\n\n    this.setState(state);\n  }\n\n  async onProjectChange(projectName: string) {\n    const metricDescriptors = await this.props.datasource.getMetricTypes(projectName);\n    const labels = await this.getLabels(this.state.selectedMetricType, projectName);\n    const { metricTypes, selectedMetricType } = getMetricTypes(\n      metricDescriptors,\n      this.state.selectedMetricType,\n      getTemplateSrv().replace(this.state.selectedMetricType),\n      getTemplateSrv().replace(this.state.selectedService)\n    );\n\n    const sloServices = await this.props.datasource.getSLOServices(projectName);\n\n    this.setState(\n      {\n        ...labels,\n        metricTypes,\n        selectedMetricType,\n        metricDescriptors,\n        projectName,\n        sloServices,\n      },\n      () => this.onPropsChange()\n    );\n  }\n\n  async onServiceChange(service: string) {\n    const { metricTypes, selectedMetricType } = getMetricTypes(\n      this.state.metricDescriptors,\n      this.state.selectedMetricType,\n      getTemplateSrv().replace(this.state.selectedMetricType),\n      getTemplateSrv().replace(service)\n    );\n    const state: any = {\n      selectedService: service,\n      metricTypes,\n      selectedMetricType,\n      ...(await this.getLabels(selectedMetricType, this.state.projectName)),\n    };\n    this.setState(state, () => this.onPropsChange());\n  }\n\n  async onMetricTypeChange(metricType: string) {\n    const state: any = {\n      selectedMetricType: metricType,\n      ...(await this.getLabels(metricType, this.state.projectName)),\n    };\n    this.setState(state, () => this.onPropsChange());\n  }\n\n  onLabelKeyChange(labelKey: string) {\n    this.setState({ labelKey }, () => this.onPropsChange());\n  }\n\n  componentDidUpdate(prevProps: Readonly<Props>, prevState: Readonly<VariableQueryData>) {\n    const selecQueryTypeChanged = prevState.selectedQueryType !== this.state.selectedQueryType;\n    const selectSLOServiceChanged = this.state.selectedSLOService !== prevState.selectedSLOService;\n    if (selecQueryTypeChanged || selectSLOServiceChanged) {\n      this.onPropsChange();\n    }\n  }\n\n  async getLabels(selectedMetricType: string, projectName: string, selectedQueryType = this.state.selectedQueryType) {\n    let result = { labels: this.state.labels, labelKey: this.state.labelKey };\n    if (selectedMetricType && selectedQueryType === MetricFindQueryTypes.LabelValues) {\n      const labels = await getLabelKeys(this.props.datasource, selectedMetricType, projectName);\n      const labelKey = labels.some((l) => l === getTemplateSrv().replace(this.state.labelKey))\n        ? this.state.labelKey\n        : labels[0];\n      result = { labels, labelKey };\n    }\n    return result;\n  }\n\n  renderQueryTypeSwitch(queryType: string) {\n    const variableOptionGroup = {\n      label: 'Template Variables',\n      expanded: false,\n      options: getTemplateSrv()\n        .getVariables()\n        .map((v: any) => ({\n          value: `$${v.name}`,\n          label: `$${v.name}`,\n        })),\n    };\n\n    switch (queryType) {\n      case MetricFindQueryTypes.MetricTypes:\n        return (\n          <>\n            <VariableQueryField\n              allowCustomValue={true}\n              value={this.state.projectName}\n              options={[variableOptionGroup, ...this.state.projects]}\n              onChange={(value) => this.onProjectChange(value)}\n              label=\"Project\"\n            />\n            <VariableQueryField\n              value={this.state.selectedService}\n              options={[variableOptionGroup, ...this.state.services]}\n              onChange={(value) => this.onServiceChange(value)}\n              label=\"Service\"\n            />\n          </>\n        );\n      case MetricFindQueryTypes.LabelKeys:\n      case MetricFindQueryTypes.LabelValues:\n      case MetricFindQueryTypes.ResourceTypes:\n        return (\n          <>\n            <VariableQueryField\n              allowCustomValue={true}\n              value={this.state.projectName}\n              options={[variableOptionGroup, ...this.state.projects]}\n              onChange={(value) => this.onProjectChange(value)}\n              label=\"Project\"\n            />\n            <VariableQueryField\n              value={this.state.selectedService}\n              options={[variableOptionGroup, ...this.state.services]}\n              onChange={(value) => this.onServiceChange(value)}\n              label=\"Service\"\n            />\n            <VariableQueryField\n              value={this.state.selectedMetricType}\n              options={[\n                variableOptionGroup,\n                ...this.state.metricTypes.map(({ value, name }) => ({ value, label: name })),\n              ]}\n              onChange={(value) => this.onMetricTypeChange(value)}\n              label=\"Metric Type\"\n            />\n            {queryType === MetricFindQueryTypes.LabelValues && (\n              <VariableQueryField\n                value={this.state.labelKey}\n                options={[variableOptionGroup, ...this.state.labels.map((l) => ({ value: l, label: l }))]}\n                onChange={(value) => this.onLabelKeyChange(value)}\n                label=\"Label Key\"\n              />\n            )}\n          </>\n        );\n      case MetricFindQueryTypes.Aligners:\n      case MetricFindQueryTypes.Aggregations:\n        return (\n          <>\n            <VariableQueryField\n              value={this.state.selectedService}\n              options={[variableOptionGroup, ...this.state.services]}\n              onChange={(value) => this.onServiceChange(value)}\n              label=\"Service\"\n            />\n            <VariableQueryField\n              value={this.state.selectedMetricType}\n              options={[\n                variableOptionGroup,\n                ...this.state.metricTypes.map(({ value, name }) => ({ value, label: name })),\n              ]}\n              onChange={(value) => this.onMetricTypeChange(value)}\n              label=\"Metric Type\"\n            />\n          </>\n        );\n      case MetricFindQueryTypes.SLOServices:\n        return (\n          <>\n            <VariableQueryField\n              allowCustomValue={true}\n              value={this.state.projectName}\n              options={[variableOptionGroup, ...this.state.projects]}\n              onChange={(value) => this.onProjectChange(value)}\n              label=\"Project\"\n            />\n          </>\n        );\n\n      case MetricFindQueryTypes.SLO:\n        return (\n          <>\n            <VariableQueryField\n              allowCustomValue={true}\n              value={this.state.projectName}\n              options={[variableOptionGroup, ...this.state.projects]}\n              onChange={(value) => this.onProjectChange(value)}\n              label=\"Project\"\n            />\n            <VariableQueryField\n              value={this.state.selectedSLOService}\n              options={[variableOptionGroup, ...this.state.sloServices]}\n              onChange={(value) => {\n                this.setState({\n                  ...this.state,\n                  selectedSLOService: value,\n                });\n              }}\n              label=\"SLO Service\"\n            />\n          </>\n        );\n      default:\n        return '';\n    }\n  }\n\n  render() {\n    if (this.state.loading) {\n      return (\n        <div className=\"gf-form max-width-21\">\n          <span className=\"gf-form-label width-10 query-keyword\">Query Type</span>\n          <div className=\"gf-form-select-wrapper max-width-12\">\n            <select className=\"gf-form-input\">\n              <option>Loading...</option>\n            </select>\n          </div>\n        </div>\n      );\n    }\n\n    return (\n      <>\n        <VariableQueryField\n          value={this.state.selectedQueryType}\n          options={this.queryTypes}\n          onChange={(value) => this.onQueryTypeChange(value)}\n          label=\"Query Type\"\n        />\n        {this.renderQueryTypeSwitch(this.state.selectedQueryType)}\n      </>\n    );\n  }\n}\n","import { from, Observable } from 'rxjs';\nimport { map, mergeMap } from 'rxjs/operators';\nimport { CustomVariableSupport, DataQueryRequest, DataQueryResponse } from '@grafana/data';\n\nimport CloudMonitoringDatasource from './datasource';\nimport { CloudMonitoringVariableQuery } from './types';\nimport CloudMonitoringMetricFindQuery from './CloudMonitoringMetricFindQuery';\nimport { CloudMonitoringVariableQueryEditor } from './components/VariableQueryEditor';\n\nexport class CloudMonitoringVariableSupport extends CustomVariableSupport<\n  CloudMonitoringDatasource,\n  CloudMonitoringVariableQuery\n> {\n  private readonly metricFindQuery: CloudMonitoringMetricFindQuery;\n\n  constructor(private readonly datasource: CloudMonitoringDatasource) {\n    super();\n    this.metricFindQuery = new CloudMonitoringMetricFindQuery(datasource);\n    this.query = this.query.bind(this);\n  }\n\n  editor = CloudMonitoringVariableQueryEditor;\n\n  query(request: DataQueryRequest<CloudMonitoringVariableQuery>): Observable<DataQueryResponse> {\n    const executeObservable = from(this.metricFindQuery.execute(request.targets[0]));\n    return from(this.datasource.ensureGCEDefaultProject()).pipe(\n      mergeMap(() => executeObservable),\n      map((data) => ({ data }))\n    );\n  }\n}\n","import { chunk, flatten, isString } from 'lodash';\n\nimport {\n  DataQueryRequest,\n  DataSourceInstanceSettings,\n  ScopedVars,\n  SelectableValue,\n  DataQueryResponse,\n} from '@grafana/data';\nimport { getTemplateSrv, TemplateSrv } from 'app/features/templating/template_srv';\nimport { getTimeSrv, TimeSrv } from 'app/features/dashboard/services/TimeSrv';\n\nimport { CloudMonitoringOptions, CloudMonitoringQuery, Filter, MetricDescriptor, QueryType, EditorMode } from './types';\nimport API from './api';\nimport { DataSourceWithBackend, toDataQueryResponse } from '@grafana/runtime';\nimport { CloudMonitoringVariableSupport } from './variables';\nimport { catchError, map, mergeMap } from 'rxjs/operators';\nimport { from, Observable, of, throwError } from 'rxjs';\n\nexport default class CloudMonitoringDatasource extends DataSourceWithBackend<\n  CloudMonitoringQuery,\n  CloudMonitoringOptions\n> {\n  api: API;\n  authenticationType: string;\n  intervalMs: number;\n\n  constructor(\n    private instanceSettings: DataSourceInstanceSettings<CloudMonitoringOptions>,\n    public templateSrv: TemplateSrv = getTemplateSrv(),\n    private readonly timeSrv: TimeSrv = getTimeSrv()\n  ) {\n    super(instanceSettings);\n    this.authenticationType = instanceSettings.jsonData.authenticationType || 'jwt';\n    this.api = new API(`${instanceSettings.url!}/cloudmonitoring/v3/projects/`);\n    this.variables = new CloudMonitoringVariableSupport(this);\n    this.intervalMs = 0;\n  }\n\n  getVariables() {\n    return this.templateSrv.getVariables().map((v) => `$${v.name}`);\n  }\n\n  query(request: DataQueryRequest<CloudMonitoringQuery>): Observable<DataQueryResponse> {\n    request.targets = request.targets.map((t) => ({\n      ...this.migrateQuery(t),\n      intervalMs: request.intervalMs,\n    }));\n    return super.query(request);\n  }\n\n  async annotationQuery(options: any) {\n    await this.ensureGCEDefaultProject();\n    const annotation = options.annotation;\n    const queries = [\n      {\n        refId: 'annotationQuery',\n        type: 'annotationQuery',\n        datasourceId: this.id,\n        view: 'FULL',\n        crossSeriesReducer: 'REDUCE_NONE',\n        perSeriesAligner: 'ALIGN_NONE',\n        metricType: this.templateSrv.replace(annotation.target.metricType, options.scopedVars || {}),\n        title: this.templateSrv.replace(annotation.target.title, options.scopedVars || {}),\n        text: this.templateSrv.replace(annotation.target.text, options.scopedVars || {}),\n        tags: this.templateSrv.replace(annotation.target.tags, options.scopedVars || {}),\n        projectName: this.templateSrv.replace(\n          annotation.target.projectName ? annotation.target.projectName : this.getDefaultProject(),\n          options.scopedVars || {}\n        ),\n        filters: this.interpolateFilters(annotation.target.filters || [], options.scopedVars),\n      },\n    ];\n\n    return this.api\n      .post({\n        from: options.range.from.valueOf().toString(),\n        to: options.range.to.valueOf().toString(),\n        queries,\n      })\n      .pipe(\n        map(({ data }) => {\n          const dataQueryResponse = toDataQueryResponse({\n            data: data,\n          });\n          const df: any = [];\n          if (dataQueryResponse.data.length !== 0) {\n            for (let i = 0; i < dataQueryResponse.data.length; i++) {\n              for (let j = 0; j < dataQueryResponse.data[i].fields[0].values.length; j++) {\n                df.push({\n                  annotation: annotation,\n                  time: Date.parse(dataQueryResponse.data[i].fields[0].values.get(j)),\n                  title: dataQueryResponse.data[i].fields[1].values.get(j),\n                  tags: [],\n                  text: dataQueryResponse.data[i].fields[3].values.get(j),\n                });\n              }\n            }\n          }\n          return df;\n        })\n      )\n      .toPromise();\n  }\n\n  applyTemplateVariables(\n    { metricQuery, refId, queryType, sloQuery }: CloudMonitoringQuery,\n    scopedVars: ScopedVars\n  ): Record<string, any> {\n    return {\n      datasourceId: this.id,\n      refId,\n      intervalMs: this.intervalMs,\n      type: 'timeSeriesQuery',\n      queryType,\n      metricQuery: {\n        ...this.interpolateProps(metricQuery, scopedVars),\n        projectName: this.templateSrv.replace(\n          metricQuery.projectName ? metricQuery.projectName : this.getDefaultProject(),\n          scopedVars\n        ),\n        filters: this.interpolateFilters(metricQuery.filters || [], scopedVars),\n        groupBys: this.interpolateGroupBys(metricQuery.groupBys || [], scopedVars),\n        view: metricQuery.view || 'FULL',\n        editorMode: metricQuery.editorMode,\n      },\n      sloQuery: sloQuery && this.interpolateProps(sloQuery, scopedVars),\n    };\n  }\n\n  async getLabels(metricType: string, refId: string, projectName: string, groupBys?: string[]) {\n    const options = {\n      targets: [\n        {\n          refId,\n          datasourceId: this.id,\n          queryType: QueryType.METRICS,\n          metricQuery: {\n            projectName: this.templateSrv.replace(projectName),\n            metricType: this.templateSrv.replace(metricType),\n            groupBys: this.interpolateGroupBys(groupBys || [], {}),\n            crossSeriesReducer: 'REDUCE_NONE',\n            view: 'HEADERS',\n          },\n        },\n      ],\n      range: this.timeSrv.timeRange(),\n    } as DataQueryRequest<CloudMonitoringQuery>;\n\n    const queries = options.targets;\n\n    if (!queries.length) {\n      return of({ results: [] }).toPromise();\n    }\n\n    return from(this.ensureGCEDefaultProject())\n      .pipe(\n        mergeMap(() => {\n          return this.api.post({\n            from: options.range.from.valueOf().toString(),\n            to: options.range.to.valueOf().toString(),\n            queries,\n          });\n        }),\n        map(({ data }) => {\n          return data;\n        }),\n        map((response) => {\n          const result = response.results[refId];\n          return result && result.meta ? result.meta.labels : {};\n        })\n      )\n      .toPromise();\n  }\n\n  async testDatasource() {\n    let status, message;\n    const defaultErrorMessage = 'Cannot connect to Google Cloud Monitoring API';\n    try {\n      await this.ensureGCEDefaultProject();\n      const response = await this.api.test(this.getDefaultProject());\n      if (response.status === 200) {\n        status = 'success';\n        message = 'Successfully queried the Google Cloud Monitoring API.';\n      } else {\n        status = 'error';\n        message = response.statusText ? response.statusText : defaultErrorMessage;\n      }\n    } catch (error) {\n      status = 'error';\n      if (isString(error)) {\n        message = error;\n      } else {\n        message = 'Google Cloud Monitoring: ';\n        message += error.statusText ? error.statusText : defaultErrorMessage;\n        if (error.data && error.data.error && error.data.error.code) {\n          message += ': ' + error.data.error.code + '. ' + error.data.error.message;\n        }\n      }\n    } finally {\n      return {\n        status,\n        message,\n      };\n    }\n  }\n\n  async getGCEDefaultProject() {\n    return this.api\n      .post({\n        queries: [\n          {\n            refId: 'getGCEDefaultProject',\n            type: 'getGCEDefaultProject',\n            datasourceId: this.id,\n          },\n        ],\n      })\n      .pipe(\n        map(({ data }) => {\n          return data && data.results && data.results.getGCEDefaultProject && data.results.getGCEDefaultProject.meta\n            ? data.results.getGCEDefaultProject.meta.defaultProject\n            : '';\n        }),\n        catchError((err) => {\n          return throwError(err.data.error);\n        })\n      )\n      .toPromise();\n  }\n\n  getDefaultProject(): string {\n    const { defaultProject, authenticationType, gceDefaultProject } = this.instanceSettings.jsonData;\n    if (authenticationType === 'gce') {\n      return gceDefaultProject || '';\n    }\n\n    return defaultProject || '';\n  }\n\n  async ensureGCEDefaultProject() {\n    const { authenticationType, gceDefaultProject } = this.instanceSettings.jsonData;\n    if (authenticationType === 'gce' && !gceDefaultProject) {\n      this.instanceSettings.jsonData.gceDefaultProject = await this.getGCEDefaultProject();\n    }\n  }\n\n  async getMetricTypes(projectName: string): Promise<MetricDescriptor[]> {\n    if (!projectName) {\n      return [];\n    }\n\n    return this.api.get(`${this.templateSrv.replace(projectName)}/metricDescriptors`, {\n      responseMap: (m: MetricDescriptor) => {\n        const [service] = m.type.split('/');\n        const [serviceShortName] = service.split('.');\n        m.service = service;\n        m.serviceShortName = serviceShortName;\n        m.displayName = m.displayName || m.type;\n\n        return m;\n      },\n    }) as Promise<MetricDescriptor[]>;\n  }\n\n  async getSLOServices(projectName: string): Promise<Array<SelectableValue<string>>> {\n    return this.api.get(`${this.templateSrv.replace(projectName)}/services?pageSize=1000`, {\n      responseMap: ({ name, displayName }: { name: string; displayName: string }) => ({\n        value: name.match(/([^\\/]*)\\/*$/)![1],\n        label: displayName || name.match(/([^\\/]*)\\/*$/)![1],\n      }),\n    });\n  }\n\n  async getServiceLevelObjectives(projectName: string, serviceId: string): Promise<Array<SelectableValue<string>>> {\n    if (!serviceId) {\n      return Promise.resolve([]);\n    }\n    let { projectName: p, serviceId: s } = this.interpolateProps({ projectName, serviceId });\n    return this.api.get(`${p}/services/${s}/serviceLevelObjectives`, {\n      responseMap: ({ name, displayName, goal }: { name: string; displayName: string; goal: number }) => ({\n        value: name.match(/([^\\/]*)\\/*$/)![1],\n        label: displayName,\n        goal,\n      }),\n    });\n  }\n\n  getProjects(): Promise<Array<SelectableValue<string>>> {\n    return this.api.get(`projects`, {\n      responseMap: ({ projectId, name }: { projectId: string; name: string }) => ({\n        value: projectId,\n        label: name,\n      }),\n      baseUrl: `${this.instanceSettings.url!}/cloudresourcemanager/v1/`,\n    });\n  }\n\n  migrateQuery(query: CloudMonitoringQuery): CloudMonitoringQuery {\n    if (!query.hasOwnProperty('metricQuery')) {\n      const { hide, refId, datasource, key, queryType, maxLines, metric, intervalMs, type, ...rest } = query as any;\n      return {\n        refId,\n        intervalMs,\n        type,\n        hide,\n        queryType: QueryType.METRICS,\n        metricQuery: {\n          ...rest,\n          view: rest.view || 'FULL',\n        },\n      };\n    }\n    return query;\n  }\n\n  interpolateProps<T extends Record<string, any>>(object: T, scopedVars: ScopedVars = {}): T {\n    return Object.entries(object).reduce((acc, [key, value]) => {\n      return {\n        ...acc,\n        [key]: value && isString(value) ? this.templateSrv.replace(value, scopedVars) : value,\n      };\n    }, {} as T);\n  }\n\n  filterQuery(query: CloudMonitoringQuery): boolean {\n    if (query.hide) {\n      return false;\n    }\n\n    if (query.queryType && query.queryType === QueryType.SLO && query.sloQuery) {\n      const { selectorName, serviceId, sloId, projectName } = query.sloQuery;\n      return !!selectorName && !!serviceId && !!sloId && !!projectName;\n    }\n\n    if (query.queryType && query.queryType === QueryType.METRICS && query.metricQuery.editorMode === EditorMode.MQL) {\n      return !!query.metricQuery.projectName && !!query.metricQuery.query;\n    }\n\n    const { metricType } = query.metricQuery;\n\n    return !!metricType;\n  }\n\n  interpolateVariablesInQueries(queries: CloudMonitoringQuery[], scopedVars: ScopedVars): CloudMonitoringQuery[] {\n    return queries.map(\n      (query) => this.applyTemplateVariables(this.migrateQuery(query), scopedVars) as CloudMonitoringQuery\n    );\n  }\n\n  interpolateFilters(filters: string[], scopedVars: ScopedVars) {\n    const completeFilter: Filter[] = chunk(filters, 4)\n      .map(([key, operator, value, condition]) => ({\n        key,\n        operator,\n        value,\n        ...(condition && { condition }),\n      }))\n      .reduce((res, filter) => (filter.value ? [...res, filter] : res), []);\n\n    const filterArray = flatten(\n      completeFilter.map(({ key, operator, value, condition }: Filter) => [\n        this.templateSrv.replace(key, scopedVars || {}),\n        operator,\n        this.templateSrv.replace(value, scopedVars || {}, 'regex'),\n        ...(condition ? [condition] : []),\n      ])\n    );\n\n    return filterArray || [];\n  }\n\n  interpolateGroupBys(groupBys: string[], scopedVars: {}): string[] {\n    let interpolatedGroupBys: string[] = [];\n    (groupBys || []).forEach((gb) => {\n      const interpolated = this.templateSrv.replace(gb, scopedVars || {}, 'csv').split(',');\n      if (Array.isArray(interpolated)) {\n        interpolatedGroupBys = interpolatedGroupBys.concat(interpolated);\n      } else {\n        interpolatedGroupBys.push(interpolated);\n      }\n    });\n    return interpolatedGroupBys;\n  }\n}\n","import React, { FormEvent, useState } from 'react';\nimport { startCase } from 'lodash';\nimport { Button, FileUpload, InlineField, Input, useStyles, Alert } from '@grafana/ui';\nimport { css, cx } from '@emotion/css';\nimport { GrafanaTheme } from '@grafana/data';\n\nconst configKeys = ['project_id', 'private_key', 'client_email', 'token_uri'];\n\nexport interface JWT {\n  token_uri: string;\n  client_email: string;\n  private_key: string;\n  project_id: string;\n}\n\nexport interface Props {\n  onChange: (jwt: JWT) => void;\n  isConfigured: boolean;\n}\n\nconst validateJson = (json: JWT): json is JWT => {\n  return !!json.token_uri && !!json.client_email && !!json.project_id && !!json.project_id;\n};\n\nexport function JWTConfig({ onChange, isConfigured }: Props) {\n  const styles = useStyles(getStyles);\n  const [enableUpload, setEnableUpload] = useState<boolean>(!isConfigured);\n  const [error, setError] = useState<string | null>(null);\n\n  return enableUpload ? (\n    <>\n      <FileUpload\n        className={styles}\n        accept=\"application/json\"\n        onFileUpload={(event: FormEvent<HTMLInputElement>) => {\n          if (event?.currentTarget?.files?.length === 1) {\n            setError(null);\n            const reader = new FileReader();\n            const readerOnLoad = () => {\n              return (e: any) => {\n                const json = JSON.parse(e.target.result);\n                if (validateJson(json)) {\n                  onChange(json);\n                  setEnableUpload(false);\n                } else {\n                  setError('Invalid JWT file');\n                }\n              };\n            };\n            reader.onload = readerOnLoad();\n            reader.readAsText(event.currentTarget.files[0]);\n          } else {\n            setError('You can only upload one file');\n          }\n        }}\n      >\n        Upload service account key file\n      </FileUpload>\n\n      {error && <p className={cx(styles, 'alert')}>{error}</p>}\n    </>\n  ) : (\n    <>\n      {configKeys.map((key, i) => (\n        <InlineField label={startCase(key)} key={i} labelWidth={20} disabled>\n          <Input width={40} placeholder=\"configured\" />\n        </InlineField>\n      ))}\n      <Button variant=\"secondary\" onClick={() => setEnableUpload(true)} className={styles}>\n        Upload another JWT file\n      </Button>\n\n      <Alert title=\"\" className={styles} severity=\"info\">\n        Do not forget to save your changes after uploading a file\n      </Alert>\n    </>\n  );\n}\n\nexport const getStyles = (theme: GrafanaTheme) => css`\n  margin: ${theme.spacing.md} 0 0;\n`;\n","import React, { PureComponent } from 'react';\nimport { Select, FieldSet, InlineField, Alert } from '@grafana/ui';\nimport { DataSourcePluginOptionsEditorProps, onUpdateDatasourceJsonDataOptionSelect } from '@grafana/data';\nimport { AuthType, authTypes, CloudMonitoringOptions, CloudMonitoringSecureJsonData } from '../../types';\nimport { JWTConfig } from './JWTConfig';\n\nexport type Props = DataSourcePluginOptionsEditorProps<CloudMonitoringOptions, CloudMonitoringSecureJsonData>;\n\nexport class ConfigEditor extends PureComponent<Props> {\n  render() {\n    const { options, onOptionsChange } = this.props;\n    const { secureJsonFields, jsonData } = options;\n\n    if (!jsonData.hasOwnProperty('authenticationType')) {\n      jsonData.authenticationType = AuthType.JWT;\n    }\n\n    return (\n      <>\n        <div className=\"gf-form-group\">\n          <div className=\"grafana-info-box\">\n            <h4>Google Cloud Monitoring Authentication</h4>\n            <p>\n              There are two ways to authenticate the Google Cloud Monitoring plugin - either by uploading a Service\n              Account key file or by automatically retrieving credentials from the Google metadata server. The latter\n              option is only available when running Grafana on a GCE virtual machine.\n            </p>\n\n            <h5>Uploading a Service Account Key File</h5>\n            <p>\n              There are two ways to authenticate the Google Cloud Monitoring plugin. You can upload a Service Account\n              key file or automatically retrieve credentials from the Google metadata server. The latter option is only\n              available when running Grafana on a GCE virtual machine.\n            </p>\n            <p>\n              The <strong>Monitoring Viewer</strong> role provides all the permissions that Grafana needs. The following\n              API needs to be enabled on GCP for the data source to work:{' '}\n              <a\n                className=\"external-link\"\n                target=\"_blank\"\n                rel=\"noopener noreferrer\"\n                href=\"https://console.cloud.google.com/apis/library/monitoring.googleapis.com\"\n              >\n                Monitoring API\n              </a>\n            </p>\n\n            <h5>GCE Default Service Account</h5>\n            <p>\n              If Grafana is running on a Google Compute Engine (GCE) virtual machine, it is possible for Grafana to\n              automatically retrieve the default project id and authentication token from the metadata server. In order\n              for this to work, you need to make sure that you have a service account that is setup as the default\n              account for the virtual machine and that the service account has been given read access to the Google\n              Cloud Monitoring Monitoring API.\n            </p>\n\n            <p>\n              Detailed instructions on how to create a Service Account can be found{' '}\n              <a\n                className=\"external-link\"\n                target=\"_blank\"\n                rel=\"noopener noreferrer\"\n                href=\"https://grafana.com/docs/grafana/latest/datasources/google-cloud-monitoring/\"\n              >\n                in the documentation.\n              </a>\n            </p>\n          </div>\n        </div>\n\n        <FieldSet>\n          <InlineField label=\"Authentication type\" labelWidth={20}>\n            <Select\n              menuShouldPortal\n              width={40}\n              value={authTypes.find((x) => x.value === jsonData.authenticationType) || authTypes[0]}\n              options={authTypes}\n              defaultValue={jsonData.authenticationType}\n              onChange={onUpdateDatasourceJsonDataOptionSelect(this.props, 'authenticationType')}\n            />\n          </InlineField>\n          {jsonData.authenticationType === AuthType.JWT && (\n            <JWTConfig\n              isConfigured={secureJsonFields && !!secureJsonFields.jwt}\n              onChange={({ private_key, client_email, project_id, token_uri }) => {\n                onOptionsChange({\n                  ...options,\n                  secureJsonData: {\n                    ...options.secureJsonData,\n                    privateKey: private_key,\n                  },\n                  jsonData: {\n                    ...options.jsonData,\n                    defaultProject: project_id,\n                    clientEmail: client_email,\n                    tokenUri: token_uri,\n                  },\n                });\n              }}\n            ></JWTConfig>\n          )}\n        </FieldSet>\n        {jsonData.authenticationType === AuthType.GCE && (\n          <Alert title=\"\" severity=\"info\">\n            Verify GCE default service account by clicking Save & Test\n          </Alert>\n        )}\n      </>\n    );\n  }\n}\n","import React, { PureComponent } from 'react';\nimport { QueryEditorHelpProps } from '@grafana/data';\nimport { css } from '@emotion/css';\nimport { CloudMonitoringQuery } from '../types';\n\nexport default class CloudMonitoringCheatSheet extends PureComponent<\n  QueryEditorHelpProps<CloudMonitoringQuery>,\n  { userExamples: string[] }\n> {\n  render() {\n    return (\n      <div>\n        <h2>Cloud Monitoring alias patterns</h2>\n        <div>\n          <p>\n            Format the legend keys any way you want by using alias patterns. Format the legend keys any way you want by\n            using alias patterns.\n          </p>\n          Example:\n          <code>{`${'{{metric.name}} - {{metric.label.instance_name}}'}`}</code>\n          <br />\n          Result: &nbsp;&nbsp;<code>cpu/usage_time - server1-europe-west-1</code>\n          <br />\n          <br />\n          <label>Patterns</label>\n          <br />\n          <ul\n            className={css`\n              list-style: none;\n            `}\n          >\n            <li>\n              <code>{`${'{{metric.type}}'}`}</code> = metric type e.g. compute.googleapis.com/instance/cpu/usage_time\n            </li>\n            <li>\n              <code>{`${'{{metric.name}}'}`}</code> = name part of metric e.g. instance/cpu/usage_time\n            </li>\n            <li>\n              <code>{`${'{{metric.service}}'}`}</code> = service part of metric e.g. compute\n            </li>\n            <li>\n              <code>{`${'{{metric.label.label_name}}'}`}</code> = Metric label metadata e.g. metric.label.instance_name\n            </li>\n            <li>\n              <code>{`${'{{resource.label.label_name}}'}`}</code> = Resource label metadata e.g. resource.label.zone\n            </li>\n            <li>\n              <code>{`${'{{metadata.system_labels.name}}'}`}</code> = Meta data system labels e.g.\n              metadata.system_labels.name. For this to work, the needs to be included in the group by\n            </li>\n            <li>\n              <code>{`${'{{metadata.user_labels.name}}'}`}</code> = Meta data user labels e.g.\n              metadata.user_labels.name. For this to work, the needs to be included in the group by\n            </li>\n            <li>\n              <code>{`${'{{bucket}}'}`}</code> = bucket boundary for distribution metrics when using a heatmap in\n              Grafana\n            </li>\n            <li>\n              <code>{`${'{{project}}'}`}</code> = The project name that was specified in the query editor\n            </li>\n            <li>\n              <code>{`${'{{service}}'}`}</code> = The service id that was specified in the SLO query editor\n            </li>\n            <li>\n              <code>{`${'{{slo}}'}`}</code> = The SLO id that was specified in the SLO query editor\n            </li>\n            <li>\n              <code>{`${'{{selector}}'}`}</code> = The Selector function that was specified in the SLO query editor\n            </li>\n          </ul>\n        </div>\n      </div>\n    );\n  }\n}\n","import { AnnotationTarget } from './types';\n\nexport class CloudMonitoringAnnotationsQueryCtrl {\n  static templateUrl = 'partials/annotations.editor.html';\n  declare annotation: any;\n\n  /** @ngInject */\n  constructor($scope: any) {\n    this.annotation = $scope.ctrl.annotation || {};\n    this.annotation.target = $scope.ctrl.annotation.target || {};\n\n    this.onQueryChange = this.onQueryChange.bind(this);\n  }\n\n  onQueryChange(target: AnnotationTarget) {\n    Object.assign(this.annotation.target, target);\n  }\n}\n","import { DataSourcePlugin } from '@grafana/data';\nimport CloudMonitoringDatasource from './datasource';\nimport { QueryEditor } from './components/QueryEditor';\nimport { ConfigEditor } from './components/ConfigEditor/ConfigEditor';\n\nimport CloudMonitoringCheatSheet from './components/CloudMonitoringCheatSheet';\nimport { CloudMonitoringAnnotationsQueryCtrl } from './annotations_query_ctrl';\nimport { CloudMonitoringVariableQueryEditor } from './components/VariableQueryEditor';\nimport { CloudMonitoringQuery } from './types';\n\nexport const plugin = new DataSourcePlugin<CloudMonitoringDatasource, CloudMonitoringQuery>(CloudMonitoringDatasource)\n  .setQueryEditorHelp(CloudMonitoringCheatSheet)\n  .setQueryEditor(QueryEditor)\n  .setConfigEditor(ConfigEditor)\n  .setAnnotationQueryCtrl(CloudMonitoringAnnotationsQueryCtrl)\n  .setVariableQueryEditor(CloudMonitoringVariableQueryEditor);\n"],"sourceRoot":""}
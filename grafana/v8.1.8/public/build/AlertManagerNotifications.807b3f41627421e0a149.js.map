{"version":3,"sources":["webpack:///./public/app/core/hooks/useQueryParams.ts","webpack:///./public/app/features/alerting/unified/components/Well.tsx","webpack:///./public/app/features/alerting/unified/components/DynamicTableWithGuidelines.tsx","webpack:///./public/app/features/alerting/unified/components/silences/AmAlertStateTag.tsx","webpack:///./node_modules/timers-browserify/main.js","webpack:///./node_modules/setimmediate/setImmediate.js","webpack:///./public/app/features/alerting/unified/hooks/useAlertManagerSourceName.ts","webpack:///./public/app/features/alerting/unified/components/DetailsField.tsx","webpack:///./public/app/features/alerting/unified/components/AlertManagerPicker.tsx","webpack:///./public/app/features/alerting/unified/components/AlertingPageWrapper.tsx","webpack:///./public/app/features/alerting/unified/components/CollapseToggle.tsx","webpack:///./public/app/features/alerting/unified/components/amnotifications/AmNotificationsAlertDetails.tsx","webpack:///./public/app/features/alerting/unified/components/amnotifications/AmNotificationsAlertsTable.tsx","webpack:///./public/app/features/alerting/unified/components/amnotifications/AmNotificationsGroupHeader.tsx","webpack:///./public/app/features/alerting/unified/components/amnotifications/AmNotificationsGroup.tsx","webpack:///./public/app/features/alerting/unified/AmNotifications.tsx","webpack:///./public/app/features/alerting/unified/components/DynamicTable.tsx","webpack:///./public/app/features/alerting/unified/components/AnnotationDetailsField.tsx"],"names":["useQueryParams","search","useLocation","useMemo","locationSearchToObject","useCallback","values","replace","setImmediate","locationService","partial","Well","children","className","styles","useStyles","getStyles","cx","wrapper","theme","css","colors","panelBg","formInputBorder","border","radius","sm","spacing","xs","typography","fontFamily","monospace","DynamicTableWithGuidelines","renderExpandedContent","props","useStyles2","item","index","items","length","contentGuideline","guideline","undefined","renderPrefixHeader","relative","headerGuideline","renderPrefixCell","_","topGuideline","bottomGuideline","medium","breakpoints","down","alertStateToState","AlertState","Active","Unprocessed","Suppressed","AmAlertStateTag","state","self","window","apply","Function","prototype","Timeout","id","clearFn","this","_id","_clearFn","exports","setTimeout","call","scope","arguments","clearTimeout","setInterval","clearInterval","timeout","close","unref","ref","enroll","msecs","_idleTimeoutId","_idleTimeout","unenroll","_unrefActive","active","_onTimeout","global","clearImmediate","registerImmediate","html","channel","messagePrefix","onGlobalMessage","nextHandle","tasksByHandle","currentlyRunningATask","doc","document","attachTo","Object","getPrototypeOf","toString","process","handle","nextTick","runIfPresent","postMessage","importScripts","postMessageIsAsynchronous","oldOnMessage","onmessage","canUsePostMessage","MessageChannel","port1","event","data","port2","createElement","documentElement","script","onreadystatechange","removeChild","appendChild","Math","random","source","indexOf","slice","addEventListener","attachEvent","callback","args","Array","i","task","run","isAlertManagerSource","alertManagerSourceName","GRAFANA_RULES_SOURCE_NAME","getAlertManagerDataSources","find","ds","name","useAlertManagerSourceName","queryParams","updateQueryParams","update","store","delete","ALERTMANAGER_NAME_LOCAL_STORAGE_KEY","ALERTMANAGER_NAME_QUERY_KEY","set","querySource","storeSource","get","DetailsField","label","horizontal","field","fieldHorizontal","fieldVertical","size","fontWeightBold","text","secondary","AlertManagerPicker","onChange","current","disabled","options","value","imgUrl","meta","getAllDataSources","filter","type","DataSourceType","Alertmanager","map","substr","info","logos","small","data-testid","menuShouldPortal","width","backspaceRemovesValue","maxMenuHeight","noOptionsMessage","getOptionLabel","o","AlertingPageWrapper","pageId","isLoading","navModel","getNavModel","useSelector","navIndex","Contents","CollapseToggle","isCollapsed","onToggle","restOfProps","expandButton","onClick","AmNotificationsAlertDetails","alert","actionsRow","status","href","makeAMLink","silencedBy","join","button","icon","getMatcherQueryParams","labels","generatorURL","entries","annotations","annotationKey","annotationValue","AnnotationDetailsField","receivers","encodeURIComponent","labelKey","startsWith","endsWith","labelValue","AmNotificationsAlertsTable","alerts","columns","renderCell","duration","intervalToAbbreviatedDurationString","start","Date","startsAt","end","endsAt","AlertLabels","fingerprint","tableWrapper","cols","isExpandable","up","bodySmall","fontSize","AmNotificationsGroupHeader","group","total","countByStatus","reduce","statusObj","summary","count","JSON","stringify","error","main","primary","AmNotificationsGroup","setIsCollapsed","useState","header","keys","headerLabels","background","spanElement","AlertManagerNotifications","setAlertManagerSourceName","dispatch","useDispatch","alertGroups","useUnifiedAlertingSelector","amAlertGroups","initialAsyncRequestState","loading","results","result","useEffect","fetchNotifications","fetchAlertGroupsAction","interval","NOTIFICATIONS_POLL_INTERVAL_MS","title","severity","message","DynamicTable","onCollapse","onExpand","isExpanded","testIdGenerator","Error","expandedIds","setExpandedIds","container","row","cell","col","isItemExpanded","includes","expandCell","itemId","toggleExpanded","bodyCell","data-column","expandedContentRow","hasPrefixCell","sizes","unshift","strong","wellableAnnotationKeys","annotationLabels","content","placement","AnnotationValue","target","link","well","textBlue"],"mappings":"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","file":"AlertManagerNotifications.807b3f41627421e0a149.js","sourcesContent":["import { UrlQueryMap } from '@grafana/data';\nimport { locationSearchToObject, locationService } from '@grafana/runtime';\nimport { useCallback, useMemo } from 'react';\nimport { useLocation } from 'react-router-dom';\n\nexport function useQueryParams(): [UrlQueryMap, (values: UrlQueryMap, replace?: boolean) => void] {\n  const { search } = useLocation();\n  const queryParams = useMemo(() => locationSearchToObject(search || ''), [search]);\n  const update = useCallback(\n    (values: UrlQueryMap, replace?: boolean) => setImmediate(() => locationService.partial(values, replace)),\n    []\n  );\n  return [queryParams, update];\n}\n","import React, { FC } from 'react';\nimport { useStyles } from '@grafana/ui';\nimport { cx, css } from '@emotion/css';\nimport { GrafanaTheme } from '@grafana/data';\n\ntype Props = React.HTMLAttributes<HTMLDivElement>;\n\nexport const Well: FC<Props> = ({ children, className }) => {\n  const styles = useStyles(getStyles);\n  return <div className={cx(styles.wrapper, className)}>{children}</div>;\n};\nexport const getStyles = (theme: GrafanaTheme) => ({\n  wrapper: css`\n    background-color: ${theme.colors.panelBg};\n    border: solid 1px ${theme.colors.formInputBorder};\n    border-radius: ${theme.border.radius.sm};\n    padding: ${theme.spacing.xs} ${theme.spacing.sm};\n    font-family: ${theme.typography.fontFamily.monospace};\n  `,\n});\n","import { css, cx } from '@emotion/css';\nimport { GrafanaTheme2 } from '@grafana/data';\nimport { useStyles2 } from '@grafana/ui';\nimport React from 'react';\nimport { DynamicTable, DynamicTableProps } from './DynamicTable';\n\nexport type DynamicTableWithGuidelinesProps<T> = Omit<DynamicTableProps<T>, 'renderPrefixHeader, renderPrefixCell'>;\n\n// DynamicTable, but renders visual guidelines on the left, for larger screen widths\nexport const DynamicTableWithGuidelines = <T extends object>({\n  renderExpandedContent,\n  ...props\n}: DynamicTableWithGuidelinesProps<T>) => {\n  const styles = useStyles2(getStyles);\n  return (\n    <DynamicTable\n      renderExpandedContent={\n        renderExpandedContent\n          ? (item, index, items) => (\n              <>\n                {!(index === items.length - 1) && <div className={cx(styles.contentGuideline, styles.guideline)} />}\n                {renderExpandedContent(item, index, items)}\n              </>\n            )\n          : undefined\n      }\n      renderPrefixHeader={() => (\n        <div className={styles.relative}>\n          <div className={cx(styles.headerGuideline, styles.guideline)} />\n        </div>\n      )}\n      renderPrefixCell={(_, index, items) => (\n        <div className={styles.relative}>\n          <div className={cx(styles.topGuideline, styles.guideline)} />\n          {!(index === items.length - 1) && <div className={cx(styles.bottomGuideline, styles.guideline)} />}\n        </div>\n      )}\n      {...props}\n    />\n  );\n};\n\nexport const getStyles = (theme: GrafanaTheme2) => ({\n  relative: css`\n    position: relative;\n    height: 100%;\n  `,\n  guideline: css`\n    left: -19px;\n    border-left: 1px solid ${theme.colors.border.medium};\n    position: absolute;\n\n    ${theme.breakpoints.down('md')} {\n      display: none;\n    }\n  `,\n  topGuideline: css`\n    width: 18px;\n    border-bottom: 1px solid ${theme.colors.border.medium};\n    top: 0;\n    bottom: 50%;\n  `,\n  bottomGuideline: css`\n    top: 50%;\n    bottom: 0;\n  `,\n  contentGuideline: css`\n    top: 0;\n    bottom: 0;\n    left: -49px !important;\n  `,\n  headerGuideline: css`\n    top: -25px;\n    bottom: 0;\n  `,\n});\n","import { AlertState } from 'app/plugins/datasource/alertmanager/types';\nimport React, { FC } from 'react';\nimport { State, StateTag } from '../StateTag';\n\nconst alertStateToState: Record<AlertState, State> = {\n  [AlertState.Active]: 'bad',\n  [AlertState.Unprocessed]: 'neutral',\n  [AlertState.Suppressed]: 'info',\n};\n\ninterface Props {\n  state: AlertState;\n}\n\nexport const AmAlertStateTag: FC<Props> = ({ state }) => <StateTag state={alertStateToState[state]}>{state}</StateTag>;\n","var scope = (typeof global !== \"undefined\" && global) ||\n            (typeof self !== \"undefined\" && self) ||\n            window;\nvar apply = Function.prototype.apply;\n\n// DOM APIs, for completeness\n\nexports.setTimeout = function() {\n  return new Timeout(apply.call(setTimeout, scope, arguments), clearTimeout);\n};\nexports.setInterval = function() {\n  return new Timeout(apply.call(setInterval, scope, arguments), clearInterval);\n};\nexports.clearTimeout =\nexports.clearInterval = function(timeout) {\n  if (timeout) {\n    timeout.close();\n  }\n};\n\nfunction Timeout(id, clearFn) {\n  this._id = id;\n  this._clearFn = clearFn;\n}\nTimeout.prototype.unref = Timeout.prototype.ref = function() {};\nTimeout.prototype.close = function() {\n  this._clearFn.call(scope, this._id);\n};\n\n// Does not start the time, just sets up the members needed.\nexports.enroll = function(item, msecs) {\n  clearTimeout(item._idleTimeoutId);\n  item._idleTimeout = msecs;\n};\n\nexports.unenroll = function(item) {\n  clearTimeout(item._idleTimeoutId);\n  item._idleTimeout = -1;\n};\n\nexports._unrefActive = exports.active = function(item) {\n  clearTimeout(item._idleTimeoutId);\n\n  var msecs = item._idleTimeout;\n  if (msecs >= 0) {\n    item._idleTimeoutId = setTimeout(function onTimeout() {\n      if (item._onTimeout)\n        item._onTimeout();\n    }, msecs);\n  }\n};\n\n// setimmediate attaches itself to the global object\nrequire(\"setimmediate\");\n// On some exotic environments, it's not clear which object `setimmediate` was\n// able to install onto.  Search each possibility in the same order as the\n// `setimmediate` library.\nexports.setImmediate = (typeof self !== \"undefined\" && self.setImmediate) ||\n                       (typeof global !== \"undefined\" && global.setImmediate) ||\n                       (this && this.setImmediate);\nexports.clearImmediate = (typeof self !== \"undefined\" && self.clearImmediate) ||\n                         (typeof global !== \"undefined\" && global.clearImmediate) ||\n                         (this && this.clearImmediate);\n","(function (global, undefined) {\n    \"use strict\";\n\n    if (global.setImmediate) {\n        return;\n    }\n\n    var nextHandle = 1; // Spec says greater than zero\n    var tasksByHandle = {};\n    var currentlyRunningATask = false;\n    var doc = global.document;\n    var registerImmediate;\n\n    function setImmediate(callback) {\n      // Callback can either be a function or a string\n      if (typeof callback !== \"function\") {\n        callback = new Function(\"\" + callback);\n      }\n      // Copy function arguments\n      var args = new Array(arguments.length - 1);\n      for (var i = 0; i < args.length; i++) {\n          args[i] = arguments[i + 1];\n      }\n      // Store and register the task\n      var task = { callback: callback, args: args };\n      tasksByHandle[nextHandle] = task;\n      registerImmediate(nextHandle);\n      return nextHandle++;\n    }\n\n    function clearImmediate(handle) {\n        delete tasksByHandle[handle];\n    }\n\n    function run(task) {\n        var callback = task.callback;\n        var args = task.args;\n        switch (args.length) {\n        case 0:\n            callback();\n            break;\n        case 1:\n            callback(args[0]);\n            break;\n        case 2:\n            callback(args[0], args[1]);\n            break;\n        case 3:\n            callback(args[0], args[1], args[2]);\n            break;\n        default:\n            callback.apply(undefined, args);\n            break;\n        }\n    }\n\n    function runIfPresent(handle) {\n        // From the spec: \"Wait until any invocations of this algorithm started before this one have completed.\"\n        // So if we're currently running a task, we'll need to delay this invocation.\n        if (currentlyRunningATask) {\n            // Delay by doing a setTimeout. setImmediate was tried instead, but in Firefox 7 it generated a\n            // \"too much recursion\" error.\n            setTimeout(runIfPresent, 0, handle);\n        } else {\n            var task = tasksByHandle[handle];\n            if (task) {\n                currentlyRunningATask = true;\n                try {\n                    run(task);\n                } finally {\n                    clearImmediate(handle);\n                    currentlyRunningATask = false;\n                }\n            }\n        }\n    }\n\n    function installNextTickImplementation() {\n        registerImmediate = function(handle) {\n            process.nextTick(function () { runIfPresent(handle); });\n        };\n    }\n\n    function canUsePostMessage() {\n        // The test against `importScripts` prevents this implementation from being installed inside a web worker,\n        // where `global.postMessage` means something completely different and can't be used for this purpose.\n        if (global.postMessage && !global.importScripts) {\n            var postMessageIsAsynchronous = true;\n            var oldOnMessage = global.onmessage;\n            global.onmessage = function() {\n                postMessageIsAsynchronous = false;\n            };\n            global.postMessage(\"\", \"*\");\n            global.onmessage = oldOnMessage;\n            return postMessageIsAsynchronous;\n        }\n    }\n\n    function installPostMessageImplementation() {\n        // Installs an event handler on `global` for the `message` event: see\n        // * https://developer.mozilla.org/en/DOM/window.postMessage\n        // * http://www.whatwg.org/specs/web-apps/current-work/multipage/comms.html#crossDocumentMessages\n\n        var messagePrefix = \"setImmediate$\" + Math.random() + \"$\";\n        var onGlobalMessage = function(event) {\n            if (event.source === global &&\n                typeof event.data === \"string\" &&\n                event.data.indexOf(messagePrefix) === 0) {\n                runIfPresent(+event.data.slice(messagePrefix.length));\n            }\n        };\n\n        if (global.addEventListener) {\n            global.addEventListener(\"message\", onGlobalMessage, false);\n        } else {\n            global.attachEvent(\"onmessage\", onGlobalMessage);\n        }\n\n        registerImmediate = function(handle) {\n            global.postMessage(messagePrefix + handle, \"*\");\n        };\n    }\n\n    function installMessageChannelImplementation() {\n        var channel = new MessageChannel();\n        channel.port1.onmessage = function(event) {\n            var handle = event.data;\n            runIfPresent(handle);\n        };\n\n        registerImmediate = function(handle) {\n            channel.port2.postMessage(handle);\n        };\n    }\n\n    function installReadyStateChangeImplementation() {\n        var html = doc.documentElement;\n        registerImmediate = function(handle) {\n            // Create a <script> element; its readystatechange event will be fired asynchronously once it is inserted\n            // into the document. Do so, thus queuing up the task. Remember to clean up once it's been called.\n            var script = doc.createElement(\"script\");\n            script.onreadystatechange = function () {\n                runIfPresent(handle);\n                script.onreadystatechange = null;\n                html.removeChild(script);\n                script = null;\n            };\n            html.appendChild(script);\n        };\n    }\n\n    function installSetTimeoutImplementation() {\n        registerImmediate = function(handle) {\n            setTimeout(runIfPresent, 0, handle);\n        };\n    }\n\n    // If supported, we should attach to the prototype of global, since that is where setTimeout et al. live.\n    var attachTo = Object.getPrototypeOf && Object.getPrototypeOf(global);\n    attachTo = attachTo && attachTo.setTimeout ? attachTo : global;\n\n    // Don't get fooled by e.g. browserify environments.\n    if ({}.toString.call(global.process) === \"[object process]\") {\n        // For Node.js before 0.9\n        installNextTickImplementation();\n\n    } else if (canUsePostMessage()) {\n        // For non-IE10 modern browsers\n        installPostMessageImplementation();\n\n    } else if (global.MessageChannel) {\n        // For web workers, where supported\n        installMessageChannelImplementation();\n\n    } else if (doc && \"onreadystatechange\" in doc.createElement(\"script\")) {\n        // For IE 6–8\n        installReadyStateChangeImplementation();\n\n    } else {\n        // For older browsers\n        installSetTimeoutImplementation();\n    }\n\n    attachTo.setImmediate = setImmediate;\n    attachTo.clearImmediate = clearImmediate;\n}(typeof self === \"undefined\" ? typeof global === \"undefined\" ? this : global : self));\n","import { useQueryParams } from 'app/core/hooks/useQueryParams';\nimport store from 'app/core/store';\nimport { useCallback } from 'react';\nimport { ALERTMANAGER_NAME_LOCAL_STORAGE_KEY, ALERTMANAGER_NAME_QUERY_KEY } from '../utils/constants';\nimport { getAlertManagerDataSources, GRAFANA_RULES_SOURCE_NAME } from '../utils/datasource';\n\nfunction isAlertManagerSource(alertManagerSourceName: string): boolean {\n  return (\n    alertManagerSourceName === GRAFANA_RULES_SOURCE_NAME ||\n    !!getAlertManagerDataSources().find((ds) => ds.name === alertManagerSourceName)\n  );\n}\n\n/* this will return am name either from query params or from local storage or a default (grafana).\n *\n * fallbackUrl - if provided, will redirect to this url if alertmanager provided in query no longer\n */\nexport function useAlertManagerSourceName(): [string | undefined, (alertManagerSourceName: string) => void] {\n  const [queryParams, updateQueryParams] = useQueryParams();\n\n  const update = useCallback(\n    (alertManagerSourceName: string) => {\n      if (!isAlertManagerSource(alertManagerSourceName)) {\n        return;\n      }\n      if (alertManagerSourceName === GRAFANA_RULES_SOURCE_NAME) {\n        store.delete(ALERTMANAGER_NAME_LOCAL_STORAGE_KEY);\n        updateQueryParams({ [ALERTMANAGER_NAME_QUERY_KEY]: null });\n      } else {\n        store.set(ALERTMANAGER_NAME_LOCAL_STORAGE_KEY, alertManagerSourceName);\n        updateQueryParams({ [ALERTMANAGER_NAME_QUERY_KEY]: alertManagerSourceName });\n      }\n    },\n    [updateQueryParams]\n  );\n\n  const querySource = queryParams[ALERTMANAGER_NAME_QUERY_KEY];\n\n  if (querySource && typeof querySource === 'string') {\n    if (isAlertManagerSource(querySource)) {\n      return [querySource, update];\n    } else {\n      // non existing alertmanager\n      return [undefined, update];\n    }\n  }\n  const storeSource = store.get(ALERTMANAGER_NAME_LOCAL_STORAGE_KEY);\n  if (storeSource && typeof storeSource === 'string' && isAlertManagerSource(storeSource)) {\n    update(storeSource);\n    return [storeSource, update];\n  }\n\n  return [GRAFANA_RULES_SOURCE_NAME, update];\n}\n","import React, { FC } from 'react';\nimport { css, cx } from '@emotion/css';\nimport { GrafanaTheme2 } from '@grafana/data';\nimport { useStyles2 } from '@grafana/ui';\n\ninterface Props {\n  label: React.ReactNode;\n  className?: string;\n  horizontal?: boolean;\n}\n\nexport const DetailsField: FC<Props> = ({ className, label, horizontal, children }) => {\n  const styles = useStyles2(getStyles);\n\n  return (\n    <div className={cx(className, styles.field, horizontal ? styles.fieldHorizontal : styles.fieldVertical)}>\n      <div>{label}</div>\n      <div>{children}</div>\n    </div>\n  );\n};\n\nconst getStyles = (theme: GrafanaTheme2) => ({\n  fieldHorizontal: css`\n    flex-direction: row;\n    ${theme.breakpoints.down('md')} {\n      flex-direction: column;\n    }\n  `,\n  fieldVertical: css`\n    flex-direction: column;\n  `,\n  field: css`\n    display: flex;\n    margin: ${theme.spacing(2)} 0;\n\n    & > div:first-child {\n      width: 110px;\n      padding-right: ${theme.spacing(1)};\n      font-size: ${theme.typography.size.sm};\n      font-weight: ${theme.typography.fontWeightBold};\n      line-height: 1.8;\n    }\n    & > div:nth-child(2) {\n      flex: 1;\n      color: ${theme.colors.text.secondary};\n    }\n  `,\n});\n","import { SelectableValue, GrafanaTheme2 } from '@grafana/data';\nimport { DataSourceType, GRAFANA_RULES_SOURCE_NAME } from '../utils/datasource';\nimport React, { FC, useMemo } from 'react';\nimport { Field, Select, useStyles2 } from '@grafana/ui';\nimport { getAllDataSources } from '../utils/config';\nimport { css } from '@emotion/css';\n\ninterface Props {\n  onChange: (alertManagerSourceName: string) => void;\n  current?: string;\n  disabled?: boolean;\n}\n\nexport const AlertManagerPicker: FC<Props> = ({ onChange, current, disabled = false }) => {\n  const styles = useStyles2(getStyles);\n\n  const options: Array<SelectableValue<string>> = useMemo(() => {\n    return [\n      {\n        label: 'Grafana',\n        value: GRAFANA_RULES_SOURCE_NAME,\n        imgUrl: 'public/img/grafana_icon.svg',\n        meta: {},\n      },\n      ...getAllDataSources()\n        .filter((ds) => ds.type === DataSourceType.Alertmanager)\n        .map((ds) => ({\n          label: ds.name.substr(0, 37),\n          value: ds.name,\n          imgUrl: ds.meta.info.logos.small,\n          meta: ds.meta,\n        })),\n    ];\n  }, []);\n\n  // no need to show the picker if there's only one option\n  if (options.length === 1) {\n    return null;\n  }\n\n  return (\n    <Field\n      className={styles.field}\n      label={disabled ? 'Alertmanager' : 'Choose Alertmanager'}\n      disabled={disabled}\n      data-testid=\"alertmanager-picker\"\n    >\n      <Select\n        menuShouldPortal\n        width={29}\n        className=\"ds-picker select-container\"\n        backspaceRemovesValue={false}\n        onChange={(value) => value.value && onChange(value.value)}\n        options={options}\n        maxMenuHeight={500}\n        noOptionsMessage=\"No datasources found\"\n        value={current}\n        getOptionLabel={(o) => o.label}\n      />\n    </Field>\n  );\n};\n\nconst getStyles = (theme: GrafanaTheme2) => ({\n  field: css`\n    margin-bottom: ${theme.spacing(4)};\n  `,\n});\n","import React, { FC } from 'react';\nimport Page from 'app/core/components/Page/Page';\nimport { getNavModel } from 'app/core/selectors/navModel';\nimport { useSelector } from 'react-redux';\nimport { StoreState } from 'app/types/store';\n\ninterface Props {\n  pageId: string;\n  isLoading?: boolean;\n}\n\nexport const AlertingPageWrapper: FC<Props> = ({ children, pageId, isLoading }) => {\n  const navModel = getNavModel(\n    useSelector((state: StoreState) => state.navIndex),\n    pageId\n  );\n\n  return (\n    <Page navModel={navModel}>\n      <Page.Contents isLoading={isLoading}>{children}</Page.Contents>\n    </Page>\n  );\n};\n","import React, { FC, HTMLAttributes } from 'react';\nimport { css, cx } from '@emotion/css';\nimport { IconSize, useStyles, Icon } from '@grafana/ui';\n\ninterface Props extends HTMLAttributes<HTMLButtonElement> {\n  isCollapsed: boolean;\n  onToggle: (isCollapsed: boolean) => void;\n  size?: IconSize;\n  className?: string;\n  text?: string;\n}\n\nexport const CollapseToggle: FC<Props> = ({ isCollapsed, onToggle, className, text, size = 'xl', ...restOfProps }) => {\n  const styles = useStyles(getStyles);\n\n  return (\n    <button className={cx(styles.expandButton, className)} onClick={() => onToggle(!isCollapsed)} {...restOfProps}>\n      <Icon size={size} name={isCollapsed ? 'angle-right' : 'angle-down'} />\n      {text}\n    </button>\n  );\n};\n\nexport const getStyles = () => ({\n  expandButton: css`\n    background: none;\n    border: none;\n\n    outline: none !important;\n\n    display: inline-flex;\n    align-items: center;\n\n    svg {\n      margin-bottom: 0;\n    }\n  `,\n});\n","import { css } from '@emotion/css';\nimport { GrafanaTheme2 } from '@grafana/data';\nimport { LinkButton, useStyles2 } from '@grafana/ui';\nimport { AlertmanagerAlert, AlertState } from 'app/plugins/datasource/alertmanager/types';\nimport { Labels } from 'app/types/unified-alerting-dto';\nimport React, { FC } from 'react';\nimport { makeAMLink } from '../../utils/misc';\nimport { AnnotationDetailsField } from '../AnnotationDetailsField';\n\ninterface AmNotificationsAlertDetailsProps {\n  alertManagerSourceName: string;\n  alert: AlertmanagerAlert;\n}\n\nexport const AmNotificationsAlertDetails: FC<AmNotificationsAlertDetailsProps> = ({\n  alert,\n  alertManagerSourceName,\n}) => {\n  const styles = useStyles2(getStyles);\n  return (\n    <>\n      <div className={styles.actionsRow}>\n        {alert.status.state === AlertState.Suppressed && (\n          <LinkButton\n            href={`${makeAMLink(\n              '/alerting/silences',\n              alertManagerSourceName\n            )}&silenceIds=${alert.status.silencedBy.join(',')}`}\n            className={styles.button}\n            icon={'bell'}\n            size={'sm'}\n          >\n            Manage silences\n          </LinkButton>\n        )}\n        {alert.status.state === AlertState.Active && (\n          <LinkButton\n            href={`${makeAMLink('/alerting/silence/new', alertManagerSourceName)}&${getMatcherQueryParams(\n              alert.labels\n            )}`}\n            className={styles.button}\n            icon={'bell-slash'}\n            size={'sm'}\n          >\n            Silence\n          </LinkButton>\n        )}\n        {alert.generatorURL && (\n          <LinkButton className={styles.button} href={alert.generatorURL} icon={'chart-line'} size={'sm'}>\n            See source\n          </LinkButton>\n        )}\n      </div>\n      {Object.entries(alert.annotations).map(([annotationKey, annotationValue]) => (\n        <AnnotationDetailsField key={annotationKey} annotationKey={annotationKey} value={annotationValue} />\n      ))}\n      <div className={styles.receivers}>\n        Receivers:{' '}\n        {alert.receivers\n          .map(({ name }) => name)\n          .filter((name) => !!name)\n          .join(', ')}\n      </div>\n    </>\n  );\n};\n\nconst getStyles = (theme: GrafanaTheme2) => ({\n  button: css`\n    & + & {\n      margin-left: ${theme.spacing(1)};\n    }\n  `,\n  actionsRow: css`\n    padding: ${theme.spacing(2, 0)} !important;\n    border-bottom: 1px solid ${theme.colors.border.medium};\n  `,\n  receivers: css`\n    padding: ${theme.spacing(1, 0)};\n  `,\n});\n\nconst getMatcherQueryParams = (labels: Labels) => {\n  return `matchers=${encodeURIComponent(\n    Object.entries(labels)\n      .filter(([labelKey]) => !(labelKey.startsWith('__') && labelKey.endsWith('__')))\n      .map(([labelKey, labelValue]) => {\n        return `${labelKey}=${labelValue}`;\n      })\n      .join(',')\n  )}`;\n};\n","import { AlertmanagerAlert } from 'app/plugins/datasource/alertmanager/types';\nimport React, { useMemo } from 'react';\nimport { useStyles2 } from '@grafana/ui';\nimport { GrafanaTheme2, intervalToAbbreviatedDurationString } from '@grafana/data';\nimport { css } from '@emotion/css';\nimport { DynamicTableColumnProps, DynamicTableItemProps } from '../DynamicTable';\nimport { AmAlertStateTag } from '../silences/AmAlertStateTag';\nimport { AlertLabels } from '../AlertLabels';\nimport { DynamicTableWithGuidelines } from '../DynamicTableWithGuidelines';\nimport { AmNotificationsAlertDetails } from './AmNotificationsAlertDetails';\n\ninterface Props {\n  alerts: AlertmanagerAlert[];\n  alertManagerSourceName: string;\n}\n\ntype AmNotificationsAlertsTableColumnProps = DynamicTableColumnProps<AlertmanagerAlert>;\ntype AmNotificationsAlertsTableItemProps = DynamicTableItemProps<AlertmanagerAlert>;\n\nexport const AmNotificationsAlertsTable = ({ alerts, alertManagerSourceName }: Props) => {\n  const styles = useStyles2(getStyles);\n\n  const columns = useMemo(\n    (): AmNotificationsAlertsTableColumnProps[] => [\n      {\n        id: 'state',\n        label: 'State',\n        // eslint-disable-next-line react/display-name\n        renderCell: ({ data: alert }) => (\n          <>\n            <AmAlertStateTag state={alert.status.state} />\n            <span className={styles.duration}>\n              for{' '}\n              {intervalToAbbreviatedDurationString({\n                start: new Date(alert.startsAt),\n                end: new Date(alert.endsAt),\n              })}\n            </span>\n          </>\n        ),\n        size: '190px',\n      },\n      {\n        id: 'labels',\n        label: 'Labels',\n        // eslint-disable-next-line react/display-name\n        renderCell: ({ data: { labels } }) => <AlertLabels className={styles.labels} labels={labels} />,\n        size: 1,\n      },\n    ],\n    [styles]\n  );\n\n  const items = useMemo(\n    (): AmNotificationsAlertsTableItemProps[] =>\n      alerts.map((alert) => ({\n        id: alert.fingerprint,\n        data: alert,\n      })),\n    [alerts]\n  );\n\n  return (\n    <div className={styles.tableWrapper} data-testid=\"notifications-table\">\n      <DynamicTableWithGuidelines\n        cols={columns}\n        items={items}\n        isExpandable={true}\n        renderExpandedContent={({ data: alert }) => (\n          <AmNotificationsAlertDetails alert={alert} alertManagerSourceName={alertManagerSourceName} />\n        )}\n      />\n    </div>\n  );\n};\n\nconst getStyles = (theme: GrafanaTheme2) => ({\n  tableWrapper: css`\n    margin-top: ${theme.spacing(3)};\n    ${theme.breakpoints.up('md')} {\n      margin-left: ${theme.spacing(4.5)};\n    }\n  `,\n  duration: css`\n    margin-left: ${theme.spacing(1)};\n    font-size: ${theme.typography.bodySmall.fontSize};\n  `,\n  labels: css`\n    padding-bottom: 0;\n  `,\n});\n","import { AlertmanagerGroup, AlertState } from 'app/plugins/datasource/alertmanager/types';\nimport React from 'react';\nimport { GrafanaTheme2 } from '@grafana/data';\nimport { useStyles2 } from '@grafana/ui';\nimport { css } from '@emotion/css';\n\ninterface Props {\n  group: AlertmanagerGroup;\n}\n\nexport const AmNotificationsGroupHeader = ({ group }: Props) => {\n  const styles = useStyles2(getStyles);\n  const total = group.alerts.length;\n  const countByStatus = group.alerts.reduce((statusObj, alert) => {\n    if (statusObj[alert.status.state]) {\n      statusObj[alert.status.state] += 1;\n    } else {\n      statusObj[alert.status.state] = 1;\n    }\n    return statusObj;\n  }, {} as Record<AlertState, number>);\n\n  return (\n    <div className={styles.summary}>\n      {`${total} alerts: `}\n      {Object.entries(countByStatus).map(([state, count], index) => {\n        return (\n          <span key={`${JSON.stringify(group.labels)}-notifications-${index}`} className={styles[state as AlertState]}>\n            {index > 0 && ', '}\n            {`${count} ${state}`}\n          </span>\n        );\n      })}\n    </div>\n  );\n};\n\nconst getStyles = (theme: GrafanaTheme2) => ({\n  summary: css``,\n  [AlertState.Active]: css`\n    color: ${theme.colors.error.main};\n  `,\n  [AlertState.Suppressed]: css`\n    color: ${theme.colors.primary.main};\n  `,\n  [AlertState.Unprocessed]: css`\n    color: ${theme.colors.secondary.main};\n  `,\n});\n","import { AlertmanagerGroup, AlertState } from 'app/plugins/datasource/alertmanager/types';\nimport React, { useState } from 'react';\nimport { GrafanaTheme2 } from '@grafana/data';\nimport { useStyles2 } from '@grafana/ui';\nimport { css } from '@emotion/css';\nimport { AlertLabels } from '../AlertLabels';\nimport { AmNotificationsAlertsTable } from './AmNotificationsAlertsTable';\nimport { CollapseToggle } from '../CollapseToggle';\nimport { AmNotificationsGroupHeader } from './AmNotificationsGroupHeader';\n\ninterface Props {\n  group: AlertmanagerGroup;\n  alertManagerSourceName: string;\n}\n\nexport const AmNotificationsGroup = ({ alertManagerSourceName, group }: Props) => {\n  const [isCollapsed, setIsCollapsed] = useState<boolean>(true);\n  const styles = useStyles2(getStyles);\n\n  return (\n    <div className={styles.wrapper}>\n      <div className={styles.header}>\n        <div className={styles.group} data-testid=\"notifications-group\">\n          <CollapseToggle\n            isCollapsed={isCollapsed}\n            onToggle={() => setIsCollapsed(!isCollapsed)}\n            data-testid=\"notifications-group-collapse-toggle\"\n          />\n          {Object.keys(group.labels).length ? (\n            <AlertLabels className={styles.headerLabels} labels={group.labels} />\n          ) : (\n            <span>No grouping</span>\n          )}\n        </div>\n        <AmNotificationsGroupHeader group={group} />\n      </div>\n      {!isCollapsed && (\n        <AmNotificationsAlertsTable alertManagerSourceName={alertManagerSourceName} alerts={group.alerts} />\n      )}\n    </div>\n  );\n};\n\nconst getStyles = (theme: GrafanaTheme2) => ({\n  wrapper: css`\n    & + & {\n      margin-top: ${theme.spacing(2)};\n    }\n  `,\n  headerLabels: css`\n    padding-bottom: 0 !important;\n    margin-bottom: -${theme.spacing(0.5)};\n  `,\n  header: css`\n    display: flex;\n    flex-direction: row;\n    flex-wrap: wrap;\n    align-items: center;\n    justify-content: space-between;\n    padding: ${theme.spacing(1, 1, 1, 0)};\n    background-color: ${theme.colors.background.secondary};\n    width: 100%;\n  `,\n  group: css`\n    display: flex;\n    flex-direction: row;\n    align-items: center;\n  `,\n  summary: css``,\n  spanElement: css`\n    margin-left: ${theme.spacing(0.5)};\n  `,\n  [AlertState.Active]: css`\n    color: ${theme.colors.error.main};\n  `,\n  [AlertState.Suppressed]: css`\n    color: ${theme.colors.primary.main};\n  `,\n  [AlertState.Unprocessed]: css`\n    color: ${theme.colors.secondary.main};\n  `,\n});\n","import { AlertmanagerGroup } from 'app/plugins/datasource/alertmanager/types';\nimport React, { useEffect } from 'react';\n\nimport { useDispatch } from 'react-redux';\n\nimport { AlertingPageWrapper } from './components/AlertingPageWrapper';\nimport { AlertManagerPicker } from './components/AlertManagerPicker';\nimport { useAlertManagerSourceName } from './hooks/useAlertManagerSourceName';\nimport { useUnifiedAlertingSelector } from './hooks/useUnifiedAlertingSelector';\nimport { fetchAlertGroupsAction } from './state/actions';\nimport { initialAsyncRequestState } from './utils/redux';\n\nimport { AmNotificationsGroup } from './components/amnotifications/AmNotificationsGroup';\nimport { NOTIFICATIONS_POLL_INTERVAL_MS } from './utils/constants';\nimport { Alert, LoadingPlaceholder } from '@grafana/ui';\n\nconst AlertManagerNotifications = () => {\n  const [alertManagerSourceName, setAlertManagerSourceName] = useAlertManagerSourceName();\n  const dispatch = useDispatch();\n\n  const alertGroups = useUnifiedAlertingSelector((state) => state.amAlertGroups) || initialAsyncRequestState;\n  const loading = alertGroups[alertManagerSourceName || '']?.loading;\n  const error = alertGroups[alertManagerSourceName || '']?.error;\n  const results: AlertmanagerGroup[] = alertGroups[alertManagerSourceName || '']?.result || [];\n\n  useEffect(() => {\n    function fetchNotifications() {\n      if (alertManagerSourceName) {\n        dispatch(fetchAlertGroupsAction(alertManagerSourceName));\n      }\n    }\n    fetchNotifications();\n    const interval = setInterval(() => fetchNotifications, NOTIFICATIONS_POLL_INTERVAL_MS);\n    return () => {\n      clearInterval(interval);\n    };\n  }, [dispatch, alertManagerSourceName]);\n\n  return (\n    <AlertingPageWrapper pageId=\"notifications\">\n      <AlertManagerPicker current={alertManagerSourceName} onChange={setAlertManagerSourceName} />\n      {loading && <LoadingPlaceholder text=\"Loading notifications\" />}\n      {error && !loading && (\n        <Alert title={'Error loading notifications'} severity={'error'}>\n          {error.message || 'Unknown error'}\n        </Alert>\n      )}\n      {results &&\n        results.map((group, index) => {\n          return (\n            <AmNotificationsGroup\n              alertManagerSourceName={alertManagerSourceName || ''}\n              key={`${JSON.stringify(group.labels)}-group-${index}`}\n              group={group}\n            />\n          );\n        })}\n    </AlertingPageWrapper>\n  );\n};\n\nexport default AlertManagerNotifications;\n","import React, { ReactNode, useState } from 'react';\nimport { css, cx } from '@emotion/css';\nimport { GrafanaTheme2 } from '@grafana/data';\nimport { IconButton, useStyles2 } from '@grafana/ui';\n\nexport interface DynamicTableColumnProps<T = unknown> {\n  id: string | number;\n  label: string;\n\n  renderCell: (item: DynamicTableItemProps<T>, index: number) => ReactNode;\n  size?: number | string;\n}\n\nexport interface DynamicTableItemProps<T = unknown> {\n  id: string | number;\n  data: T;\n  renderExpandedContent?: () => ReactNode;\n}\n\nexport interface DynamicTableProps<T = unknown> {\n  cols: Array<DynamicTableColumnProps<T>>;\n  items: Array<DynamicTableItemProps<T>>;\n\n  isExpandable?: boolean;\n\n  // provide these to manually control expanded status\n  onCollapse?: (item: DynamicTableItemProps<T>) => void;\n  onExpand?: (item: DynamicTableItemProps<T>) => void;\n  isExpanded?: (item: DynamicTableItemProps<T>) => boolean;\n\n  renderExpandedContent?: (\n    item: DynamicTableItemProps<T>,\n    index: number,\n    items: Array<DynamicTableItemProps<T>>\n  ) => ReactNode;\n  testIdGenerator?: (item: DynamicTableItemProps<T>, index: number) => string;\n  renderPrefixHeader?: () => ReactNode;\n  renderPrefixCell?: (\n    item: DynamicTableItemProps<T>,\n    index: number,\n    items: Array<DynamicTableItemProps<T>>\n  ) => ReactNode;\n}\n\nexport const DynamicTable = <T extends object>({\n  cols,\n  items,\n  isExpandable = false,\n  onCollapse,\n  onExpand,\n  isExpanded,\n  renderExpandedContent,\n  testIdGenerator,\n\n  // render a cell BEFORE expand icon for header/ each row.\n  // currently use by RuleList to render guidelines\n  renderPrefixCell,\n  renderPrefixHeader,\n}: DynamicTableProps<T>) => {\n  if ((onCollapse || onExpand || isExpanded) && !(onCollapse && onExpand && isExpanded)) {\n    throw new Error('either all of onCollapse, onExpand, isExpanded must be provided, or none');\n  }\n  if ((isExpandable || renderExpandedContent) && !(isExpandable && renderExpandedContent)) {\n    throw new Error('either both isExpanded and renderExpandedContent must be provided, or neither');\n  }\n  const styles = useStyles2(getStyles(cols, isExpandable, !!renderPrefixHeader));\n\n  const [expandedIds, setExpandedIds] = useState<Array<DynamicTableItemProps['id']>>([]);\n\n  const toggleExpanded = (item: DynamicTableItemProps<T>) => {\n    if (isExpanded && onCollapse && onExpand) {\n      isExpanded(item) ? onCollapse(item) : onExpand(item);\n    } else {\n      setExpandedIds(\n        expandedIds.includes(item.id) ? expandedIds.filter((itemId) => itemId !== item.id) : [...expandedIds, item.id]\n      );\n    }\n  };\n  return (\n    <div className={styles.container} data-testid=\"dynamic-table\">\n      <div className={styles.row} data-testid=\"header\">\n        {renderPrefixHeader && renderPrefixHeader()}\n        {isExpandable && <div className={styles.cell} />}\n        {cols.map((col) => (\n          <div className={styles.cell} key={col.id}>\n            {col.label}\n          </div>\n        ))}\n      </div>\n\n      {items.map((item, index) => {\n        const isItemExpanded = isExpanded ? isExpanded(item) : expandedIds.includes(item.id);\n        return (\n          <div className={styles.row} key={item.id} data-testid={testIdGenerator?.(item, index) ?? 'row'}>\n            {renderPrefixCell && renderPrefixCell(item, index, items)}\n            {isExpandable && (\n              <div className={cx(styles.cell, styles.expandCell)}>\n                <IconButton\n                  size=\"xl\"\n                  data-testid=\"collapse-toggle\"\n                  className={styles.expandButton}\n                  name={isItemExpanded ? 'angle-down' : 'angle-right'}\n                  onClick={() => toggleExpanded(item)}\n                  type=\"button\"\n                />\n              </div>\n            )}\n            {cols.map((col) => (\n              <div className={cx(styles.cell, styles.bodyCell)} data-column={col.label} key={`${item.id}-${col.id}`}>\n                {col.renderCell(item, index)}\n              </div>\n            ))}\n            {isItemExpanded && renderExpandedContent && (\n              <div className={styles.expandedContentRow} data-testid=\"expanded-content\">\n                {renderExpandedContent(item, index, items)}\n              </div>\n            )}\n          </div>\n        );\n      })}\n    </div>\n  );\n};\n\nconst getStyles = <T extends unknown>(\n  cols: Array<DynamicTableColumnProps<T>>,\n  isExpandable: boolean,\n  hasPrefixCell: boolean\n) => {\n  const sizes = cols.map((col) => {\n    if (!col.size) {\n      return 'auto';\n    }\n\n    if (typeof col.size === 'number') {\n      return `${col.size}fr`;\n    }\n\n    return col.size;\n  });\n\n  if (isExpandable) {\n    sizes.unshift('calc(1em + 16px)');\n  }\n\n  if (hasPrefixCell) {\n    sizes.unshift('0');\n  }\n\n  return (theme: GrafanaTheme2) => ({\n    container: css`\n      border: 1px solid ${theme.colors.border.strong};\n      border-radius: 2px;\n      color: ${theme.colors.text.secondary};\n    `,\n    row: css`\n      display: grid;\n      grid-template-columns: ${sizes.join(' ')};\n      grid-template-rows: 1fr auto;\n\n      &:nth-child(2n + 1) {\n        background-color: ${theme.colors.background.secondary};\n      }\n\n      &:nth-child(2n) {\n        background-color: ${theme.colors.background.primary};\n      }\n\n      ${theme.breakpoints.down('sm')} {\n        grid-template-columns: auto 1fr;\n        grid-template-areas: 'left right';\n        padding: 0 ${theme.spacing(0.5)};\n\n        &:first-child {\n          display: none;\n        }\n\n        ${hasPrefixCell\n          ? `\n            & > *:first-child {\n              display: none;\n            }\n          `\n          : ''}\n      }\n    `,\n    cell: css`\n      align-items: center;\n      padding: ${theme.spacing(1)};\n\n      ${theme.breakpoints.down('sm')} {\n        padding: ${theme.spacing(1)} 0;\n        grid-template-columns: 1fr;\n      }\n    `,\n    bodyCell: css`\n      overflow: hidden;\n      word-break: break-all;\n      ${theme.breakpoints.down('sm')} {\n        grid-column-end: right;\n        grid-column-start: right;\n\n        &::before {\n          content: attr(data-column);\n          display: block;\n          color: ${theme.colors.text.primary};\n        }\n      }\n    `,\n    expandCell: css`\n      justify-content: center;\n\n      ${theme.breakpoints.down('sm')} {\n        align-items: start;\n        grid-area: left;\n      }\n    `,\n    expandedContentRow: css`\n      grid-column-end: ${sizes.length + 1};\n      grid-column-start: ${hasPrefixCell ? 3 : 2};\n      grid-row: 2;\n      padding: 0 ${theme.spacing(3)} 0 ${theme.spacing(1)};\n      position: relative;\n\n      ${theme.breakpoints.down('sm')} {\n        grid-column-start: 2;\n        border-top: 1px solid ${theme.colors.border.strong};\n        grid-row: auto;\n        padding: ${theme.spacing(1)} 0 0 0;\n      }\n    `,\n    expandButton: css`\n      margin-right: 0;\n      display: block;\n    `,\n  });\n};\n","import React, { FC } from 'react';\nimport { Well } from './Well';\nimport { GrafanaTheme } from '@grafana/data';\nimport { css } from '@emotion/css';\nimport { Tooltip, useStyles } from '@grafana/ui';\nimport { DetailsField } from './DetailsField';\nimport { Annotation, annotationLabels } from '../utils/constants';\n\nconst wellableAnnotationKeys = ['message', 'description'];\n\ninterface Props {\n  annotationKey: string;\n  value: string;\n}\n\nexport const AnnotationDetailsField: FC<Props> = ({ annotationKey, value }) => {\n  const label = annotationLabels[annotationKey as Annotation] ? (\n    <Tooltip content={annotationKey} placement=\"top\" theme=\"info\">\n      <span>{annotationLabels[annotationKey as Annotation]}</span>\n    </Tooltip>\n  ) : (\n    annotationKey\n  );\n\n  return (\n    <DetailsField label={label} horizontal={true}>\n      <AnnotationValue annotationKey={annotationKey} value={value} />\n    </DetailsField>\n  );\n};\n\nconst AnnotationValue: FC<Props> = ({ annotationKey, value }) => {\n  const styles = useStyles(getStyles);\n  if (wellableAnnotationKeys.includes(annotationKey)) {\n    return <Well>{value}</Well>;\n  } else if (value && value.startsWith('http')) {\n    return (\n      <a href={value} target=\"__blank\" className={styles.link}>\n        {value}\n      </a>\n    );\n  }\n  return <>{value}</>;\n};\n\nexport const getStyles = (theme: GrafanaTheme) => ({\n  well: css`\n    word-break: break-all;\n  `,\n  link: css`\n    word-break: break-all;\n    color: ${theme.colors.textBlue};\n  `,\n});\n"],"sourceRoot":""}